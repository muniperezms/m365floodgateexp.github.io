/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./scripts/app/App_Floodgate_Bare.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../FloodgateCore/dist/index.js":
/*!**************************************!*\
  !*** ../FloodgateCore/dist/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Main entry point.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Utils = exports.Api = void 0;\nvar Api = __webpack_require__(/*! ./src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\nexports.Api = Api;\nvar Utils = __webpack_require__(/*! ./src/Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nexports.Utils = Utils;\nvar FloodgateEngine_1 = __webpack_require__(/*! ./src/FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nObject.defineProperty(exports, \"FloodgateEngine\", { enumerable: true, get: function () { return FloodgateEngine_1.FloodgateEngine; } });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXgudHM/Yjg1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILDJGQUFxQztBQUk1QixrQkFBRztBQUhaLHlGQUFxQztBQUd2QixzQkFBSztBQURuQix5SEFBd0Q7QUFBL0MsaUlBQWUiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQuXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgQXBpIGZyb20gXCIuL3NyYy9BcGkvQXBpXCI7XHJcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL3NyYy9VdGlsc1wiO1xyXG5cclxuZXhwb3J0IHsgRmxvb2RnYXRlRW5naW5lIH0gZnJvbSBcIi4vc3JjL0Zsb29kZ2F0ZUVuZ2luZVwiO1xyXG5leHBvcnQgeyBBcGksIFV0aWxzIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/index.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/ActivityTracker.js":
/*!****************************************************!*\
  !*** ../FloodgateCore/dist/src/ActivityTracker.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Class to track ticks against a list of expected counts in a thread-safe way\n * Main API of interest is incrementActivity, which returns an enumerated value indicating\n * whether or not the increment resulted in no thresholds crossed, a single activity threshold crossed,\n * or the final activity threshold crossed.\n */\nvar ActivityTracker = /** @class */ (function () {\n    function ActivityTracker(trackingSet) {\n        if (!trackingSet) {\n            throw new Error(\"trackingSet must not be null\");\n        }\n        if (trackingSet.getList().length > 32) {\n            throw new Error(\"trackingSet list size must be less than 32\");\n        }\n        this.isOrdered = trackingSet.getIsOrdered();\n        this.trackedActivities = trackingSet.getList();\n        /**\n         * For ordered sets, the current index.\n         */\n        this.currentIndex = 0;\n        this.activationMask = 0;\n        this.currentActivationFlags = 0;\n        this.isActivationByInitPending = false;\n        this.currentCounts = new Array(this.trackedActivities.length);\n        this.currentStartTimes = new Array(this.trackedActivities.length);\n        this.currentSessionCounts = new Array(this.trackedActivities.length);\n        for (var i = 0; i < this.trackedActivities.length; i++) {\n            this.currentCounts[i] = 0;\n            this.currentSessionCounts[i] = 0;\n        }\n        for (var i = 0; i < this.trackedActivities.length; i++) {\n            this.activationMask |= 0x1 << i;\n            if (this.trackedActivities[i].getCount() < 1) {\n                this.trackedActivities[i].setCount(1);\n            }\n        }\n    }\n    /**\n     * Get the count for the activity at the specified index. Returns 0 for out-of-range indices\n     *\n     * @param index index\n     */\n    ActivityTracker.prototype.getCount = function (index) {\n        if (!this.isValidIndex(index)) {\n            return 0;\n        }\n        return this.currentCounts[index];\n    };\n    /**\n     * Get the count for the activity at the specified index, as tracked only for this session.\n     * Returns 0 for out-of-range indices\n     *\n     * @param index index\n     */\n    ActivityTracker.prototype.getSessionCount = function (index) {\n        if (!this.isValidIndex(index)) {\n            return 0;\n        }\n        return this.currentSessionCounts[index];\n    };\n    /**\n     * Get the StartTime for the activity at the specified index. Returns null for out-of-range indices\n     *\n     * @param index index\n     */\n    ActivityTracker.prototype.getStartTime = function (index) {\n        if (!this.isValidIndex(index)) {\n            return null;\n        }\n        return this.currentStartTimes[index];\n    };\n    /**\n     * A get-and-set method. Returns the current SessionCount, resetting it to zero and adding it into\n     * the established baseline.\n     *\n     * @param index index\n     */\n    ActivityTracker.prototype.moveSessionCountIntoBaseCount = function (index) {\n        if (!this.isValidIndex(index)) {\n            return 0;\n        }\n        var sessionCount = this.currentSessionCounts[index];\n        this.currentSessionCounts[index] = 0;\n        return sessionCount;\n    };\n    /**\n     * Forcibly set the counts for the activities in the trackingSet.\n     * Unlike other APIs, this expects vector indices to match the order\n     * of the ActivityTrackingSet.List initially used to construct this tracker.\n     * (When data is copied from a different IndexedTracker, it will properly use the IndexedTracker.Index to query internals)\n     * Note:\n     * 1) Assumes a count of 0 for any missing index in undersized arrays.\n     * 2) Respects and enforces ordered list initialization (i.e. all init values are ignored once a unfinished activity is\n     * encountered in an ordered tracking list).\n     * 3) If the tracker is fully Activated as a result of this call, the next call to IncrementActivity will raise the\n     * IncrementEdgeResult.AllActivitiesActivated, for any valid index accepted by IsPermittedIndexForActivationByInit().\n     */\n    ActivityTracker.prototype.initCounts = function (baselineCounts, otherTrackers, wasAlreadyActivatedThisSession) {\n        // NOTE: baselineIncrements and sessionIncrements are sorted the same as the initial trackedActivity set, which\n        // for this class is the same as trackedActivities\n        if (wasAlreadyActivatedThisSession === void 0) { wasAlreadyActivatedThisSession = false; }\n        for (var i = 0; i < this.trackedActivities.length; i++) {\n            // Only accept values up to the current index, when ordered\n            if (this.isOrdered && i > this.currentIndex) {\n                break;\n            }\n            // Start off by pulling values from this session\n            if (i < otherTrackers.length && otherTrackers[i]) {\n                this.currentSessionCounts[i] = this.currentCounts[i] = otherTrackers[i].tracker.getSessionCount(otherTrackers[i].index);\n                this.currentStartTimes[i] = otherTrackers[i].tracker.getStartTime(otherTrackers[i].index);\n            }\n            // If we've got a baseline from previous sessions, add it in as well\n            if (this.trackedActivities[i].getIsAggregate() && i < baselineCounts.length) {\n                this.currentCounts[i] += baselineCounts[i];\n            }\n            if (this.hasCountCrossedThreshold(i)) {\n                this.finishActivityAtIndex(i);\n            }\n        }\n        if (this.isActivated() && !wasAlreadyActivatedThisSession) {\n            // Mark this object so that the next time any permitted activation event is logged, the survey will activate\n            this.isActivationByInitPending = true;\n        }\n    };\n    ActivityTracker.prototype.generateActivityIndexList = function () {\n        var indexList = new Array();\n        for (var i = 0; i < this.trackedActivities.length; i++) {\n            var current = new ActivityTracker.ActivityIndex();\n            current.activity = this.trackedActivities[i].getActivity();\n            current.index = i;\n            indexList.push(current);\n        }\n        return indexList;\n    };\n    /**\n     * Increments the count at the specified index by the given increment.  Returns a value indicating whether\n     * or not this call triggered a transition edge (activating the activity at 'index', or finishing the activation\n     * of the final pending activity)\n     */\n    ActivityTracker.prototype.incrementActivity = function (index, increment) {\n        if (!this.isValidIndex(index)) {\n            return 0 /* Pending */;\n        }\n        if (increment < 0) {\n            throw new Error(\"increment must be non-negative\");\n        }\n        // Ordered sets must be triggered in order.  We can only track at the current index, or before\n        if (this.isOrdered && index > this.currentIndex) {\n            return 0 /* Pending */;\n        }\n        // Add to our counts after storing off our current state\n        var startedLessThanThreshold = !this.hasCountCrossedThreshold(index);\n        this.currentCounts[index] += increment;\n        this.currentSessionCounts[index] += increment;\n        if (this.isActivationByInitPending) {\n            if (this.isPermittedIndexForActivationByInit(index)) {\n                // This tracker was completed due to the initialization from previous increment data\n                // now that we've store this activities increments, raise the AllActivitiesActivated signal\n                return this.commitActivation();\n            }\n            else {\n                // Still waiting for a valid re-activation activity\n                return 0 /* Pending */;\n            }\n        }\n        if (!(startedLessThanThreshold && this.hasCountCrossedThreshold(index))) {\n            // Still waiting for this activity to finish\n            return 0 /* Pending */;\n        }\n        // Mark this activity as complete in our flag collection\n        this.finishActivityAtIndex(index);\n        if (this.isActivated()) {\n            return this.commitActivation();\n        }\n        return 1 /* SingleActivityActivated */;\n    };\n    /**\n     * Explicitly sets a start timestamp (now if startTime is null) for the specified activity index. Overwrites any previous StartTime.\n     */\n    ActivityTracker.prototype.startTime = function (index, startTime) {\n        if (!this.isValidIndex(index)) {\n            return;\n        }\n        this.currentStartTimes[index] = (!startTime) ? new Date() : startTime;\n    };\n    /**\n     * Computes the \"count\" delta (delta in whatever units are appropriate for a subsequent call to IncrementActivity)\n     * elapsed between now and a previously logged StartTime for this activity index.\n     * Always clears the previous StartTime.\n     * Returns 0 if no previous StartTime was logged, or if StartTime > StopTime\n     */\n    ActivityTracker.prototype.stopTime = function (index, stopTime) {\n        if (!this.isValidIndex(index)) {\n            return 0;\n        }\n        var startTime = this.currentStartTimes[index];\n        this.currentStartTimes[index] = null;\n        if (!startTime) {\n            return 0;\n        }\n        stopTime = (!stopTime) ? new Date() : stopTime;\n        if (startTime > stopTime) {\n            return 0;\n        }\n        var deltaMS = stopTime.getTime() - startTime.getTime();\n        // Currently all timer activities return seconds as the increment unit\n        var diff = deltaMS / 1000;\n        // Adding 1ms to the count so it can have the decimal place\n        // So that we can distinguish the Time activity\n        if (diff % 1 === 0) {\n            diff += 0.001;\n        }\n        return diff;\n    };\n    /**\n     * Returns true if the index is valid for accessing the stored activity counts, false otherwise\n     */\n    ActivityTracker.prototype.isValidIndex = function (index) {\n        return index < this.trackedActivities.length;\n    };\n    /**\n     * Gets whether or not the full set of activities for this tracker have exceeded their trigger thresholds\n     */\n    ActivityTracker.prototype.isActivated = function () {\n        return (this.currentActivationFlags & this.activationMask) === this.activationMask;\n    };\n    /**\n        * Marks the activity at the index as finished. Includes setting the proper\n        * activation flags and potentially advancing the current index for ordered tracking sets\n        */\n    ActivityTracker.prototype.finishActivityAtIndex = function (index) {\n        if (!this.isValidIndex(index)) {\n            throw new Error(\"Index is not valid\");\n        }\n        this.currentActivationFlags |= 0x1 << index;\n        if (index + 1 < this.trackedActivities.length) {\n            this.currentIndex = index + 1;\n        }\n    };\n    /**\n     * @param index index\n     * @return true if the counts for the activity at the specified index have met or exceeded the threshold count.\n     */\n    ActivityTracker.prototype.hasCountCrossedThreshold = function (index) {\n        if (!this.isValidIndex(index)) {\n            throw new Error(\"Index is not valid\");\n        }\n        return this.currentCounts[index] >= this.trackedActivities[index].getCount();\n    };\n    /**\n     * Returns true if the index refers to an activity that can re-activate a tracked object (aka return AllActivitiesActivated)\n     * that was initialized as \"complete\" via initCounts.\n     * Note: For unordered sets, any activity is valid. For ordered sequences, only the final activity is valid\n     */\n    ActivityTracker.prototype.isPermittedIndexForActivationByInit = function (index) {\n        return !this.isOrdered || ((index + 1) === this.currentCounts.length);\n    };\n    ActivityTracker.prototype.commitActivation = function () {\n        this.isActivationByInitPending = false;\n        return 2 /* AllActivitiesActivated */;\n    };\n    return ActivityTracker;\n}());\n(function (ActivityTracker) {\n    /**\n     * Structure returned by an ActivityTracker to call back into\n     * IncrementActivity with valid index values\n     */\n    var ActivityIndex = /** @class */ (function () {\n        function ActivityIndex() {\n        }\n        return ActivityIndex;\n    }());\n    ActivityTracker.ActivityIndex = ActivityIndex;\n})(ActivityTracker || (ActivityTracker = {}));\nmodule.exports = ActivityTracker;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/ActivityTracker.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/ActivityTrackingContract.js":
/*!*************************************************************!*\
  !*** ../FloodgateCore/dist/src/ActivityTrackingContract.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActivityTrackingContract = void 0;\nvar ActivityTrackingContract = /** @class */ (function () {\n    function ActivityTrackingContract(surveyId, trackingSet) {\n        this.surveyId = surveyId;\n        this.trackingSet = trackingSet;\n    }\n    return ActivityTrackingContract;\n}());\nexports.ActivityTrackingContract = ActivityTrackingContract;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FjdGl2aXR5VHJhY2tpbmdDb250cmFjdC50cz80NDk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBO0lBSUMsa0NBQW1CLFFBQWdCLEVBQUUsV0FBZ0M7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDaEMsQ0FBQztJQUNGLCtCQUFDO0FBQUQsQ0FBQztBQVJZLDREQUF3QiIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FjdGl2aXR5VHJhY2tpbmdDb250cmFjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2aXR5VHJhY2tpbmdTZXQgfSBmcm9tIFwiLi9BY3Rpdml0eVRyYWNraW5nU2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlUcmFja2luZ0NvbnRyYWN0IHtcclxuXHRwdWJsaWMgc3VydmV5SWQ6IHN0cmluZztcclxuXHRwdWJsaWMgdHJhY2tpbmdTZXQ6IEFjdGl2aXR5VHJhY2tpbmdTZXQ7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihzdXJ2ZXlJZDogc3RyaW5nLCB0cmFja2luZ1NldDogQWN0aXZpdHlUcmFja2luZ1NldCkge1xyXG5cdFx0dGhpcy5zdXJ2ZXlJZCA9IHN1cnZleUlkO1xyXG5cdFx0dGhpcy50cmFja2luZ1NldCA9IHRyYWNraW5nU2V0O1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/ActivityTrackingContract.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/ActivityTrackingData.js":
/*!*********************************************************!*\
  !*** ../FloodgateCore/dist/src/ActivityTrackingData.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActivityTrackingData = void 0;\n/**\n * Basic structure used to configure an ActivityTracker\n */\nvar ActivityTrackingData = /** @class */ (function () {\n    function ActivityTrackingData(activity, count, isAggregate) {\n        this.activity = activity;\n        this.count = count;\n        this.isAggregate = isAggregate;\n    }\n    ActivityTrackingData.prototype.getActivity = function () {\n        return this.activity;\n    };\n    ActivityTrackingData.prototype.getCount = function () {\n        return this.count;\n    };\n    ActivityTrackingData.prototype.setCount = function (count) {\n        this.count = count;\n    };\n    ActivityTrackingData.prototype.getIsAggregate = function () {\n        return this.isAggregate;\n    };\n    return ActivityTrackingData;\n}());\nexports.ActivityTrackingData = ActivityTrackingData;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FjdGl2aXR5VHJhY2tpbmdEYXRhLnRzP2Q5M2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSDtJQUtDLDhCQUFtQixRQUFnQixFQUFFLEtBQWEsRUFBRSxXQUFvQjtRQUN2RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNoQyxDQUFDO0lBRU0sMENBQVcsR0FBbEI7UUFDQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQUVNLHVDQUFRLEdBQWY7UUFDQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbkIsQ0FBQztJQUVNLHVDQUFRLEdBQWYsVUFBZ0IsS0FBYTtRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sNkNBQWMsR0FBckI7UUFDQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekIsQ0FBQztJQUNGLDJCQUFDO0FBQUQsQ0FBQztBQTFCWSxvREFBb0IiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9BY3Rpdml0eVRyYWNraW5nRGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBCYXNpYyBzdHJ1Y3R1cmUgdXNlZCB0byBjb25maWd1cmUgYW4gQWN0aXZpdHlUcmFja2VyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlUcmFja2luZ0RhdGEge1xyXG5cdHByaXZhdGUgYWN0aXZpdHk6IHN0cmluZztcclxuXHRwcml2YXRlIGNvdW50OiBudW1iZXI7XHJcblx0cHJpdmF0ZSBpc0FnZ3JlZ2F0ZTogYm9vbGVhbjtcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKGFjdGl2aXR5OiBzdHJpbmcsIGNvdW50OiBudW1iZXIsIGlzQWdncmVnYXRlOiBib29sZWFuKSB7XHJcblx0XHR0aGlzLmFjdGl2aXR5ID0gYWN0aXZpdHk7XHJcblx0XHR0aGlzLmNvdW50ID0gY291bnQ7XHJcblx0XHR0aGlzLmlzQWdncmVnYXRlID0gaXNBZ2dyZWdhdGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0QWN0aXZpdHkoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmFjdGl2aXR5O1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENvdW50KCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gdGhpcy5jb3VudDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRDb3VudChjb3VudDogbnVtYmVyKTogdm9pZCB7XHJcblx0XHR0aGlzLmNvdW50ID0gY291bnQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0SXNBZ2dyZWdhdGUoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5pc0FnZ3JlZ2F0ZTtcclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/ActivityTrackingData.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/ActivityTrackingSet.js":
/*!********************************************************!*\
  !*** ../FloodgateCore/dist/src/ActivityTrackingSet.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActivityTrackingSet = void 0;\nvar Utils_1 = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n/**\n * Class to hold a collection of Activity Tracking Data\n */\nvar ActivityTrackingSet = /** @class */ (function () {\n    function ActivityTrackingSet(isOrdered, list) {\n        this.isOrdered = isOrdered;\n        this.list = list;\n    }\n    ActivityTrackingSet.prototype.getIsOrdered = function () {\n        return this.isOrdered;\n    };\n    ActivityTrackingSet.prototype.getList = function () {\n        return this.list;\n    };\n    // returns a stringified json with the list and isOrdered info.\n    ActivityTrackingSet.prototype.getActivityTrackingInfo = function (activityListener, surveyId) {\n        var activitiesInfoObject;\n        if (this.list.length === 0) {\n            activitiesInfoObject = {\n                Activities: [],\n                IsListOrdered: this.isOrdered,\n            };\n            return JSON.stringify(activitiesInfoObject);\n        }\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var trackingData = _a[_i];\n            var actualCount = activityListener.getCount(trackingData.getActivity(), surveyId);\n            var tempActivities = {\n                Activity: trackingData.getActivity(),\n                ActualCount: actualCount,\n                Count: trackingData.getCount(),\n                IsAggregate: trackingData.getIsAggregate(),\n                IsDiscrete: actualCount % 1 === 0,\n            };\n            if (Utils_1.isNOU(activitiesInfoObject)) {\n                activitiesInfoObject = {\n                    Activities: [tempActivities],\n                    IsListOrdered: this.isOrdered,\n                };\n            }\n            else {\n                activitiesInfoObject.Activities.push(tempActivities);\n            }\n        }\n        return JSON.stringify(activitiesInfoObject);\n    };\n    return ActivityTrackingSet;\n}());\nexports.ActivityTrackingSet = ActivityTrackingSet;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FjdGl2aXR5VHJhY2tpbmdTZXQudHM/Y2YzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1RkFBZ0M7QUFFaEM7O0dBRUc7QUFDSDtJQUlDLDZCQUFtQixTQUFrQixFQUFFLElBQTRCO1FBQ2xFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFTSwwQ0FBWSxHQUFuQjtRQUNDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN2QixDQUFDO0lBRU0scUNBQU8sR0FBZDtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsK0RBQStEO0lBQ3hELHFEQUF1QixHQUE5QixVQUErQixnQkFBd0MsRUFBRSxRQUFnQjtRQUV4RixJQUFJLG9CQUdILENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMzQixvQkFBb0IsR0FBRztnQkFDdEIsVUFBVSxFQUFFLEVBQUU7Z0JBQ2QsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTO2FBQzdCLENBQUM7WUFFRixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM1QztRQUVELEtBQTJCLFVBQVMsRUFBVCxTQUFJLENBQUMsSUFBSSxFQUFULGNBQVMsRUFBVCxJQUFTLEVBQUU7WUFBakMsSUFBTSxZQUFZO1lBRXRCLElBQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDcEYsSUFBTSxjQUFjLEdBQUc7Z0JBQ3BCLFFBQVEsRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFO2dCQUNwQyxXQUFXLEVBQUUsV0FBVztnQkFDeEIsS0FBSyxFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUU7Z0JBQzlCLFdBQVcsRUFBRSxZQUFZLENBQUMsY0FBYyxFQUFFO2dCQUMxQyxVQUFVLEVBQUUsV0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDO2FBQ2pDLENBQUM7WUFFSixJQUFJLGFBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO2dCQUNoQyxvQkFBb0IsR0FBRztvQkFDbkIsVUFBVSxFQUFFLENBQUMsY0FBYyxDQUFDO29CQUM1QixhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVM7aUJBQzdCLENBQUM7YUFDTDtpQkFBTTtnQkFDTixvQkFBb0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ3JEO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0YsMEJBQUM7QUFBRCxDQUFDO0FBekRZLGtEQUFtQiIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FjdGl2aXR5VHJhY2tpbmdTZXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpdml0eVRyYWNraW5nRGF0YSB9IGZyb20gXCIuL0FjdGl2aXR5VHJhY2tpbmdEYXRhXCI7XHJcbmltcG9ydCBTdXJ2ZXlBY3Rpdml0eUxpc3RlbmVyID0gcmVxdWlyZShcIi4vU3VydmV5QWN0aXZpdHlMaXN0ZW5lclwiKTtcclxuaW1wb3J0IHsgaXNOT1UgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRvIGhvbGQgYSBjb2xsZWN0aW9uIG9mIEFjdGl2aXR5IFRyYWNraW5nIERhdGFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBY3Rpdml0eVRyYWNraW5nU2V0IHtcclxuXHRwcml2YXRlIGlzT3JkZXJlZDogYm9vbGVhbjtcclxuXHRwcml2YXRlIGxpc3Q6IEFjdGl2aXR5VHJhY2tpbmdEYXRhW107XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihpc09yZGVyZWQ6IGJvb2xlYW4sIGxpc3Q6IEFjdGl2aXR5VHJhY2tpbmdEYXRhW10pIHtcclxuXHRcdHRoaXMuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xyXG5cdFx0dGhpcy5saXN0ID0gbGlzdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRJc09yZGVyZWQoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5pc09yZGVyZWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0TGlzdCgpOiBBY3Rpdml0eVRyYWNraW5nRGF0YVtdIHtcclxuXHRcdHJldHVybiB0aGlzLmxpc3Q7XHJcblx0fVxyXG5cclxuXHQvLyByZXR1cm5zIGEgc3RyaW5naWZpZWQganNvbiB3aXRoIHRoZSBsaXN0IGFuZCBpc09yZGVyZWQgaW5mby5cclxuXHRwdWJsaWMgZ2V0QWN0aXZpdHlUcmFja2luZ0luZm8oYWN0aXZpdHlMaXN0ZW5lcjogU3VydmV5QWN0aXZpdHlMaXN0ZW5lciwgc3VydmV5SWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcblxyXG5cdFx0bGV0IGFjdGl2aXRpZXNJbmZvT2JqZWN0OiB7XHJcblx0XHRcdEFjdGl2aXRpZXM6IEFycmF5PHsgQWN0aXZpdHk6IHN0cmluZywgQ291bnQ6IG51bWJlciwgSXNBZ2dyZWdhdGU6IGJvb2xlYW4gfT4sXHJcblx0XHRcdElzTGlzdE9yZGVyZWQ6IGJvb2xlYW4sXHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICh0aGlzLmxpc3QubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdGFjdGl2aXRpZXNJbmZvT2JqZWN0ID0ge1xyXG5cdFx0XHRcdEFjdGl2aXRpZXM6IFtdLFxyXG5cdFx0XHRcdElzTGlzdE9yZGVyZWQ6IHRoaXMuaXNPcmRlcmVkLFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KGFjdGl2aXRpZXNJbmZvT2JqZWN0KTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGNvbnN0IHRyYWNraW5nRGF0YSBvZiB0aGlzLmxpc3QpIHtcclxuXHJcblx0XHRcdGNvbnN0IGFjdHVhbENvdW50ID0gYWN0aXZpdHlMaXN0ZW5lci5nZXRDb3VudCh0cmFja2luZ0RhdGEuZ2V0QWN0aXZpdHkoKSwgc3VydmV5SWQpO1xyXG5cdFx0XHRjb25zdCB0ZW1wQWN0aXZpdGllcyA9IHtcclxuXHRcdFx0XHRcdFx0QWN0aXZpdHk6IHRyYWNraW5nRGF0YS5nZXRBY3Rpdml0eSgpLFxyXG5cdFx0XHRcdFx0XHRBY3R1YWxDb3VudDogYWN0dWFsQ291bnQsXHJcblx0XHRcdFx0XHRcdENvdW50OiB0cmFja2luZ0RhdGEuZ2V0Q291bnQoKSxcclxuXHRcdFx0XHRcdFx0SXNBZ2dyZWdhdGU6IHRyYWNraW5nRGF0YS5nZXRJc0FnZ3JlZ2F0ZSgpLFxyXG5cdFx0XHRcdFx0XHRJc0Rpc2NyZXRlOiBhY3R1YWxDb3VudCAlIDEgPT09IDAsXHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYgKGlzTk9VKGFjdGl2aXRpZXNJbmZvT2JqZWN0KSkge1xyXG5cdFx0XHRcdGFjdGl2aXRpZXNJbmZvT2JqZWN0ID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0QWN0aXZpdGllczogW3RlbXBBY3Rpdml0aWVzXSxcclxuXHRcdFx0XHRcdFx0XHRcdElzTGlzdE9yZGVyZWQ6IHRoaXMuaXNPcmRlcmVkLFxyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YWN0aXZpdGllc0luZm9PYmplY3QuQWN0aXZpdGllcy5wdXNoKHRlbXBBY3Rpdml0aWVzKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShhY3Rpdml0aWVzSW5mb09iamVjdCk7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/ActivityTrackingSet.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/Api.js":
/*!********************************************!*\
  !*** ../FloodgateCore/dist/src/Api/Api.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Parent module for all modules in Api/\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ISurveyInfo = exports.ISurveyComponent = exports.ISurvey = exports.IFloodgateSettingIdMap = exports.IFloodgateStorageProvider = exports.IActivityListener = void 0;\nvar ISurveyInfo = __webpack_require__(/*! ./../ISurveyInfo */ \"../FloodgateCore/dist/src/ISurveyInfo.js\");\nexports.ISurveyInfo = ISurveyInfo;\nvar IActivityListener = __webpack_require__(/*! ./IActivityListener */ \"../FloodgateCore/dist/src/Api/IActivityListener.js\");\nexports.IActivityListener = IActivityListener;\nvar IFloodgateSettingIdMap = __webpack_require__(/*! ./IFloodgateSettingIdMap */ \"../FloodgateCore/dist/src/Api/IFloodgateSettingIdMap.js\");\nexports.IFloodgateSettingIdMap = IFloodgateSettingIdMap;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ./IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nexports.IFloodgateStorageProvider = IFloodgateStorageProvider;\nvar ISurvey = __webpack_require__(/*! ./ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nexports.ISurvey = ISurvey;\nvar ISurveyComponent = __webpack_require__(/*! ./ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nexports.ISurveyComponent = ISurveyComponent;\nvar CampaignDefinitionProvider_1 = __webpack_require__(/*! ../Campaign/CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\nObject.defineProperty(exports, \"CampaignDefinition\", { enumerable: true, get: function () { return CampaignDefinitionProvider_1.CampaignDefinition; } });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9BcGkudHM/NTljMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILDBHQUFnRDtBQXVDdkMsa0NBQVc7QUF0Q3BCLDZIQUF5RDtBQVFoRCw4Q0FBaUI7QUFQMUIsNElBQW1FO0FBcUIxRCx3REFBc0I7QUFwQi9CLHFKQUF5RTtBQWtCaEUsOERBQXlCO0FBaEJsQywrRkFBcUM7QUE2QjVCLDBCQUFPO0FBNUJoQiwwSEFBdUQ7QUE2QjlDLDRDQUFnQjtBQTNCekIseUtBQTRFO0FBQW5FLGtKQUFrQiIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FwaS9BcGkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUGFyZW50IG1vZHVsZSBmb3IgYWxsIG1vZHVsZXMgaW4gQXBpL1xyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIElTdXJ2ZXlJbmZvIGZyb20gXCIuLy4uL0lTdXJ2ZXlJbmZvXCI7XHJcbmltcG9ydCAqIGFzIElBY3Rpdml0eUxpc3RlbmVyIGZyb20gXCIuL0lBY3Rpdml0eUxpc3RlbmVyXCI7XHJcbmltcG9ydCAqIGFzIElGbG9vZGdhdGVTZXR0aW5nSWRNYXAgZnJvbSBcIi4vSUZsb29kZ2F0ZVNldHRpbmdJZE1hcFwiO1xyXG5pbXBvcnQgKiBhcyBJRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyIGZyb20gXCIuL0lGbG9vZGdhdGVTdG9yYWdlUHJvdmlkZXJcIjtcclxuaW1wb3J0ICogYXMgSUZsb29kZ2F0ZVN0cmluZ1Byb3ZpZGVyIGZyb20gXCIuL0lGbG9vZGdhdGVTdHJpbmdQcm92aWRlclwiO1xyXG5pbXBvcnQgKiBhcyBJU3VydmV5IGZyb20gXCIuL0lTdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleUNvbXBvbmVudCBmcm9tIFwiLi9JU3VydmV5Q29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgeyBDYW1wYWlnbkRlZmluaXRpb24gfSBmcm9tIFwiLi4vQ2FtcGFpZ24vQ2FtcGFpZ25EZWZpbml0aW9uUHJvdmlkZXJcIjtcclxuZXhwb3J0IHsgSUFjdGl2aXR5TGlzdGVuZXIgfTtcclxuZXhwb3J0IHsgSUFzc2V0c1Byb3ZpZGVyIH0gZnJvbSBcIi4vSUFzc2V0c1Byb3ZpZGVyXCI7XHJcbmV4cG9ydCB7IElBdWdMb29wQ2FsbGJhY2sgfSBmcm9tIFwiLi9JQXVnTG9vcENhbGxiYWNrXCI7XHJcbmV4cG9ydCB7IElCcHNTdXJ2ZXkgfSBmcm9tIFwiLi9JQnBzU3VydmV5XCI7XHJcbmV4cG9ydCB7IElDYW1wYWlnbkRlZmluaXRpb25Qcm92aWRlciB9IGZyb20gXCIuLi9DYW1wYWlnbi9DYW1wYWlnbkRlZmluaXRpb25Qcm92aWRlclwiO1xyXG5leHBvcnQgeyBJQ29tbWVudENvbXBvbmVudCB9IGZyb20gXCIuL0lDb21tZW50Q29tcG9uZW50XCI7XHJcbmV4cG9ydCB7IElDVlN1cnZleUNvbXBvbmVudCB9IGZyb20gXCIuL0lDVlN1cnZleUNvbXBvbmVudFwiO1xyXG5leHBvcnQgeyBJRGF0YVByb3ZpZGVyIH0gZnJvbSBcIi4vSURhdGFQcm92aWRlclwiO1xyXG5leHBvcnQgeyBJRmVlZGJhY2tTdXJ2ZXkgfSBmcm9tIFwiLi9JRmVlZGJhY2tTdXJ2ZXlcIjtcclxuZXhwb3J0IHsgSUZsb29kZ2F0ZUF1dGhUb2tlbkNhbGxiYWNrIH0gZnJvbSBcIi4vSUZsb29kZ2F0ZUF1dGhUb2tlbkNhbGxiYWNrXCI7XHJcbmV4cG9ydCB7IElGbG9vZGdhdGVFbnZpcm9ubWVudFByb3ZpZGVyIH0gZnJvbSBcIi4vSUZsb29kZ2F0ZUVudmlyb25tZW50UHJvdmlkZXJcIjtcclxuZXhwb3J0IHsgSUZsb29kZ2F0ZVNldHRpbmdTdG9yYWdlQ2FsbGJhY2sgfSBmcm9tIFwiLi9JRmxvb2RnYXRlU2V0dGluZ1N0b3JhZ2VDYWxsYmFja1wiO1xyXG5leHBvcnQgeyBJRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyIH07XHJcbmV4cG9ydCB7IElGbG9vZGdhdGVTdHJpbmdQcm92aWRlciB9O1xyXG5leHBvcnQgeyBJRmxvb2RnYXRlU2V0dGluZ0lkTWFwIH07XHJcbmV4cG9ydCB7IElGbG9vZGdhdGVUZWxlbWV0cnlMb2dnZXIgfSBmcm9tIFwiLi9JRmxvb2RnYXRlVGVsZW1ldHJ5TG9nZ2VyXCI7XHJcbmV4cG9ydCB7IElGcHNTdXJ2ZXkgfSBmcm9tIFwiLi9JRnBzU3VydmV5XCI7XHJcbmV4cG9ydCB7IElOcHNTdXJ2ZXkgfSBmcm9tIFwiLi9JTnBzU3VydmV5XCI7XHJcbmV4cG9ydCB7IElJbnRlcmNlcHRTdXJ2ZXkgfSBmcm9tIFwiLi9JSW50ZXJjZXB0U3VydmV5XCI7XHJcbmV4cG9ydCB7IElPblN1cnZleUFjdGl2YXRlZENhbGxiYWNrIH0gZnJvbSBcIi4vSU9uU3VydmV5QWN0aXZhdGVkQ2FsbGJhY2tcIjtcclxuZXhwb3J0IHsgSVByb21wdENvbXBvbmVudCB9IGZyb20gXCIuL0lQcm9tcHRDb21wb25lbnRcIjtcclxuZXhwb3J0IHsgSUludGVyY2VwdENvbXBvbmVudCB9IGZyb20gXCIuL0lJbnRlcmNlcHRDb21wb25lbnRcIjtcclxuZXhwb3J0IHsgSVBzYXRTdXJ2ZXkgfSBmcm9tIFwiLi9JUHNhdFN1cnZleVwiO1xyXG5leHBvcnQgeyBJUmF0aW5nQ29tcG9uZW50IH0gZnJvbSBcIi4vSVJhdGluZ0NvbXBvbmVudFwiO1xyXG5leHBvcnQgeyBJRmxvb2RnYXRlU2V0dGluZyB9IGZyb20gXCIuL0lGbG9vZGdhdGVTZXR0aW5nXCI7XHJcbmV4cG9ydCB7IElTdXJ2ZXkgfTtcclxuZXhwb3J0IHsgSVN1cnZleUNvbXBvbmVudCB9O1xyXG5leHBvcnQgeyBJU3VydmV5RG9tV3JpdGVyIH0gZnJvbSBcIi4vSVN1cnZleURvbVdyaXRlclwiO1xyXG5leHBvcnQgeyBJU3VydmV5Rm9ybSB9IGZyb20gXCIuL0lTdXJ2ZXlGb3JtXCI7XHJcbmV4cG9ydCB7IElTdXJ2ZXlKc29uV3JpdGVyIH0gZnJvbSBcIi4vSVN1cnZleUpzb25Xcml0ZXJcIjtcclxuZXhwb3J0IHsgSVN1cnZleUluZm8gfTtcclxuZXhwb3J0IHsgSVN1cnZleUxhdW5jaGVyIH0gZnJvbSBcIi4vSVN1cnZleUxhdW5jaGVyXCI7XHJcbmV4cG9ydCB7IElTdXJ2ZXlMYXVuY2hlckZhY3RvcnkgfSBmcm9tIFwiLi9JU3VydmV5TGF1bmNoZXJGYWN0b3J5XCI7XHJcbmV4cG9ydCB7IElUZWxlbWV0cnlQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vSVRlbGVtZXRyeVByb3BlcnRpZXNcIjtcclxuZXhwb3J0IHsgSVRyYW5zcG9ydGVyIH0gZnJvbSBcIi4vSVRyYW5zcG9ydGVyXCI7XHJcbmV4cG9ydCB7IElUcmFuc3BvcnRlckZhY3RvcnkgfSBmcm9tIFwiLi9JVHJhbnNwb3J0ZXJGYWN0b3J5XCI7XHJcbmV4cG9ydCB7IElVc2VyRmFjdCB9IGZyb20gXCIuLi9Vc2VyRmFjdC9JVXNlckZhY3RcIjtcclxuZXhwb3J0IHsgSVVzZXJGYWN0UHJvdmlkZXIgfSBmcm9tIFwiLi9JVXNlckZhY3RQcm92aWRlclwiO1xyXG5leHBvcnQgeyBJR292ZXJuYW5jZVNlcnZpY2VDbGllbnQgfSBmcm9tIFwiLi9JR292ZXJuYW5jZVNlcnZpY2VDbGllbnRcIjtcclxuZXhwb3J0IHsgSVBlcnNvbmFsaXplckNsaWVudCB9IGZyb20gXCIuL0lQZXJzb25hbGl6ZXJDbGllbnRcIjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/Api.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/IActivityListener.js":
/*!**********************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/IActivityListener.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar IActivityListener;\n(function (IActivityListener) {\n    var ActivityName = /** @class */ (function () {\n        function ActivityName() {\n        }\n        ActivityName.AppLaunch = \"AppLaunch\";\n        ActivityName.AppUsageTime = \"AppUsageTime\";\n        ActivityName.AppResume = \"AppResume\";\n        return ActivityName;\n    }());\n    IActivityListener.ActivityName = ActivityName;\n})(IActivityListener || (IActivityListener = {}));\nmodule.exports = IActivityListener;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JQWN0aXZpdHlMaXN0ZW5lci50cz8yMzBmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUF3QkEsSUFBTyxpQkFBaUIsQ0FVdkI7QUFWRCxXQUFPLGlCQUFpQjtJQUt2QjtRQUFBO1FBSUEsQ0FBQztRQUh1QixzQkFBUyxHQUFHLFdBQVcsQ0FBQztRQUN4Qix5QkFBWSxHQUFHLGNBQWMsQ0FBQztRQUM5QixzQkFBUyxHQUFHLFdBQVcsQ0FBQztRQUNoRCxtQkFBQztLQUFBO0lBSlksOEJBQVksZUFJeEI7QUFDRixDQUFDLEVBVk0saUJBQWlCLEtBQWpCLGlCQUFpQixRQVV2QjtBQUVELGlCQUFTLGlCQUFpQixDQUFDIiwiZmlsZSI6Ii4uL0Zsb29kZ2F0ZUNvcmUvZGlzdC9zcmMvQXBpL0lBY3Rpdml0eUxpc3RlbmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoZSBtYWluIGludGVyZmFjZSB0byB1c2Ugd2hlbiBpbnN0cnVtZW50aW5nIHN1cnZleSBhY3Rpdml0aWVzIGluIGFwcCBjb2RlXHJcbiAqL1xyXG5pbnRlcmZhY2UgSUFjdGl2aXR5TGlzdGVuZXIge1xyXG5cdC8qKlxyXG5cdCAqIExvZyBhbiBhY3Rpdml0eSB0byBGbG9vZGdhdGUsIGluY3JlbWVudGluZyBpdHMgb2NjdXJyZW5jZSBjb3VudCBieSB0aGUgZ2l2ZW4gbnVtYmVyIGlmIHNwZWNpZmllZCxcclxuXHQgKiBvdGhlcndpc2UgaW5jcmVtZW50aW5nIGl0cyBvY2N1cnJlbmNlIGNvdW50IGJ5IG9uZSBhcyBkZWZhdWx0XHJcblx0ICovXHJcblx0bG9nQWN0aXZpdHkoYWN0aXZpdHlOYW1lOiBzdHJpbmcsIGluY3JlbWVudD86IG51bWJlciwgY29udGV4dD864oCvSUFjdGl2aXR5TGlzdGVuZXIuSUFjdGl2aXR5Q29udGV4dCk6IHZvaWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0YXJ0IGFuIGFjdGl2aXR5IHRpbWVyIChvdmVyd3JpdGluZyBhbnkgcHJldmlvdXNseSB1bmNsb3NlZCBzdGFydCkuXHJcblx0ICogTk9URTogRG9lcyBub3QgaW5jcmVtZW50IHRoZSBhY3Rpdml0eSBjb3VudC5cclxuXHQgKi9cclxuXHRsb2dBY3Rpdml0eVN0YXJ0VGltZShhY3Rpdml0eU5hbWU6IHN0cmluZywgc3RhcnRUaW1lPzogRGF0ZSk6IHZvaWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3AgYW4gYWN0aXZpdHkgdGltZXIgYW5kIGNsZWFycyB0aGUgcHJldmlvdXMgc3RhcnQgdGltZS5cclxuXHQgKiBBZGRzIHRoZSBlbGFwc2VkIHNlY29uZHMgYmV0d2VlbiB0aGlzIHN0b3AgYW5kIHRoZSBwcmV2aW91cyBzdGFydCBpbnRvIHRoZSBjb3VudCBmb3IgdGhpcyBhY3Rpdml0eVxyXG5cdCAqIFxcbm90ZSBJZiBubyBwcmV2aW91cyBzdGFydCB3YXMgbG9nZ2VkLCBvciBzdGFydCBpcyBzb21laG93IGluIHRoZSBmdXR1cmUsIHJlc3VsdHMgaW4gMCBjb3VudCBpbmNyZW1lbnRcclxuXHQgKi9cclxuXHRsb2dBY3Rpdml0eVN0b3BUaW1lKGFjdGl2aXR5TmFtZTogc3RyaW5nLCBzdG9wVGltZT86IERhdGUpOiB2b2lkO1xyXG59XHJcblxyXG5tb2R1bGUgSUFjdGl2aXR5TGlzdGVuZXIge1xyXG5cdGV4cG9ydOKAr2ludGVyZmFjZeKAr0lBY3Rpdml0eUNvbnRleHTigK97XHJcblx0XHRkYXRhPzrigK91bmtub3duO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGNsYXNzIEFjdGl2aXR5TmFtZSB7XHJcblx0XHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFwcExhdW5jaCA9IFwiQXBwTGF1bmNoXCI7XHJcblx0XHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFwcFVzYWdlVGltZSA9IFwiQXBwVXNhZ2VUaW1lXCI7XHJcblx0XHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFwcFJlc3VtZSA9IFwiQXBwUmVzdW1lXCI7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBJQWN0aXZpdHlMaXN0ZW5lcjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/IActivityListener.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/IFloodgateSettingIdMap.js":
/*!***************************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/IFloodgateSettingIdMap.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar IFloodgateSettingIdMap;\n(function (IFloodgateSettingIdMap) {\n    /**\n     * Collection of setting names and ids\n     */\n    IFloodgateSettingIdMap.RoamingSettingIdMap = {\n        CampaignStates: 1258,\n        GovernedChannelStates: 1257,\n        SurveyActivationStats: 1259,\n    };\n})(IFloodgateSettingIdMap || (IFloodgateSettingIdMap = {}));\nmodule.exports = IFloodgateSettingIdMap;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JRmxvb2RnYXRlU2V0dGluZ0lkTWFwLnRzP2YzZTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU9BLElBQU8sc0JBQXNCLENBUzVCO0FBVEQsV0FBTyxzQkFBc0I7SUFDNUI7O09BRUc7SUFDVSwwQ0FBbUIsR0FBRztRQUNsQyxjQUFjLEVBQUUsSUFBSTtRQUNwQixxQkFBcUIsRUFBRSxJQUFJO1FBQzNCLHFCQUFxQixFQUFFLElBQUk7S0FDM0IsQ0FBQztBQUNILENBQUMsRUFUTSxzQkFBc0IsS0FBdEIsc0JBQXNCLFFBUzVCO0FBRUQsaUJBQVMsc0JBQXNCLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9BcGkvSUZsb29kZ2F0ZVNldHRpbmdJZE1hcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIGEgY29sbGVjdGlvbiBvZiBGbG9vZGdhdGUgc2V0dGluZyBuYW1lcyBhbmQgaWRzXHJcbiAqL1xyXG5pbnRlcmZhY2UgSUZsb29kZ2F0ZVNldHRpbmdJZE1hcCB7XHJcblx0cmVhZG9ubHkgW2tleTogc3RyaW5nXTogbnVtYmVyO1xyXG59XHJcblxyXG5tb2R1bGUgSUZsb29kZ2F0ZVNldHRpbmdJZE1hcCB7XHJcblx0LyoqXHJcblx0ICogQ29sbGVjdGlvbiBvZiBzZXR0aW5nIG5hbWVzIGFuZCBpZHNcclxuXHQgKi9cclxuXHRleHBvcnQgY29uc3QgUm9hbWluZ1NldHRpbmdJZE1hcCA9IHtcclxuXHRcdENhbXBhaWduU3RhdGVzOiAxMjU4LFxyXG5cdFx0R292ZXJuZWRDaGFubmVsU3RhdGVzOiAxMjU3LFxyXG5cdFx0U3VydmV5QWN0aXZhdGlvblN0YXRzOiAxMjU5LFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCA9IElGbG9vZGdhdGVTZXR0aW5nSWRNYXA7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/IFloodgateSettingIdMap.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js":
/*!******************************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar IFloodgateStorageProvider;\n(function (IFloodgateStorageProvider) {\n    /**\n     * Enum for the files used by floodgate\n     */\n    var FileType;\n    (function (FileType) {\n        FileType[FileType[\"FloodgateSettings\"] = 0] = \"FloodgateSettings\";\n        FileType[FileType[\"SurveyActivationStats\"] = 1] = \"SurveyActivationStats\";\n        FileType[FileType[\"SurveyEventActivityStats\"] = 2] = \"SurveyEventActivityStats\";\n        FileType[FileType[\"CampaignDefinitions\"] = 3] = \"CampaignDefinitions\";\n        FileType[FileType[\"CampaignStates\"] = 4] = \"CampaignStates\";\n        FileType[FileType[\"GovernedChannelStates\"] = 5] = \"GovernedChannelStates\";\n        FileType[FileType[\"TmsCache_MessageMetadata\"] = 6] = \"TmsCache_MessageMetadata\";\n        FileType[FileType[\"TmsCache_UserGovernance\"] = 7] = \"TmsCache_UserGovernance\";\n        FileType[FileType[\"TmsCache_CampaignContent\"] = 8] = \"TmsCache_CampaignContent\";\n        FileType[FileType[\"Tms_DynamicSettings\"] = 9] = \"Tms_DynamicSettings\";\n        FileType[FileType[\"LogLevelSettings\"] = 10] = \"LogLevelSettings\";\n        FileType[FileType[\"UserFacts\"] = 11] = \"UserFacts\";\n        FileType[FileType[\"DebugOverrides\"] = 12] = \"DebugOverrides\";\n    })(FileType = IFloodgateStorageProvider.FileType || (IFloodgateStorageProvider.FileType = {}));\n})(IFloodgateStorageProvider || (IFloodgateStorageProvider = {}));\nmodule.exports = IFloodgateStorageProvider;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyLnRzPzkzZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXlCQSxJQUFPLHlCQUF5QixDQW1CL0I7QUFuQkQsV0FBTyx5QkFBeUI7SUFDL0I7O09BRUc7SUFDSCxJQUFZLFFBY1g7SUFkRCxXQUFZLFFBQVE7UUFDbkIsaUVBQWlCO1FBQ2pCLHlFQUFxQjtRQUNyQiwrRUFBd0I7UUFDeEIscUVBQW1CO1FBQ25CLDJEQUFjO1FBQ2QseUVBQXFCO1FBQ3JCLCtFQUF3QjtRQUN4Qiw2RUFBdUI7UUFDdkIsK0VBQXdCO1FBQ3hCLHFFQUFtQjtRQUNuQixnRUFBZ0I7UUFDaEIsa0RBQVM7UUFDVCw0REFBYztJQUNmLENBQUMsRUFkVyxRQUFRLEdBQVIsa0NBQVEsS0FBUixrQ0FBUSxRQWNuQjtBQUNGLENBQUMsRUFuQk0seUJBQXlCLEtBQXpCLHlCQUF5QixRQW1CL0I7QUFFRCxpQkFBUyx5QkFBeUIsQ0FBQyIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FwaS9JRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEludGVyZmFjZSBmb3Igc3RvcmluZyBhbmQgcmV0cmlldmluZyBmbG9vZGdhdGUtc3BlY2lmaWMgZGF0YSBmcm9tIHN0b3JhZ2VcclxuICovXHJcbmludGVyZmFjZSBJRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyIHtcclxuXHQvKipcclxuXHQgKiBMb2NrIHRoZSBmaWxlIHRvIHByZXZlbnQgYWNjZXNzIGZyb20gYW5vdGhlciBwcm9jZXNzLlxyXG5cdCAqL1xyXG5cdGZpbGVMb2NrKGZpbGVUeXBlOiBJRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyLkZpbGVUeXBlKTogdm9pZDtcclxuXHJcblx0LyoqXHJcblx0ICogVW5sb2NrIHRoZSBmaWxlLlxyXG5cdCAqL1xyXG5cdGZpbGVVbmxvY2soZmlsZVR5cGU6IElGbG9vZGdhdGVTdG9yYWdlUHJvdmlkZXIuRmlsZVR5cGUpOiB2b2lkO1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWFkIHRoZSBmaWxlXHJcblx0ICovXHJcblx0cmVhZChmaWxlVHlwZTogSUZsb29kZ2F0ZVN0b3JhZ2VQcm92aWRlci5GaWxlVHlwZSk6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogV3JpdGUgdG8gdGhlIGZpbGVcclxuXHQgKi9cclxuXHR3cml0ZShmaWxlVHlwZTogSUZsb29kZ2F0ZVN0b3JhZ2VQcm92aWRlci5GaWxlVHlwZSwgY29udGVudDogc3RyaW5nKTogdm9pZDtcclxufVxyXG5cclxubW9kdWxlIElGbG9vZGdhdGVTdG9yYWdlUHJvdmlkZXIge1xyXG5cdC8qKlxyXG5cdCAqIEVudW0gZm9yIHRoZSBmaWxlcyB1c2VkIGJ5IGZsb29kZ2F0ZVxyXG5cdCAqL1xyXG5cdGV4cG9ydCBlbnVtIEZpbGVUeXBlIHtcclxuXHRcdEZsb29kZ2F0ZVNldHRpbmdzLFxyXG5cdFx0U3VydmV5QWN0aXZhdGlvblN0YXRzLFxyXG5cdFx0U3VydmV5RXZlbnRBY3Rpdml0eVN0YXRzLFxyXG5cdFx0Q2FtcGFpZ25EZWZpbml0aW9ucyxcclxuXHRcdENhbXBhaWduU3RhdGVzLFxyXG5cdFx0R292ZXJuZWRDaGFubmVsU3RhdGVzLFxyXG5cdFx0VG1zQ2FjaGVfTWVzc2FnZU1ldGFkYXRhLFxyXG5cdFx0VG1zQ2FjaGVfVXNlckdvdmVybmFuY2UsXHJcblx0XHRUbXNDYWNoZV9DYW1wYWlnbkNvbnRlbnQsXHJcblx0XHRUbXNfRHluYW1pY1NldHRpbmdzLFxyXG5cdFx0TG9nTGV2ZWxTZXR0aW5ncyxcclxuXHRcdFVzZXJGYWN0cyxcclxuXHRcdERlYnVnT3ZlcnJpZGVzLFxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gSUZsb29kZ2F0ZVN0b3JhZ2VQcm92aWRlcjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/IGovernanceServiceClient.js":
/*!*****************************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/IGovernanceServiceClient.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GovernanceServiceClientState = exports.GovernanceServiceSurveyType = void 0;\n/**\n * The enum is matching with Governance Service\n * So the missing number is not supported\n */\nvar GovernanceServiceSurveyType;\n(function (GovernanceServiceSurveyType) {\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Unknown\"] = 0] = \"Unknown\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Feedback\"] = 1] = \"Feedback\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Nps\"] = 2] = \"Nps\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Psat\"] = 4] = \"Psat\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Bps\"] = 6] = \"Bps\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Fps\"] = 8] = \"Fps\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Nlqs\"] = 18] = \"Nlqs\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"GenericMessagingSurface\"] = 22] = \"GenericMessagingSurface\";\n    GovernanceServiceSurveyType[GovernanceServiceSurveyType[\"Intercept\"] = 24] = \"Intercept\";\n})(GovernanceServiceSurveyType = exports.GovernanceServiceSurveyType || (exports.GovernanceServiceSurveyType = {}));\nvar GovernanceServiceClientState;\n(function (GovernanceServiceClientState) {\n    GovernanceServiceClientState[GovernanceServiceClientState[\"Disabled\"] = 0] = \"Disabled\";\n    GovernanceServiceClientState[GovernanceServiceClientState[\"InitializationFailed\"] = 1] = \"InitializationFailed\";\n    GovernanceServiceClientState[GovernanceServiceClientState[\"Enabled\"] = 2] = \"Enabled\";\n})(GovernanceServiceClientState = exports.GovernanceServiceClientState || (exports.GovernanceServiceClientState = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JR292ZXJuYW5jZVNlcnZpY2VDbGllbnQudHM/OTlmMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQTs7O0dBR0c7QUFDSCxJQUFZLDJCQVVYO0FBVkQsV0FBWSwyQkFBMkI7SUFDdEMsbUZBQVc7SUFDWCxxRkFBWTtJQUNaLDJFQUFPO0lBQ1AsNkVBQVE7SUFDUiwyRUFBTztJQUNQLDJFQUFPO0lBQ1AsOEVBQVM7SUFDVCxvSEFBNEI7SUFDNUIsd0ZBQWM7QUFDZixDQUFDLEVBVlcsMkJBQTJCLEdBQTNCLG1DQUEyQixLQUEzQixtQ0FBMkIsUUFVdEM7QUFFRCxJQUFZLDRCQUlYO0FBSkQsV0FBWSw0QkFBNEI7SUFDdkMsdUZBQVk7SUFDWiwrR0FBb0I7SUFDcEIscUZBQU87QUFDUixDQUFDLEVBSlcsNEJBQTRCLEdBQTVCLG9DQUE0QixLQUE1QixvQ0FBNEIsUUFJdkMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9BcGkvSUdvdmVybmFuY2VTZXJ2aWNlQ2xpZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR292ZXJuZWRDaGFubmVsVHlwZSB9IGZyb20gXCIuLi9Hb3Zlcm5lZENoYW5uZWxcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleSBmcm9tIFwiLi9JU3VydmV5XCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBHb3Zlcm5hbmNlU2VydmljZVN1cnZleVBsYXRmb3JtIHtcclxuXHRGbG9vZGdhdGUgPSAxLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBHb3Zlcm5hbmNlU2VydmljZUhvc3RQbGF0Zm9ybSB7XHJcblx0V2ViID0gNixcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBlbnVtIGlzIG1hdGNoaW5nIHdpdGggR292ZXJuYW5jZSBTZXJ2aWNlXHJcbiAqIFNvIHRoZSBtaXNzaW5nIG51bWJlciBpcyBub3Qgc3VwcG9ydGVkXHJcbiAqL1xyXG5leHBvcnQgZW51bSBHb3Zlcm5hbmNlU2VydmljZVN1cnZleVR5cGUge1xyXG5cdFVua25vd24gPSAwLFxyXG5cdEZlZWRiYWNrID0gMSxcclxuXHROcHMgPSAyLFxyXG5cdFBzYXQgPSA0LFxyXG5cdEJwcyA9IDYsXHJcblx0RnBzID0gOCxcclxuXHRObHFzID0gMTgsXHJcblx0R2VuZXJpY01lc3NhZ2luZ1N1cmZhY2UgPSAyMixcclxuXHRJbnRlcmNlcHQgPSAyNCxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gR292ZXJuYW5jZVNlcnZpY2VDbGllbnRTdGF0ZSB7XHJcblx0RGlzYWJsZWQgPSAwLFxyXG5cdEluaXRpYWxpemF0aW9uRmFpbGVkLFxyXG5cdEVuYWJsZWQsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdvdmVybmFuY2VTdXJ2ZXlJbmZvIHtcclxuXHRzdXJ2ZXlJZDogc3RyaW5nO1xyXG5cdHN1cnZleVRyaWdnZXJUaW1lOiBEYXRlO1xyXG5cdHN1cnZleVR5cGU6IG51bWJlcjtcclxuXHRzdXJ2ZXlMZXZlbENvb2xkb3duPzogbnVtYmVyO1xyXG5cdHN1cnZleUNoYW5uZWw/OiBudW1iZXI7XHJcblx0bG9jYWxPZmZzZXRUaW1lOiBudW1iZXI7XHJcblx0cGVyc29uYWxpemVyRW5hYmxlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJR292ZXJuYW5jZUNsaWVudEluZm8ge1xyXG5cdGFwcGxpY2F0aW9uSWQ6IHN0cmluZztcclxuXHRzZXNzaW9uSWQ6IHN0cmluZztcclxuXHR2ZXJzaW9uOiBzdHJpbmc7XHJcblx0c3VydmV5UGxhdGZvcm06IG51bWJlcjtcclxuXHRob3N0UGxhdGZvcm06IG51bWJlcjtcclxuXHRob3N0T1M/OiBzdHJpbmc7XHJcblx0dGVuYW50SWQ/OiBzdHJpbmc7XHJcblx0ZGV2aWNlSWQ/OiBzdHJpbmc7XHJcblx0YXVkaWVuY2U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdvdmVybmFuY2VTdXJ2ZXlSZXF1ZXN0IHtcclxuXHR1c2VySWQ6IHN0cmluZztcclxuXHRzdXJ2ZXk6IElHb3Zlcm5hbmNlU3VydmV5SW5mbztcclxuXHRjbGllbnQ6IElHb3Zlcm5hbmNlQ2xpZW50SW5mbztcclxuXHR1c2VyTGV2ZWxDb29sZG93bj86IG51bWJlcjtcclxuXHRyZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdvdmVybmFuY2VTdXJ2ZXlSZXNwb25zZSB7XHJcblx0dXNlcklkOiBzdHJpbmc7XHJcblx0bGFzdFRyaWdnZXJTdXJ2ZXlUaW1lOiBEYXRlO1xyXG5cdHRpbWVVbnRpbE5leHRTdXJ2ZXlBbGxvd2VkOiBudW1iZXI7XHJcblx0YWN0aW9uSWQ/OiBzdHJpbmc7IC8vIEZvciBwZXJzb25hbGl6ZXIgYWN0aW9uSWRcclxuXHRldmVudElkPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHb3Zlcm5hbmNlU2VydmljZVJlc3VsdCB7XHJcblx0bGFzdFRyaWdnZXJTdXJ2ZXk/OiBJR292ZXJuYW5jZVN1cnZleVJlc3BvbnNlO1xyXG5cdHBlcm1pc3Npb24/OiBib29sZWFuO1xyXG5cdGVycm9yPzogYm9vbGVhbjtcclxuXHRlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdvdmVybmFuY2VTZXJ2aWNlQ2xpZW50IHtcclxuXHRjaGVja0dvdmVybmFuY2VQZXJtaXRBc3luYyhcclxuXHRcdHN1cnZleTogSVN1cnZleSxcclxuXHRcdHN1cnZleUxldmVsQ29vbGRvd246IG51bWJlcixcclxuXHRcdHVzZXJMZXZlbENvb2xkb3duOiBudW1iZXIsXHJcblx0XHRjaGFubmVsOiBHb3Zlcm5lZENoYW5uZWxUeXBlKTogUHJvbWlzZTxJR292ZXJuYW5jZVNlcnZpY2VSZXN1bHQ+O1xyXG5cdGlzRW5hYmxlZChnb3Zlcm5lZENoYW5uZWxUeXBlOiBHb3Zlcm5lZENoYW5uZWxUeXBlKTogYm9vbGVhbjtcclxuXHRzaG91bGRGb3JjZURpc3BsYXkoKTogYm9vbGVhbjtcclxuXHRnZXRDbGllbnRTdGF0ZSgpOiBHb3Zlcm5hbmNlU2VydmljZUNsaWVudFN0YXRlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/IGovernanceServiceClient.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/ISurvey.js":
/*!************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/ISurvey.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurvey;\n(function (ISurvey) {\n    var Type;\n    (function (Type) {\n        // A Feedback survey. Contains a single question with a free-form text response\n        Type[Type[\"Feedback\"] = 0] = \"Feedback\";\n        // An NPS (net promoter score) survey. Asks user to rate \"whether or not they would recommend this product to family/friends\".\n        // Contains a prompt, question, and rating\n        Type[Type[\"Nps\"] = 1] = \"Nps\";\n        // A PSAT (product satisfaction) survey. Asks user to rate \"overall, based on their experience, how satisifed are they with this app\"\n        // Contains a prompt, question, and rating\n        Type[Type[\"Psat\"] = 2] = \"Psat\";\n        // A BPS (build promotion) survey. Asks user to choose between Yes and No options of promoting the current build to the next audience ring\n        // Contains a prompt, question, and rating (Yes/No)\n        Type[Type[\"Bps\"] = 3] = \"Bps\";\n        // A FPS (feature promotion) survey. Asks user to rate a given app feature.\n        // Contains a prompt, question, and rating\n        Type[Type[\"Fps\"] = 4] = \"Fps\";\n        // A NLQS (net language quality score) survey. Asks user to rate the language quality.\n        // Contains a prompt, question, and rating\n        Type[Type[\"Nlqs\"] = 5] = \"Nlqs\";\n        // An intercept survey. Asks user if they want to talk to a Microsoft engineer to give feedback.\n        // User can dismiss it or click on it to go to the intercept website, where the experience continues.\n        Type[Type[\"Intercept\"] = 6] = \"Intercept\";\n        // A Generic surface survey that uses content metadata to render a surface.\n        // As of 4th Feb 2019 there are 11 types defined in Mso hence giving a value of 12.\n        Type[Type[\"GenericMessagingSurface\"] = 12] = \"GenericMessagingSurface\";\n    })(Type = ISurvey.Type || (ISurvey.Type = {}));\n    ISurvey.DOM_FEEDBACKSURVEY_TAGNAME = \"FeedbackSurvey\";\n    ISurvey.DOM_NPS_TAGNAME = \"Nps\";\n    ISurvey.DOM_PSAT_TAGNAME = \"Psat\";\n    ISurvey.DOM_BPS_TAGNAME = \"Bps\";\n    ISurvey.DOM_FPS_TAGNAME = \"Fps\";\n    ISurvey.DOM_NLQS_TAGNAME = \"Nlqs\";\n    ISurvey.DOM_INTERCEPT_TAGNAME = \"Intercept\";\n    // If the launcher type is null or undefined in campaign definition then this value will be used as default\n    ISurvey.LAUNCHER_TYPE_DEFAULT = \"survey\";\n})(ISurvey || (ISurvey = {}));\nmodule.exports = ISurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JU3VydmV5LnRzP2ZlZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXNCQSxJQUFPLE9BQU8sQ0FxQ2I7QUFyQ0QsV0FBTyxPQUFPO0lBQ2IsSUFBWSxJQXdCWDtJQXhCRCxXQUFZLElBQUk7UUFDZiwrRUFBK0U7UUFDL0UsdUNBQVk7UUFDWiw4SEFBOEg7UUFDOUgsMENBQTBDO1FBQzFDLDZCQUFPO1FBQ1AscUlBQXFJO1FBQ3JJLDBDQUEwQztRQUMxQywrQkFBUTtRQUNSLDBJQUEwSTtRQUMxSSxtREFBbUQ7UUFDbkQsNkJBQU87UUFDUCwyRUFBMkU7UUFDM0UsMENBQTBDO1FBQzFDLDZCQUFPO1FBQ1Asc0ZBQXNGO1FBQ3RGLDBDQUEwQztRQUMxQywrQkFBUTtRQUNSLGdHQUFnRztRQUNoRyxxR0FBcUc7UUFDckcseUNBQWE7UUFDYiwyRUFBMkU7UUFDM0UsbUZBQW1GO1FBQ25GLHNFQUE0QjtJQUM3QixDQUFDLEVBeEJXLElBQUksR0FBSixZQUFJLEtBQUosWUFBSSxRQXdCZjtJQUVZLGtDQUEwQixHQUFHLGdCQUFnQixDQUFDO0lBQzlDLHVCQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLHdCQUFnQixHQUFHLE1BQU0sQ0FBQztJQUMxQix1QkFBZSxHQUFHLEtBQUssQ0FBQztJQUN4Qix1QkFBZSxHQUFHLEtBQUssQ0FBQztJQUN4Qix3QkFBZ0IsR0FBRyxNQUFNLENBQUM7SUFDMUIsNkJBQXFCLEdBQUcsV0FBVyxDQUFDO0lBRWpELDJHQUEyRztJQUM5Riw2QkFBcUIsR0FBRyxRQUFRLENBQUM7QUFDL0MsQ0FBQyxFQXJDTSxPQUFPLEtBQVAsT0FBTyxRQXFDYjtBQUVELGlCQUFTLE9BQU8sQ0FBQyIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FwaS9JU3VydmV5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVN1cnZleUZvcm0gfSBmcm9tIFwiLi4vQXBpL0lTdXJ2ZXlGb3JtXCI7XHJcbmltcG9ydCAqIGFzIElTdXJ2ZXlJbmZvIGZyb20gXCIuLi9JU3VydmV5SW5mb1wiO1xyXG5pbXBvcnQgeyBJU3VydmV5RG9tV3JpdGVyIH0gZnJvbSBcIi4vSVN1cnZleURvbVdyaXRlclwiO1xyXG5pbXBvcnQgeyBJU3VydmV5SnNvbldyaXRlciB9IGZyb20gXCIuL0lTdXJ2ZXlKc29uV3JpdGVyXCI7XHJcblxyXG4vKipcclxuICogVGhlIGludGVyZmFjZSBmb3IgYWxsIFN1cnZleXNcclxuICogQSBzdXJ2ZXkgaGFzIGEgdHlwZSwgYSBnbG9iYWxseSB1bmlxdWUgaWQgKG90aGVyd2lzZSBvcGFxdWUsIGJ1dCBzdWl0YWJsZSBmb3IgY29ycmVsYXRpb24gd2l0aCB0ZWxlbWV0cnkgYW5kIGZvciBzYXZpbmcgc3RhdHMgaW4gdGhlIHJlZ2lzdHJ5KSxcclxuICogYW4gZXhwaXJhdGlvbiB0aW1lIHRvIGFpZCBpbiBjYWNoZSBjbGVhbnVwLCBhbmQgYW4gYWN0aXZhdGlvbiBldmVudCB0byBjYXVzZSB0aGlzIHN1cnZleSB0byBiZSB0cmlnZ2VyZWRcclxuICovXHJcbmludGVyZmFjZSBJU3VydmV5IGV4dGVuZHMgSVN1cnZleUZvcm0sIElTdXJ2ZXlEb21Xcml0ZXIsIElTdXJ2ZXlKc29uV3JpdGVyIHtcclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIHR5cGUgb2YgdGhpcyBzdXJ2ZXkuXHJcblx0ICovXHJcblx0Z2V0VHlwZSgpOiBJU3VydmV5LlR5cGU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBiYXNpYyByb290LWxldmVsIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgc3VydmV5XHJcblx0ICovXHJcblx0Z2V0U3VydmV5SW5mbygpOiBJU3VydmV5SW5mbztcclxufVxyXG5cclxubW9kdWxlIElTdXJ2ZXkge1xyXG5cdGV4cG9ydCBlbnVtIFR5cGUge1xyXG5cdFx0Ly8gQSBGZWVkYmFjayBzdXJ2ZXkuIENvbnRhaW5zIGEgc2luZ2xlIHF1ZXN0aW9uIHdpdGggYSBmcmVlLWZvcm0gdGV4dCByZXNwb25zZVxyXG5cdFx0RmVlZGJhY2sgPSAwLFxyXG5cdFx0Ly8gQW4gTlBTIChuZXQgcHJvbW90ZXIgc2NvcmUpIHN1cnZleS4gQXNrcyB1c2VyIHRvIHJhdGUgXCJ3aGV0aGVyIG9yIG5vdCB0aGV5IHdvdWxkIHJlY29tbWVuZCB0aGlzIHByb2R1Y3QgdG8gZmFtaWx5L2ZyaWVuZHNcIi5cclxuXHRcdC8vIENvbnRhaW5zIGEgcHJvbXB0LCBxdWVzdGlvbiwgYW5kIHJhdGluZ1xyXG5cdFx0TnBzID0gMSxcclxuXHRcdC8vIEEgUFNBVCAocHJvZHVjdCBzYXRpc2ZhY3Rpb24pIHN1cnZleS4gQXNrcyB1c2VyIHRvIHJhdGUgXCJvdmVyYWxsLCBiYXNlZCBvbiB0aGVpciBleHBlcmllbmNlLCBob3cgc2F0aXNpZmVkIGFyZSB0aGV5IHdpdGggdGhpcyBhcHBcIlxyXG5cdFx0Ly8gQ29udGFpbnMgYSBwcm9tcHQsIHF1ZXN0aW9uLCBhbmQgcmF0aW5nXHJcblx0XHRQc2F0ID0gMixcclxuXHRcdC8vIEEgQlBTIChidWlsZCBwcm9tb3Rpb24pIHN1cnZleS4gQXNrcyB1c2VyIHRvIGNob29zZSBiZXR3ZWVuIFllcyBhbmQgTm8gb3B0aW9ucyBvZiBwcm9tb3RpbmcgdGhlIGN1cnJlbnQgYnVpbGQgdG8gdGhlIG5leHQgYXVkaWVuY2UgcmluZ1xyXG5cdFx0Ly8gQ29udGFpbnMgYSBwcm9tcHQsIHF1ZXN0aW9uLCBhbmQgcmF0aW5nIChZZXMvTm8pXHJcblx0XHRCcHMgPSAzLFxyXG5cdFx0Ly8gQSBGUFMgKGZlYXR1cmUgcHJvbW90aW9uKSBzdXJ2ZXkuIEFza3MgdXNlciB0byByYXRlIGEgZ2l2ZW4gYXBwIGZlYXR1cmUuXHJcblx0XHQvLyBDb250YWlucyBhIHByb21wdCwgcXVlc3Rpb24sIGFuZCByYXRpbmdcclxuXHRcdEZwcyA9IDQsXHJcblx0XHQvLyBBIE5MUVMgKG5ldCBsYW5ndWFnZSBxdWFsaXR5IHNjb3JlKSBzdXJ2ZXkuIEFza3MgdXNlciB0byByYXRlIHRoZSBsYW5ndWFnZSBxdWFsaXR5LlxyXG5cdFx0Ly8gQ29udGFpbnMgYSBwcm9tcHQsIHF1ZXN0aW9uLCBhbmQgcmF0aW5nXHJcblx0XHRObHFzID0gNSxcclxuXHRcdC8vIEFuIGludGVyY2VwdCBzdXJ2ZXkuIEFza3MgdXNlciBpZiB0aGV5IHdhbnQgdG8gdGFsayB0byBhIE1pY3Jvc29mdCBlbmdpbmVlciB0byBnaXZlIGZlZWRiYWNrLlxyXG5cdFx0Ly8gVXNlciBjYW4gZGlzbWlzcyBpdCBvciBjbGljayBvbiBpdCB0byBnbyB0byB0aGUgaW50ZXJjZXB0IHdlYnNpdGUsIHdoZXJlIHRoZSBleHBlcmllbmNlIGNvbnRpbnVlcy5cclxuXHRcdEludGVyY2VwdCA9IDYsXHJcblx0XHQvLyBBIEdlbmVyaWMgc3VyZmFjZSBzdXJ2ZXkgdGhhdCB1c2VzIGNvbnRlbnQgbWV0YWRhdGEgdG8gcmVuZGVyIGEgc3VyZmFjZS5cclxuXHRcdC8vIEFzIG9mIDR0aCBGZWIgMjAxOSB0aGVyZSBhcmUgMTEgdHlwZXMgZGVmaW5lZCBpbiBNc28gaGVuY2UgZ2l2aW5nIGEgdmFsdWUgb2YgMTIuXHJcblx0XHRHZW5lcmljTWVzc2FnaW5nU3VyZmFjZSA9IDEyLFxyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGNvbnN0IERPTV9GRUVEQkFDS1NVUlZFWV9UQUdOQU1FID0gXCJGZWVkYmFja1N1cnZleVwiO1xyXG5cdGV4cG9ydCBjb25zdCBET01fTlBTX1RBR05BTUUgPSBcIk5wc1wiO1xyXG5cdGV4cG9ydCBjb25zdCBET01fUFNBVF9UQUdOQU1FID0gXCJQc2F0XCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9CUFNfVEFHTkFNRSA9IFwiQnBzXCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9GUFNfVEFHTkFNRSA9IFwiRnBzXCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9OTFFTX1RBR05BTUUgPSBcIk5scXNcIjtcclxuXHRleHBvcnQgY29uc3QgRE9NX0lOVEVSQ0VQVF9UQUdOQU1FID0gXCJJbnRlcmNlcHRcIjtcclxuXHJcblx0Ly8gSWYgdGhlIGxhdW5jaGVyIHR5cGUgaXMgbnVsbCBvciB1bmRlZmluZWQgaW4gY2FtcGFpZ24gZGVmaW5pdGlvbiB0aGVuIHRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHRcclxuXHRleHBvcnQgY29uc3QgTEFVTkNIRVJfVFlQRV9ERUZBVUxUID0gXCJzdXJ2ZXlcIjtcclxufVxyXG5cclxuZXhwb3J0ID0gSVN1cnZleTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/ISurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Api/ISurveyComponent.js":
/*!*********************************************************!*\
  !*** ../FloodgateCore/dist/src/Api/ISurveyComponent.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent;\n(function (ISurveyComponent) {\n    ISurveyComponent.DOM_PROMPT_TAGNAME = \"Prompt\";\n    ISurveyComponent.DOM_COMMENT_TAGNAME = \"Comment\";\n    ISurveyComponent.DOM_RATING_TAGNAME = \"Rating\";\n    ISurveyComponent.DOM_CVSURVEY_TAGNAME = \"CVSurvey\";\n    ISurveyComponent.DOM_MULTIPLECHOICE_TAGNAME = \"MultipleChoice\";\n    ISurveyComponent.DOM_INTERCEPT_TAGNAME = \"Intercept\";\n    ISurveyComponent.JSON_INTERCEPT_KEYNAME = \"intercept\";\n    ISurveyComponent.JSON_INTERCEPTURL_KEYNAME = \"url\";\n    ISurveyComponent.JSON_PROMPT_KEYNAME = \"prompt\";\n    ISurveyComponent.JSON_PROMPTYESTEXT_KEYNAME = \"yesButtonText\";\n    ISurveyComponent.JSON_PROMPTNOTEXT_KEYNAME = \"noButtonText\";\n    ISurveyComponent.JSON_COMMENT_KEYNAME = \"comment\";\n    ISurveyComponent.JSON_RATING_KEYNAME = \"rating\";\n    ISurveyComponent.JSON_CVSURVEY_KEYNAME = \"cvSurvey\";\n    ISurveyComponent.JSON_CVSURVEYFORMID_KEYNAME = \"formId\";\n    ISurveyComponent.JSON_CVSURVEYTHEME_KEYNAME = \"theme\";\n    ISurveyComponent.JSON_RATINGOPTIONS_KEYNAME = \"options\";\n    ISurveyComponent.JSON_CVSURVEYPRODUCTNAME_KEYNAME = \"productName\";\n    ISurveyComponent.JSON_CVSURVEYUIHOST_KEYNAME = \"uiHost\";\n    ISurveyComponent.JSON_CVSURVEYPLATFORM_KEYNAME = \"platform\";\n    ISurveyComponent.JSON_TITLE_KEYNAME = \"title\";\n    ISurveyComponent.JSON_QUESTION_KEYNAME = \"question\";\n    ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME = \"multipleChoice\";\n    ISurveyComponent.JSON_APPLICATION_KEYNAME = \"application\";\n    ISurveyComponent.JSON_EXTENDEDMANIFESTDATA_KEYNAME = \"extendedManifestData\";\n    ISurveyComponent.JSON_SURVEYSTRINGS_KEYNAME = \"surveyStrings\";\n    ISurveyComponent.JSON_SURVEYSPECIFICDATA_KEYNAME = \"surveySpecificData\";\n})(ISurveyComponent || (ISurveyComponent = {}));\nmodule.exports = ISurveyComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwaS9JU3VydmV5Q29tcG9uZW50LnRzP2IzMzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLElBQU8sZ0JBQWdCLENBZ0R0QjtBQWhERCxXQUFPLGdCQUFnQjtJQXFCVCxtQ0FBa0IsR0FBRyxRQUFRLENBQUM7SUFDOUIsb0NBQW1CLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLG1DQUFrQixHQUFHLFFBQVEsQ0FBQztJQUM5QixxQ0FBb0IsR0FBRyxVQUFVLENBQUM7SUFDbEMsMkNBQTBCLEdBQUcsZ0JBQWdCLENBQUM7SUFDOUMsc0NBQXFCLEdBQUcsV0FBVyxDQUFDO0lBQ3BDLHVDQUFzQixHQUFHLFdBQVcsQ0FBQztJQUNyQywwQ0FBeUIsR0FBRyxLQUFLLENBQUM7SUFDbEMsb0NBQW1CLEdBQUcsUUFBUSxDQUFDO0lBQy9CLDJDQUEwQixHQUFHLGVBQWUsQ0FBQztJQUM3QywwQ0FBeUIsR0FBRyxjQUFjLENBQUM7SUFDM0MscUNBQW9CLEdBQUcsU0FBUyxDQUFDO0lBQ2pDLG9DQUFtQixHQUFHLFFBQVEsQ0FBQztJQUMvQixzQ0FBcUIsR0FBRyxVQUFVLENBQUM7SUFDbkMsNENBQTJCLEdBQUcsUUFBUSxDQUFDO0lBQ3ZDLDJDQUEwQixHQUFHLE9BQU8sQ0FBQztJQUNyQywyQ0FBMEIsR0FBRyxTQUFTLENBQUM7SUFDdkMsaURBQWdDLEdBQUcsYUFBYSxDQUFDO0lBQ2pELDRDQUEyQixHQUFHLFFBQVEsQ0FBQztJQUN2Qyw4Q0FBNkIsR0FBRyxVQUFVLENBQUM7SUFDM0MsbUNBQWtCLEdBQUcsT0FBTyxDQUFDO0lBQzdCLHNDQUFxQixHQUFHLFVBQVUsQ0FBQztJQUNuQyw0Q0FBMkIsR0FBRyxnQkFBZ0IsQ0FBQztJQUMvQyx5Q0FBd0IsR0FBRyxhQUFhLENBQUM7SUFDekMsa0RBQWlDLEdBQUcsc0JBQXNCLENBQUM7SUFDM0QsMkNBQTBCLEdBQUcsZUFBZSxDQUFDO0lBQzdDLGdEQUErQixHQUFHLG9CQUFvQixDQUFDO0FBQ3JFLENBQUMsRUFoRE0sZ0JBQWdCLEtBQWhCLGdCQUFnQixRQWdEdEI7QUFFRCxpQkFBUyxnQkFBZ0IsQ0FBQyIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0FwaS9JU3VydmV5Q29tcG9uZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBhIFN1cnZleUNvbXBvbmVudCAoaS5lLiBhIHF1ZXN0aW9uL3dpZGdldCB0byBzaG93IHRoZSB1c2VyXHJcbiAqIGluIGEgc3VydmV5IGZvcm0sIGFuZCB0aGF0IHR5cGljYWxseSByZXF1aXJlcyBhIHJlc3BvbnNlIHZhbHVlIG9mIHNvbWUga2luZClcclxuICovXHJcbmludGVyZmFjZSBJU3VydmV5Q29tcG9uZW50IHtcclxuXHRnZXRUeXBlKCk6IElTdXJ2ZXlDb21wb25lbnQuVHlwZTtcclxufVxyXG5cclxubW9kdWxlIElTdXJ2ZXlDb21wb25lbnQge1xyXG5cdGV4cG9ydCBjb25zdCBlbnVtIFR5cGUge1xyXG5cdFx0Ly8gQSBxdWljayBwb3AtdXAgcmVxdWVzdGluZyBwYXJ0aWNpcGF0aW9uIGluIGEgc3VydmV5XHJcblx0XHRQcm9tcHQgPSBcIlByb21wdFwiLFxyXG5cclxuXHRcdC8vIEEgcXVlc3Rpb24gcGFpcmVkIHdpdGggYSBmcmVlLWZvcm0gdGV4dCByZXNwb25zZVxyXG5cdFx0Q29tbWVudCA9IFwiQ29tbWVudFwiLFxyXG5cclxuXHRcdC8vIEEgcXVlc3Rpb24gYXNraW5nIGZvciBhIHNlbGVjdGlvbiBmcm9tIGEgbGlzdCBvZiBhbGxvd2VkIHZhbHVlcyB3aXRoIG51bWVyaWMgbWVhbmluZ1xyXG5cdFx0UmF0aW5nID0gXCJSYXRpbmdcIixcclxuXHJcblx0XHQvLyBJbmZvcm1hdGlvbiBuZWVkZWQgdG8gcGFzcyBpbnRvIENWU3VydmV5XHJcblx0XHRDVlN1cnZleSA9IFwiQ1ZTdXJ2ZXlcIixcclxuXHJcblx0XHQvLyBBIHF1ZXN0aW9uIGFza2luZyBmb3Igb25lIG9yIG1vcmUgc2VsZWN0aW9ucyBmcm9tIGEgbGlzdCBvZiBhbGxvd2VkIHZhbHVlc1xyXG5cdFx0TXVsdGlwbGVDaG9pY2UgPSBcIk11bHRpcGxlQ2hvaWNlXCIsXHJcblxyXG5cdFx0Ly8gQSBwb3AtdXAgZGlhbG9nIHJlcXVlc3RpbmcgcGFydGljaXBhdGlvbiBpbiBhbiBJbnRlcmNlcHQgc2Vzc2lvblxyXG5cdFx0SW50ZXJjZXB0ID0gXCJJbnRlcmNlcHRcIixcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBjb25zdCBET01fUFJPTVBUX1RBR05BTUUgPSBcIlByb21wdFwiO1xyXG5cdGV4cG9ydCBjb25zdCBET01fQ09NTUVOVF9UQUdOQU1FID0gXCJDb21tZW50XCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9SQVRJTkdfVEFHTkFNRSA9IFwiUmF0aW5nXCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9DVlNVUlZFWV9UQUdOQU1FID0gXCJDVlN1cnZleVwiO1xyXG5cdGV4cG9ydCBjb25zdCBET01fTVVMVElQTEVDSE9JQ0VfVEFHTkFNRSA9IFwiTXVsdGlwbGVDaG9pY2VcIjtcclxuXHRleHBvcnQgY29uc3QgRE9NX0lOVEVSQ0VQVF9UQUdOQU1FID0gXCJJbnRlcmNlcHRcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9JTlRFUkNFUFRfS0VZTkFNRSA9IFwiaW50ZXJjZXB0XCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fSU5URVJDRVBUVVJMX0tFWU5BTUUgPSBcInVybFwiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX1BST01QVF9LRVlOQU1FID0gXCJwcm9tcHRcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9QUk9NUFRZRVNURVhUX0tFWU5BTUUgPSBcInllc0J1dHRvblRleHRcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9QUk9NUFROT1RFWFRfS0VZTkFNRSA9IFwibm9CdXR0b25UZXh0XCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fQ09NTUVOVF9LRVlOQU1FID0gXCJjb21tZW50XCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fUkFUSU5HX0tFWU5BTUUgPSBcInJhdGluZ1wiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX0NWU1VSVkVZX0tFWU5BTUUgPSBcImN2U3VydmV5XCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fQ1ZTVVJWRVlGT1JNSURfS0VZTkFNRSA9IFwiZm9ybUlkXCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fQ1ZTVVJWRVlUSEVNRV9LRVlOQU1FID0gXCJ0aGVtZVwiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX1JBVElOR09QVElPTlNfS0VZTkFNRSA9IFwib3B0aW9uc1wiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX0NWU1VSVkVZUFJPRFVDVE5BTUVfS0VZTkFNRSA9IFwicHJvZHVjdE5hbWVcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9DVlNVUlZFWVVJSE9TVF9LRVlOQU1FID0gXCJ1aUhvc3RcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9DVlNVUlZFWVBMQVRGT1JNX0tFWU5BTUUgPSBcInBsYXRmb3JtXCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fVElUTEVfS0VZTkFNRSA9IFwidGl0bGVcIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9RVUVTVElPTl9LRVlOQU1FID0gXCJxdWVzdGlvblwiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX01VTFRJUExFQ0hPSUNFX0tFWU5BTUUgPSBcIm11bHRpcGxlQ2hvaWNlXCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fQVBQTElDQVRJT05fS0VZTkFNRSA9IFwiYXBwbGljYXRpb25cIjtcclxuXHRleHBvcnQgY29uc3QgSlNPTl9FWFRFTkRFRE1BTklGRVNUREFUQV9LRVlOQU1FID0gXCJleHRlbmRlZE1hbmlmZXN0RGF0YVwiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX1NVUlZFWVNUUklOR1NfS0VZTkFNRSA9IFwic3VydmV5U3RyaW5nc1wiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX1NVUlZFWVNQRUNJRklDREFUQV9LRVlOQU1FID0gXCJzdXJ2ZXlTcGVjaWZpY0RhdGFcIjtcclxufVxyXG5cclxuZXhwb3J0ID0gSVN1cnZleUNvbXBvbmVudDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Api/ISurveyComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js":
/*!************************************************************************!*\
  !*** ../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileSystemCampaignDefinitionProvider = exports.FilterValidCampaignDefinitions = exports.CampaignDefinition = exports.CampaignSurveyTemplateIntercept = exports.CampaignSurveyTemplateGenericMessagingSurface = exports.CampaignSurveyTemplateNps11PointStatic = exports.CampaignSurveyTemplateNps5PointStatic = exports.CampaignSurveyTemplateNps = exports.CampaignSurveyTemplateNlqs = exports.CampaignSurveyTemplateFps = exports.CampaignSurveyTemplate = exports.CampaignSurveyMetadata = exports.CampaignSurveyContentComment = exports.CampaignSurveyContentRating = exports.CampaignSurveyContentIntercept = exports.CampaignSurveyContentPrompt = exports.CampaignSurveyContentCVSurvey = exports.CampaignSurveyContentMultipleChoice = exports.CampaignSurveyContent = exports.CampaignSurveyEventCountedActivitySequence = exports.CampaignSurveyEventCountedActivity = exports.CampaignSurveyEvent = exports.CampaignNominationSchemeRatioPercentage = exports.CampaignNominationScheme = exports.CampaignDistributionRamp = exports.CampaignDistribution = exports.CampaignAdditionalDataRequested = exports.CampaignDurationSingleBuildChange = exports.CampaignDurationTimeInterval = exports.CampaignDuration = exports.CampaignScopeUserFactAll = exports.CampaignScopeUserFactAny = exports.CampaignScopeEnvironmentCrossProduct = exports.CampaignScopeAny = exports.CampaignScope = exports.CampaignLanguageRangeLanguageSubtag = exports.CampaignLanguageRange = void 0;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ../Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nvar Constants_1 = __webpack_require__(/*! ../Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ../FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar GovernedChannel_1 = __webpack_require__(/*! ../GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar UserFactHelper_1 = __webpack_require__(/*! ../UserFact/UserFactHelper */ \"../FloodgateCore/dist/src/UserFact/UserFactHelper.js\");\nvar getDistantFuture = Utils.getDistantFuture, isBoolean = Utils.isBoolean, isNOU = Utils.isNOU, isNumber = Utils.isNumber, isString = Utils.isString, isUtcDatetimeString = Utils.isUtcDatetimeString, stringToDate = Utils.stringToDate;\n// region Language Range\n/**\n * Base class representing a language range in a campaign setting\n */\nvar CampaignLanguageRange = /** @class */ (function () {\n    function CampaignLanguageRange() {\n    }\n    CampaignLanguageRange.deserialize = function (input) {\n        var result;\n        if (input && input.Type === 0) {\n            result = CampaignLanguageRangeLanguageSubtag.deserialize(input);\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    CampaignLanguageRange.prototype.validate = function () {\n        return true;\n    };\n    return CampaignLanguageRange;\n}());\nexports.CampaignLanguageRange = CampaignLanguageRange;\n/**\n * Represents a range matching on the \"language subtag\" against fully specified language tags, according to RFC 5646\n */\nvar CampaignLanguageRangeLanguageSubtag = /** @class */ (function (_super) {\n    __extends(CampaignLanguageRangeLanguageSubtag, _super);\n    // public for UT only\n    function CampaignLanguageRangeLanguageSubtag() {\n        return _super.call(this) || this;\n    }\n    CampaignLanguageRangeLanguageSubtag.deserialize = function (input) {\n        var result = new CampaignLanguageRangeLanguageSubtag();\n        if (input) {\n            result.languageSubTag = input.Value;\n        }\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignLanguageRangeLanguageSubtag.prototype.isInRange = function (language) {\n        if (isNOU(language)) {\n            return false;\n        }\n        var extractedLanguageSubTag = Utils.extractLanguageSubtag(language);\n        if (isNOU(extractedLanguageSubTag)) {\n            return false;\n        }\n        // compare strings ignoring case\n        return extractedLanguageSubTag.toLocaleUpperCase() === this.languageSubTag.toLocaleUpperCase();\n    };\n    // @Override\n    CampaignLanguageRangeLanguageSubtag.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (isNOU(this.languageSubTag) || !isString(this.languageSubTag)) {\n            return false;\n        }\n        // Reject any spec that isn't exactly a language subtag\n        if (!Utils.isValidLanguageSubTag(this.languageSubTag)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignLanguageRangeLanguageSubtag;\n}(CampaignLanguageRange));\nexports.CampaignLanguageRangeLanguageSubtag = CampaignLanguageRangeLanguageSubtag;\n// endregion\n// region Scope\nvar CampaignScope = /** @class */ (function () {\n    function CampaignScope() {\n    }\n    CampaignScope.deserialize = function (input) {\n        var result;\n        if (isNOU(input)) {\n            return null;\n        }\n        switch (input.Type) {\n            case 0 /* CampaignScopeAny */:\n                result = CampaignScopeAny.deserialize(input);\n                break;\n            case 1 /* CampaignScopeEnvironmentCrossProduct */:\n                result = CampaignScopeEnvironmentCrossProduct.deserialize(input);\n                break;\n            case 2 /* CampaignScopeUserFactAny */:\n                result = CampaignScopeUserFactAny.deserialize(input);\n                break;\n            case 3 /* CampaignScopeUserFactAll */:\n                result = CampaignScopeUserFactAll.deserialize(input);\n                break;\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    CampaignScope.prototype.validate = function () {\n        return true;\n    };\n    return CampaignScope;\n}());\nexports.CampaignScope = CampaignScope;\nvar CampaignScopeAny = /** @class */ (function (_super) {\n    __extends(CampaignScopeAny, _super);\n    // public for UT only\n    function CampaignScopeAny() {\n        return _super.call(this) || this;\n    }\n    CampaignScopeAny.deserialize = function (input) {\n        return new CampaignScopeAny();\n    };\n    // @Override\n    CampaignScopeAny.prototype.isInScope = function () {\n        return true;\n    };\n    // @Override\n    CampaignScopeAny.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignScopeAny;\n}(CampaignScope));\nexports.CampaignScopeAny = CampaignScopeAny;\nvar CampaignScopeEnvironmentCrossProduct = /** @class */ (function (_super) {\n    __extends(CampaignScopeEnvironmentCrossProduct, _super);\n    // public for UT only\n    function CampaignScopeEnvironmentCrossProduct() {\n        return _super.call(this) || this;\n    }\n    CampaignScopeEnvironmentCrossProduct.deserialize = function (input) {\n        var result = new CampaignScopeEnvironmentCrossProduct();\n        var languageRanges = [];\n        if (isNOU(input)) {\n            return null;\n        }\n        for (var key in input.Languages) {\n            if (input.Languages.hasOwnProperty(key)) {\n                var readRange = input.Languages[key];\n                if (readRange) {\n                    languageRanges.push(CampaignLanguageRange.deserialize(readRange));\n                }\n            }\n        }\n        if (languageRanges.length === 0) {\n            languageRanges = null;\n        }\n        result.languageRanges = languageRanges;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignScopeEnvironmentCrossProduct.prototype.setEnvironmentProvider = function (environmentProvider) {\n        this.environmentProvider = environmentProvider;\n    };\n    // @Override\n    CampaignScopeEnvironmentCrossProduct.prototype.isInScope = function () {\n        if (isNOU(this.languageRanges)) {\n            return true;\n        }\n        if (isNOU(this.environmentProvider) || !this.environmentProvider.getLanguage()) {\n            return false;\n        }\n        var language = this.environmentProvider.getLanguage();\n        // If the environment matches a single pattern, then this is a yes\n        for (var key in this.languageRanges) {\n            if (this.languageRanges.hasOwnProperty(key)) {\n                var range = this.languageRanges[key];\n                if (range.isInRange(language)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    // @Override\n    CampaignScopeEnvironmentCrossProduct.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        // Null languageRanges is allowed, means will match with everything.\n        if (this.languageRanges) {\n            for (var key in this.languageRanges) {\n                if (this.languageRanges.hasOwnProperty(key) && !this.languageRanges[key]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    return CampaignScopeEnvironmentCrossProduct;\n}(CampaignScope));\nexports.CampaignScopeEnvironmentCrossProduct = CampaignScopeEnvironmentCrossProduct;\nvar CampaignScopeUserFactAny = /** @class */ (function (_super) {\n    __extends(CampaignScopeUserFactAny, _super);\n    // public for UT only\n    function CampaignScopeUserFactAny() {\n        return _super.call(this) || this;\n    }\n    CampaignScopeUserFactAny.deserialize = function (input) {\n        var result = new CampaignScopeUserFactAny();\n        result.userFacts = UserFactHelper_1.deserializeUserFacts(input);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignScopeUserFactAny.prototype.setUserFactsProvider = function (userFactsProvider) {\n        this.userFactsProvider = userFactsProvider;\n    };\n    // @Override\n    CampaignScopeUserFactAny.prototype.isInScope = function () {\n        var _this = this;\n        if (isNOU(this.userFacts)) {\n            return true;\n        }\n        if (!this.userFactsProvider) {\n            return false;\n        }\n        // If one of the user fact matches, then this is a yes\n        return this.userFacts.some(function (userFact) {\n            var rawUserFact = _this.userFactsProvider.getUserFact(userFact.getName());\n            return userFact.isAMatch(rawUserFact);\n        });\n    };\n    // @Override\n    CampaignScopeUserFactAny.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        return UserFactHelper_1.validateUserFacts(this.userFacts);\n    };\n    return CampaignScopeUserFactAny;\n}(CampaignScope));\nexports.CampaignScopeUserFactAny = CampaignScopeUserFactAny;\nvar CampaignScopeUserFactAll = /** @class */ (function (_super) {\n    __extends(CampaignScopeUserFactAll, _super);\n    // public for UT only\n    function CampaignScopeUserFactAll() {\n        return _super.call(this) || this;\n    }\n    CampaignScopeUserFactAll.deserialize = function (input) {\n        var result = new CampaignScopeUserFactAll();\n        result.userFacts = UserFactHelper_1.deserializeUserFacts(input);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignScopeUserFactAll.prototype.setUserFactsProvider = function (userFactsProvider) {\n        this.userFactsProvider = userFactsProvider;\n    };\n    // @Override\n    CampaignScopeUserFactAll.prototype.isInScope = function () {\n        var _this = this;\n        if (isNOU(this.userFacts)) {\n            return true;\n        }\n        if (!this.userFactsProvider) {\n            return false;\n        }\n        // Get all of the mismatched user facts\n        var mismatchedFacts = this.userFacts.filter(function (userFact) {\n            var rawUserFact = _this.userFactsProvider.getUserFact(userFact.getName());\n            return !userFact.isAMatch(rawUserFact);\n        });\n        if (mismatchedFacts.length > 0) {\n            var mismatchedNames = mismatchedFacts.map(function (userFact) { return userFact.getName(); });\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Summary, {\n                Count: mismatchedFacts.length,\n                Message: mismatchedNames.toString(),\n            });\n            return false;\n        }\n        // If all of the user facts match, then this is a yes\n        return true;\n    };\n    // @Override\n    CampaignScopeUserFactAll.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        return UserFactHelper_1.validateUserFacts(this.userFacts);\n    };\n    return CampaignScopeUserFactAll;\n}(CampaignScope));\nexports.CampaignScopeUserFactAll = CampaignScopeUserFactAll;\n// endregion\n// region Durations\n/**\n * Base class representing a duration in a campaign setting\n */\nvar CampaignDuration = /** @class */ (function () {\n    function CampaignDuration() {\n    }\n    CampaignDuration.deserialize = function (input) {\n        var result;\n        if (isNOU(input)) {\n            return null;\n        }\n        switch (input.Type) {\n            case 0:\n                result = CampaignDurationTimeInterval.deserialize(input);\n                break;\n            case 1:\n                result = CampaignDurationSingleBuildChange.deserialize(input);\n                break;\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    CampaignDuration.prototype.validate = function () {\n        return true;\n    };\n    return CampaignDuration;\n}());\nexports.CampaignDuration = CampaignDuration;\n/**\n * A Duration expressed in seconds. UTC datetime comparisons are used to determine expiration.\n */\nvar CampaignDurationTimeInterval = /** @class */ (function (_super) {\n    __extends(CampaignDurationTimeInterval, _super);\n    // public for UT only\n    function CampaignDurationTimeInterval() {\n        return _super.call(this) || this;\n    }\n    CampaignDurationTimeInterval.deserialize = function (input) {\n        var result = new CampaignDurationTimeInterval();\n        if (input) {\n            result.intervalSeconds = input.IntervalSeconds;\n        }\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignDurationTimeInterval.prototype.asTimeIntervalSeconds = function () {\n        return this.intervalSeconds;\n    };\n    // @Override\n    CampaignDurationTimeInterval.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (!isNumber(this.intervalSeconds)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignDurationTimeInterval;\n}(CampaignDuration));\nexports.CampaignDurationTimeInterval = CampaignDurationTimeInterval;\n/**\n * A Duration representing exactly 1 change in build number\n */\nvar CampaignDurationSingleBuildChange = /** @class */ (function (_super) {\n    __extends(CampaignDurationSingleBuildChange, _super);\n    // public for UT only\n    function CampaignDurationSingleBuildChange() {\n        return _super.call(this) || this;\n    }\n    CampaignDurationSingleBuildChange.deserialize = function (input) {\n        return new CampaignDurationSingleBuildChange();\n    };\n    // @Override\n    CampaignDurationSingleBuildChange.prototype.asTimeIntervalSeconds = function () {\n        return null;\n    };\n    return CampaignDurationSingleBuildChange;\n}(CampaignDuration));\nexports.CampaignDurationSingleBuildChange = CampaignDurationSingleBuildChange;\n/**\n * Class representing AdditionalDataRequested in CampaignDefinition\n */\nvar CampaignAdditionalDataRequested = /** @class */ (function () {\n    function CampaignAdditionalDataRequested() {\n    }\n    CampaignAdditionalDataRequested.deserialize = function (additionalDataRequested) {\n        var result = new CampaignAdditionalDataRequested();\n        if (!isNOU(additionalDataRequested)) {\n            // Convert from AdditionalDataRequested string to enum\n            result.additionalData = [];\n            for (var _i = 0, additionalDataRequested_1 = additionalDataRequested; _i < additionalDataRequested_1.length; _i++) {\n                var additionalData = additionalDataRequested_1[_i];\n                if (additionalData === \"EmailAddress\") {\n                    result.additionalData.push(0 /* EmailAddress */);\n                }\n            }\n        }\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignAdditionalDataRequested.prototype.validate = function () {\n        if (isNOU(this.additionalData)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignAdditionalDataRequested;\n}());\nexports.CampaignAdditionalDataRequested = CampaignAdditionalDataRequested;\n// endregion\n// region Distribution Schemes\nvar CampaignDistribution = /** @class */ (function () {\n    function CampaignDistribution() {\n    }\n    CampaignDistribution.deserialize = function (input) {\n        var result;\n        if (input && input.Type === 0) {\n            result = CampaignDistributionRamp.deserialize(input);\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    CampaignDistribution.prototype.validate = function () {\n        return true;\n    };\n    return CampaignDistribution;\n}());\nexports.CampaignDistribution = CampaignDistribution;\nvar CampaignDistributionRamp = /** @class */ (function (_super) {\n    __extends(CampaignDistributionRamp, _super);\n    function CampaignDistributionRamp() {\n        return _super.call(this) || this;\n    }\n    CampaignDistributionRamp.deserialize = function (input) {\n        var result = new CampaignDistributionRamp();\n        if (input) {\n            result.maxDelaySeconds = input.MaxDelaySeconds;\n            result.chunks = input.Chunks;\n        }\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignDistributionRamp.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (!isNumber(this.maxDelaySeconds) || this.maxDelaySeconds < 0) {\n            return false;\n        }\n        if (!isNumber(this.chunks) || this.chunks < 0) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignDistributionRamp;\n}(CampaignDistribution));\nexports.CampaignDistributionRamp = CampaignDistributionRamp;\n// endregion\n// region Nomination Scheme\nvar CampaignNominationScheme = /** @class */ (function () {\n    function CampaignNominationScheme() {\n    }\n    CampaignNominationScheme.deserialize = function (input) {\n        var result;\n        if (input && input.Type === 0) {\n            result = CampaignNominationSchemeRatioPercentage.deserialize(input);\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    /**\n     * @return The amount of time the survey should be active, in seconds. Abstracts the difference between nominationPeriod and the fallback\n     */\n    CampaignNominationScheme.prototype.getActiveSurveyTimeIntervalSeconds = function () {\n        var nominationTimIntervalSeconds = this.nominationPeriod.asTimeIntervalSeconds();\n        if (isNumber(nominationTimIntervalSeconds)) {\n            return nominationTimIntervalSeconds;\n        }\n        return this.fallbackSurveyDurationSeconds;\n    };\n    /**\n     * @return The survey start time, possibly adjusted by an underlying DistributionModel.\n     */\n    CampaignNominationScheme.prototype.calculateSurveyStartTimeFromDate = function (soonestStartTime) {\n        // No adjustment in base class.  Derived classes can override and implement delays like a \"ramp\"\n        return soonestStartTime ? soonestStartTime : new Date();\n    };\n    /**\n     * @return The survey expiration time, based on the nomination periods and the survey's adjusted start time\n     */\n    CampaignNominationScheme.prototype.calculateSurveyExpirationTimeFromSurveyStartTime = function (surveyStartTime) {\n        surveyStartTime = surveyStartTime ? surveyStartTime : new Date();\n        return Utils.addSecondsWithoutOverflow(surveyStartTime, this.getActiveSurveyTimeIntervalSeconds());\n    };\n    /**\n     * @return The appropriate campaign cool down based on whether or not the user activated the survey\n     */\n    CampaignNominationScheme.prototype.getCampaignCooldown = function (didUserActivateSurvey) {\n        if (didUserActivateSurvey) {\n            return this.cooldownPeriod;\n        }\n        else {\n            return this.nominationPeriod;\n        }\n    };\n    CampaignNominationScheme.prototype.validate = function () {\n        if (isNOU(this.nominationPeriod)) {\n            return false;\n        }\n        if (isNOU(this.cooldownPeriod)) {\n            this.cooldownPeriod = this.nominationPeriod;\n        }\n        if (!isNumber(this.nominationPeriod.asTimeIntervalSeconds())) {\n            if (!isNumber(this.fallbackSurveyDurationSeconds) || this.fallbackSurveyDurationSeconds <= 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return CampaignNominationScheme;\n}());\nexports.CampaignNominationScheme = CampaignNominationScheme;\n/**\n * Class representing a set of campaign nomination rules to evaluate for in-scope campaigns:\n * percentage\n * re-election durations\n * distribution model (for \"nominated\" candidates)\n */\nvar CampaignNominationSchemeRatioPercentage = /** @class */ (function (_super) {\n    __extends(CampaignNominationSchemeRatioPercentage, _super);\n    function CampaignNominationSchemeRatioPercentage() {\n        return _super.call(this) || this;\n    }\n    CampaignNominationSchemeRatioPercentage.deserialize = function (input) {\n        var result = new CampaignNominationSchemeRatioPercentage();\n        if (isNOU(input)) {\n            return null;\n        }\n        if (input.DistributionModel) {\n            result.distributionModel = CampaignDistribution.deserialize(input.DistributionModel);\n        }\n        if (input.CooldownPeriod) {\n            result.cooldownPeriod = CampaignDuration.deserialize(input.CooldownPeriod);\n        }\n        if (input.NominationPeriod) {\n            result.nominationPeriod = CampaignDuration.deserialize(input.NominationPeriod);\n        }\n        result.fallbackSurveyDurationSeconds = input.FallbackSurveyDurationSeconds;\n        result.percentageDenominator = input.PercentageDenominator;\n        result.percentageNumerator = input.PercentageNumerator;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignNominationSchemeRatioPercentage.prototype.evaluateNominationRules = function () {\n        var rand = Math.random();\n        // Creates a random number between [0 to (percentageDenominator - 1)]\n        // In range [0 to (percentageDenominator - 1)] exactly 'percentageNumerator' values are < percentageNumerator\n        return Math.floor(rand * this.percentageDenominator) < this.percentageNumerator;\n    };\n    // @Override\n    CampaignNominationSchemeRatioPercentage.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (!isNumber(this.percentageDenominator) || !isNumber(this.percentageNumerator)) {\n            return false;\n        }\n        if (this.percentageDenominator <= 0 || this.percentageNumerator < 0) {\n            return false;\n        }\n        if (this.percentageNumerator > this.percentageDenominator) {\n            return false;\n        }\n        // distribution model may be null\n        return true;\n    };\n    return CampaignNominationSchemeRatioPercentage;\n}(CampaignNominationScheme));\nexports.CampaignNominationSchemeRatioPercentage = CampaignNominationSchemeRatioPercentage;\n// endregion\n// region Survey Event Definitions\nvar CampaignSurveyEvent = /** @class */ (function () {\n    function CampaignSurveyEvent() {\n    }\n    CampaignSurveyEvent.deserialize = function (input) {\n        var result;\n        if (isNOU(input)) {\n            return null;\n        }\n        switch (input.Type) {\n            case 0:\n                result = CampaignSurveyEventCountedActivity.deserialize(input);\n                break;\n            case 1:\n                result = CampaignSurveyEventCountedActivitySequence.deserialize(input);\n                break;\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyEvent.prototype.validate = function () {\n        return true;\n    };\n    return CampaignSurveyEvent;\n}());\nexports.CampaignSurveyEvent = CampaignSurveyEvent;\nvar CampaignSurveyEventCountedActivity = /** @class */ (function (_super) {\n    __extends(CampaignSurveyEventCountedActivity, _super);\n    // public for UT only\n    function CampaignSurveyEventCountedActivity() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyEventCountedActivity.deserialize = function (input) {\n        var result = new CampaignSurveyEventCountedActivity();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activity = input.Activity;\n        result.count = input.Count;\n        result.isAggregate = input.IsAggregate;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignSurveyEventCountedActivity.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (isNOU(this.activity) || !isString(this.activity)) {\n            return false;\n        }\n        if (!isNumber(this.count) || this.count <= 0) {\n            return false;\n        }\n        if (!isBoolean(this.isAggregate)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyEventCountedActivity;\n}(CampaignSurveyEvent));\nexports.CampaignSurveyEventCountedActivity = CampaignSurveyEventCountedActivity;\nvar CampaignSurveyEventCountedActivitySequence = /** @class */ (function (_super) {\n    __extends(CampaignSurveyEventCountedActivitySequence, _super);\n    // public for UT only\n    function CampaignSurveyEventCountedActivitySequence() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyEventCountedActivitySequence.deserialize = function (input) {\n        var result = new CampaignSurveyEventCountedActivitySequence();\n        var sequence = [];\n        if (isNOU(input)) {\n            return null;\n        }\n        for (var key in input.Sequence) {\n            if (input.Sequence.hasOwnProperty(key)) {\n                var readActivity = input.Sequence[key];\n                if (readActivity) {\n                    sequence.push(CampaignSurveyEventCountedActivity.deserialize(readActivity));\n                }\n            }\n        }\n        if (sequence.length === 0) {\n            sequence = null;\n        }\n        result.sequence = sequence;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    // @Override\n    CampaignSurveyEventCountedActivitySequence.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        if (isNOU(this.sequence)) {\n            return false;\n        }\n        for (var key in this.sequence) {\n            if (this.sequence.hasOwnProperty(key) && !this.sequence[key]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return CampaignSurveyEventCountedActivitySequence;\n}(CampaignSurveyEvent));\nexports.CampaignSurveyEventCountedActivitySequence = CampaignSurveyEventCountedActivitySequence;\n// endregion\n// region Survey Content Definitions\nvar CampaignSurveyContent = /** @class */ (function () {\n    function CampaignSurveyContent() {\n    }\n    CampaignSurveyContent.deserialize = function (input, optionalComponents) {\n        var result = new CampaignSurveyContent();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.prompt = CampaignSurveyContentPrompt.deserialize(input.Prompt);\n        result.rating = CampaignSurveyContentRating.deserialize(input.Rating);\n        result.comment = CampaignSurveyContentComment.deserialize(input.Question);\n        result.multipleChoice = CampaignSurveyContentMultipleChoice.deserialize(input.MultipleChoice);\n        result.intercept = CampaignSurveyContentIntercept.deserialize(input.Intercept);\n        result.cvSurvey = CampaignSurveyContentCVSurvey.deserialize(input.CVSurveyParams);\n        if (!result.validate(optionalComponents)) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContent.prototype.validate = function (optionalComponents) {\n        if (!isNOU(this.intercept)) {\n            // An intercept survey only requires intercept.\n            return true;\n        }\n        if (isNOU(this.prompt)) {\n            return false;\n        }\n        if (optionalComponents) {\n            return !isNOU(this.rating) ||\n                !isNOU(this.multipleChoice) ||\n                !isNOU(this.comment);\n        }\n        return !isNOU(this.rating) && !isNOU(this.comment);\n    };\n    return CampaignSurveyContent;\n}());\nexports.CampaignSurveyContent = CampaignSurveyContent;\nvar CampaignSurveyContentMultipleChoice = /** @class */ (function () {\n    function CampaignSurveyContentMultipleChoice() {\n    }\n    CampaignSurveyContentMultipleChoice.deserialize = function (input) {\n        var result = new CampaignSurveyContentMultipleChoice();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.question = input.Question;\n        result.availableOptions = input.AvailableOptions;\n        result.minNumberOfSelectedOptions = input.MinNumberOfSelectedOptions;\n        result.maxNumberOfSelectedOptions = input.MaxNumberOfSelectedOptions;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentMultipleChoice.prototype.validate = function () {\n        if (isNOU(this.question) || !isString(this.question) ||\n            isNOU(this.availableOptions) || !Array.isArray(this.availableOptions) || this.availableOptions.length < 2 ||\n            isNOU(this.minNumberOfSelectedOptions) || !isNumber(this.minNumberOfSelectedOptions) ||\n            isNOU(this.maxNumberOfSelectedOptions) || !isNumber(this.maxNumberOfSelectedOptions)) {\n            return false;\n        }\n        // expect all availableOptions values to be string\n        for (var key in this.availableOptions) {\n            if (this.availableOptions.hasOwnProperty(key)) {\n                if (!isString(this.availableOptions[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    return CampaignSurveyContentMultipleChoice;\n}());\nexports.CampaignSurveyContentMultipleChoice = CampaignSurveyContentMultipleChoice;\nvar CampaignSurveyContentCVSurvey = /** @class */ (function () {\n    function CampaignSurveyContentCVSurvey() {\n    }\n    CampaignSurveyContentCVSurvey.deserialize = function (input) {\n        var result = new CampaignSurveyContentCVSurvey();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.customerVoiceFormId = input.CustomerVoiceFormId;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentCVSurvey.prototype.validate = function () {\n        return (!isNOU(this.customerVoiceFormId) && isString(this.customerVoiceFormId));\n    };\n    return CampaignSurveyContentCVSurvey;\n}());\nexports.CampaignSurveyContentCVSurvey = CampaignSurveyContentCVSurvey;\nvar CampaignSurveyContentPrompt = /** @class */ (function () {\n    function CampaignSurveyContentPrompt() {\n    }\n    CampaignSurveyContentPrompt.deserialize = function (input) {\n        var result = new CampaignSurveyContentPrompt();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.title = input.Title;\n        result.question = input.Question;\n        result.yesLabel = input.YesLabel;\n        result.noLabel = input.NoLabel;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentPrompt.prototype.validate = function () {\n        if (isNOU(this.title) || !isString(this.title) ||\n            isNOU(this.question) || !isString(this.question) ||\n            isNOU(this.yesLabel) || !isString(this.yesLabel) ||\n            isNOU(this.noLabel) || !isString(this.noLabel)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyContentPrompt;\n}());\nexports.CampaignSurveyContentPrompt = CampaignSurveyContentPrompt;\nvar CampaignSurveyContentIntercept = /** @class */ (function () {\n    function CampaignSurveyContentIntercept() {\n    }\n    CampaignSurveyContentIntercept.deserialize = function (input) {\n        var result = new CampaignSurveyContentIntercept();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.title = input.Title;\n        result.question = input.Question;\n        result.url = input.Url;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentIntercept.prototype.validate = function () {\n        if (isNOU(this.title) || !isString(this.title) ||\n            isNOU(this.question) || !isString(this.question) ||\n            isNOU(this.url) || !isString(this.url)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyContentIntercept;\n}());\nexports.CampaignSurveyContentIntercept = CampaignSurveyContentIntercept;\nvar CampaignSurveyContentRating = /** @class */ (function () {\n    function CampaignSurveyContentRating() {\n    }\n    CampaignSurveyContentRating.deserialize = function (input) {\n        var result = new CampaignSurveyContentRating();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.isZeroBased = input.IsZeroBased;\n        result.question = input.Question;\n        result.ratingValuesAscending = input.RatingValuesAscending;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentRating.prototype.validate = function () {\n        // expect ratingValuesAscending to contain between 2 to 11 values\n        if (isNOU(this.question) || !isString(this.question) ||\n            isNOU(this.ratingValuesAscending) || !Array.isArray(this.ratingValuesAscending) ||\n            this.ratingValuesAscending.length < 2 || this.ratingValuesAscending.length > 11) {\n            return false;\n        }\n        if (isNOU(this.isZeroBased)) {\n            // default to false if not provided\n            this.isZeroBased = false;\n        }\n        else if (!isBoolean(this.isZeroBased)) {\n            // fail validation if non boolean value is provided\n            return false;\n        }\n        // expect all ratingValuesAscending values to be string\n        for (var key in this.ratingValuesAscending) {\n            if (this.ratingValuesAscending.hasOwnProperty(key)) {\n                if (!isString(this.ratingValuesAscending[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    return CampaignSurveyContentRating;\n}());\nexports.CampaignSurveyContentRating = CampaignSurveyContentRating;\nvar CampaignSurveyContentComment = /** @class */ (function () {\n    function CampaignSurveyContentComment() {\n    }\n    CampaignSurveyContentComment.deserialize = function (input) {\n        var result = new CampaignSurveyContentComment();\n        if (isNOU(input)) {\n            return null;\n        }\n        // @SerializedName(\"Question\")\n        result.question = input.Question;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyContentComment.prototype.validate = function () {\n        if (isNOU(this.question) || !isString(this.question)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyContentComment;\n}());\nexports.CampaignSurveyContentComment = CampaignSurveyContentComment;\n// endregion\n// region Survey Metadata Definitions\nvar CampaignSurveyMetadata = /** @class */ (function () {\n    function CampaignSurveyMetadata() {\n    }\n    CampaignSurveyMetadata.deserialize = function (input) {\n        if (isNOU(input)) {\n            return null;\n        }\n        var result = new CampaignSurveyMetadata();\n        result.contentMetadata = input.ContentMetadata;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyMetadata.prototype.validate = function () {\n        if (isNOU(this.contentMetadata) || !Utils.isObject(this.contentMetadata)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyMetadata;\n}());\nexports.CampaignSurveyMetadata = CampaignSurveyMetadata;\n// endregion\n// region Survey Template definitions\nvar CampaignSurveyTemplate = /** @class */ (function () {\n    function CampaignSurveyTemplate() {\n    }\n    CampaignSurveyTemplate.deserialize = function (input) {\n        var result;\n        if (isNOU(input)) {\n            return null;\n        }\n        switch (input.Type) {\n            case 0 /* Nps5PointStatic */:\n                result = CampaignSurveyTemplateNps5PointStatic.deserialize(input);\n                break;\n            case 1 /* Nps11PointStatic */:\n                result = CampaignSurveyTemplateNps11PointStatic.deserialize(input);\n                break;\n            case 2 /* Fps */:\n                result = CampaignSurveyTemplateFps.deserialize(input);\n                break;\n            case 3 /* Nlqs */:\n                result = CampaignSurveyTemplateNlqs.deserialize(input);\n                break;\n            case 4 /* Nps */:\n                result = CampaignSurveyTemplateNps.deserialize(input);\n                break;\n            case 22 /* GenericMessagingSurface */:\n                result = CampaignSurveyTemplateGenericMessagingSurface.deserialize(input);\n                break;\n            case 5 /* Intercept */:\n                result = CampaignSurveyTemplateIntercept.deserialize(input);\n                break;\n        }\n        if (isNOU(result)) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplate.prototype.validate = function () {\n        if (isNOU(this.activationEvent)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplate;\n}());\nexports.CampaignSurveyTemplate = CampaignSurveyTemplate;\nvar CampaignSurveyTemplateFps = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateFps, _super);\n    // public for UT only\n    function CampaignSurveyTemplateFps() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateFps.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateFps();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        result.content = CampaignSurveyContent.deserialize(input.Content, true /* optionalComponents */);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateFps.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this) || isNOU(this.content)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateFps;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateFps = CampaignSurveyTemplateFps;\nvar CampaignSurveyTemplateNlqs = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateNlqs, _super);\n    // public for UT only\n    function CampaignSurveyTemplateNlqs() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateNlqs.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateNlqs();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        result.content = CampaignSurveyContent.deserialize(input.Content);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateNlqs.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this) || isNOU(this.content)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateNlqs;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateNlqs = CampaignSurveyTemplateNlqs;\nvar CampaignSurveyTemplateNps = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateNps, _super);\n    // public for UT only\n    function CampaignSurveyTemplateNps() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateNps.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateNps();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        result.content = CampaignSurveyContent.deserialize(input.Content);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateNps.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this) || isNOU(this.content)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateNps;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateNps = CampaignSurveyTemplateNps;\nvar CampaignSurveyTemplateNps5PointStatic = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateNps5PointStatic, _super);\n    // public for UT only\n    function CampaignSurveyTemplateNps5PointStatic() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateNps5PointStatic.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateNps5PointStatic();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateNps5PointStatic.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateNps5PointStatic;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateNps5PointStatic = CampaignSurveyTemplateNps5PointStatic;\nvar CampaignSurveyTemplateNps11PointStatic = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateNps11PointStatic, _super);\n    function CampaignSurveyTemplateNps11PointStatic() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateNps11PointStatic.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateNps11PointStatic();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateNps11PointStatic.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateNps11PointStatic;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateNps11PointStatic = CampaignSurveyTemplateNps11PointStatic;\nvar CampaignSurveyTemplateGenericMessagingSurface = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateGenericMessagingSurface, _super);\n    function CampaignSurveyTemplateGenericMessagingSurface() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateGenericMessagingSurface.deserialize = function (input) {\n        if (isNOU(input)) {\n            return null;\n        }\n        var result = new CampaignSurveyTemplateGenericMessagingSurface();\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        result.metadata = CampaignSurveyMetadata.deserialize(input.Metadata);\n        result.maxLaunches = input.MaxLaunches;\n        result.maxLaunchesPerSession = input.MaxLaunchesPerSession;\n        result.preferredLaunchType = input.PreferredLaunchType;\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateGenericMessagingSurface.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this) || isNOU(this.metadata)) {\n            return false;\n        }\n        if ((!isNOU(this.maxLaunches) && (!isNumber(this.maxLaunches) || this.maxLaunches <= 0)) ||\n            (!isNOU(this.maxLaunchesPerSession) && (!isNumber(this.maxLaunchesPerSession) || this.maxLaunchesPerSession <= 0))) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid Multi Launch settings\", this.maxLaunches, this.maxLaunchesPerSession);\n            return false;\n        }\n        // check for valid values\n        if (isNumber(this.maxLaunches) &&\n            isNumber(this.maxLaunchesPerSession) &&\n            this.maxLaunchesPerSession > this.maxLaunches) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid Multi launch settings\", this.maxLaunches, this.maxLaunchesPerSession);\n            return false;\n        }\n        if (!isNOU(this.preferredLaunchType) && !isString(this.preferredLaunchType)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid launcher type\", this.preferredLaunchType);\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateGenericMessagingSurface;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateGenericMessagingSurface = CampaignSurveyTemplateGenericMessagingSurface;\nvar CampaignSurveyTemplateIntercept = /** @class */ (function (_super) {\n    __extends(CampaignSurveyTemplateIntercept, _super);\n    // public for UT only\n    function CampaignSurveyTemplateIntercept() {\n        return _super.call(this) || this;\n    }\n    CampaignSurveyTemplateIntercept.deserialize = function (input) {\n        var result = new CampaignSurveyTemplateIntercept();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\n        result.content = CampaignSurveyContent.deserialize(input.Content);\n        if (!result.validate()) {\n            return null;\n        }\n        return result;\n    };\n    CampaignSurveyTemplateIntercept.prototype.validate = function () {\n        if (!_super.prototype.validate.call(this) || isNOU(this.content)) {\n            return false;\n        }\n        return true;\n    };\n    return CampaignSurveyTemplateIntercept;\n}(CampaignSurveyTemplate));\nexports.CampaignSurveyTemplateIntercept = CampaignSurveyTemplateIntercept;\n// endregion\n// region Campaign Definition\nvar CampaignDefinition = /** @class */ (function () {\n    function CampaignDefinition() {\n    }\n    /**\n     * Method to deserialize a JSON object to class object\n     * @param input: JSON object\n     * Returns result of validation check\n     */\n    CampaignDefinition.deserialize = function (input) {\n        var result = new CampaignDefinition();\n        if (isNOU(input)) {\n            return null;\n        }\n        result.campaignId = input.CampaignId;\n        result.governedChannelType = input.GovernedChannelType;\n        result.startTime = input.StartTimeUtc;\n        result.endTime = input.EndTimeUtc;\n        result.launcherType = input.LauncherType;\n        result.primaryPriority = input.PrimaryPriority;\n        result.tags = input.Tags;\n        var additionalDataRequested = CampaignAdditionalDataRequested.deserialize(input.AdditionalDataRequested);\n        result.additionalDataRequested = additionalDataRequested ? additionalDataRequested.additionalData : [];\n        if (input.SurveyTemplate) {\n            result.surveyTemplate = CampaignSurveyTemplate.deserialize(input.SurveyTemplate);\n        }\n        if (input.NominationScheme) {\n            result.nominationScheme = CampaignNominationScheme.deserialize(input.NominationScheme);\n        }\n        if (input.Scope) {\n            result.scope = CampaignScope.deserialize(input.Scope);\n        }\n        if (!isNOU(input.BusinessLevel)) {\n            result.businessLevel = input.BusinessLevel;\n        }\n        if (!result.validate()) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid definition\", input);\n            return null;\n        }\n        return result;\n    };\n    CampaignDefinition.prototype.validate = function () {\n        var _a, _b;\n        if (isNOU(this.scope)) {\n            this.scope = new CampaignScopeAny();\n        }\n        if (isNOU(this.campaignId) || !isString(this.campaignId)) {\n            return false;\n        }\n        if (!isNumber(this.governedChannelType) || !Utils.isEnumValue(this.governedChannelType, GovernedChannel_1.GovernedChannelType)) {\n            return false;\n        }\n        if (isNOU(this.nominationScheme)) {\n            return false;\n        }\n        if (isNOU(this.surveyTemplate)) {\n            return false;\n        }\n        if (!isNOU(this.launcherType) && !isString(this.launcherType)) {\n            return false;\n        }\n        if (this.launcherType === \"customervoice\" && isNOU((_b = (_a = this.surveyTemplate.content) === null || _a === void 0 ? void 0 : _a.cvSurvey) === null || _b === void 0 ? void 0 : _b.customerVoiceFormId)) {\n            return false;\n        }\n        if (!isNOU(this.primaryPriority) && !isNumber(this.primaryPriority)) {\n            return false;\n        }\n        if (this.tags && !Array.isArray(this.tags)) {\n            return false;\n        }\n        // Campaigns with no start date are effectively disabled, in fact, this is the supported way to stage a definition but have it be turned off\n        if (isNOU(this.startTime)) {\n            this.startTime = getDistantFuture();\n        }\n        else if (isUtcDatetimeString(this.startTime)) {\n            this.startTime = stringToDate(this.startTime);\n        }\n        else {\n            return false;\n        }\n        // Campaigns with no end date are effectively on indefinitely\n        if (isNOU(this.endTime) ||\n            (typeof (this.endTime) === \"string\" && this.endTime === \"\")) {\n            this.endTime = getDistantFuture();\n        }\n        else if (isUtcDatetimeString(this.endTime)) {\n            this.endTime = stringToDate(this.endTime);\n        }\n        else {\n            return false;\n        }\n        return true;\n    };\n    return CampaignDefinition;\n}());\nexports.CampaignDefinition = CampaignDefinition;\n/**\n * Given an array of campaign definitions, returns the valid ones and errors if any are invalid.\n * @param input: JSON object\n * Returns the valid definitions and the error as string if any.\n */\nfunction FilterValidCampaignDefinitions(campaignDefinitions) {\n    var result = [];\n    if (isNOU(campaignDefinitions)) {\n        return { result: result, error: \"Empty\" };\n    }\n    if (!Array.isArray(campaignDefinitions)) {\n        return { result: result, error: \"Not an array\" };\n    }\n    var badIndexes = [];\n    for (var i = 0; i < campaignDefinitions.length; i++) {\n        var definition = campaignDefinitions[i];\n        if (definition) {\n            var newDefinition = CampaignDefinition.deserialize(definition);\n            newDefinition\n                ? result.push(newDefinition)\n                : badIndexes.push(i);\n        }\n        else {\n            badIndexes.push(i);\n        }\n    }\n    var error = badIndexes.length > 0 ? \"Invalid campaign definitions at indexes: \" + badIndexes.toString() : undefined;\n    return { result: result, error: error };\n}\nexports.FilterValidCampaignDefinitions = FilterValidCampaignDefinitions;\nvar FileSystemCampaignDefinitionProvider = /** @class */ (function () {\n    function FileSystemCampaignDefinitionProvider(storage) {\n        if (isNOU(storage)) {\n            throw new Error(\"storage must not be null\");\n        }\n        this.storage = storage;\n    }\n    FileSystemCampaignDefinitionProvider.prototype.load = function () {\n        var definitionString = this.storage.read(IFloodgateStorageProvider.FileType.CampaignDefinitions);\n        if (isNOU(definitionString)) {\n            return [];\n        }\n        var readDefinitions;\n        try {\n            readDefinitions = JSON.parse(definitionString);\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(e.toString());\n            return [];\n        }\n        // This ignores errors in validation for now.\n        return FilterValidCampaignDefinitions(readDefinitions).result;\n    };\n    FileSystemCampaignDefinitionProvider.prototype.loadAsync = function () {\n        var definitions = this.load();\n        return new Promise(function onFulfilled(resolve, reject) {\n            resolve(definitions);\n        });\n    };\n    return FileSystemCampaignDefinitionProvider;\n}());\nexports.FileSystemCampaignDefinitionProvider = FileSystemCampaignDefinitionProvider;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Campaign/CampaignManager.js":
/*!*************************************************************!*\
  !*** ../FloodgateCore/dist/src/Campaign/CampaignManager.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CampaignManager = void 0;\nvar FloodgateEngine_1 = __webpack_require__(/*! ../FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar CampaignDefinitionProvider_1 = __webpack_require__(/*! ./CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\nvar CampaignStateProvider_1 = __webpack_require__(/*! ./CampaignStateProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignStateProvider.js\");\nvar CampaignSurveyFactory_1 = __webpack_require__(/*! ./CampaignSurveyFactory */ \"../FloodgateCore/dist/src/Campaign/CampaignSurveyFactory.js\");\nvar Constants_1 = __webpack_require__(/*! ../Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar ISurveyInfo_1 = __webpack_require__(/*! ../ISurveyInfo */ \"../FloodgateCore/dist/src/ISurveyInfo.js\");\nvar getDistantFuture = Utils.getDistantFuture, getDistantPast = Utils.getDistantPast, isArray = Utils.isArray, isNOU = Utils.isNOU;\n/**\n * The standard campaign manager implementation.\n */\nvar CampaignManager = /** @class */ (function () {\n    function CampaignManager(stateProvider, definitionProviders, stringProvider, environmentProvider, currentBuildNumber, currentDate, userFactsProvider) {\n        if (!stateProvider) {\n            throw new Error(\"stateProvider must not be null\");\n        }\n        if (!isArray(definitionProviders)) {\n            throw new Error(\"definitionProviders is either null or not an array type\");\n        }\n        if (!stringProvider) {\n            throw new Error(\"stringProvider must not be null\");\n        }\n        if (isNOU(currentBuildNumber)) {\n            throw new Error(\"currentBuildNumber must not be null\");\n        }\n        this.campaignStates = {};\n        this.campaignDefinitions = {};\n        this.userFacts = [];\n        this.stateProvider = stateProvider;\n        this.definitionProviders = definitionProviders;\n        this.stringProvider = stringProvider;\n        this.userFactsProvider = userFactsProvider;\n        this.environmentProvider = environmentProvider; // Can be null\n        this.currentBuildNumber = currentBuildNumber;\n        currentDate = currentDate ? currentDate : new Date();\n    }\n    CampaignManager.isStateUpForNomination = function (state, definition, date, buildNumber) {\n        if (!state || !definition) {\n            return false;\n        }\n        date = date ? date : new Date();\n        // Check manual override\n        if (state.ForceCandidacy) {\n            return true;\n        }\n        // Figure out which duration we're using based on whether or not the user triggered the survey\n        var campaignCooldownDuration = definition.nominationScheme.getCampaignCooldown(state.IsCandidate && state.DidCandidateTriggerSurvey);\n        if (!campaignCooldownDuration) {\n            return false;\n        }\n        // First check for build-based rules. Eventually this could get more complex if we supported counting differently seen build numbers\n        if (CampaignManager.hasBuildChangeDurationElapsed(campaignCooldownDuration, state.LastNominationBuildNumber, buildNumber)) {\n            return true;\n        }\n        // Next check date rules\n        return CampaignManager.hasTimeIntervalDurationElapsed(campaignCooldownDuration, state.getCooldownStartDate(), date);\n    };\n    CampaignManager.isDateInRange = function (date, startDate, endDate) {\n        date = date ? date : new Date();\n        startDate = startDate ? startDate : getDistantPast();\n        endDate = endDate ? endDate : getDistantFuture();\n        // Check Start/Expire date range\n        if (startDate.getTime() <= date.getTime() && endDate.getTime() >= date.getTime()) {\n            return true;\n        }\n        return false;\n    };\n    CampaignManager.hasTimeIntervalDurationElapsed = function (duration, startDate, date) {\n        if (isNOU(duration) || !(duration instanceof CampaignDefinitionProvider_1.CampaignDurationTimeInterval)) {\n            return false;\n        }\n        if (!startDate || !date) {\n            return false;\n        }\n        var endDate = Utils.addSecondsWithoutOverflow(startDate, duration.intervalSeconds);\n        return date.getTime() >= endDate.getTime();\n    };\n    CampaignManager.hasBuildChangeDurationElapsed = function (duration, startBuild, build) {\n        if (isNOU(duration) || !(duration instanceof CampaignDefinitionProvider_1.CampaignDurationSingleBuildChange)) {\n            return false;\n        }\n        if (isNOU(startBuild) || isNOU(build)) {\n            return (startBuild === null) !== (build === null);\n        }\n        return !(startBuild === build);\n    };\n    CampaignManager.isCampaignInScope = function (definition, date, environmentProvider, userFactsProvider) {\n        if (!definition) {\n            return false;\n        }\n        date = date ? date : new Date();\n        // Check Start/Expire date range\n        if (!CampaignManager.isDateInRangeWithDefinition(date, definition)) {\n            return false;\n        }\n        if (definition.scope) {\n            if (definition.scope instanceof CampaignDefinitionProvider_1.CampaignScopeUserFactAny || definition.scope instanceof CampaignDefinitionProvider_1.CampaignScopeUserFactAll) {\n                definition.scope.setUserFactsProvider(userFactsProvider);\n            }\n            if (definition.scope instanceof CampaignDefinitionProvider_1.CampaignScopeEnvironmentCrossProduct) {\n                definition.scope.setEnvironmentProvider(environmentProvider);\n            }\n            if (!definition.scope.isInScope()) {\n                return false;\n            }\n        }\n        // If we get here, the definition is relevant\n        return true;\n    };\n    CampaignManager.isDateInRangeWithDefinition = function (date, definition) {\n        if (!definition) {\n            return false;\n        }\n        date = date ? date : new Date();\n        return CampaignManager.isDateInRange(date, \n        // null start dates should be impossible, but if set, should mean the campaign is disabled\n        definition.startTime ? definition.startTime : getDistantFuture(), definition.endTime);\n    };\n    // @Override\n    CampaignManager.prototype.getActiveSurveys = function () {\n        var surveys = {};\n        var prioritizedCampaigns = this.getPrioritizedCampaigns();\n        for (var key in this.campaignStates) {\n            if (this.campaignStates.hasOwnProperty(key)) {\n                var state = this.campaignStates[key];\n                if (!state.IsCandidate) {\n                    continue;\n                }\n                // This is a requirement because we keep some otherwise \"stale\" campaigns around for the save routine\n                var definition = prioritizedCampaigns[state.CampaignId];\n                if (!definition) {\n                    continue;\n                }\n                var survey = CampaignSurveyFactory_1.CampaignSurveyFactory.makeSurvey(state, definition, this.stringProvider);\n                if (!survey) {\n                    continue;\n                }\n                surveys[survey.getSurveyInfo().getId()] = survey;\n            }\n        }\n        return surveys;\n    };\n    // @Override\n    CampaignManager.prototype.onCampaignSurveyActivated = function (campaignId, takenDate, isSurveyComplete) {\n        var state = this.campaignStates[campaignId];\n        if (!state) {\n            return;\n        }\n        takenDate = takenDate ? takenDate : new Date();\n        var cooldownSeconds = this.campaignDefinitions[campaignId].nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\n        state.markCurrentSurveyTakenOnDate(takenDate, cooldownSeconds, isSurveyComplete);\n        this.saveCurrentState();\n    };\n    CampaignManager.prototype.getCampaignStates = function () {\n        return this.campaignStates;\n    };\n    // @Override\n    CampaignManager.prototype.getCampaignDefinitions = function () {\n        return this.campaignDefinitions;\n    };\n    CampaignManager.prototype.getUserFacts = function () {\n        return this.userFacts;\n    };\n    // region ISurveyClient methods\n    // @Override\n    CampaignManager.prototype.onSurveyActivated = function (surveyInfo, isSurveyComplete) {\n        if (!surveyInfo) {\n            return;\n        }\n        this.onCampaignSurveyActivated(surveyInfo.getBackEndId(), new Date(), isSurveyComplete);\n    };\n    // @Override\n    CampaignManager.prototype.refreshSurveyDefinitions = function (channelTypes, date) {\n        this.refreshSurveyDefinitionsPrivate(channelTypes, (date ? date : new Date()));\n    };\n    // @Override\n    CampaignManager.prototype.refreshSurveyDefinitionsAsync = function (channelTypes, date) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.refreshSurveyDefinitionsPrivateAsync(channelTypes, (date ? date : new Date())).then(function onFulfilled() {\n                resolve();\n            }).catch(function OnRejected(errReason) {\n                reject(errReason);\n            });\n        });\n    };\n    // @Override\n    CampaignManager.prototype.getAppSurveys = function () {\n        return this.getActiveSurveys();\n    };\n    // @Override\n    CampaignManager.prototype.saveCurrentState = function () {\n        // Sort by campaignId, ascending for uniformity\n        var states = Utils.makeArrayFromObjectValuesSortedByKeyString(this.campaignStates);\n        this.stateProvider.save(states);\n    };\n    // endregion\n    CampaignManager.prototype.refreshSurveyDefinitionsPrivate = function (channelTypes, date) {\n        this.campaignStates = {};\n        this.campaignDefinitions = {};\n        this.userFacts = [];\n        this.loadAndFilterCampaignData(date, channelTypes);\n        this.evaluateCampaigns(date);\n    };\n    CampaignManager.prototype.refreshSurveyDefinitionsPrivateAsync = function (channelTypes, date) {\n        this.campaignStates = {};\n        this.campaignDefinitions = {};\n        this.userFacts = [];\n        var thisCampaignManager = this;\n        return new Promise(function (resolve, reject) {\n            thisCampaignManager.loadAndFilterCampaignDataAsync(date, channelTypes).then(function onFulfilled() {\n                thisCampaignManager.evaluateCampaigns(date);\n                resolve();\n            }).catch(function OnRejected(errReason) {\n                reject(errReason);\n            });\n        });\n    };\n    /**\n     * Load and filter the campaigns definitions and states\n     */\n    CampaignManager.prototype.loadAndFilterCampaignDataAsync = function (currentDate, channelTypes) {\n        currentDate = currentDate ? currentDate : new Date();\n        var loadedDefinitions = [];\n        var promises = [];\n        var userFactsPromise = this.userFactsProvider && this.userFactsProvider.loadAsync();\n        for (var _i = 0, _a = Object.keys(this.definitionProviders); _i < _a.length; _i++) {\n            var i = _a[_i];\n            var provider = this.definitionProviders[i];\n            var promise = provider && provider.loadAsync();\n            if (!isNOU(promise)) {\n                // Promise.all fails even if one promise fails.\n                // We want to ignore the promise that failed and continue with the ones\n                // those are succesful, hence overriding the catch to always resolve.\n                // responsibility of logging failures should be with the provider.\n                promise = promise.catch(function () {\n                    FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider\");\n                    Promise.resolve();\n                });\n                promises.push(promise);\n            }\n        }\n        var thisCampaignManager = this;\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function onFulfilled(values) {\n                for (var _i = 0, _a = Object.keys(values); _i < _a.length; _i++) {\n                    var i = _a[_i];\n                    var campaignDefinitions = values[i];\n                    if (isArray(campaignDefinitions)) {\n                        // If there are campaign defintions with duplicate campaign Id's\n                        // Floodgate will load the last one it found. FilterCampaignData does this filteration\n                        loadedDefinitions = loadedDefinitions.concat(campaignDefinitions);\n                    }\n                }\n                var setUserFacts = function (userFacts) {\n                    thisCampaignManager.userFacts = userFacts || [];\n                    thisCampaignManager.FilterCampaignData(currentDate, channelTypes, loadedDefinitions);\n                    resolve();\n                };\n                // Before filtering and evaluating the campaign definitions,\n                // wait until the user facts are loaded as they will be used in evaluating campaign scopes\n                if (!isNOU(userFactsPromise)) {\n                    userFactsPromise.then(function (userFacts) {\n                        setUserFacts(userFacts);\n                    }).catch(function () {\n                        // this should never happen as user facts promise will always be resolved by the user facts provider\n                        FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsLoad.Failed, \"Failed to load from user facts provider\");\n                        setUserFacts();\n                    });\n                }\n                else {\n                    setUserFacts();\n                }\n            }).catch(function OnRejected(error) {\n                // this should never happen as Promise.all will always be resolved\n                // because of hack at the top of the function.\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider\");\n            });\n        });\n    };\n    CampaignManager.prototype.loadAndFilterCampaignData = function (currentDate, channelTypes) {\n        currentDate = currentDate ? currentDate : new Date();\n        var loadedDefinitions = [];\n        for (var _i = 0, _a = Object.keys(this.definitionProviders); _i < _a.length; _i++) {\n            var index = _a[_i];\n            try {\n                var definitions = this.definitionProviders[index] && this.definitionProviders[index].load();\n                if (isArray(definitions)) {\n                    // If there are campaign defintions with duplicate campaign Id's\n                    // Floodgate will load the last one it found. FilterCampaignData does this filteration\n                    loadedDefinitions = loadedDefinitions.concat(definitions);\n                }\n            }\n            catch (error) {\n                // Log error, but continue with other providers\n                // It should be the responsibility of provider to log detailed errors\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider. \" + error.toString());\n            }\n        }\n        // Load the user facts before all the campaign definitions are evaluated\n        try {\n            this.userFacts = (this.userFactsProvider && this.userFactsProvider.load()) || [];\n        }\n        catch (error) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsLoad.Failed, \"Failed to load from user facts provider. \" + error);\n        }\n        this.FilterCampaignData(currentDate, channelTypes, loadedDefinitions);\n    };\n    /**\n     * Load and filter the campaigns definitions and states\n     */\n    CampaignManager.prototype.FilterCampaignData = function (currentDate, channelTypes, loadedDefinitions) {\n        var loadedDefinitionsMap = {};\n        // Load filtered campaign definitions\n        for (var key in loadedDefinitions) {\n            if (loadedDefinitions.hasOwnProperty(key)) {\n                var definition = loadedDefinitions[key];\n                loadedDefinitionsMap[definition.campaignId] = definition;\n                if (channelTypes &&\n                    (channelTypes.indexOf(definition.governedChannelType) < 0) &&\n                    (definition.businessLevel !== ISurveyInfo_1.BusinessLevel.Critical)) {\n                    continue;\n                }\n                if (!CampaignManager.isCampaignInScope(definition, currentDate, this.environmentProvider, this.userFactsProvider)) {\n                    continue;\n                }\n                this.campaignDefinitions[definition.campaignId] = definition;\n            }\n        }\n        // Load campaign state, filtering out the expired definitions\n        var loadedStates = this.stateProvider.load();\n        var staleLoadedStates = [];\n        for (var key in loadedStates) {\n            if (loadedStates.hasOwnProperty(key)) {\n                var state = loadedStates[key];\n                if (!this.campaignDefinitions.hasOwnProperty(state.CampaignId)) {\n                    staleLoadedStates.push(state);\n                }\n                this.campaignStates[state.CampaignId] = state;\n            }\n        }\n        /*\n         * Stale State data cleanup\n         * State needs to be cleaned up when:\n         * 1) The campaign has expired\n         * 2) The campaign is no longer present in the definitions (think ECS or other outages or very old expirations)\n         *    In this case the state should still be cleaned up on it's reelection date\n         * 3) When the user is out of scope (for an otherwise active campaign) and is up for nomination\n\r\n         * This optimizes the user experience in case the campaign pops up or gets renewed when we would have preferred the user remain in cool down\n\r\n         * 2&3 are basically the same, and 1 is a special case optimization on top of 2&3 for earlier clean up\n\r\n         * To do 2 & 3, we just look at states with no matching definition (after filtering), and reject them if they are past their nomination period\n         * To do 1, we just need to keep a list/hash of the definitions that we filtered out this load cycle, specifically for expiration dates, and bypass\n         * the cool down \"wait\" for these specifically\n\r\n         * For now, allowing some \"grace\" for \"missing\"/\"blippy\" campaign definitions (in case they pop in and out of ECS) by deferring missing\n         * deletion by a delay-time specified by the original campaign.\n         */\n        for (var key in staleLoadedStates) {\n            if (staleLoadedStates.hasOwnProperty(key)) {\n                var state = staleLoadedStates[key];\n                if (!state) {\n                    continue;\n                }\n                var definition = loadedDefinitionsMap[state.CampaignId];\n                var shouldRemove = false;\n                if (!definition) {\n                    if (state.LastNominationTimeUtc.getTime() <= Utils.subtractSecondsWithoutOverflow(currentDate, state.DeleteAfterSecondsWhenStale).getTime()) {\n                        shouldRemove = true;\n                    }\n                }\n                else if (CampaignManager.isStateUpForNomination(state, definition, currentDate, this.currentBuildNumber)) {\n                    shouldRemove = true;\n                }\n                // The next time we write to storage, these will be removed\n                if (shouldRemove) {\n                    delete this.campaignStates[state.CampaignId];\n                }\n            }\n        }\n    };\n    // Filter lower priority campaigns that are on same channel and have a matching tag\n    CampaignManager.prototype.getPrioritizedCampaigns = function () {\n        var _this = this;\n        var prioritizedCampaigns = {};\n        // build <tagId_channel, campaign[]> map\n        var matchingTagCampaigns = {};\n        Object.keys(this.campaignDefinitions || []).forEach(function (key) {\n            var definition = _this.campaignDefinitions[key];\n            prioritizedCampaigns[key] = definition;\n            // if tags are not defined, use empty tag to fallback to channel level aggregation\n            var definitionTags = definition.tags && definition.tags.length > 0 ? definition.tags : [\"\"];\n            definitionTags.forEach(function (tagId) {\n                var mapKey = tagId + \"_\" + definition.governedChannelType;\n                matchingTagCampaigns[mapKey] = matchingTagCampaigns[mapKey] || [];\n                matchingTagCampaigns[mapKey].push(definition);\n            });\n        });\n        // remove lower priority campaigns\n        Object.keys(matchingTagCampaigns).forEach(function (key) {\n            var definitions = matchingTagCampaigns[key];\n            if (definitions.length <= 1) {\n                return;\n            }\n            // Get definition that has max priority value (0/null/undefined has highest prioirty)\n            var maxPriorityDefinition = definitions.reduce(function (prev, cur) {\n                var curPriority = cur.primaryPriority || 0;\n                var prevPriority = prev.primaryPriority || 0;\n                return curPriority < prevPriority ? cur : prev;\n            }, definitions[0]);\n            var maxPriority = maxPriorityDefinition.primaryPriority;\n            if (isNOU(maxPriority)) {\n                // nothing to filter because all priorities are null/undefined\n                return;\n            }\n            // delete lower priority campaigns while preserving all the matching higher priority items\n            definitions.forEach(function (current) {\n                var currentPriority = current.primaryPriority;\n                // for mso compatability ignore campaigns without priority set so that they are always considered\n                if (!isNOU(current.primaryPriority) && currentPriority > maxPriority) {\n                    delete prioritizedCampaigns[current.campaignId];\n                }\n            });\n        });\n        return prioritizedCampaigns;\n    };\n    /**\n     * Given the loaded campaign definitions and states from previous sessions, run anything up for nomination\n     */\n    CampaignManager.prototype.evaluateCampaigns = function (currentDate) {\n        // Loop through campaigns definitions, and update their state if necessary\n        currentDate = currentDate ? currentDate : new Date();\n        for (var key in this.campaignDefinitions) {\n            if (this.campaignDefinitions.hasOwnProperty(key)) {\n                var definition = this.campaignDefinitions[key];\n                var state = this.campaignStates[definition.campaignId];\n                if (!state || CampaignManager.isStateUpForNomination(state, definition, currentDate, this.currentBuildNumber)) {\n                    var lastSurveyId = state ? state.LastSurveyId : \"\";\n                    var lastSurveyStartTime = state ? state.LastSurveyStartTimeUtc : getDistantPast();\n                    var lastSurveyExpirationTime = state ? state.LastSurveyExpirationTimeUtc : getDistantPast();\n                    var lastSurveyActivatedTime = state ? state.LastSurveyActivatedTimeUtc : getDistantPast();\n                    var lastCooldownEndTimeUtc = state ? state.LastCooldownEndTimeUtc : getDistantPast();\n                    // Run the nomination\n                    var isCandidate = (state && state.ForceCandidacy) || definition.nominationScheme.evaluateNominationRules();\n                    if (isCandidate) {\n                        // Make new survey properties for the next call to get the active surveys\n                        lastSurveyId = Utils.guid();\n                        lastSurveyStartTime = definition.nominationScheme.calculateSurveyStartTimeFromDate(currentDate);\n                        lastSurveyExpirationTime = definition.nominationScheme.calculateSurveyExpirationTimeFromSurveyStartTime(lastSurveyStartTime);\n                    }\n                    var newState = new CampaignStateProvider_1.CampaignState(definition.campaignId, currentDate, this.currentBuildNumber, definition.nominationScheme.getActiveSurveyTimeIntervalSeconds(), false, isCandidate, false, lastSurveyActivatedTime, lastSurveyId, lastSurveyStartTime, lastSurveyExpirationTime, lastCooldownEndTimeUtc);\n                    // Save the new state to our local cache\n                    this.campaignStates[newState.CampaignId] = newState;\n                }\n            }\n        }\n    };\n    return CampaignManager;\n}());\nexports.CampaignManager = CampaignManager;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Campaign/CampaignManager.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Campaign/CampaignStateProvider.js":
/*!*******************************************************************!*\
  !*** ../FloodgateCore/dist/src/Campaign/CampaignStateProvider.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileBasedCampaignStateProvider = exports.HostBasedCampaignStateProvider = exports.CampaignStateProviderFactory = exports.CampaignState = void 0;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ../Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nvar Constants_1 = __webpack_require__(/*! ../Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ../FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar StateProviderHelpers = __webpack_require__(/*! ../StateProviderHelpers */ \"../FloodgateCore/dist/src/StateProviderHelpers.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar FileType = IFloodgateStorageProvider.FileType;\nvar getDistantPast = Utils.getDistantPast, isBoolean = Utils.isBoolean, isDate = Utils.isDate, isNOU = Utils.isNOU, isString = Utils.isString, isUtcDatetimeString = Utils.isUtcDatetimeString, stringToDate = Utils.stringToDate;\nvar CampaignState = /** @class */ (function () {\n    function CampaignState(campaignId, lastNominationTime, lastNominationBuildNumber, deleteAfterSecondsWhenStale, ForceCandidacy, isCandidate, didCandidateTriggerSurvey, lastSurveyActivatedTime, lastSurveyId, lastSurveyStartTime, lastSurveyExpirationTime, lastCooldownEndTimeUtc) {\n        this.CampaignId = campaignId;\n        this.LastNominationTimeUtc = lastNominationTime;\n        this.LastNominationBuildNumber = lastNominationBuildNumber;\n        this.DeleteAfterSecondsWhenStale = deleteAfterSecondsWhenStale;\n        this.ForceCandidacy = ForceCandidacy;\n        this.IsCandidate = isCandidate;\n        this.DidCandidateTriggerSurvey = didCandidateTriggerSurvey;\n        this.LastSurveyActivatedTimeUtc = lastSurveyActivatedTime;\n        this.LastSurveyId = lastSurveyId;\n        this.LastSurveyStartTimeUtc = lastSurveyStartTime;\n        this.LastSurveyExpirationTimeUtc = lastSurveyExpirationTime;\n        this.LastCooldownEndTimeUtc = lastCooldownEndTimeUtc;\n        if (!this.validate()) {\n            throw new Error(\"Constructor arguments are not valid\");\n        }\n    }\n    /**\n     * Method to deserialize a JSON object to class object\n     * @param input: JSON object\n     * Returns class object\n     */\n    CampaignState.deserialize = function (input) {\n        var result;\n        if (!input) {\n            return null;\n        }\n        try {\n            result = new CampaignState(input.CampaignId, input.LastNominationTimeUtc, input.LastNominationBuildNumber, input.DeleteAfterSecondsWhenStale, false, // ForceCandidacy\n            input.IsCandidate, input.DidCandidateTriggerSurvey, input.LastSurveyActivatedTimeUtc, input.LastSurveyId, input.LastSurveyStartTimeUtc, input.LastSurveyExpirationTimeUtc, input.LastCooldownEndTimeUtc);\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.CampaignState.Deserialize.Failed, { ErrorMessage: e.toString() });\n            return null;\n        }\n        return result;\n    };\n    CampaignState.prototype.validate = function () {\n        if (!this.CampaignId || !isString(this.CampaignId)) {\n            return false;\n        }\n        if (isNOU(this.LastNominationBuildNumber)\n            || !isString(this.LastNominationBuildNumber)) {\n            return false;\n        }\n        if (!Utils.isNumber(this.DeleteAfterSecondsWhenStale) || this.DeleteAfterSecondsWhenStale < 0) {\n            return false;\n        }\n        if (!isBoolean(this.IsCandidate) || !isBoolean(this.DidCandidateTriggerSurvey)) {\n            return false;\n        }\n        if (this.IsCandidate) {\n            // Disallow the following null's if isCandidate == true\n            if (isNOU(this.LastSurveyStartTimeUtc) || isNOU(this.LastSurveyExpirationTimeUtc)) {\n                return false;\n            }\n            // LastSurveyId could be \"\"\n            if (!isString(this.LastSurveyId)) {\n                return false;\n            }\n        }\n        if (this.DidCandidateTriggerSurvey) {\n            // Disallow the following null's if didCandidateTriggerSurvey == true\n            if (isNOU(this.LastSurveyActivatedTimeUtc)) {\n                return false;\n            }\n        }\n        if (isNOU(this.LastSurveyId)) {\n            this.LastSurveyId = \"\";\n        }\n        else if (!isString(this.LastSurveyId)) {\n            return false;\n        }\n        // LastNominationTime does not allow null\n        if (isUtcDatetimeString(this.LastNominationTimeUtc)) {\n            this.LastNominationTimeUtc = stringToDate(this.LastNominationTimeUtc);\n            // invalidate if it's not a Date object\n        }\n        else if (!isDate(this.LastNominationTimeUtc)) {\n            return false;\n        }\n        // Set value to distance past if value not provided\n        if (isNOU(this.LastSurveyActivatedTimeUtc)) {\n            this.LastSurveyActivatedTimeUtc = getDistantPast();\n            // check if it's UTC date time string, possibly coming from deserialize method\n        }\n        else if (isUtcDatetimeString(this.LastSurveyActivatedTimeUtc)) {\n            this.LastSurveyActivatedTimeUtc = stringToDate(this.LastSurveyActivatedTimeUtc);\n            // invalidate if it's not a Date object\n        }\n        else if (!isDate(this.LastSurveyActivatedTimeUtc)) {\n            return false;\n        }\n        // Set value to distance past if value not provided\n        if (isNOU(this.LastSurveyStartTimeUtc)) {\n            this.LastSurveyStartTimeUtc = getDistantPast();\n            // check if it's string, possibly coming from deserialize method\n        }\n        else if (isUtcDatetimeString(this.LastSurveyStartTimeUtc)) {\n            this.LastSurveyStartTimeUtc = stringToDate(this.LastSurveyStartTimeUtc);\n            // invalidate if it's not a Date object\n        }\n        else if (!isDate(this.LastSurveyStartTimeUtc)) {\n            return false;\n        }\n        // Set value to distance past if value not provided\n        if (isNOU(this.LastSurveyExpirationTimeUtc)) {\n            this.LastSurveyExpirationTimeUtc = getDistantPast();\n            // check if it's string, possibly coming from deserialize method\n        }\n        else if (isUtcDatetimeString(this.LastSurveyExpirationTimeUtc)) {\n            this.LastSurveyExpirationTimeUtc = stringToDate(this.LastSurveyExpirationTimeUtc);\n        }\n        else if (!isDate(this.LastSurveyExpirationTimeUtc)) {\n            return false;\n        }\n        // Set value to distance past if value not provided\n        if (isNOU(this.LastCooldownEndTimeUtc)) {\n            this.LastCooldownEndTimeUtc = getDistantPast();\n            // check if it's string, possibly coming from deserialize method\n        }\n        else if (isUtcDatetimeString(this.LastCooldownEndTimeUtc)) {\n            this.LastCooldownEndTimeUtc = stringToDate(this.LastCooldownEndTimeUtc);\n        }\n        else if (!isDate(this.LastCooldownEndTimeUtc)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Record that the current survey was taken on this date\n     *\n     * @param date date\n     * @param cooldownSeconds number\n     */\n    CampaignState.prototype.markCurrentSurveyTakenOnDate = function (date, cooldownSeconds, isSurveyComplete) {\n        this.DidCandidateTriggerSurvey = isSurveyComplete;\n        this.LastSurveyActivatedTimeUtc = date != null ? date : new Date();\n        this.LastCooldownEndTimeUtc = Utils.addSecondsWithoutOverflow(this.LastSurveyActivatedTimeUtc, cooldownSeconds);\n    };\n    CampaignState.prototype.getCooldownStartDate = function () {\n        if (!this.IsCandidate) {\n            return this.LastNominationTimeUtc;\n        }\n        if (this.DidCandidateTriggerSurvey) {\n            return this.LastSurveyActivatedTimeUtc;\n        }\n        // In practice this wil be equal to lastNominationTime, but\n        // distribution models like a ramp effectively cause us to\n        // shift our \"effective nomination date\" forward with the survey start date\n        return this.LastSurveyStartTimeUtc;\n    };\n    return CampaignState;\n}());\nexports.CampaignState = CampaignState;\nvar CampaignStateProviderFactory = /** @class */ (function () {\n    function CampaignStateProviderFactory() {\n    }\n    CampaignStateProviderFactory.make = function (fileBasedStorage, hostBasedStorage) {\n        if (hostBasedStorage) {\n            return new HostBasedCampaignStateProvider(fileBasedStorage, hostBasedStorage);\n        }\n        return new FileBasedCampaignStateProvider(fileBasedStorage);\n    };\n    return CampaignStateProviderFactory;\n}());\nexports.CampaignStateProviderFactory = CampaignStateProviderFactory;\n/**\n * Class representing what is stored in the file.\n */\nvar FileData = /** @class */ (function () {\n    function FileData() {\n    }\n    return FileData;\n}());\nvar HostBasedCampaignStateProvider = /** @class */ (function () {\n    function HostBasedCampaignStateProvider(fileBasedStorage, hostBasedStorage) {\n        if (!hostBasedStorage) {\n            throw new Error(\"host-based storage must not be null\");\n        }\n        this.hostBasedStorage = hostBasedStorage;\n        // file-based provider is optional\n        if (fileBasedStorage) {\n            this.fileBasedStateProvider = new FileBasedCampaignStateProvider(fileBasedStorage);\n        }\n    }\n    // @Override\n    HostBasedCampaignStateProvider.prototype.load = function () {\n        var statesFromHost = this.getStatesFromHost();\n        var statesFromFile;\n        if (this.fileBasedStateProvider) {\n            statesFromFile = this.fileBasedStateProvider.load();\n        }\n        var StateCollections = StateProviderHelpers.MergeAndUpdateCampaignStates(statesFromFile, statesFromHost);\n        return StateCollections.find(0 /* Merged */);\n    };\n    // @Override\n    HostBasedCampaignStateProvider.prototype.save = function (campaignStates) {\n        var _this = this;\n        if (!campaignStates) {\n            return;\n        }\n        var statesFromHost = this.getStatesFromHost();\n        var StateCollections = StateProviderHelpers.MergeAndUpdateCampaignStates(campaignStates, statesFromHost);\n        var toBeUpdatedStates = StateCollections.find(1 /* ToBeUpdated */);\n        var mergedStates = StateCollections.find(0 /* Merged */);\n        // write delta_data to host\n        if (toBeUpdatedStates) {\n            toBeUpdatedStates.forEach(function (state) {\n                var stateValue = StateProviderHelpers.makeSettingItemValue(JSON.stringify(state));\n                _this.hostBasedStorage.upsertSettingItem(FileType[FileType.CampaignStates], state.CampaignId, stateValue);\n            });\n        }\n        // Write merged data to File\n        if (this.fileBasedStateProvider) {\n            this.fileBasedStateProvider.save(mergedStates);\n        }\n    };\n    HostBasedCampaignStateProvider.prototype.getStatesFromHost = function () {\n        var states = [];\n        var settings = this.hostBasedStorage.readSettingList(FileType[FileType.CampaignStates]);\n        for (var key in settings) {\n            if (!settings.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = settings[key];\n            var dataString = StateProviderHelpers.extractSettingItemValueSubString(value);\n            var itemObject = {};\n            try {\n                itemObject = JSON.parse(dataString);\n                var newState = CampaignState.deserialize(itemObject);\n                if (newState) {\n                    states.push(newState);\n                }\n            }\n            catch (e) {\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.HostBasedCampaignStateProvider.GetStatesFromHost.Failed, { ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\n            }\n        }\n        return states;\n    };\n    return HostBasedCampaignStateProvider;\n}());\nexports.HostBasedCampaignStateProvider = HostBasedCampaignStateProvider;\nvar FileBasedCampaignStateProvider = /** @class */ (function () {\n    function FileBasedCampaignStateProvider(storage) {\n        if (!storage) {\n            throw new Error(\"storage must not be null\");\n        }\n        this.storage = storage;\n    }\n    // @Override\n    FileBasedCampaignStateProvider.prototype.load = function () {\n        var readString = this.storage.read(FileType.CampaignStates);\n        if (!readString) {\n            return [];\n        }\n        var fileData;\n        try {\n            fileData = JSON.parse(readString);\n            var result_1 = [];\n            if (fileData && fileData.CampaignStates) {\n                fileData.CampaignStates.forEach(function (state) {\n                    var newState = CampaignState.deserialize(state);\n                    if (newState) {\n                        result_1.push(newState);\n                    }\n                });\n            }\n            return result_1;\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FileBasedCampaignStateProvider.Load.Failed, { ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + readString });\n            return [];\n        }\n    };\n    // @Override\n    FileBasedCampaignStateProvider.prototype.save = function (campaignStates) {\n        if (!campaignStates) {\n            return;\n        }\n        var fileData = new FileData();\n        fileData.CampaignStates = campaignStates;\n        var writeString = JSON.stringify(fileData);\n        this.storage.write(FileType.CampaignStates, writeString);\n    };\n    return FileBasedCampaignStateProvider;\n}());\nexports.FileBasedCampaignStateProvider = FileBasedCampaignStateProvider;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Campaign/CampaignStateProvider.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Campaign/CampaignSurveyFactory.js":
/*!*******************************************************************!*\
  !*** ../FloodgateCore/dist/src/Campaign/CampaignSurveyFactory.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CampaignSurveyFactory = void 0;\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar SurveyEvents_1 = __webpack_require__(/*! ../SurveyEvents */ \"../FloodgateCore/dist/src/SurveyEvents.js\");\nvar SurveyMetadata_1 = __webpack_require__(/*! ../SurveyMetadata */ \"../FloodgateCore/dist/src/SurveyMetadata.js\");\nvar FpsSurvey = __webpack_require__(/*! ../Surveys/FpsSurvey */ \"../FloodgateCore/dist/src/Surveys/FpsSurvey.js\");\nvar GenericMessagingSurfaceSurvey = __webpack_require__(/*! ../Surveys/GenericMessagingSurfaceSurvey */ \"../FloodgateCore/dist/src/Surveys/GenericMessagingSurfaceSurvey.js\");\nvar InterceptSurvey = __webpack_require__(/*! ../Surveys/InterceptSurvey */ \"../FloodgateCore/dist/src/Surveys/InterceptSurvey.js\");\nvar NlqsSurvey = __webpack_require__(/*! ../Surveys/NlqsSurvey */ \"../FloodgateCore/dist/src/Surveys/NlqsSurvey.js\");\nvar NpsSurvey = __webpack_require__(/*! ../Surveys/NpsSurvey */ \"../FloodgateCore/dist/src/Surveys/NpsSurvey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ../Surveys/SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar CampaignDefinitionProvider_1 = __webpack_require__(/*! ./CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\nvar dateToShortUtcString = Utils.dateToShortUtcString, isNOU = Utils.isNOU;\n/**\n * Contains methods to take a campaign definition + state and generate an ISurvey\n */\nvar CampaignSurveyFactory = /** @class */ (function () {\n    function CampaignSurveyFactory() {\n    }\n    CampaignSurveyFactory.makeSurvey = function (state, definition, stringProvider) {\n        if (!state || !definition || !definition.surveyTemplate || !stringProvider) {\n            return null;\n        }\n        var surveyDataSource = CampaignSurveyFactory.makeSurveyDataSourceData(state, definition);\n        var surveyModel = definition.surveyTemplate;\n        if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateNps5PointStatic) {\n            return NpsSurvey.make5Point(surveyDataSource, stringProvider);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateNps11PointStatic) {\n            return NpsSurvey.make11Point(surveyDataSource, stringProvider);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateFps) {\n            return FpsSurvey.makeFps(surveyDataSource, stringProvider, surveyModel);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateNlqs) {\n            return NlqsSurvey.makeNlqs(surveyDataSource, stringProvider, surveyModel);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateNps) {\n            return NpsSurvey.makeCustom(surveyDataSource, stringProvider, surveyModel);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateGenericMessagingSurface) {\n            return GenericMessagingSurfaceSurvey.makeCustom(surveyDataSource);\n        }\n        else if (surveyModel instanceof CampaignDefinitionProvider_1.CampaignSurveyTemplateIntercept) {\n            return InterceptSurvey.makeIntercept(surveyDataSource, stringProvider, surveyModel);\n        }\n        else {\n            return null;\n        }\n    };\n    CampaignSurveyFactory.makeSurveyDataSourceData = function (state, definition) {\n        if (!state || !definition || !definition.surveyTemplate) {\n            return null;\n        }\n        var surveyModel = definition.surveyTemplate;\n        var surveyData = new SurveyDataSource.SurveyDataSourceData();\n        surveyData.activationEvent = CampaignSurveyFactory.makeEvent(state, surveyModel.activationEvent);\n        surveyData.metadata = CampaignSurveyFactory.makeMetadata(surveyModel.metadata);\n        surveyData.id = state.LastSurveyId;\n        surveyData.backEndIdentifier = state.CampaignId;\n        surveyData.expirationTimeUtc = dateToShortUtcString(state.LastSurveyExpirationTimeUtc);\n        surveyData.governedChannelType = definition.governedChannelType;\n        surveyData.startTimeUtc = dateToShortUtcString(state.LastSurveyStartTimeUtc);\n        surveyData.additionalDataRequested = definition.additionalDataRequested || [];\n        surveyData.launcherType = definition.launcherType || ISurvey.LAUNCHER_TYPE_DEFAULT;\n        surveyData.preferredLaunchType = definition.surveyTemplate.preferredLaunchType || \"Default\" /* Default */;\n        surveyData.businessLevel = definition.businessLevel;\n        if (!isNOU(surveyModel.maxLaunches)) {\n            surveyData.maxLaunches = surveyModel.maxLaunches;\n        }\n        if (!isNOU(surveyModel.maxLaunchesPerSession)) {\n            surveyData.maxLaunchesPerSession = surveyModel.maxLaunchesPerSession;\n        }\n        return surveyData;\n    };\n    CampaignSurveyFactory.makeCountedActivityEventData = function (eventModel) {\n        if (!eventModel) {\n            return null;\n        }\n        var eventData = new SurveyEvents_1.CountedActivityEventData();\n        eventData.activity = eventModel.activity;\n        eventData.count = eventModel.count;\n        eventData.isAggregate = eventModel.isAggregate;\n        return eventData;\n    };\n    CampaignSurveyFactory.makeCountedActivityEvent = function (state, eventModel) {\n        if (!state || !eventModel) {\n            return null;\n        }\n        var eventData = CampaignSurveyFactory.makeCountedActivityEventData(eventModel);\n        if (!eventData) {\n            return null;\n        }\n        return new SurveyEvents_1.CountedActivityEvent(eventData);\n    };\n    CampaignSurveyFactory.makeCountedActivitySequenceEvent = function (state, eventModel) {\n        if (!state || !eventModel) {\n            return null;\n        }\n        var sequenceEventData = new SurveyEvents_1.CountedActivitySequenceEventData();\n        sequenceEventData.sequence = [];\n        for (var _i = 0, _a = eventModel.sequence; _i < _a.length; _i++) {\n            var event_1 = _a[_i];\n            var eventData = CampaignSurveyFactory.makeCountedActivityEventData(event_1);\n            if (!eventData) {\n                return null;\n            }\n            sequenceEventData.sequence.push(eventData);\n        }\n        return new SurveyEvents_1.CountedActivitySequenceEvent(sequenceEventData);\n    };\n    CampaignSurveyFactory.makeEvent = function (state, eventModel) {\n        if (eventModel instanceof CampaignDefinitionProvider_1.CampaignSurveyEventCountedActivity) {\n            return CampaignSurveyFactory.makeCountedActivityEvent(state, eventModel);\n        }\n        else if (eventModel instanceof CampaignDefinitionProvider_1.CampaignSurveyEventCountedActivitySequence) {\n            return CampaignSurveyFactory.makeCountedActivitySequenceEvent(state, eventModel);\n        }\n        else {\n            return null;\n        }\n    };\n    CampaignSurveyFactory.makeMetadata = function (metadataModel) {\n        if (isNOU(metadataModel) || isNOU(metadataModel.contentMetadata)) {\n            return null;\n        }\n        var metadata = new SurveyMetadata_1.Metadata();\n        metadata.contentMetadata = metadataModel.contentMetadata;\n        return new SurveyMetadata_1.SurveyMetadata(metadata);\n    };\n    return CampaignSurveyFactory;\n}());\nexports.CampaignSurveyFactory = CampaignSurveyFactory;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0NhbXBhaWduL0NhbXBhaWduU3VydmV5RmFjdG9yeS50cz8xZGQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9HQUEwQztBQUsxQyw2R0FHeUI7QUFDekIsbUhBQTZEO0FBQzdELGtIQUFrRDtBQUNsRCw4S0FBMEY7QUFDMUYsb0lBQThEO0FBQzlELHFIQUFvRDtBQUNwRCxrSEFBa0Q7QUFDbEQsdUlBQWdFO0FBQ2hFLHNGQUFrQztBQUNsQywrSkFLc0M7QUFHOUIsd0JBQW9CLEdBQVksS0FBSyxxQkFBakIsRUFBRSxLQUFLLEdBQUssS0FBSyxNQUFWLENBQVc7QUFFOUM7O0dBRUc7QUFDSDtJQUFBO0lBNkhBLENBQUM7SUE1SGMsZ0NBQVUsR0FBeEIsVUFBeUIsS0FBb0IsRUFBRSxVQUE4QixFQUFFLGNBQXdDO1FBQ3RILElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQzNFLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzRixJQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQzlDLElBQUksV0FBVyxZQUFZLGtFQUFxQyxFQUFFO1lBQ2pFLE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUM5RDthQUFNLElBQUksV0FBVyxZQUFZLG1FQUFzQyxFQUFFO1lBQ3pFLE9BQU8sU0FBUyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUMvRDthQUFNLElBQUksV0FBVyxZQUFZLHNEQUF5QixFQUFFO1lBQzVELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDeEU7YUFBTSxJQUFJLFdBQVcsWUFBWSx1REFBMEIsRUFBRTtZQUM3RCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzFFO2FBQU0sSUFBSSxXQUFXLFlBQVksc0RBQXlCLEVBQUU7WUFDNUQsT0FBTyxTQUFTLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMzRTthQUFNLElBQUksV0FBVyxZQUFZLDBFQUE2QyxFQUFFO1lBQ2hGLE9BQU8sNkJBQTZCLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbEU7YUFBTSxJQUFJLFdBQVcsWUFBWSw0REFBK0IsRUFBRTtZQUNsRSxPQUFPLGVBQWUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3BGO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQztTQUNaO0lBQ0YsQ0FBQztJQUVjLDhDQUF3QixHQUF2QyxVQUF3QyxLQUFvQixFQUFFLFVBQThCO1FBQzNGLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFO1lBQ3hELE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQzlDLElBQU0sVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMvRCxVQUFVLENBQUMsZUFBZSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pHLFVBQVUsQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvRSxVQUFVLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDbkMsVUFBVSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDaEQsVUFBVSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3ZGLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsVUFBVSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUM3RSxVQUFVLENBQUMsdUJBQXVCLEdBQUcsVUFBVSxDQUFDLHVCQUF1QixJQUFLLEVBQUUsQ0FBQztRQUMvRSxVQUFVLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLElBQUksT0FBTyxDQUFDLHFCQUFxQixDQUFDO1FBQ25GLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLG1CQUFtQiwyQkFBa0MsQ0FBQztRQUNqSCxVQUFVLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFFcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsVUFBVSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUM5QyxVQUFVLENBQUMscUJBQXFCLEdBQUcsV0FBVyxDQUFDLHFCQUFxQixDQUFDO1NBQ3JFO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVjLGtEQUE0QixHQUEzQyxVQUE0QyxVQUE4QztRQUN6RixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLFNBQVMsR0FBRyxJQUFJLHVDQUF3QixFQUFFLENBQUM7UUFDakQsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ3pDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUNuQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFFL0MsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztJQUVjLDhDQUF3QixHQUF2QyxVQUF3QyxLQUFvQixFQUFFLFVBQThDO1FBQzNHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELElBQU0sU0FBUyxHQUE2QixxQkFBcUIsQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELE9BQU8sSUFBSSxtQ0FBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRWMsc0RBQWdDLEdBQS9DLFVBQWdELEtBQW9CLEVBQ25FLFVBQXNEO1FBRXRELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELElBQU0saUJBQWlCLEdBQUcsSUFBSSwrQ0FBZ0MsRUFBRSxDQUFDO1FBQ2pFLGlCQUFpQixDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFaEMsS0FBb0IsVUFBbUIsRUFBbkIsZUFBVSxDQUFDLFFBQVEsRUFBbkIsY0FBbUIsRUFBbkIsSUFBbUIsRUFBRTtZQUFwQyxJQUFNLE9BQUs7WUFDZixJQUFNLFNBQVMsR0FBNkIscUJBQXFCLENBQUMsNEJBQTRCLENBQUMsT0FBSyxDQUFDLENBQUM7WUFDdEcsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZixPQUFPLElBQUksQ0FBQzthQUNaO1lBRUQsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMzQztRQUVELE9BQU8sSUFBSSwyQ0FBNEIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFYywrQkFBUyxHQUF4QixVQUF5QixLQUFvQixFQUFFLFVBQStCO1FBQzdFLElBQUksVUFBVSxZQUFZLCtEQUFrQyxFQUFFO1lBQzdELE9BQU8scUJBQXFCLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLFVBQWdELENBQUMsQ0FBQztTQUMvRzthQUFNLElBQUksVUFBVSxZQUFZLHVFQUEwQyxFQUFFO1lBQzVFLE9BQU8scUJBQXFCLENBQUMsZ0NBQWdDLENBQUMsS0FBSyxFQUFFLFVBQXdELENBQUMsQ0FBQztTQUMvSDthQUFNO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFFYyxrQ0FBWSxHQUEzQixVQUE0QixhQUFxQztRQUNoRSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ2pFLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLFFBQVEsR0FBRyxJQUFJLHlCQUFRLEVBQUUsQ0FBQztRQUNoQyxRQUFRLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUM7UUFFekQsT0FBTyxJQUFJLCtCQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNGLDRCQUFDO0FBQUQsQ0FBQztBQTdIWSxzREFBcUIiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9DYW1wYWlnbi9DYW1wYWlnblN1cnZleUZhY3RvcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBJRmxvb2RnYXRlU3RyaW5nUHJvdmlkZXIgZnJvbSBcIi4uL0FwaS9JRmxvb2RnYXRlU3RyaW5nUHJvdmlkZXJcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleSBmcm9tIFwiLi4vQXBpL0lTdXJ2ZXlcIjtcclxuaW1wb3J0IHsgR292ZXJuZWRDaGFubmVsVHlwZSB9IGZyb20gXCIuLi9Hb3Zlcm5lZENoYW5uZWxcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleUV2ZW50IGZyb20gXCIuLi9JU3VydmV5RXZlbnRcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleUluZm8gZnJvbSBcIi4uL0lTdXJ2ZXlJbmZvXCI7XHJcbmltcG9ydCB7IElTdXJ2ZXlNZXRhZGF0YSB9IGZyb20gXCIuLi9JU3VydmV5TWV0YWRhdGFcIjtcclxuaW1wb3J0IHtcclxuXHRDb3VudGVkQWN0aXZpdHlFdmVudCwgQ291bnRlZEFjdGl2aXR5RXZlbnREYXRhLCBDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZUV2ZW50LCBDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZUV2ZW50RGF0YSxcclxuXHRJQ291bnRlZEFjdGl2aXR5RXZlbnQsIElDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZUV2ZW50LFxyXG59IGZyb20gXCIuLi9TdXJ2ZXlFdmVudHNcIjtcclxuaW1wb3J0IHsgTWV0YWRhdGEsIFN1cnZleU1ldGFkYXRhIH0gZnJvbSBcIi4uL1N1cnZleU1ldGFkYXRhXCI7XHJcbmltcG9ydCAqIGFzIEZwc1N1cnZleSBmcm9tIFwiLi4vU3VydmV5cy9GcHNTdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXkgZnJvbSBcIi4uL1N1cnZleXMvR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgSW50ZXJjZXB0U3VydmV5IGZyb20gXCIuLi9TdXJ2ZXlzL0ludGVyY2VwdFN1cnZleVwiO1xyXG5pbXBvcnQgKiBhcyBObHFzU3VydmV5IGZyb20gXCIuLi9TdXJ2ZXlzL05scXNTdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgTnBzU3VydmV5IGZyb20gXCIuLi9TdXJ2ZXlzL05wc1N1cnZleVwiO1xyXG5pbXBvcnQgKiBhcyBTdXJ2ZXlEYXRhU291cmNlIGZyb20gXCIuLi9TdXJ2ZXlzL1N1cnZleURhdGFTb3VyY2VcIjtcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uL1V0aWxzXCI7XHJcbmltcG9ydCB7XHJcblx0Q2FtcGFpZ25EZWZpbml0aW9uLFxyXG5cdENhbXBhaWduU3VydmV5RXZlbnQsIENhbXBhaWduU3VydmV5RXZlbnRDb3VudGVkQWN0aXZpdHksIENhbXBhaWduU3VydmV5RXZlbnRDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZSwgQ2FtcGFpZ25TdXJ2ZXlNZXRhZGF0YSxcclxuXHRDYW1wYWlnblN1cnZleVRlbXBsYXRlLCBDYW1wYWlnblN1cnZleVRlbXBsYXRlRnBzLCBDYW1wYWlnblN1cnZleVRlbXBsYXRlR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2UsIENhbXBhaWduU3VydmV5VGVtcGxhdGVJbnRlcmNlcHQsXHJcblx0Q2FtcGFpZ25TdXJ2ZXlUZW1wbGF0ZU5scXMsIENhbXBhaWduU3VydmV5VGVtcGxhdGVOcHMsIENhbXBhaWduU3VydmV5VGVtcGxhdGVOcHMxMVBvaW50U3RhdGljLCBDYW1wYWlnblN1cnZleVRlbXBsYXRlTnBzNVBvaW50U3RhdGljLFxyXG59IGZyb20gXCIuL0NhbXBhaWduRGVmaW5pdGlvblByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IENhbXBhaWduU3RhdGUgfSBmcm9tIFwiLi9DYW1wYWlnblN0YXRlUHJvdmlkZXJcIjtcclxuXHJcbmNvbnN0IHsgZGF0ZVRvU2hvcnRVdGNTdHJpbmcsIGlzTk9VIH0gPSBVdGlscztcclxuXHJcbi8qKlxyXG4gKiBDb250YWlucyBtZXRob2RzIHRvIHRha2UgYSBjYW1wYWlnbiBkZWZpbml0aW9uICsgc3RhdGUgYW5kIGdlbmVyYXRlIGFuIElTdXJ2ZXlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYW1wYWlnblN1cnZleUZhY3Rvcnkge1xyXG5cdHB1YmxpYyBzdGF0aWMgbWFrZVN1cnZleShzdGF0ZTogQ2FtcGFpZ25TdGF0ZSwgZGVmaW5pdGlvbjogQ2FtcGFpZ25EZWZpbml0aW9uLCBzdHJpbmdQcm92aWRlcjogSUZsb29kZ2F0ZVN0cmluZ1Byb3ZpZGVyKTogSVN1cnZleSB7XHJcblx0XHRpZiAoIXN0YXRlIHx8ICFkZWZpbml0aW9uIHx8ICFkZWZpbml0aW9uLnN1cnZleVRlbXBsYXRlIHx8ICFzdHJpbmdQcm92aWRlcikge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBzdXJ2ZXlEYXRhU291cmNlID0gQ2FtcGFpZ25TdXJ2ZXlGYWN0b3J5Lm1ha2VTdXJ2ZXlEYXRhU291cmNlRGF0YShzdGF0ZSwgZGVmaW5pdGlvbik7XHJcblx0XHRjb25zdCBzdXJ2ZXlNb2RlbCA9IGRlZmluaXRpb24uc3VydmV5VGVtcGxhdGU7XHJcblx0XHRpZiAoc3VydmV5TW9kZWwgaW5zdGFuY2VvZiBDYW1wYWlnblN1cnZleVRlbXBsYXRlTnBzNVBvaW50U3RhdGljKSB7XHJcblx0XHRcdHJldHVybiBOcHNTdXJ2ZXkubWFrZTVQb2ludChzdXJ2ZXlEYXRhU291cmNlLCBzdHJpbmdQcm92aWRlcik7XHJcblx0XHR9IGVsc2UgaWYgKHN1cnZleU1vZGVsIGluc3RhbmNlb2YgQ2FtcGFpZ25TdXJ2ZXlUZW1wbGF0ZU5wczExUG9pbnRTdGF0aWMpIHtcclxuXHRcdFx0cmV0dXJuIE5wc1N1cnZleS5tYWtlMTFQb2ludChzdXJ2ZXlEYXRhU291cmNlLCBzdHJpbmdQcm92aWRlcik7XHJcblx0XHR9IGVsc2UgaWYgKHN1cnZleU1vZGVsIGluc3RhbmNlb2YgQ2FtcGFpZ25TdXJ2ZXlUZW1wbGF0ZUZwcykge1xyXG5cdFx0XHRyZXR1cm4gRnBzU3VydmV5Lm1ha2VGcHMoc3VydmV5RGF0YVNvdXJjZSwgc3RyaW5nUHJvdmlkZXIsIHN1cnZleU1vZGVsKTtcclxuXHRcdH0gZWxzZSBpZiAoc3VydmV5TW9kZWwgaW5zdGFuY2VvZiBDYW1wYWlnblN1cnZleVRlbXBsYXRlTmxxcykge1xyXG5cdFx0XHRyZXR1cm4gTmxxc1N1cnZleS5tYWtlTmxxcyhzdXJ2ZXlEYXRhU291cmNlLCBzdHJpbmdQcm92aWRlciwgc3VydmV5TW9kZWwpO1xyXG5cdFx0fSBlbHNlIGlmIChzdXJ2ZXlNb2RlbCBpbnN0YW5jZW9mIENhbXBhaWduU3VydmV5VGVtcGxhdGVOcHMpIHtcclxuXHRcdFx0cmV0dXJuIE5wc1N1cnZleS5tYWtlQ3VzdG9tKHN1cnZleURhdGFTb3VyY2UsIHN0cmluZ1Byb3ZpZGVyLCBzdXJ2ZXlNb2RlbCk7XHJcblx0XHR9IGVsc2UgaWYgKHN1cnZleU1vZGVsIGluc3RhbmNlb2YgQ2FtcGFpZ25TdXJ2ZXlUZW1wbGF0ZUdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlKSB7XHJcblx0XHRcdHJldHVybiBHZW5lcmljTWVzc2FnaW5nU3VyZmFjZVN1cnZleS5tYWtlQ3VzdG9tKHN1cnZleURhdGFTb3VyY2UpO1xyXG5cdFx0fSBlbHNlIGlmIChzdXJ2ZXlNb2RlbCBpbnN0YW5jZW9mIENhbXBhaWduU3VydmV5VGVtcGxhdGVJbnRlcmNlcHQpIHtcclxuXHRcdFx0cmV0dXJuIEludGVyY2VwdFN1cnZleS5tYWtlSW50ZXJjZXB0KHN1cnZleURhdGFTb3VyY2UsIHN0cmluZ1Byb3ZpZGVyLCBzdXJ2ZXlNb2RlbCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIG1ha2VTdXJ2ZXlEYXRhU291cmNlRGF0YShzdGF0ZTogQ2FtcGFpZ25TdGF0ZSwgZGVmaW5pdGlvbjogQ2FtcGFpZ25EZWZpbml0aW9uKTogU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YSB7XHJcblx0XHRpZiAoIXN0YXRlIHx8ICFkZWZpbml0aW9uIHx8ICFkZWZpbml0aW9uLnN1cnZleVRlbXBsYXRlKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHN1cnZleU1vZGVsID0gZGVmaW5pdGlvbi5zdXJ2ZXlUZW1wbGF0ZTtcclxuXHRcdGNvbnN0IHN1cnZleURhdGEgPSBuZXcgU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YSgpO1xyXG5cdFx0c3VydmV5RGF0YS5hY3RpdmF0aW9uRXZlbnQgPSBDYW1wYWlnblN1cnZleUZhY3RvcnkubWFrZUV2ZW50KHN0YXRlLCBzdXJ2ZXlNb2RlbC5hY3RpdmF0aW9uRXZlbnQpO1xyXG5cdFx0c3VydmV5RGF0YS5tZXRhZGF0YSA9IENhbXBhaWduU3VydmV5RmFjdG9yeS5tYWtlTWV0YWRhdGEoc3VydmV5TW9kZWwubWV0YWRhdGEpO1xyXG5cdFx0c3VydmV5RGF0YS5pZCA9IHN0YXRlLkxhc3RTdXJ2ZXlJZDtcclxuXHRcdHN1cnZleURhdGEuYmFja0VuZElkZW50aWZpZXIgPSBzdGF0ZS5DYW1wYWlnbklkO1xyXG5cdFx0c3VydmV5RGF0YS5leHBpcmF0aW9uVGltZVV0YyA9IGRhdGVUb1Nob3J0VXRjU3RyaW5nKHN0YXRlLkxhc3RTdXJ2ZXlFeHBpcmF0aW9uVGltZVV0Yyk7XHJcblx0XHRzdXJ2ZXlEYXRhLmdvdmVybmVkQ2hhbm5lbFR5cGUgPSBkZWZpbml0aW9uLmdvdmVybmVkQ2hhbm5lbFR5cGU7XHJcblx0XHRzdXJ2ZXlEYXRhLnN0YXJ0VGltZVV0YyA9IGRhdGVUb1Nob3J0VXRjU3RyaW5nKHN0YXRlLkxhc3RTdXJ2ZXlTdGFydFRpbWVVdGMpO1xyXG5cdFx0c3VydmV5RGF0YS5hZGRpdGlvbmFsRGF0YVJlcXVlc3RlZCA9IGRlZmluaXRpb24uYWRkaXRpb25hbERhdGFSZXF1ZXN0ZWQgIHx8IFtdO1xyXG5cdFx0c3VydmV5RGF0YS5sYXVuY2hlclR5cGUgPSBkZWZpbml0aW9uLmxhdW5jaGVyVHlwZSB8fCBJU3VydmV5LkxBVU5DSEVSX1RZUEVfREVGQVVMVDtcclxuXHRcdHN1cnZleURhdGEucHJlZmVycmVkTGF1bmNoVHlwZSA9IGRlZmluaXRpb24uc3VydmV5VGVtcGxhdGUucHJlZmVycmVkTGF1bmNoVHlwZSB8fCBJU3VydmV5SW5mby5MYXVuY2hUeXBlLkRlZmF1bHQ7XHJcblx0XHRzdXJ2ZXlEYXRhLmJ1c2luZXNzTGV2ZWwgPSBkZWZpbml0aW9uLmJ1c2luZXNzTGV2ZWw7XHJcblxyXG5cdFx0aWYgKCFpc05PVShzdXJ2ZXlNb2RlbC5tYXhMYXVuY2hlcykpIHtcclxuXHRcdFx0c3VydmV5RGF0YS5tYXhMYXVuY2hlcyA9IHN1cnZleU1vZGVsLm1heExhdW5jaGVzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghaXNOT1Uoc3VydmV5TW9kZWwubWF4TGF1bmNoZXNQZXJTZXNzaW9uKSkge1xyXG5cdFx0XHRzdXJ2ZXlEYXRhLm1heExhdW5jaGVzUGVyU2Vzc2lvbiA9IHN1cnZleU1vZGVsLm1heExhdW5jaGVzUGVyU2Vzc2lvbjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc3VydmV5RGF0YTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIG1ha2VDb3VudGVkQWN0aXZpdHlFdmVudERhdGEoZXZlbnRNb2RlbDogQ2FtcGFpZ25TdXJ2ZXlFdmVudENvdW50ZWRBY3Rpdml0eSk6IENvdW50ZWRBY3Rpdml0eUV2ZW50RGF0YSB7XHJcblx0XHRpZiAoIWV2ZW50TW9kZWwpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZXZlbnREYXRhID0gbmV3IENvdW50ZWRBY3Rpdml0eUV2ZW50RGF0YSgpO1xyXG5cdFx0ZXZlbnREYXRhLmFjdGl2aXR5ID0gZXZlbnRNb2RlbC5hY3Rpdml0eTtcclxuXHRcdGV2ZW50RGF0YS5jb3VudCA9IGV2ZW50TW9kZWwuY291bnQ7XHJcblx0XHRldmVudERhdGEuaXNBZ2dyZWdhdGUgPSBldmVudE1vZGVsLmlzQWdncmVnYXRlO1xyXG5cclxuXHRcdHJldHVybiBldmVudERhdGE7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBtYWtlQ291bnRlZEFjdGl2aXR5RXZlbnQoc3RhdGU6IENhbXBhaWduU3RhdGUsIGV2ZW50TW9kZWw6IENhbXBhaWduU3VydmV5RXZlbnRDb3VudGVkQWN0aXZpdHkpOiBJQ291bnRlZEFjdGl2aXR5RXZlbnQge1xyXG5cdFx0aWYgKCFzdGF0ZSB8fCAhZXZlbnRNb2RlbCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBldmVudERhdGE6IENvdW50ZWRBY3Rpdml0eUV2ZW50RGF0YSA9IENhbXBhaWduU3VydmV5RmFjdG9yeS5tYWtlQ291bnRlZEFjdGl2aXR5RXZlbnREYXRhKGV2ZW50TW9kZWwpO1xyXG5cdFx0aWYgKCFldmVudERhdGEpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBDb3VudGVkQWN0aXZpdHlFdmVudChldmVudERhdGEpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBzdGF0aWMgbWFrZUNvdW50ZWRBY3Rpdml0eVNlcXVlbmNlRXZlbnQoc3RhdGU6IENhbXBhaWduU3RhdGUsXHJcblx0XHRldmVudE1vZGVsOiBDYW1wYWlnblN1cnZleUV2ZW50Q291bnRlZEFjdGl2aXR5U2VxdWVuY2UpOiBJQ291bnRlZEFjdGl2aXR5U2VxdWVuY2VFdmVudCB7XHJcblxyXG5cdFx0aWYgKCFzdGF0ZSB8fCAhZXZlbnRNb2RlbCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBzZXF1ZW5jZUV2ZW50RGF0YSA9IG5ldyBDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZUV2ZW50RGF0YSgpO1xyXG5cdFx0c2VxdWVuY2VFdmVudERhdGEuc2VxdWVuY2UgPSBbXTtcclxuXHJcblx0XHRmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50TW9kZWwuc2VxdWVuY2UpIHtcclxuXHRcdFx0Y29uc3QgZXZlbnREYXRhOiBDb3VudGVkQWN0aXZpdHlFdmVudERhdGEgPSBDYW1wYWlnblN1cnZleUZhY3RvcnkubWFrZUNvdW50ZWRBY3Rpdml0eUV2ZW50RGF0YShldmVudCk7XHJcblx0XHRcdGlmICghZXZlbnREYXRhKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNlcXVlbmNlRXZlbnREYXRhLnNlcXVlbmNlLnB1c2goZXZlbnREYXRhKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbmV3IENvdW50ZWRBY3Rpdml0eVNlcXVlbmNlRXZlbnQoc2VxdWVuY2VFdmVudERhdGEpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBzdGF0aWMgbWFrZUV2ZW50KHN0YXRlOiBDYW1wYWlnblN0YXRlLCBldmVudE1vZGVsOiBDYW1wYWlnblN1cnZleUV2ZW50KTogSVN1cnZleUV2ZW50IHtcclxuXHRcdGlmIChldmVudE1vZGVsIGluc3RhbmNlb2YgQ2FtcGFpZ25TdXJ2ZXlFdmVudENvdW50ZWRBY3Rpdml0eSkge1xyXG5cdFx0XHRyZXR1cm4gQ2FtcGFpZ25TdXJ2ZXlGYWN0b3J5Lm1ha2VDb3VudGVkQWN0aXZpdHlFdmVudChzdGF0ZSwgZXZlbnRNb2RlbCBhcyBDYW1wYWlnblN1cnZleUV2ZW50Q291bnRlZEFjdGl2aXR5KTtcclxuXHRcdH0gZWxzZSBpZiAoZXZlbnRNb2RlbCBpbnN0YW5jZW9mIENhbXBhaWduU3VydmV5RXZlbnRDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZSkge1xyXG5cdFx0XHRyZXR1cm4gQ2FtcGFpZ25TdXJ2ZXlGYWN0b3J5Lm1ha2VDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZUV2ZW50KHN0YXRlLCBldmVudE1vZGVsIGFzIENhbXBhaWduU3VydmV5RXZlbnRDb3VudGVkQWN0aXZpdHlTZXF1ZW5jZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIG1ha2VNZXRhZGF0YShtZXRhZGF0YU1vZGVsOiBDYW1wYWlnblN1cnZleU1ldGFkYXRhKTogSVN1cnZleU1ldGFkYXRhIHtcclxuXHRcdGlmIChpc05PVShtZXRhZGF0YU1vZGVsKSB8fCBpc05PVShtZXRhZGF0YU1vZGVsLmNvbnRlbnRNZXRhZGF0YSkpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEoKTtcclxuXHRcdG1ldGFkYXRhLmNvbnRlbnRNZXRhZGF0YSA9IG1ldGFkYXRhTW9kZWwuY29udGVudE1ldGFkYXRhO1xyXG5cclxuXHRcdHJldHVybiBuZXcgU3VydmV5TWV0YWRhdGEobWV0YWRhdGEpO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Campaign/CampaignSurveyFactory.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Constants.js":
/*!**********************************************!*\
  !*** ../FloodgateCore/dist/src/Constants.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Constants.ts\n *\n * A module for all the constants.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TelemetryEvent = void 0;\n/**\n * Telemetry events\n */\nvar TelemetryEvent = /** @class */ (function () {\n    function TelemetryEvent() {\n    }\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11;\n    TelemetryEvent.CampaignState = (_a = /** @class */ (function () {\n            function class_1() {\n            }\n            return class_1;\n        }()),\n        _a.Deserialize = (_b = /** @class */ (function () {\n                function class_2() {\n                }\n                return class_2;\n            }()),\n            _b.Failed = \"FloodgateCore_CampaignState_Deserialize_Failed\",\n            _b),\n        _a);\n    TelemetryEvent.FileBasedCampaignStateProvider = (_c = /** @class */ (function () {\n            function class_3() {\n            }\n            return class_3;\n        }()),\n        _c.Load = (_d = /** @class */ (function () {\n                function class_4() {\n                }\n                return class_4;\n            }()),\n            _d.Failed = \"FloodgateCore_FileBasedCampaignStateProvider_Load_Failed\",\n            _d),\n        _c);\n    TelemetryEvent.HostBasedCampaignStateProvider = (_e = /** @class */ (function () {\n            function class_5() {\n            }\n            return class_5;\n        }()),\n        _e.GetStatesFromHost = (_f = /** @class */ (function () {\n                function class_6() {\n                }\n                return class_6;\n            }()),\n            _f.Failed = \"FloodgateCore_HostBasedCampaignStateProvider_GetStatesFromHost_Failed\",\n            _f),\n        _e);\n    TelemetryEvent.Floodgate = (_g = /** @class */ (function () {\n            function class_7() {\n            }\n            return class_7;\n        }()),\n        _g.Initialize = (_h = /** @class */ (function () {\n                function class_8() {\n                }\n                return class_8;\n            }()),\n            _h.Failed = \"FloodgateCore_Floodgate_Initialize_Failed\",\n            _h),\n        _g.Start = (_j = /** @class */ (function () {\n                function class_9() {\n                }\n                return class_9;\n            }()),\n            _j.Failed = \"FloodgateCore_Floodgate_Start_Failed\",\n            _j.Warning = \"FloodgateCore_Floodgate_Start_Warning\",\n            _j.SurveysDisabled = \"FloodgateCore_Floodgate_Start_SurveysDisabled\",\n            _j),\n        _g.UserFactsLoad = (_k = /** @class */ (function () {\n                function class_10() {\n                }\n                return class_10;\n            }()),\n            _k.Failed = \"FloodgateCore_Floodgate_UserFactsLoad_Failed\",\n            _k),\n        _g.UserFactsSpecDeserialization = (_l = /** @class */ (function () {\n                function class_11() {\n                }\n                return class_11;\n            }()),\n            _l.Failed = \"FloodgateCore_Floodgate_UserFactsSpecDeserialization_Failed\",\n            _l),\n        _g.UserFactsSpecIsAMatch = (_m = /** @class */ (function () {\n                function class_12() {\n                }\n                return class_12;\n            }()),\n            _m.Failed = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Failed\",\n            _m.Mismatch = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Mismatch\",\n            _m.Summary = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Summary\",\n            _m),\n        _g);\n    TelemetryEvent.FloodgateEngine = (_o = /** @class */ (function () {\n            function class_13() {\n            }\n            return class_13;\n        }()),\n        _o.Make = (_p = /** @class */ (function () {\n                function class_14() {\n                }\n                return class_14;\n            }()),\n            _p.Failed = \"FloodgateCore_FloodgateEngine_Make_Failed\",\n            _p),\n        _o.Common = (_q = /** @class */ (function () {\n                function class_15() {\n                }\n                return class_15;\n            }()),\n            _q.Error = \"FloodgateCore_FloodgateEngine_Common_Error\",\n            _q),\n        _o.Start = (_r = /** @class */ (function () {\n                function class_16() {\n                }\n                return class_16;\n            }()),\n            _r.Failed = \"FloodgateCore_FloodgateEngine_Start_Failed\",\n            _r),\n        _o.StartAsync = (_s = /** @class */ (function () {\n                function class_17() {\n                }\n                return class_17;\n            }()),\n            _s.Failed = \"FloodgateCore_FloodgateEngine_StartAsync_Failed\",\n            _s.Stopped = \"FloodgateCore_FloodgateEngine_StartAsync_Stopped\",\n            _s),\n        _o.OnSurveyActivated = (_t = /** @class */ (function () {\n                function class_18() {\n                }\n                return class_18;\n            }()),\n            _t.ActivationStatsSuppressedSurvey = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationStatsSuppressedSurvey\",\n            _t.ClosedChannelType = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ClosedChannelType\",\n            _t.SurveyNotDefined = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_SurveyNotDefined\",\n            _t.SessionSuppressedSurvey = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_SessionSuppressedSurvey\",\n            _t.ActivationExpiredSurvey = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationExpiredSurvey\",\n            _t.ActivationIrrelevantSurvey = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationIrrelevantSurvey\",\n            _t.Error = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_Error\",\n            _t),\n        _o.CheckGovernanceServiceAndActivateSurvey = (_u = /** @class */ (function () {\n                function class_19() {\n                }\n                return class_19;\n            }()),\n            _u.GovernanceServiceForceToDisplay = \"FloodgateCore_FloodgateEngine_GovernanceService_GovernanceServiceForceToDisplay\",\n            _u.GovernanceServiceClientCompleted = \"FloodgateCore_FloodgateEngine_GovernanceService_GovernanceServiceClientCompleted\",\n            _u),\n        _o);\n    TelemetryEvent.GovernedChannelState = (_v = /** @class */ (function () {\n            function class_20() {\n            }\n            return class_20;\n        }()),\n        _v.Deserialize = (_w = /** @class */ (function () {\n                function class_21() {\n                }\n                return class_21;\n            }()),\n            _w.Failed = \"FloodgateCore_GovernedChannelState_Deserialize_Failed\",\n            _w),\n        _v);\n    TelemetryEvent.FileBasedGovernedChannelStateProvider = (_x = /** @class */ (function () {\n            function class_22() {\n            }\n            return class_22;\n        }()),\n        _x.Load = (_y = /** @class */ (function () {\n                function class_23() {\n                }\n                return class_23;\n            }()),\n            _y.Failed = \"FloodgateCore_FileBasedGovernedChannelStateProvider_Load_Failed\",\n            _y),\n        _x);\n    TelemetryEvent.HostBasedGovernedChannelStateProvider = (_z = /** @class */ (function () {\n            function class_24() {\n            }\n            return class_24;\n        }()),\n        _z.GetStatesFromHost = (_0 = /** @class */ (function () {\n                function class_25() {\n                }\n                return class_25;\n            }()),\n            _0.Failed = \"FloodgateCore_HostBasedGovernedChannelStateProvider_GetStatesFromHost_Failed\",\n            _0),\n        _z);\n    TelemetryEvent.SurveyStatCollectionActivation = (_1 = /** @class */ (function () {\n            function class_26() {\n            }\n            return class_26;\n        }()),\n        _1.FromJson = (_2 = /** @class */ (function () {\n                function class_27() {\n                }\n                return class_27;\n            }()),\n            _2.Failed = \"FloodgateCore_SurveyStatCollectionActivation_FromJson_Failed\",\n            _2),\n        _1.ToJson = (_3 = /** @class */ (function () {\n                function class_28() {\n                }\n                return class_28;\n            }()),\n            _3.Failed = \"FloodgateCore_SurveyStatCollectionActivation_ToJson_Failed\",\n            _3),\n        _1);\n    TelemetryEvent.HostBasedSurveyActivationStatsProvider = (_4 = /** @class */ (function () {\n            function class_29() {\n            }\n            return class_29;\n        }()),\n        _4.GetSurveyStatsFromHost = (_5 = /** @class */ (function () {\n                function class_30() {\n                }\n                return class_30;\n            }()),\n            _5.Failed = \"FloodgateCore_HostBasedSurveyActivationStatsProvider_GetSurveyStatsFromHost_Failed\",\n            _5),\n        _4);\n    TelemetryEvent.SurveyStatCollectionEventActivity = (_6 = /** @class */ (function () {\n            function class_31() {\n            }\n            return class_31;\n        }()),\n        _6.FromJson = (_7 = /** @class */ (function () {\n                function class_32() {\n                }\n                return class_32;\n            }()),\n            _7.Failed = \"FloodgateCore_SurveyStatCollectionEventActivity_FromJson_Failed\",\n            _7),\n        _6.ToJson = (_8 = /** @class */ (function () {\n                function class_33() {\n                }\n                return class_33;\n            }()),\n            _8.Failed = \"FloodgateCore_SurveyStatCollectionEventActivity_ToJson_Failed\",\n            _8),\n        _6);\n    TelemetryEvent.SurveyActivity = (_9 = /** @class */ (function () {\n            function class_34() {\n            }\n            return class_34;\n        }()),\n        _9.LogActivity = (_10 = /** @class */ (function () {\n                function class_35() {\n                }\n                return class_35;\n            }()),\n            _10.EventsReprocessed = \"FloodgateCore_SurveyActivity_LogActivity_EventsReprocessed\",\n            _10.SurveysReprocessed = \"FloodgateCore_SurveyActivity_LogActivity_SurveysReprocessed\",\n            _10),\n        _9.SetActivityTrackingContracts = (_11 = /** @class */ (function () {\n                function class_36() {\n                }\n                return class_36;\n            }()),\n            _11.DuplicateSurveyID = \"FloodgateCore_SurveyActivity_SetActivityTrackingContracts_DuplicateSurveyID\",\n            _11),\n        _9);\n    return TelemetryEvent;\n}());\nexports.TelemetryEvent = TelemetryEvent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0NvbnN0YW50cy50cz8wNjEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFFSDs7R0FFRztBQUNIO0lBQUE7SUFxSUEsQ0FBQzs7SUFwSWMsNEJBQWE7WUFBRztZQUk5QixDQUFDO1lBQUQsY0FBQztRQUFELENBQUM7UUFIYyxjQUFXO2dCQUFHO2dCQUU1QixDQUFDO2dCQUFELGNBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLGdEQUFpRDtlQUMvRTtZQUNEO0lBRVksNkNBQThCO1lBQUc7WUFJL0MsQ0FBQztZQUFELGNBQUM7UUFBRCxDQUFDO1FBSGMsT0FBSTtnQkFBRztnQkFFckIsQ0FBQztnQkFBRCxjQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVywwREFBMkQ7ZUFDekY7WUFDRDtJQUVZLDZDQUE4QjtZQUFHO1lBSS9DLENBQUM7WUFBRCxjQUFDO1FBQUQsQ0FBQztRQUhjLG9CQUFpQjtnQkFBRztnQkFFbEMsQ0FBQztnQkFBRCxjQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVyx1RUFBd0U7ZUFDdEc7WUFDRDtJQUVZLHdCQUFTO1lBQUc7WUF3QjFCLENBQUM7WUFBRCxjQUFDO1FBQUQsQ0FBQztRQXZCYyxhQUFVO2dCQUFHO2dCQUUzQixDQUFDO2dCQUFELGNBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLDJDQUE0QztlQUMxRTtRQUVZLFFBQUs7Z0JBQUc7Z0JBSXRCLENBQUM7Z0JBQUQsY0FBQztZQUFELENBQUM7WUFIYyxTQUFNLEdBQVcsc0NBQXVDO1lBQ3hELFVBQU8sR0FBVyx1Q0FBd0M7WUFDMUQsa0JBQWUsR0FBVywrQ0FBZ0Q7ZUFDdkY7UUFFWSxnQkFBYTtnQkFBRztnQkFFOUIsQ0FBQztnQkFBRCxlQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVyw4Q0FBK0M7ZUFDN0U7UUFFWSwrQkFBNEI7Z0JBQUc7Z0JBRTdDLENBQUM7Z0JBQUQsZUFBQztZQUFELENBQUM7WUFEYyxTQUFNLEdBQVcsNkRBQThEO2VBQzVGO1FBRVksd0JBQXFCO2dCQUFHO2dCQUl0QyxDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBSGMsU0FBTSxHQUFXLHNEQUF1RDtZQUN4RSxXQUFRLEdBQVcsd0RBQXlEO1lBQzVFLFVBQU8sR0FBVyx1REFBd0Q7ZUFDdkY7WUFDRDtJQUVZLDhCQUFlO1lBQUc7WUFnQ2hDLENBQUM7WUFBRCxlQUFDO1FBQUQsQ0FBQztRQS9CYyxPQUFJO2dCQUFHO2dCQUVyQixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLDJDQUE0QztlQUMxRTtRQUVZLFNBQU07Z0JBQUc7Z0JBRXZCLENBQUM7Z0JBQUQsZUFBQztZQUFELENBQUM7WUFEYyxRQUFLLEdBQVcsNENBQTZDO2VBQzFFO1FBRVksUUFBSztnQkFBRztnQkFFdEIsQ0FBQztnQkFBRCxlQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVyw0Q0FBNkM7ZUFDM0U7UUFFWSxhQUFVO2dCQUFHO2dCQUczQixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRmMsU0FBTSxHQUFXLGlEQUFrRDtZQUNuRSxVQUFPLEdBQVcsa0RBQW1EO2VBQ2xGO1FBRVksb0JBQWlCO2dCQUFHO2dCQVFsQyxDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBUGMsa0NBQStCLEdBQVcsaUZBQWtGO1lBQzVILG9CQUFpQixHQUFXLG1FQUFvRTtZQUNoRyxtQkFBZ0IsR0FBVyxrRUFBbUU7WUFDOUYsMEJBQXVCLEdBQVcseUVBQTBFO1lBQzVHLDBCQUF1QixHQUFXLHlFQUEwRTtZQUM1Ryw2QkFBMEIsR0FBVyw0RUFBNkU7WUFDbEgsUUFBSyxHQUFXLHVEQUF3RDtlQUNyRjtRQUVZLDBDQUF1QztnQkFBRztnQkFHeEQsQ0FBQztnQkFBRCxlQUFDO1lBQUQsQ0FBQztZQUZjLGtDQUErQixHQUFXLGlGQUFrRjtZQUM1SCxtQ0FBZ0MsR0FBVyxrRkFBbUY7ZUFDM0k7WUFDRDtJQUVZLG1DQUFvQjtZQUFHO1lBSXJDLENBQUM7WUFBRCxlQUFDO1FBQUQsQ0FBQztRQUhjLGNBQVc7Z0JBQUc7Z0JBRTVCLENBQUM7Z0JBQUQsZUFBQztZQUFELENBQUM7WUFEYyxTQUFNLEdBQVcsdURBQXdEO2VBQ3RGO1lBQ0Q7SUFFWSxvREFBcUM7WUFBRztZQUl0RCxDQUFDO1lBQUQsZUFBQztRQUFELENBQUM7UUFIYyxPQUFJO2dCQUFHO2dCQUVyQixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLGlFQUFrRTtlQUNoRztZQUNEO0lBRVksb0RBQXFDO1lBQUc7WUFJdEQsQ0FBQztZQUFELGVBQUM7UUFBRCxDQUFDO1FBSGMsb0JBQWlCO2dCQUFHO2dCQUVsQyxDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLDhFQUErRTtlQUM3RztZQUNEO0lBRVksNkNBQThCO1lBQUc7WUFRL0MsQ0FBQztZQUFELGVBQUM7UUFBRCxDQUFDO1FBUGMsV0FBUTtnQkFBRztnQkFFekIsQ0FBQztnQkFBRCxlQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVyw4REFBK0Q7ZUFDN0Y7UUFFWSxTQUFNO2dCQUFHO2dCQUV2QixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLDREQUE2RDtlQUMzRjtZQUNEO0lBRVkscURBQXNDO1lBQUc7WUFJdkQsQ0FBQztZQUFELGVBQUM7UUFBRCxDQUFDO1FBSGMseUJBQXNCO2dCQUFHO2dCQUV2QyxDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLG9GQUFxRjtlQUNuSDtZQUNEO0lBRVksZ0RBQWlDO1lBQUc7WUFRbEQsQ0FBQztZQUFELGVBQUM7UUFBRCxDQUFDO1FBUGMsV0FBUTtnQkFBRztnQkFFekIsQ0FBQztnQkFBRCxlQUFDO1lBQUQsQ0FBQztZQURjLFNBQU0sR0FBVyxpRUFBa0U7ZUFDaEc7UUFFWSxTQUFNO2dCQUFHO2dCQUV2QixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRGMsU0FBTSxHQUFXLCtEQUFnRTtlQUM5RjtZQUNEO0lBRVksNkJBQWM7WUFBRztZQVMvQixDQUFDO1lBQUQsZUFBQztRQUFELENBQUM7UUFSYyxjQUFXO2dCQUFHO2dCQUc1QixDQUFDO2dCQUFELGVBQUM7WUFBRCxDQUFDO1lBRmMscUJBQWlCLEdBQVcsNERBQTZEO1lBQ3pGLHNCQUFrQixHQUFXLDZEQUE4RDtnQkFDeEc7UUFFWSwrQkFBNEI7Z0JBQUc7Z0JBRTdDLENBQUM7Z0JBQUQsZUFBQztZQUFELENBQUM7WUFEYyxxQkFBaUIsR0FBVyw2RUFBOEU7Z0JBQ3ZIO1lBQ0Q7SUFDSCxxQkFBQztDQUFBO0FBcklZLHdDQUFjIiwiZmlsZSI6Ii4uL0Zsb29kZ2F0ZUNvcmUvZGlzdC9zcmMvQ29uc3RhbnRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbnN0YW50cy50c1xyXG4gKlxyXG4gKiBBIG1vZHVsZSBmb3IgYWxsIHRoZSBjb25zdGFudHMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFRlbGVtZXRyeSBldmVudHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZWxlbWV0cnlFdmVudCB7XHJcblx0cHVibGljIHN0YXRpYyBDYW1wYWlnblN0YXRlID0gY2xhc3Mge1xyXG5cdFx0cHVibGljIHN0YXRpYyBEZXNlcmlhbGl6ZSA9IGNsYXNzIHtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBGYWlsZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9DYW1wYWlnblN0YXRlX0Rlc2VyaWFsaXplX0ZhaWxlZFwiO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIEZpbGVCYXNlZENhbXBhaWduU3RhdGVQcm92aWRlciA9IGNsYXNzIHtcclxuXHRcdHB1YmxpYyBzdGF0aWMgTG9hZCA9IGNsYXNzIHtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBGYWlsZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GaWxlQmFzZWRDYW1wYWlnblN0YXRlUHJvdmlkZXJfTG9hZF9GYWlsZWRcIjtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBIb3N0QmFzZWRDYW1wYWlnblN0YXRlUHJvdmlkZXIgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIEdldFN0YXRlc0Zyb21Ib3N0ID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0hvc3RCYXNlZENhbXBhaWduU3RhdGVQcm92aWRlcl9HZXRTdGF0ZXNGcm9tSG9zdF9GYWlsZWRcIjtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBGbG9vZGdhdGUgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIEluaXRpYWxpemUgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlX0luaXRpYWxpemVfRmFpbGVkXCI7XHJcblx0XHR9O1xyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgU3RhcnQgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlX1N0YXJ0X0ZhaWxlZFwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIFdhcm5pbmc6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVfU3RhcnRfV2FybmluZ1wiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIFN1cnZleXNEaXNhYmxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZV9TdGFydF9TdXJ2ZXlzRGlzYWJsZWRcIjtcclxuXHRcdH07XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBVc2VyRmFjdHNMb2FkID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZV9Vc2VyRmFjdHNMb2FkX0ZhaWxlZFwiO1xyXG5cdFx0fTtcclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIFVzZXJGYWN0c1NwZWNEZXNlcmlhbGl6YXRpb24gPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlX1VzZXJGYWN0c1NwZWNEZXNlcmlhbGl6YXRpb25fRmFpbGVkXCI7XHJcblx0XHR9O1xyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgVXNlckZhY3RzU3BlY0lzQU1hdGNoID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZV9Vc2VyRmFjdHNTcGVjSXNBTWF0Y2hfRmFpbGVkXCI7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgTWlzbWF0Y2g6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVfVXNlckZhY3RzU3BlY0lzQU1hdGNoX01pc21hdGNoXCI7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgU3VtbWFyeTogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZV9Vc2VyRmFjdHNTcGVjSXNBTWF0Y2hfU3VtbWFyeVwiO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIEZsb29kZ2F0ZUVuZ2luZSA9IGNsYXNzIHtcclxuXHRcdHB1YmxpYyBzdGF0aWMgTWFrZSA9IGNsYXNzIHtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBGYWlsZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVFbmdpbmVfTWFrZV9GYWlsZWRcIjtcclxuXHRcdH07XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBDb21tb24gPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRXJyb3I6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVFbmdpbmVfQ29tbW9uX0Vycm9yXCI7XHJcblx0XHR9O1xyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgU3RhcnQgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX1N0YXJ0X0ZhaWxlZFwiO1xyXG5cdFx0fTtcclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIFN0YXJ0QXN5bmMgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX1N0YXJ0QXN5bmNfRmFpbGVkXCI7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgU3RvcHBlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZUVuZ2luZV9TdGFydEFzeW5jX1N0b3BwZWRcIjtcclxuXHRcdH07XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBPblN1cnZleUFjdGl2YXRlZCA9IGNsYXNzIHtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBBY3RpdmF0aW9uU3RhdHNTdXBwcmVzc2VkU3VydmV5OiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX09uU3VydmV5QWN0aXZhdGVkX0FjdGl2YXRpb25TdGF0c1N1cHByZXNzZWRTdXJ2ZXlcIjtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBDbG9zZWRDaGFubmVsVHlwZTogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZUVuZ2luZV9PblN1cnZleUFjdGl2YXRlZF9DbG9zZWRDaGFubmVsVHlwZVwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIFN1cnZleU5vdERlZmluZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVFbmdpbmVfT25TdXJ2ZXlBY3RpdmF0ZWRfU3VydmV5Tm90RGVmaW5lZFwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIFNlc3Npb25TdXBwcmVzc2VkU3VydmV5OiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX09uU3VydmV5QWN0aXZhdGVkX1Nlc3Npb25TdXBwcmVzc2VkU3VydmV5XCI7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgQWN0aXZhdGlvbkV4cGlyZWRTdXJ2ZXk6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVFbmdpbmVfT25TdXJ2ZXlBY3RpdmF0ZWRfQWN0aXZhdGlvbkV4cGlyZWRTdXJ2ZXlcIjtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBBY3RpdmF0aW9uSXJyZWxldmFudFN1cnZleTogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0Zsb29kZ2F0ZUVuZ2luZV9PblN1cnZleUFjdGl2YXRlZF9BY3RpdmF0aW9uSXJyZWxldmFudFN1cnZleVwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEVycm9yOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX09uU3VydmV5QWN0aXZhdGVkX0Vycm9yXCI7XHJcblx0XHR9O1xyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgQ2hlY2tHb3Zlcm5hbmNlU2VydmljZUFuZEFjdGl2YXRlU3VydmV5ID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEdvdmVybmFuY2VTZXJ2aWNlRm9yY2VUb0Rpc3BsYXk6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9GbG9vZGdhdGVFbmdpbmVfR292ZXJuYW5jZVNlcnZpY2VfR292ZXJuYW5jZVNlcnZpY2VGb3JjZVRvRGlzcGxheVwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEdvdmVybmFuY2VTZXJ2aWNlQ2xpZW50Q29tcGxldGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmxvb2RnYXRlRW5naW5lX0dvdmVybmFuY2VTZXJ2aWNlX0dvdmVybmFuY2VTZXJ2aWNlQ2xpZW50Q29tcGxldGVkXCI7XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgR292ZXJuZWRDaGFubmVsU3RhdGUgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIERlc2VyaWFsaXplID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0dvdmVybmVkQ2hhbm5lbFN0YXRlX0Rlc2VyaWFsaXplX0ZhaWxlZFwiO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIEZpbGVCYXNlZEdvdmVybmVkQ2hhbm5lbFN0YXRlUHJvdmlkZXIgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIExvYWQgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfRmlsZUJhc2VkR292ZXJuZWRDaGFubmVsU3RhdGVQcm92aWRlcl9Mb2FkX0ZhaWxlZFwiO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIEhvc3RCYXNlZEdvdmVybmVkQ2hhbm5lbFN0YXRlUHJvdmlkZXIgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIEdldFN0YXRlc0Zyb21Ib3N0ID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX0hvc3RCYXNlZEdvdmVybmVkQ2hhbm5lbFN0YXRlUHJvdmlkZXJfR2V0U3RhdGVzRnJvbUhvc3RfRmFpbGVkXCI7XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgU3VydmV5U3RhdENvbGxlY3Rpb25BY3RpdmF0aW9uID0gY2xhc3Mge1xyXG5cdFx0cHVibGljIHN0YXRpYyBGcm9tSnNvbiA9IGNsYXNzIHtcclxuXHRcdFx0cHVibGljIHN0YXRpYyBGYWlsZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9TdXJ2ZXlTdGF0Q29sbGVjdGlvbkFjdGl2YXRpb25fRnJvbUpzb25fRmFpbGVkXCI7XHJcblx0XHR9O1xyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgVG9Kc29uID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX1N1cnZleVN0YXRDb2xsZWN0aW9uQWN0aXZhdGlvbl9Ub0pzb25fRmFpbGVkXCI7XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgSG9zdEJhc2VkU3VydmV5QWN0aXZhdGlvblN0YXRzUHJvdmlkZXIgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIEdldFN1cnZleVN0YXRzRnJvbUhvc3QgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfSG9zdEJhc2VkU3VydmV5QWN0aXZhdGlvblN0YXRzUHJvdmlkZXJfR2V0U3VydmV5U3RhdHNGcm9tSG9zdF9GYWlsZWRcIjtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBTdXJ2ZXlTdGF0Q29sbGVjdGlvbkV2ZW50QWN0aXZpdHkgPSBjbGFzcyB7XHJcblx0XHRwdWJsaWMgc3RhdGljIEZyb21Kc29uID0gY2xhc3Mge1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIEZhaWxlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX1N1cnZleVN0YXRDb2xsZWN0aW9uRXZlbnRBY3Rpdml0eV9Gcm9tSnNvbl9GYWlsZWRcIjtcclxuXHRcdH07XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBUb0pzb24gPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRmFpbGVkOiBzdHJpbmcgPSBcIkZsb29kZ2F0ZUNvcmVfU3VydmV5U3RhdENvbGxlY3Rpb25FdmVudEFjdGl2aXR5X1RvSnNvbl9GYWlsZWRcIjtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBTdXJ2ZXlBY3Rpdml0eSA9IGNsYXNzIHtcclxuXHRcdHB1YmxpYyBzdGF0aWMgTG9nQWN0aXZpdHkgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRXZlbnRzUmVwcm9jZXNzZWQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9TdXJ2ZXlBY3Rpdml0eV9Mb2dBY3Rpdml0eV9FdmVudHNSZXByb2Nlc3NlZFwiO1xyXG5cdFx0XHRwdWJsaWMgc3RhdGljIFN1cnZleXNSZXByb2Nlc3NlZDogc3RyaW5nID0gXCJGbG9vZGdhdGVDb3JlX1N1cnZleUFjdGl2aXR5X0xvZ0FjdGl2aXR5X1N1cnZleXNSZXByb2Nlc3NlZFwiO1xyXG5cdFx0fTtcclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIFNldEFjdGl2aXR5VHJhY2tpbmdDb250cmFjdHMgPSBjbGFzcyB7XHJcblx0XHRcdHB1YmxpYyBzdGF0aWMgRHVwbGljYXRlU3VydmV5SUQ6IHN0cmluZyA9IFwiRmxvb2RnYXRlQ29yZV9TdXJ2ZXlBY3Rpdml0eV9TZXRBY3Rpdml0eVRyYWNraW5nQ29udHJhY3RzX0R1cGxpY2F0ZVN1cnZleUlEXCI7XHJcblx0XHR9O1xyXG5cdH07XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Constants.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/FloodgateEngine.js":
/*!****************************************************!*\
  !*** ../FloodgateCore/dist/src/FloodgateEngine.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FloodgateEngine = void 0;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ./Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nvar CampaignDefinitionProvider_1 = __webpack_require__(/*! ./Campaign/CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\nvar CampaignManager_1 = __webpack_require__(/*! ./Campaign/CampaignManager */ \"../FloodgateCore/dist/src/Campaign/CampaignManager.js\");\nvar CampaignStateProvider_1 = __webpack_require__(/*! ./Campaign/CampaignStateProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignStateProvider.js\");\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateSettings_1 = __webpack_require__(/*! ./FloodgateSettings */ \"../FloodgateCore/dist/src/FloodgateSettings.js\");\nvar GovernedChannel_1 = __webpack_require__(/*! ./GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\nvar GovernedChannelStateProvider_1 = __webpack_require__(/*! ./GovernedChannelStateProvider */ \"../FloodgateCore/dist/src/GovernedChannelStateProvider.js\");\nvar Governor_1 = __webpack_require__(/*! ./Governor */ \"../FloodgateCore/dist/src/Governor.js\");\nvar SurveyActivityListener = __webpack_require__(/*! ./SurveyActivityListener */ \"../FloodgateCore/dist/src/SurveyActivityListener.js\");\nvar SurveyStatCollectionActivation_1 = __webpack_require__(/*! ./SurveyStatCollectionActivation */ \"../FloodgateCore/dist/src/SurveyStatCollectionActivation.js\");\nvar SurveyStatCollectionEventActivity_1 = __webpack_require__(/*! ./SurveyStatCollectionEventActivity */ \"../FloodgateCore/dist/src/SurveyStatCollectionEventActivity.js\");\nvar FileType = IFloodgateStorageProvider.FileType;\nvar ActivityTrackingContract_1 = __webpack_require__(/*! ./ActivityTrackingContract */ \"../FloodgateCore/dist/src/ActivityTrackingContract.js\");\nvar GovernanceUtils_1 = __webpack_require__(/*! ./GovernanceUtils */ \"../FloodgateCore/dist/src/GovernanceUtils.js\");\nvar Utils_1 = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n// Telemetry logger with no-op logger\nvar DefaultFloodgateTelemetryLogger = /** @class */ (function () {\n    function DefaultFloodgateTelemetryLogger() {\n    }\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_TriggerMet = function (campaignId, surveyId, surveyType, surveyActivityInfo, additionalSurveyInfo) { };\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_UserSelected = function (campaignId, surveyId, surveyType, additionalSurveyInfo) { };\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_CampaignLoad_Failed = function (errorMessage) { };\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_Error = function (eventId, errorMessage) { };\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_Event = function (eventId, properties) { };\n    // @Override\n    DefaultFloodgateTelemetryLogger.prototype.log_LocalError = function (message) {\n        var data = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            data[_i - 1] = arguments[_i];\n        }\n    };\n    return DefaultFloodgateTelemetryLogger;\n}());\nvar defaultSurveyActivityListener = {\n    run: function (survey) {\n    },\n    shouldAcceptActivity: function (activityName) {\n        return true;\n    },\n};\nvar globalSessionSurveyActivationCounts = {};\n/**\n * Floodgate Engine class.  The main wiring hub and the brains responsible for\n * linking together the survey definitions, governance, activity tracking, and\n * survey launchers.  Only one-instance-at-a-time of these should be created\n * per app session.\n */\nvar FloodgateEngine = /** @class */ (function () {\n    function FloodgateEngine(surveyClient, activityListener, launcherFactory, onSurveyActivatedCallback, storage, governor, surveyActivationStatsProvider, transporterFactory, governanceServiceClient) {\n        this.initializationStatus = 0 /* None */;\n        this.candidateSurveys = {};\n        this.launchedSurveys = {};\n        this.launchedLaunchers = [];\n        this.surveyEventSent = [];\n        this.staleTriggeredSurveysQueue = [];\n        if (!surveyClient) {\n            throw new Error(\"surveyClient must not be null\");\n        }\n        if (!activityListener) {\n            throw new Error(\"activityListener must not be null\");\n        }\n        if (!launcherFactory) {\n            throw new Error(\"launcherFactory must not be null\");\n        }\n        if (!onSurveyActivatedCallback) {\n            throw new Error(\"onSurveyActivatedCallback must not be null\");\n        }\n        if (!storage) {\n            throw new Error(\"storage must not be null\");\n        }\n        if (!governor) {\n            throw new Error(\"governor must not be null\");\n        }\n        if (!transporterFactory) {\n            throw new Error(\"transporterFactory must not be null\");\n        }\n        this.surveyClient = surveyClient;\n        this.activityListener = activityListener;\n        this.launcherFactory = launcherFactory;\n        this.onSurveyActivatedCallback = onSurveyActivatedCallback;\n        this.storage = storage;\n        this.governor = governor;\n        this.surveyActivationStatsProvider = surveyActivationStatsProvider;\n        this.governanceServiceClient = governanceServiceClient;\n        FloodgateEngine.transporterFactory = transporterFactory;\n        this.loggedFirstStart = false;\n        // Initialize our list to a valid, empty collection\n        this.setPendingSurveys(null);\n        // If the listener was pre-configured with survey for some reason, clear it now\n        this.activityListener.clearSurveys();\n        // Link ourselves with the listener\n        var thisObj = this; // Save current object in a variable to allow access from callback.\n        this.activityListener.setCallback({\n            run: function (surveyId, contextInfo) {\n                thisObj.onSurveyActivated(surveyId, contextInfo);\n            },\n            shouldAcceptActivity: function (activityName) {\n                return thisObj.shouldAcceptActivity(activityName);\n            },\n        });\n    }\n    FloodgateEngine.setTelemetryLogger = function (telemetryLogger) {\n        if (!telemetryLogger) {\n            throw new Error(\"telemetryLogger must not be null\");\n        }\n        FloodgateEngine.telemetryLogger = telemetryLogger;\n    };\n    FloodgateEngine.getTelemetryLogger = function () {\n        return FloodgateEngine.telemetryLogger;\n    };\n    FloodgateEngine.getTransportFactory = function () {\n        return FloodgateEngine.transporterFactory;\n    };\n    FloodgateEngine.make = function (buildVersion, launcherFactory, onSurveyActivatedCallback, fileBasedStorageProvider, hostBasedStorageProvider, stringProvider, environmentProvider, transporterFactory, campaignDefinitionProviders, userFactsProvider, governanceServiceClient) {\n        try {\n            var governedChannelStateProvider = GovernedChannelStateProvider_1.GovernedChannelStateProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\n            var surveyActivationStatsProvider = SurveyStatCollectionActivation_1.SurveyActivationStatsProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\n            var campaignStateProvider = CampaignStateProvider_1.CampaignStateProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\n            campaignDefinitionProviders.push(new CampaignDefinitionProvider_1.FileSystemCampaignDefinitionProvider(fileBasedStorageProvider));\n            return new FloodgateEngine(new CampaignManager_1.CampaignManager(campaignStateProvider, campaignDefinitionProviders, stringProvider, environmentProvider, buildVersion, new Date(), userFactsProvider), new SurveyActivityListener(defaultSurveyActivityListener, this.getTelemetryLogger), launcherFactory, onSurveyActivatedCallback, fileBasedStorageProvider, new Governor_1.Governor(governedChannelStateProvider), surveyActivationStatsProvider, transporterFactory, governanceServiceClient);\n        }\n        catch (e) {\n            this.telemetryLogger.log_Event(Constants_1.TelemetryEvent.FloodgateEngine.Make.Failed, { ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\n        }\n    };\n    /**\n     * Save all internal stats and floodgateSettings (merging with existing file contents), without stopping the engine.\n     */\n    FloodgateEngine.prototype.mergeAndSave = function () {\n        this.saveSettings();\n        this.saveSurveyActivationHistory();\n        this.saveSurveyEventActivityHistory();\n        // Inform surveyClient to save its state\n        this.surveyClient.saveCurrentState();\n        // Save governed channel states\n        this.governor.saveChannelStates();\n    };\n    /**\n     * Start the engine.  Checks feature enable state, causes survey definitions to be read, and tracked activities to be set on the listener.\n     */\n    FloodgateEngine.prototype.start = function () {\n        if (this.initializationStatus === 2 /* Initializing */ ||\n            this.initializationStatus === 3 /* Started */) {\n            return;\n        }\n        try {\n            this.setInitializationStatus(2 /* Initializing */);\n            this.loadSettingsAndPriorEventCounts();\n            var channelTypes = this.getAvailableChannelTypes();\n            this.surveyClient.refreshSurveyDefinitions(channelTypes);\n            this.setPendingSurveysAndStartFloodgate();\n            this.setInitializationStatus(3 /* Started */);\n        }\n        catch (e) {\n            this.setInitializationStatus(1 /* Error */);\n            FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.Start.Failed, { ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\n        }\n    };\n    /**\n     * Start the engine.  Checks feature enable state, causes survey definitions to be read, and tracked activities to be set on the listener.\n     */\n    FloodgateEngine.prototype.startAsync = function () {\n        if (this.initializationStatus === 2 /* Initializing */ ||\n            this.initializationStatus === 3 /* Started */) {\n            return Promise.resolve();\n        }\n        try {\n            this.setInitializationStatus(2 /* Initializing */);\n            this.loadSettingsAndPriorEventCounts();\n            var channelTypes_1 = this.getAvailableChannelTypes();\n            var thisFloodgateEngine_1 = this;\n            return new Promise(function (resolve, reject) {\n                thisFloodgateEngine_1.surveyClient.refreshSurveyDefinitionsAsync(channelTypes_1).then(function onFulfilled() {\n                    // Handle any stop() calls that happened while initializing\n                    if (thisFloodgateEngine_1.initializationStatus === 4 /* Stopped */) {\n                        thisFloodgateEngine_1.setInitializationStatus(3 /* Started */);\n                        thisFloodgateEngine_1.stop();\n                        FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.StartAsync.Stopped, { ErrorMessage: \"Stopped because of a pending stop() call\" });\n                    }\n                    else {\n                        thisFloodgateEngine_1.setPendingSurveysAndStartFloodgate();\n                    }\n                    resolve();\n                }).catch(function OnRejected(error) {\n                    thisFloodgateEngine_1.setInitializationStatus(1 /* Error */);\n                    FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.StartAsync.Failed, { ErrorMessage: \"Survey refresh error \" + (error && error.message) });\n                    reject(error);\n                });\n            });\n        }\n        catch (e) {\n            this.setInitializationStatus(1 /* Error */);\n            FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.StartAsync.Failed, { ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Stop the engine.  Causes tracked activities to be cleared and any in-progress counters not otherwise saved to be thrown out.\n     */\n    FloodgateEngine.prototype.stop = function () {\n        if (this.initializationStatus === 3 /* Started */) {\n            this.mergeAndSave();\n            // Clear our Survey list, and push that through to the listener\n            this.setPendingSurveys(null);\n            this.updateActivityListenerWithCurrentSurveyDefinitions();\n        }\n        this.setInitializationStatus(4 /* Stopped */);\n    };\n    /**\n     * Gets the IActivityListener logging interface for callers that want to log directly rather than through telemetry\n     */\n    FloodgateEngine.prototype.getActivityListener = function () {\n        return this.activityListener;\n    };\n    FloodgateEngine.prototype.setInitializationStatus = function (status) {\n        this.initializationStatus = status;\n    };\n    FloodgateEngine.prototype.saveSettings = function () {\n        this.storage.fileLock(FileType.FloodgateSettings);\n        try {\n            this.writeString(FileType.FloodgateSettings, FloodgateSettings_1.FloodgateSettings.toJson(this.floodgateSettings));\n        }\n        finally {\n            this.storage.fileUnlock(FileType.FloodgateSettings);\n        }\n    };\n    FloodgateEngine.prototype.loadSettingsAndPriorEventCounts = function () {\n        try {\n            // Load up the prior survey history and prior event counts\n            this.previousSurveyActivationStats = this.surveyActivationStatsProvider.load();\n            this.previousSurveyEventActivityStats =\n                SurveyStatCollectionEventActivity_1.SurveyStatCollectionEventActivity.fromJson(this.readString(FileType.SurveyEventActivityStats));\n            // get the list of survey Id - all the survey should have event sent already\n            var stats = this.previousSurveyEventActivityStats.getStats();\n            for (var key in stats) {\n                if (stats.hasOwnProperty(key)) {\n                    this.surveyEventSent.push(key);\n                }\n            }\n            // Load up the general floodgateSettings\n            this.floodgateSettings = FloodgateSettings_1.FloodgateSettings.fromJson(this.readString(FileType.FloodgateSettings));\n        }\n        catch (e) {\n            FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.Common.Error, { ErrorMessage: \"Error loading prior settings/events \" + (e && e.toString()) });\n        }\n    };\n    FloodgateEngine.prototype.getAvailableChannelTypes = function () {\n        // Make sure we've loaded the current survey definitions\n        var channels = this.governor.getAvailableChannelData();\n        var channelTypes = [];\n        channels.forEach(function (channel) {\n            if (channel) {\n                channelTypes.push(channel.getType());\n            }\n        });\n        return channelTypes;\n    };\n    FloodgateEngine.prototype.setPendingSurveysAndStartFloodgate = function () {\n        // Update our survey list, and push that through to the listener\n        this.setPendingSurveys(this.surveyClient.getAppSurveys());\n        this.updateActivityListenerWithCurrentSurveyDefinitions();\n        // Mark us as started\n        this.setInitializationStatus(3 /* Started */);\n        // Log our first start (aka floodgate boot) event\n        if (!this.loggedFirstStart) {\n            this.loggedFirstStart = true;\n            this.getActivityListener().logActivity(SurveyActivityListener.FloodgateStartActivityName);\n        }\n    };\n    FloodgateEngine.prototype.updateSurveyActivationStats = function (survey) {\n        var surveyInfo = survey.getSurveyInfo();\n        var surveyId = surveyInfo.getId();\n        var stats = this.previousSurveyActivationStats.getStats()[surveyId] || new SurveyStatCollectionActivation_1.SurveyActivationStats();\n        stats.Type = survey.getType();\n        stats.ExpirationTimeUtc = surveyInfo.getExpirationTimeUtc();\n        stats.ActivationTimeUtc = new Date();\n        stats.SurveyLaunchCount++;\n        this.previousSurveyActivationStats.addStats(surveyId, stats);\n        // Save the SurveyLaunchCountPerSession into global memory but not local storage\n        // so it won't be overwritten in local storage by another app instance\n        if (!globalSessionSurveyActivationCounts.hasOwnProperty(surveyId)) {\n            globalSessionSurveyActivationCounts[surveyId] = 0;\n        }\n        globalSessionSurveyActivationCounts[surveyId]++;\n    };\n    FloodgateEngine.prototype.saveSurveyActivationHistory = function () {\n        this.storage.fileLock(FileType.SurveyActivationStats);\n        try {\n            var statCollection = this.surveyActivationStatsProvider.load();\n            var previousStats = this.previousSurveyActivationStats.getStats();\n            // Build the update collection\n            var updateCollection = new SurveyStatCollectionActivation_1.SurveyStatCollectionActivation();\n            for (var key in this.launchedSurveys) {\n                if (this.launchedSurveys.hasOwnProperty(key)) {\n                    var survey = this.launchedSurveys[key];\n                    var surveyId = survey.getSurveyInfo().getId();\n                    // Make this part of the update list\n                    var stats = previousStats[surveyId];\n                    updateCollection.addStats(surveyId, stats);\n                }\n            }\n            // Actually merge our updates into the full collection\n            statCollection.accumulate(updateCollection);\n            this.surveyActivationStatsProvider.save(statCollection);\n            // Make sure to keep our internal collection consistent with what we just wrote\n            this.previousSurveyActivationStats = statCollection;\n        }\n        finally {\n            this.storage.fileUnlock(FileType.SurveyActivationStats);\n        }\n    };\n    FloodgateEngine.prototype.saveSurveyEventActivityHistory = function () {\n        this.storage.fileLock(FileType.SurveyEventActivityStats);\n        try {\n            var statCollection = SurveyStatCollectionEventActivity_1.SurveyStatCollectionEventActivity.fromJson(this.readString(FileType.SurveyEventActivityStats));\n            var now = new Date();\n            // Fill out our list of updates\n            var updateCollection = new SurveyStatCollectionEventActivity_1.SurveyStatCollectionEventActivity();\n            var _loop_1 = function (key) {\n                if (this_1.candidateSurveys.hasOwnProperty(key)) {\n                    var stats = new SurveyStatCollectionEventActivity_1.SurveyEventActivityStats();\n                    var survey = this_1.candidateSurveys[key];\n                    if (!survey.getSurveyInfo().isActiveForDate(now)) {\n                        return \"continue\";\n                    }\n                    stats.ExpirationTimeUtc = survey.getSurveyInfo().getExpirationTimeUtc();\n                    // Get the activities which are aggregated, if there aren't any continue\n                    var allActivities = survey.getSurveyInfo().getActivationEvent().getTrackingSet();\n                    var aggregateActivities_1 = [];\n                    var nonAggregateActivities_2 = [];\n                    allActivities.getList().forEach(function (data) {\n                        if (data) {\n                            if (data.getIsAggregate()) {\n                                aggregateActivities_1.push(data.getActivity());\n                            }\n                            else {\n                                nonAggregateActivities_2.push(data.getActivity());\n                            }\n                        }\n                    });\n                    stats.Counts = new Array(aggregateActivities_1.length);\n                    // Save off the counts we've added for this session\n                    for (var i = 0; i < aggregateActivities_1.length; i++) {\n                        stats.Counts[i] = this_1.activityListener.moveSessionCountIntoBaseCount(aggregateActivities_1[i], survey.getSurveyInfo().getId());\n                    }\n                    for (var _i = 0, nonAggregateActivities_1 = nonAggregateActivities_2; _i < nonAggregateActivities_1.length; _i++) {\n                        var activity = nonAggregateActivities_1[_i];\n                        this_1.activityListener.saveSessionTrackingActivity(activity);\n                    }\n                    // Make this part of the update list\n                    updateCollection.addStats(survey.getSurveyInfo().getId(), stats);\n                }\n            };\n            var this_1 = this;\n            for (var key in this.candidateSurveys) {\n                _loop_1(key);\n            }\n            // Actually merge our updates into the full collection\n            statCollection.accumulate(updateCollection);\n            this.writeString(FileType.SurveyEventActivityStats, SurveyStatCollectionEventActivity_1.SurveyStatCollectionEventActivity.toJson(statCollection));\n            // Make sure to keep our internal collection consistent with what we just wrote\n            this.previousSurveyEventActivityStats = statCollection;\n        }\n        finally {\n            this.storage.fileUnlock(FileType.SurveyEventActivityStats);\n        }\n    };\n    FloodgateEngine.prototype.setPendingSurveys = function (pendingSurveys) {\n        this.candidateSurveys = {};\n        if (pendingSurveys) {\n            for (var key in pendingSurveys) {\n                if (pendingSurveys.hasOwnProperty(key)) {\n                    var survey = pendingSurveys[key];\n                    if (this.launcherFactory.AcceptsSurvey(survey)) {\n                        this.candidateSurveys[key] = survey;\n                    }\n                }\n            }\n        }\n    };\n    FloodgateEngine.prototype.getCurrentSurveyDefinitions = function () {\n        var _this = this;\n        // Get a vector of Surveys from our id-based map\n        var surveyList = new Array();\n        var allCampaignDefinitionIDs = this.getAllCampaignDefinitionIDs();\n        var allCandidateCampaignDefinitionIDs = this.getAllCandidateCampaignDefinitionIDs();\n        // Get all the campaign definitions. We need info from these for telemetry.\n        var allCampaignDefinitions = this.surveyClient.getCampaignDefinitions();\n        var isSurveyAllowed = function (surveyInfo) {\n            // always allow business critical and approved campaigns\n            if (GovernanceUtils_1.isBusinessCriticalSurvey(surveyInfo)) {\n                return true;\n            }\n            var surveyActivationStats = _this.previousSurveyActivationStats.getBySurveyId(surveyInfo.getId());\n            if (GovernanceUtils_1.isMultiLaunchSurvey(surveyInfo) &&\n                !GovernanceUtils_1.hasSurveyReachedMaxLaunches(surveyInfo, surveyActivationStats) &&\n                !GovernanceUtils_1.hasSurveyReachedMaxLaunchesPerSession(surveyInfo, globalSessionSurveyActivationCounts)) {\n                return true;\n            }\n            // Skip over any candidate surveys that have been previously completed or not active anymore\n            if (surveyActivationStats || !surveyInfo.isActiveForDate(new Date())) {\n                return false;\n            }\n            return true;\n        };\n        for (var key in this.candidateSurveys) {\n            if (this.candidateSurveys.hasOwnProperty(key)) {\n                var survey = this.candidateSurveys[key];\n                var surveyInfo = survey.getSurveyInfo();\n                var campaignDefinition = allCampaignDefinitions[surveyInfo === null || surveyInfo === void 0 ? void 0 : surveyInfo.getBackEndId()];\n                if (!campaignDefinition || !isSurveyAllowed(surveyInfo)) {\n                    continue;\n                }\n                // send the UserSelected event if it is not sent before\n                if (this.surveyEventSent.indexOf(key) < 0) {\n                    this.surveyEventSent.push(key);\n                    var additionalSurveyInfo = this.getAdditionalSurveyInfoForTelemetry(survey, null /* contextInfo */, allCampaignDefinitionIDs, allCandidateCampaignDefinitionIDs);\n                    FloodgateEngine.telemetryLogger.log_UserSelected(surveyInfo.getBackEndId(), surveyInfo.getId(), survey.getType(), JSON.stringify(additionalSurveyInfo));\n                }\n                surveyList.push(survey);\n            }\n        }\n        return surveyList;\n    };\n    FloodgateEngine.prototype.getAdditionalSurveyInfoForTelemetry = function (survey, contextInfo, allCampaignDefinitionIDs, allCandidateCampaignDefinitionIDs) {\n        // Get all the campaign definitions. We need info from these for telemetry.\n        var allCampaignDefinitions = this.surveyClient.getCampaignDefinitions();\n        // Get the corresponding campaign definition to the survey in question.\n        var correspondingCampaignDefinition = allCampaignDefinitions[survey.getCampaignId()];\n        // Survey properties to get from its corresponding CampaignDefinition:\n        var percentageNumerator;\n        var percentageDenominator;\n        var nominationPeriodNumber;\n        var cooldownPeriodNumber;\n        percentageNumerator = correspondingCampaignDefinition.nominationScheme.percentageNumerator;\n        percentageDenominator = correspondingCampaignDefinition.nominationScheme.percentageDenominator;\n        nominationPeriodNumber = correspondingCampaignDefinition.nominationScheme.nominationPeriod.asTimeIntervalSeconds();\n        nominationPeriodNumber = Utils_1.isNOU(nominationPeriodNumber) ? -1 : nominationPeriodNumber; // Setting to -1 if null or undefined\n        cooldownPeriodNumber = correspondingCampaignDefinition.nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\n        cooldownPeriodNumber = Utils_1.isNOU(cooldownPeriodNumber) ? -1 : cooldownPeriodNumber; // Setting to -1 if null or undefined\n        var surveyInfo = survey.getSurveyInfo();\n        return {\n            allCampaignDefinitionIDs: allCampaignDefinitionIDs,\n            allCandidateCampaignDefinitionIDs: allCandidateCampaignDefinitionIDs,\n            channelType: surveyInfo.getGovernedChannelType(),\n            contextCount: contextInfo ? contextInfo.length : undefined,\n            cooldownPeriodNumber: cooldownPeriodNumber,\n            nominationPeriodNumber: nominationPeriodNumber,\n            percentageDenominator: percentageDenominator,\n            percentageNumerator: percentageNumerator,\n            surveyLauncherType: survey.getLauncherType(),\n            businessLevel: surveyInfo.getBusinessLevel(),\n            maxLaunches: surveyInfo.getMaxLaunches(),\n            maxLaunchesPerSession: surveyInfo.getMaxLaunchesPerSession(),\n        };\n    };\n    FloodgateEngine.prototype.getAllCandidateCampaignDefinitionIDs = function () {\n        var allCandidateCampaignDefinitionIDs = [];\n        // Get all the candidate surveys' campaign definition IDs\n        for (var key in this.candidateSurveys) {\n            if (this.candidateSurveys.hasOwnProperty(key)) {\n                var candidateSurvey = this.candidateSurveys[key];\n                allCandidateCampaignDefinitionIDs.push(candidateSurvey.getSurveyInfo().getBackEndId());\n            }\n        }\n        return allCandidateCampaignDefinitionIDs;\n    };\n    FloodgateEngine.prototype.getAllCampaignDefinitionIDs = function () {\n        var allCampaignDefinitions = this.surveyClient.getCampaignDefinitions();\n        var allCampaignDefinitionIDs = [];\n        for (var definitionsKey in allCampaignDefinitions) {\n            if (Object.prototype.hasOwnProperty.call(allCampaignDefinitions, definitionsKey)) {\n                var definition = allCampaignDefinitions[definitionsKey];\n                allCampaignDefinitionIDs.push(definition.campaignId);\n            }\n        }\n        return allCampaignDefinitionIDs;\n    };\n    FloodgateEngine.prototype.updateActivityListenerWithCurrentSurveyDefinitions = function () {\n        var surveyList = this.getCurrentSurveyDefinitions();\n        var trackingContractList = [];\n        for (var _i = 0, surveyList_1 = surveyList; _i < surveyList_1.length; _i++) {\n            var survey = surveyList_1[_i];\n            var surveyInfo = survey.getSurveyInfo();\n            var trackingContract = new ActivityTrackingContract_1.ActivityTrackingContract(surveyInfo.getId(), surveyInfo.getActivationEvent().getTrackingSet());\n            trackingContractList.push(trackingContract);\n        }\n        this.activityListener.SetActivityTrackingContracts(trackingContractList, this.previousSurveyEventActivityStats);\n    };\n    FloodgateEngine.prototype.setCriticalPendingSurveysAndUpdateActivityListener = function () {\n        var activeSurveys = {};\n        // Get all the candidate surveys' campaign definition IDs\n        for (var key in this.candidateSurveys) {\n            if (this.candidateSurveys.hasOwnProperty(key)) {\n                var candidateSurvey = this.candidateSurveys[key];\n                if (GovernanceUtils_1.isCriticalSurvey(candidateSurvey.getSurveyInfo())) {\n                    activeSurveys[key] = candidateSurvey;\n                }\n            }\n        }\n        if (Object.keys(activeSurveys).length > 0) {\n            this.setPendingSurveys(activeSurveys);\n            this.updateActivityListenerWithCurrentSurveyDefinitions();\n        }\n    };\n    FloodgateEngine.prototype.shouldAcceptActivity = function (activityName) {\n        return this.initializationStatus === 3 /* Started */ ||\n            activityName === SurveyActivityListener.FloodgateStartActivityName;\n    };\n    FloodgateEngine.prototype.onSurveyActivated = function (surveyId, contextInfo) {\n        // Find the survey object that corresponds to the surveyId passed\n        var surveys = this.getCurrentSurveyDefinitions();\n        var survey;\n        for (var _i = 0, surveys_1 = surveys; _i < surveys_1.length; _i++) {\n            var tempSurvey = surveys_1[_i];\n            if (tempSurvey.getSurveyInfo().getId() === surveyId) {\n                survey = tempSurvey;\n                break;\n            }\n        }\n        if (Utils_1.isNOU(survey)) {\n            FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.SurveyNotDefined, \"Survey is not defined in the current survey definitions.\");\n            return;\n        }\n        try {\n            var governedChannelType = survey.getSurveyInfo().getGovernedChannelType();\n            // If the governance service is in use, launch survey asynchronously\n            if (this.governanceServiceClient.isEnabled(governedChannelType)) {\n                // record the stale surveys, so we can clear its tracker if Engine is stopped\n                this.staleTriggeredSurveysQueue.push(survey);\n                // If there is no survey in stale before, launch the survey right away\n                if (this.staleTriggeredSurveysQueue.length === 1) {\n                    // Launch the survey asynchronously\n                    this.checkGovernanceServiceAndActivateSurvey(survey, governedChannelType, contextInfo);\n                }\n            }\n            else {\n                this.activateSurvey(survey, governedChannelType, contextInfo);\n            }\n        }\n        catch (e) {\n            FloodgateEngine.telemetryLogger.log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.Error, { ErrorMessage: \"Error activating survey \" + (e && e.toString()), ErrorDetails: e && e.stack });\n        }\n    };\n    FloodgateEngine.prototype.activateSurvey = function (survey, governedChannelType, contextInfo) {\n        var launchSurvey = false;\n        // Figure out if the activated survey is still relevant\n        if (!this.candidateSurveys[survey.getSurveyInfo().getId()]) {\n            // Survey is no longer relevant but was activated. Suppress it.\n            FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationIrrelevantSurvey, {\n                CampaignId: survey.getSurveyInfo().getBackEndId(),\n                SurveyId: survey.getSurveyInfo().getId(),\n            });\n        }\n        else if (!survey.getSurveyInfo().isActiveForDate(new Date())) {\n            // Survey is no longer active (e.g. it was when we registered it but it has now expired)\n            FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationExpiredSurvey, {\n                CampaignId: survey.getSurveyInfo().getBackEndId(),\n                SurveyId: survey.getSurveyInfo().getId(),\n            });\n        }\n        else {\n            // Refresh channels\n            this.governor.refreshChannelData();\n            if (GovernanceUtils_1.isCriticalSurvey(survey.getSurveyInfo())) {\n                launchSurvey = true;\n            }\n            else if (!this.governor.isChannelOpen(governedChannelType)) {\n                // Channel has closed and maxLaunches is not set, suppress the survey\n                FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.ClosedChannelType, { ClosedChannelType: GovernedChannel_1.GovernedChannelType[governedChannelType] });\n            }\n            else {\n                // Get latest survey states from provider\n                var refreshedSurveyActivationStats = this.surveyActivationStatsProvider.load();\n                if (refreshedSurveyActivationStats.getBySurveyId(survey.getSurveyInfo().getId())) {\n                    // Survey stats exists already, don't launch\n                    FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationStatsSuppressedSurvey, {\n                        CampaignId: survey.getSurveyInfo().getBackEndId(),\n                        SurveyId: survey.getSurveyInfo().getId(),\n                    });\n                }\n                else if (Object.keys(this.launchedSurveys).length === 0) {\n                    // for now we only support launching one survey per session unless it is multi-launch campaign\n                    // Track this survey activation for the launch history tracker\n                    launchSurvey = true;\n                }\n                else {\n                    var triggeredSurvey = Object.values(this.launchedSurveys)[0];\n                    if (!Utils_1.isNOU(triggeredSurvey)) {\n                        FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.OnSurveyActivated.SessionSuppressedSurvey, {\n                            CampaignId: triggeredSurvey.getSurveyInfo().getBackEndId(),\n                            SurveyId: triggeredSurvey.getSurveyInfo().getId(),\n                        });\n                    }\n                }\n            }\n            if (launchSurvey) {\n                this.launchedSurveys[survey.getSurveyInfo().getId()] = survey;\n            }\n        }\n        // At this point, regardless of whether or not the survey is still relevant, we should flush out the stats\n        this.updateSurveyActivationStats(survey);\n        this.mergeAndSave();\n        // shut off further survey launches\n        this.activityListener.clearSurveys();\n        // Clear the survey from stale list\n        this.staleTriggeredSurveysQueue = [];\n        // Actually launch the survey if possible\n        if (launchSurvey) {\n            // Get the stringified json with activity names, counts and isAggregate info for TriggetMet telemetry.\n            var activityTrackingString = survey.getSurveyInfo().getActivationEvent().getTrackingSet()\n                .getActivityTrackingInfo(this.activityListener, survey.getSurveyInfo().getId());\n            var additionalSurveyInfo = this.getAdditionalSurveyInfoForTelemetry(survey, contextInfo, this.getAllCampaignDefinitionIDs(), this.getAllCandidateCampaignDefinitionIDs());\n            // Only adding the governance service client state at TriggerMet event\n            additionalSurveyInfo.governanceServiceClientState = this.governanceServiceClient.getClientState();\n            FloodgateEngine.telemetryLogger.log_TriggerMet(survey.getSurveyInfo().getBackEndId(), survey.getSurveyInfo().getId(), survey.getType(), activityTrackingString, JSON.stringify(additionalSurveyInfo));\n            // Set govern channel\n            this.governor.startChannelCooldown(governedChannelType);\n            var surveyInfo = survey.getSurveyInfo();\n            var isSurveyComplete = true;\n            if (GovernanceUtils_1.isBusinessCriticalSurvey(surveyInfo)) {\n                // critical campaigns are not tracked\n                isSurveyComplete = false;\n            }\n            else if (GovernanceUtils_1.isMultiLaunchSurvey(surveyInfo)) {\n                var surveyActivationStats = this.previousSurveyActivationStats.getBySurveyId(surveyInfo.getId());\n                isSurveyComplete = GovernanceUtils_1.hasSurveyReachedMaxLaunches(surveyInfo, surveyActivationStats);\n            }\n            // Set campaign states\n            this.surveyClient.onSurveyActivated(surveyInfo, isSurveyComplete);\n            // Show the survey\n            this.launchLauncher(survey, contextInfo);\n            // check if there are any critical campaigns and start tracking again\n            this.setCriticalPendingSurveysAndUpdateActivityListener();\n        }\n    };\n    FloodgateEngine.prototype.checkGovernanceServiceAndActivateSurvey = function (survey, governedChannelType, contextInfo) {\n        return __awaiter(this, void 0, void 0, function () {\n            var campaignDefinition, campaignCooldown, channelCooldown, serviceResult, launchSurvey, lastSurveyTriggerInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        campaignDefinition = this.surveyClient.getCampaignDefinitions()[survey.getCampaignId()];\n                        campaignCooldown = campaignDefinition.nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\n                        channelCooldown = Governor_1.Governor.GetChannelCoolDown(governedChannelType);\n                        return [4 /*yield*/, this.governanceServiceClient\n                                .checkGovernancePermitAsync(survey, campaignCooldown, channelCooldown, governedChannelType)];\n                    case 1:\n                        serviceResult = _a.sent();\n                        launchSurvey = false;\n                        // Log the stale\n                        FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.CheckGovernanceServiceAndActivateSurvey.GovernanceServiceClientCompleted, {\n                            Message: JSON.stringify(this.createGorvernanceResponseTelemetry(serviceResult)),\n                        });\n                        // Check if engine is still running\n                        if (this.initializationStatus !== 3 /* Started */) {\n                            return [2 /*return*/];\n                        }\n                        if (!serviceResult.error) {\n                            // Check result is permitted\n                            if (serviceResult.permission) { // the Governance Service is permitting, continue to trigger\n                                launchSurvey = true;\n                            }\n                            else {\n                                lastSurveyTriggerInfo = serviceResult.lastTriggerSurvey;\n                                // For now, we only know the channel is in cooldown but not the specific survey\n                                // So only set governed channel to new cooldown\n                                this.governor.startChannelCooldown(governedChannelType, lastSurveyTriggerInfo.lastTriggerSurveyTime);\n                                // Clear the survey relating to channel\n                                this.clearSurveyWithChannel(governedChannelType);\n                            }\n                        }\n                        else {\n                            // If force to display with error, continue to trigger the survey\n                            if (this.governanceServiceClient.shouldForceDisplay()) {\n                                launchSurvey = true;\n                                // Log the force to display event\n                                FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FloodgateEngine.CheckGovernanceServiceAndActivateSurvey.GovernanceServiceForceToDisplay, {\n                                    ErrorMessage: serviceResult.errorMessage,\n                                });\n                            }\n                        }\n                        if (launchSurvey) {\n                            // Launch the survey\n                            this.activateSurvey(survey, governedChannelType, contextInfo);\n                            return [2 /*return*/];\n                        }\n                        // If there is only one survey, which is the current one in process, clear queue and return\n                        if (this.staleTriggeredSurveysQueue.length <= 1) {\n                            this.staleTriggeredSurveysQueue = [];\n                            return [2 /*return*/];\n                        }\n                        // Remove the first activated survey from the list which is the current one in process\n                        this.staleTriggeredSurveysQueue.shift();\n                        // Playback the next activated survey in waiting\n                        this.checkGovernanceServiceAndActivateSurvey(this.staleTriggeredSurveysQueue[0], governedChannelType, contextInfo);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FloodgateEngine.prototype.readString = function (fileType) {\n        return this.storage.read(fileType);\n    };\n    FloodgateEngine.prototype.writeString = function (fileType, str) {\n        this.storage.write(fileType, str);\n    };\n    FloodgateEngine.prototype.launchLauncher = function (survey, contextInfo) {\n        var launcher = this.launcherFactory.makeSurveyLauncher(survey);\n        if (launcher) {\n            this.launchedLaunchers.push(launcher);\n            this.onSurveyActivatedCallback.onSurveyActivated(launcher, survey, { contextInfo: contextInfo });\n        }\n    };\n    FloodgateEngine.prototype.clearSurveyWithChannel = function (governedChannelType) {\n        var activeSurveys = {};\n        // Get all the candidate surveys' campaign definition IDs\n        for (var key in this.candidateSurveys) {\n            if (this.candidateSurveys.hasOwnProperty(key)) {\n                var candidateSurvey = this.candidateSurveys[key];\n                if (candidateSurvey.getSurveyInfo().getGovernedChannelType() !== governedChannelType) {\n                    activeSurveys[key] = candidateSurvey;\n                }\n            }\n        }\n        this.candidateSurveys = activeSurveys;\n        this.activityListener.UpdateActivityTrackingContracts(this.candidateSurveys);\n    };\n    FloodgateEngine.prototype.createGorvernanceResponseTelemetry = function (serviceResult) {\n        return {\n            FloodgateEngineStatus: this.initializationStatus.toString(),\n            GovernanceServiceResult: serviceResult,\n            StaleTriggeredSurveysQueueCount: this.staleTriggeredSurveysQueue.length - 1,\n        };\n    };\n    // Initialize telemetry logger with no-op logger\n    FloodgateEngine.telemetryLogger = new DefaultFloodgateTelemetryLogger();\n    return FloodgateEngine;\n}());\nexports.FloodgateEngine = FloodgateEngine;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/FloodgateEngine.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/FloodgateSettings.js":
/*!******************************************************!*\
  !*** ../FloodgateCore/dist/src/FloodgateSettings.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FloodgateSettings = void 0;\n/**\n * General floodgate settings\n */\nvar FloodgateSettings = /** @class */ (function () {\n    function FloodgateSettings() {\n    }\n    /**\n     * Convert to Json\n     */\n    FloodgateSettings.toJson = function (object) {\n        return JSON.stringify(object);\n    };\n    /**\n     * Load from Json\n     */\n    FloodgateSettings.fromJson = function (json) {\n        return JSON.parse(json);\n    };\n    return FloodgateSettings;\n}());\nexports.FloodgateSettings = FloodgateSettings;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0Zsb29kZ2F0ZVNldHRpbmdzLnRzPzRmMjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSDtJQUFBO0lBY0EsQ0FBQztJQWJBOztPQUVHO0lBQ1csd0JBQU0sR0FBcEIsVUFBcUIsTUFBeUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNXLDBCQUFRLEdBQXRCLFVBQXVCLElBQVk7UUFDbEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRix3QkFBQztBQUFELENBQUM7QUFkWSw4Q0FBaUIiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9GbG9vZGdhdGVTZXR0aW5ncy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBHZW5lcmFsIGZsb29kZ2F0ZSBzZXR0aW5nc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZsb29kZ2F0ZVNldHRpbmdzIHtcclxuXHQvKipcclxuXHQgKiBDb252ZXJ0IHRvIEpzb25cclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIHRvSnNvbihvYmplY3Q6IEZsb29kZ2F0ZVNldHRpbmdzKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTG9hZCBmcm9tIEpzb25cclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIGZyb21Kc29uKGpzb246IHN0cmluZyk6IEZsb29kZ2F0ZVNldHRpbmdzIHtcclxuXHRcdHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/FloodgateSettings.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/GovernanceUtils.js":
/*!****************************************************!*\
  !*** ../FloodgateCore/dist/src/GovernanceUtils.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasSurveyReachedMaxLaunches = exports.hasSurveyReachedMaxLaunchesPerSession = exports.isCriticalSurvey = exports.isBusinessCriticalSurvey = exports.isMultiLaunchSurvey = void 0;\nvar Api_1 = __webpack_require__(/*! ./Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\nvar Utils_1 = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nfunction isMultiLaunchSurvey(surveyInfo) {\n    var maxLaunches = surveyInfo === null || surveyInfo === void 0 ? void 0 : surveyInfo.getMaxLaunches();\n    return Utils_1.isNumber(maxLaunches) && maxLaunches > 1;\n}\nexports.isMultiLaunchSurvey = isMultiLaunchSurvey;\nfunction isBusinessCriticalSurvey(surveyInfo) {\n    var businessLevel = surveyInfo === null || surveyInfo === void 0 ? void 0 : surveyInfo.getBusinessLevel();\n    return !Utils_1.isNOU(businessLevel) && businessLevel === Api_1.ISurveyInfo.BusinessLevel.Critical;\n}\nexports.isBusinessCriticalSurvey = isBusinessCriticalSurvey;\nfunction isCriticalSurvey(surveyInfo) {\n    return isMultiLaunchSurvey(surveyInfo) || isBusinessCriticalSurvey(surveyInfo);\n}\nexports.isCriticalSurvey = isCriticalSurvey;\nfunction hasSurveyReachedMaxLaunchesPerSession(surveyInfo, surveyActivationStats) {\n    var _a;\n    if (isMultiLaunchSurvey(surveyInfo) && Utils_1.isNumber(surveyInfo.getMaxLaunchesPerSession())) {\n        var surveyLaunchCountInSession = (_a = surveyActivationStats[surveyInfo.getId()]) !== null && _a !== void 0 ? _a : 0;\n        var maxLaunchesPerSession = surveyInfo.getMaxLaunchesPerSession();\n        return surveyLaunchCountInSession >= maxLaunchesPerSession;\n    }\n    return true;\n}\nexports.hasSurveyReachedMaxLaunchesPerSession = hasSurveyReachedMaxLaunchesPerSession;\nfunction hasSurveyReachedMaxLaunches(surveyInfo, surveyActivationStats) {\n    if (isMultiLaunchSurvey(surveyInfo)) {\n        var surveyLaunchCount = (surveyActivationStats === null || surveyActivationStats === void 0 ? void 0 : surveyActivationStats.SurveyLaunchCount) || 0;\n        return surveyLaunchCount >= surveyInfo.getMaxLaunches();\n    }\n    return true;\n}\nexports.hasSurveyReachedMaxLaunches = hasSurveyReachedMaxLaunches;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0dvdmVybmFuY2VVdGlscy50cz9kYjNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlGQUF3QztBQUd4Qyx1RkFBMEM7QUFFMUMsU0FBZ0IsbUJBQW1CLENBQUMsVUFBdUI7SUFDMUQsSUFBTSxXQUFXLEdBQUcsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLGNBQWMsRUFBRSxDQUFDO0lBQ2pELE9BQU8sZ0JBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFIRCxrREFHQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLFVBQXVCO0lBQy9ELElBQU0sYUFBYSxHQUFHLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JELE9BQU8sQ0FBQyxhQUFLLENBQUMsYUFBYSxDQUFDLElBQUksYUFBYSxLQUFLLGlCQUFXLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUN0RixDQUFDO0FBSEQsNERBR0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxVQUF1QjtJQUN2RCxPQUFPLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFGRCw0Q0FFQztBQUVELFNBQWdCLHFDQUFxQyxDQUFDLFVBQXVCLEVBQUUscUJBQTBDOztJQUN4SCxJQUFJLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLGdCQUFRLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFFLENBQUMsRUFBRTtRQUN2RixJQUFNLDBCQUEwQixTQUFHLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxtQ0FBSSxDQUFDLENBQUM7UUFDbEYsSUFBTSxxQkFBcUIsR0FBRyxVQUFVLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNwRSxPQUFPLDBCQUEwQixJQUFJLHFCQUFxQixDQUFDO0tBQzNEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBUkQsc0ZBUUM7QUFFRCxTQUFnQiwyQkFBMkIsQ0FBQyxVQUF1QixFQUFFLHFCQUE0QztJQUNoSCxJQUFJLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3BDLElBQU0saUJBQWlCLEdBQUcsc0JBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsaUJBQWlCLEtBQUksQ0FBQyxDQUFDO1FBQ3hFLE9BQU8saUJBQWlCLElBQUksVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ3hEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBUEQsa0VBT0MiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9Hb3Zlcm5hbmNlVXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU3VydmV5SW5mbyB9IGZyb20gXCIuL0FwaS9BcGlcIjtcclxuaW1wb3J0IHsgSURpY3Rpb25hcnkgfSBmcm9tIFwiLi9Db21tb25cIjtcclxuaW1wb3J0IHsgU3VydmV5QWN0aXZhdGlvblN0YXRzIH0gZnJvbSBcIi4vU3VydmV5U3RhdENvbGxlY3Rpb25BY3RpdmF0aW9uXCI7XHJcbmltcG9ydCB7IGlzTk9VLCBpc051bWJlciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aUxhdW5jaFN1cnZleShzdXJ2ZXlJbmZvOiBJU3VydmV5SW5mbyk6IGJvb2xlYW4ge1xyXG5cdGNvbnN0IG1heExhdW5jaGVzID0gc3VydmV5SW5mbz8uZ2V0TWF4TGF1bmNoZXMoKTtcclxuXHRyZXR1cm4gaXNOdW1iZXIobWF4TGF1bmNoZXMpICYmIG1heExhdW5jaGVzID4gMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnVzaW5lc3NDcml0aWNhbFN1cnZleShzdXJ2ZXlJbmZvOiBJU3VydmV5SW5mbyk6IGJvb2xlYW4ge1xyXG5cdGNvbnN0IGJ1c2luZXNzTGV2ZWwgPSBzdXJ2ZXlJbmZvPy5nZXRCdXNpbmVzc0xldmVsKCk7XHJcblx0cmV0dXJuICFpc05PVShidXNpbmVzc0xldmVsKSAmJiBidXNpbmVzc0xldmVsID09PSBJU3VydmV5SW5mby5CdXNpbmVzc0xldmVsLkNyaXRpY2FsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNDcml0aWNhbFN1cnZleShzdXJ2ZXlJbmZvOiBJU3VydmV5SW5mbyk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBpc011bHRpTGF1bmNoU3VydmV5KHN1cnZleUluZm8pIHx8IGlzQnVzaW5lc3NDcml0aWNhbFN1cnZleShzdXJ2ZXlJbmZvKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc1N1cnZleVJlYWNoZWRNYXhMYXVuY2hlc1BlclNlc3Npb24oc3VydmV5SW5mbzogSVN1cnZleUluZm8sIHN1cnZleUFjdGl2YXRpb25TdGF0czogSURpY3Rpb25hcnk8bnVtYmVyPik6IGJvb2xlYW4ge1xyXG5cdGlmIChpc011bHRpTGF1bmNoU3VydmV5KHN1cnZleUluZm8pICYmIGlzTnVtYmVyKHN1cnZleUluZm8uZ2V0TWF4TGF1bmNoZXNQZXJTZXNzaW9uKCkpKSB7XHJcblx0XHRjb25zdCBzdXJ2ZXlMYXVuY2hDb3VudEluU2Vzc2lvbiA9IHN1cnZleUFjdGl2YXRpb25TdGF0c1tzdXJ2ZXlJbmZvLmdldElkKCldID8/IDA7XHJcblx0XHRjb25zdCBtYXhMYXVuY2hlc1BlclNlc3Npb24gPSBzdXJ2ZXlJbmZvLmdldE1heExhdW5jaGVzUGVyU2Vzc2lvbigpO1xyXG5cdFx0cmV0dXJuIHN1cnZleUxhdW5jaENvdW50SW5TZXNzaW9uID49IG1heExhdW5jaGVzUGVyU2Vzc2lvbjtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzU3VydmV5UmVhY2hlZE1heExhdW5jaGVzKHN1cnZleUluZm86IElTdXJ2ZXlJbmZvLCBzdXJ2ZXlBY3RpdmF0aW9uU3RhdHM6IFN1cnZleUFjdGl2YXRpb25TdGF0cyk6IGJvb2xlYW4ge1xyXG5cdGlmIChpc011bHRpTGF1bmNoU3VydmV5KHN1cnZleUluZm8pKSB7XHJcblx0XHRjb25zdCBzdXJ2ZXlMYXVuY2hDb3VudCA9IHN1cnZleUFjdGl2YXRpb25TdGF0cz8uU3VydmV5TGF1bmNoQ291bnQgfHwgMDtcclxuXHRcdHJldHVybiBzdXJ2ZXlMYXVuY2hDb3VudCA+PSBzdXJ2ZXlJbmZvLmdldE1heExhdW5jaGVzKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/GovernanceUtils.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/GovernedChannel.js":
/*!****************************************************!*\
  !*** ../FloodgateCore/dist/src/GovernedChannel.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GovernedChannel = exports.GovernedChannelType = void 0;\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar GovernedChannelType;\n(function (GovernedChannelType) {\n    GovernedChannelType[GovernedChannelType[\"Standard\"] = 0] = \"Standard\";\n    GovernedChannelType[GovernedChannelType[\"Urgent\"] = 1] = \"Urgent\";\n    GovernedChannelType[GovernedChannelType[\"Banner\"] = 2] = \"Banner\";\n    GovernedChannelType[GovernedChannelType[\"TeachingMessage\"] = 3] = \"TeachingMessage\";\n})(GovernedChannelType = exports.GovernedChannelType || (exports.GovernedChannelType = {}));\n(function (GovernedChannelType) {\n    function getDefault() { return GovernedChannelType.Standard; }\n    GovernedChannelType.getDefault = getDefault;\n})(GovernedChannelType = exports.GovernedChannelType || (exports.GovernedChannelType = {}));\nvar GovernedChannel = /** @class */ (function () {\n    function GovernedChannel(type, name, cooldownSeconds, cooldownStartTime) {\n        if (!Utils.isEnumValue(type, GovernedChannelType)) {\n            throw new Error(\"type is not a valid GovernedChannelType\");\n        }\n        if (!name) {\n            throw new Error(\"name must not be null or empty\");\n        }\n        if (cooldownSeconds < 0) {\n            throw new Error(\"cooldownSeconds must not be negative\");\n        }\n        this.type = type;\n        this.name = name;\n        this.cooldownSeconds = cooldownSeconds;\n        this.setCooldownStartTime(cooldownStartTime);\n    }\n    GovernedChannel.prototype.setCooldownStartTime = function (cooldownStartTime) {\n        // Set the start time\n        this.cooldownStartTime = cooldownStartTime;\n        if (Utils.isNOU(this.cooldownStartTime)) {\n            // Null cooldownStartTime means cool down has never been initiated, so set the cooldownEndTime to distant past\n            this.cooldownEndTime = Utils.getDistantPast();\n            return;\n        }\n        // Calculate the end time, but don't overflow past max.\n        this.cooldownEndTime = Utils.addSecondsWithoutOverflow(this.cooldownStartTime, this.cooldownSeconds);\n    };\n    // @Override\n    GovernedChannel.prototype.isOpen = function () {\n        return this.isOpenAtDate(new Date());\n    };\n    // @Override\n    GovernedChannel.prototype.isOpenAtDate = function (date) {\n        if (!date) {\n            return false;\n        }\n        return (date > this.cooldownEndTime);\n    };\n    // @Override\n    GovernedChannel.prototype.getType = function () {\n        return this.type;\n    };\n    // @Override\n    GovernedChannel.prototype.getName = function () {\n        return this.name;\n    };\n    // @Override\n    GovernedChannel.prototype.getCooldownSeconds = function () {\n        return this.cooldownSeconds;\n    };\n    // @Override\n    GovernedChannel.prototype.getCooldownStartTime = function () {\n        return this.cooldownStartTime;\n    };\n    // @Override\n    GovernedChannel.prototype.getCooldownEndTime = function () {\n        return this.cooldownEndTime;\n    };\n    return GovernedChannel;\n}());\nexports.GovernedChannel = GovernedChannel;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0dvdmVybmVkQ2hhbm5lbC50cz8zMDU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFGQUFpQztBQUVqQyxJQUFZLG1CQUtYO0FBTEQsV0FBWSxtQkFBbUI7SUFDOUIscUVBQVE7SUFDUixpRUFBTTtJQUNOLGlFQUFNO0lBQ04sbUZBQWU7QUFDaEIsQ0FBQyxFQUxXLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBSzlCO0FBRUQsV0FBaUIsbUJBQW1CO0lBQ25DLFNBQWdCLFVBQVUsS0FBMEIsT0FBTyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQTFFLDhCQUFVLGFBQWdFO0FBQzNGLENBQUMsRUFGZ0IsbUJBQW1CLEdBQW5CLDJCQUFtQixLQUFuQiwyQkFBbUIsUUFFbkM7QUF5Q0Q7SUFPQyx5QkFBbUIsSUFBeUIsRUFBRSxJQUFZLEVBQUUsZUFBdUIsRUFBRSxpQkFBdUI7UUFDM0csSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLG1CQUFtQixDQUFDLEVBQUU7WUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksZUFBZSxHQUFHLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU0sOENBQW9CLEdBQTNCLFVBQTRCLGlCQUF1QjtRQUNsRCxxQkFBcUI7UUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBRTNDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUN4Qyw4R0FBOEc7WUFDOUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDOUMsT0FBTztTQUNQO1FBRUQsdURBQXVEO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELFlBQVk7SUFDTCxnQ0FBTSxHQUFiO1FBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBWTtJQUNMLHNDQUFZLEdBQW5CLFVBQW9CLElBQVU7UUFDN0IsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDO1NBQ2I7UUFFRCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBWTtJQUNMLGlDQUFPLEdBQWQ7UUFDQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELFlBQVk7SUFDTCxpQ0FBTyxHQUFkO1FBQ0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxZQUFZO0lBQ0wsNENBQWtCLEdBQXpCO1FBQ0MsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZO0lBQ0wsOENBQW9CLEdBQTNCO1FBQ0MsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDL0IsQ0FBQztJQUVELFlBQVk7SUFDTCw0Q0FBa0IsR0FBekI7UUFDQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDN0IsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQztBQTlFWSwwQ0FBZSIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0dvdmVybmVkQ2hhbm5lbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XHJcblxyXG5leHBvcnQgZW51bSBHb3Zlcm5lZENoYW5uZWxUeXBlIHtcclxuXHRTdGFuZGFyZCwgLy8gMFxyXG5cdFVyZ2VudCwgLy8gMVxyXG5cdEJhbm5lciwgLy8gMlxyXG5cdFRlYWNoaW5nTWVzc2FnZSwgLy8gM1xyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIEdvdmVybmVkQ2hhbm5lbFR5cGUge1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0KCk6IEdvdmVybmVkQ2hhbm5lbFR5cGUgeyByZXR1cm4gR292ZXJuZWRDaGFubmVsVHlwZS5TdGFuZGFyZDsgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHb3Zlcm5lZENoYW5uZWxEYXRhIHtcclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSB0eXBlIG9mIEdvdmVybmVkQ2hhbm5lbCB0aGlzIG9iamVjdCByZXByZXNlbnRzXHJcblx0ICovXHJcblx0Z2V0VHlwZSgpOiBHb3Zlcm5lZENoYW5uZWxUeXBlO1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBuYW1lIG9mIHRoaXMgR292ZXJuZWRDaGFubmVsXHJcblx0ICovXHJcblx0Z2V0TmFtZSgpOiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGFtb3VudCBvZiB0aW1lIGR1cmluZyB3aGljaCB0aGlzIGNoYW5uZWwgd2lsbCByZWZ1c2UgbmV3IHN1cnZleXMgYWZ0ZXIgYSBzdWNjZXNzZnVsIHByb21wdFxyXG5cdCAqL1xyXG5cdGdldENvb2xkb3duU2Vjb25kcygpOiBudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGxhc3QgdGltZSB0aGlzIGNoYW5uZWwgc3RhcnRlZCBhIGNvb2wgZG93biAoYWthIHRoZSBsYXN0IHRpbWUgYSBzdXJ2ZXkgd2FzIHN1Y2Nlc3NmdWxseSBzaG93bikuXHJcblx0ICogTnVsbCBpZiBjb29sIGRvd24gaGFzIG5ldmVyIGJlZW4gaW5pdGlhdGVkXHJcblx0ICovXHJcblx0Z2V0Q29vbGRvd25TdGFydFRpbWUoKTogRGF0ZTtcclxuXHJcblx0LyoqXHJcblx0ICogSWYgaW4gY29vbCBkb3duLCByZXR1cm5zIHRoZSB0aW1lIGluIHdoaWNoIHRoaXMgY2hhbm5lbCB3aWxsIG5leHQgYmUgXCJPcGVuXCIuXHJcblx0ICogRWxzZSByZXR1cm5zIHRoZSBsYXN0IHRpbWUgdGhpcyBjaGFubmVsIGJlY2FtZSBcIk9wZW5cIi5cclxuXHQgKi9cclxuXHRnZXRDb29sZG93bkVuZFRpbWUoKTogRGF0ZTtcclxuXHJcblx0LyoqXHJcblx0ICogV2hldGhlciBvciBub3QgdGhpcyBjaGFubmVsIGlzIG9wZW4gdG8gbmV3IHN1cnZleXMgYXQgdGhpcyBjdXJyZW50IHBvaW50IGluIHRpbWUgKGFrYSBOb3cpXHJcblx0ICovXHJcblx0aXNPcGVuKCk6IGJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoaXMgY2hhbm5lbCBpcyBvcGVuIHRvIG5ldyBzdXJ2ZXlzIGF0IHRoZSBzcGVjaWZpZWQgcG9pbnQgaW4gdGltZVxyXG5cdCAqL1xyXG5cdGlzT3BlbkF0RGF0ZShkYXRlOiBEYXRlKTogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdvdmVybmVkQ2hhbm5lbCBpbXBsZW1lbnRzIElHb3Zlcm5lZENoYW5uZWxEYXRhIHtcclxuXHRwcml2YXRlIHR5cGU6IEdvdmVybmVkQ2hhbm5lbFR5cGU7XHJcblx0cHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBjb29sZG93blNlY29uZHM6IG51bWJlcjtcclxuXHRwcml2YXRlIGNvb2xkb3duU3RhcnRUaW1lOiBEYXRlO1xyXG5cdHByaXZhdGUgY29vbGRvd25FbmRUaW1lOiBEYXRlO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IodHlwZTogR292ZXJuZWRDaGFubmVsVHlwZSwgbmFtZTogc3RyaW5nLCBjb29sZG93blNlY29uZHM6IG51bWJlciwgY29vbGRvd25TdGFydFRpbWU6IERhdGUpIHtcclxuXHRcdGlmICghVXRpbHMuaXNFbnVtVmFsdWUodHlwZSwgR292ZXJuZWRDaGFubmVsVHlwZSkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwidHlwZSBpcyBub3QgYSB2YWxpZCBHb3Zlcm5lZENoYW5uZWxUeXBlXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghbmFtZSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJuYW1lIG11c3Qgbm90IGJlIG51bGwgb3IgZW1wdHlcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGNvb2xkb3duU2Vjb25kcyA8IDApIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY29vbGRvd25TZWNvbmRzIG11c3Qgbm90IGJlIG5lZ2F0aXZlXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5jb29sZG93blNlY29uZHMgPSBjb29sZG93blNlY29uZHM7XHJcblx0XHR0aGlzLnNldENvb2xkb3duU3RhcnRUaW1lKGNvb2xkb3duU3RhcnRUaW1lKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRDb29sZG93blN0YXJ0VGltZShjb29sZG93blN0YXJ0VGltZTogRGF0ZSk6IHZvaWQge1xyXG5cdFx0Ly8gU2V0IHRoZSBzdGFydCB0aW1lXHJcblx0XHR0aGlzLmNvb2xkb3duU3RhcnRUaW1lID0gY29vbGRvd25TdGFydFRpbWU7XHJcblxyXG5cdFx0aWYgKFV0aWxzLmlzTk9VKHRoaXMuY29vbGRvd25TdGFydFRpbWUpKSB7XHJcblx0XHRcdC8vIE51bGwgY29vbGRvd25TdGFydFRpbWUgbWVhbnMgY29vbCBkb3duIGhhcyBuZXZlciBiZWVuIGluaXRpYXRlZCwgc28gc2V0IHRoZSBjb29sZG93bkVuZFRpbWUgdG8gZGlzdGFudCBwYXN0XHJcblx0XHRcdHRoaXMuY29vbGRvd25FbmRUaW1lID0gVXRpbHMuZ2V0RGlzdGFudFBhc3QoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgZW5kIHRpbWUsIGJ1dCBkb24ndCBvdmVyZmxvdyBwYXN0IG1heC5cclxuXHRcdHRoaXMuY29vbGRvd25FbmRUaW1lID0gVXRpbHMuYWRkU2Vjb25kc1dpdGhvdXRPdmVyZmxvdyh0aGlzLmNvb2xkb3duU3RhcnRUaW1lLCB0aGlzLmNvb2xkb3duU2Vjb25kcyk7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgaXNPcGVuKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXNPcGVuQXREYXRlKG5ldyBEYXRlKCkpO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGlzT3BlbkF0RGF0ZShkYXRlOiBEYXRlKTogYm9vbGVhbiB7XHJcblx0XHRpZiAoIWRhdGUpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAoZGF0ZSA+IHRoaXMuY29vbGRvd25FbmRUaW1lKTtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXRUeXBlKCk6IEdvdmVybmVkQ2hhbm5lbFR5cGUge1xyXG5cdFx0cmV0dXJuIHRoaXMudHlwZTtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldENvb2xkb3duU2Vjb25kcygpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXMuY29vbGRvd25TZWNvbmRzO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldENvb2xkb3duU3RhcnRUaW1lKCk6IERhdGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuY29vbGRvd25TdGFydFRpbWU7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0Q29vbGRvd25FbmRUaW1lKCk6IERhdGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuY29vbGRvd25FbmRUaW1lO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/GovernedChannel.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/GovernedChannelStateProvider.js":
/*!*****************************************************************!*\
  !*** ../FloodgateCore/dist/src/GovernedChannelStateProvider.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileBasedGovernedChannelStateProvider = exports.HostBasedGovernedChannelStateProvider = exports.GovernedChannelStateProviderFactory = exports.GovernedChannelState = void 0;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ./Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ./FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar GovernedChannel_1 = __webpack_require__(/*! ./GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\nvar StateProviderHelpers = __webpack_require__(/*! ./StateProviderHelpers */ \"../FloodgateCore/dist/src/StateProviderHelpers.js\");\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar FileType = IFloodgateStorageProvider.FileType;\nvar GovernedChannelState = /** @class */ (function () {\n    function GovernedChannelState(type, cooldownStartTime) {\n        this.ChannelType = type;\n        this.CooldownStartTimeUtc = cooldownStartTime;\n        if (!this.validate()) {\n            throw new Error(\"Constructor arguments are not valid\");\n        }\n    }\n    /**\n     * Method to deserialize a JSON object to class object\n     * @param input: JSON object\n     * Returns class object\n     */\n    GovernedChannelState.deserialize = function (input) {\n        var result;\n        if (!input) {\n            return null;\n        }\n        // Validation is handled by GovernedChannelState's constructor\n        try {\n            result = new GovernedChannelState(input.ChannelType, input.CooldownStartTimeUtc);\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.GovernedChannelState.Deserialize.Failed, { ErrorMessage: e.toString() });\n            return null;\n        }\n        return result;\n    };\n    GovernedChannelState.prototype.validate = function () {\n        if (!Utils.isEnumValue(this.ChannelType, GovernedChannel_1.GovernedChannelType)) {\n            return false;\n        }\n        // make it a date object if it's a valid UTC date time value\n        if (Utils.isUtcDatetimeString(this.CooldownStartTimeUtc)) {\n            this.CooldownStartTimeUtc = Utils.stringToDate(this.CooldownStartTimeUtc);\n            // Allow null and bad cooldownStartTime\n        }\n        else if (Utils.isNOU(this.CooldownStartTimeUtc) || !Utils.isDate(this.CooldownStartTimeUtc)) {\n            this.CooldownStartTimeUtc = Utils.getDistantPast();\n        }\n        return true;\n    };\n    GovernedChannelState.prototype.getType = function () {\n        return this.ChannelType;\n    };\n    GovernedChannelState.prototype.getCooldownStartTime = function () {\n        return this.CooldownStartTimeUtc;\n    };\n    return GovernedChannelState;\n}());\nexports.GovernedChannelState = GovernedChannelState;\nvar GovernedChannelStateProviderFactory = /** @class */ (function () {\n    function GovernedChannelStateProviderFactory() {\n    }\n    GovernedChannelStateProviderFactory.make = function (fileBasedStorage, hostBasedStorage) {\n        if (hostBasedStorage) {\n            return new HostBasedGovernedChannelStateProvider(fileBasedStorage, hostBasedStorage);\n        }\n        return new FileBasedGovernedChannelStateProvider(fileBasedStorage);\n    };\n    return GovernedChannelStateProviderFactory;\n}());\nexports.GovernedChannelStateProviderFactory = GovernedChannelStateProviderFactory;\n/**\n * Class representing what is stored in the file.\n */\nvar FileData = /** @class */ (function () {\n    function FileData() {\n    }\n    return FileData;\n}());\nvar HostBasedGovernedChannelStateProvider = /** @class */ (function () {\n    function HostBasedGovernedChannelStateProvider(fileBasedStorage, hostBasedStorage) {\n        if (!hostBasedStorage) {\n            throw new Error(\"host-based storage must not be null\");\n        }\n        this.hostBasedStorage = hostBasedStorage;\n        // file-based provider is optional\n        if (fileBasedStorage) {\n            this.fileBasedStateProvider = new FileBasedGovernedChannelStateProvider(fileBasedStorage);\n        }\n    }\n    // @Override\n    HostBasedGovernedChannelStateProvider.prototype.load = function () {\n        var statesFromHost = this.getStatesFromHost();\n        var statesFromFile;\n        if (this.fileBasedStateProvider) {\n            statesFromFile = this.fileBasedStateProvider.load();\n        }\n        var StateCollections = StateProviderHelpers.MergeAndUpdateGovernedChannelStates(statesFromFile, statesFromHost);\n        return StateCollections.find(0 /* Merged */);\n    };\n    // @Override\n    HostBasedGovernedChannelStateProvider.prototype.save = function (states) {\n        var _this = this;\n        if (!states) {\n            return;\n        }\n        var statesFromHost = this.getStatesFromHost();\n        var StateCollections = StateProviderHelpers.MergeAndUpdateGovernedChannelStates(states, statesFromHost);\n        var toBeUpdatedStates = StateCollections.find(1 /* ToBeUpdated */);\n        var mergedStates = StateCollections.find(0 /* Merged */);\n        // write delta_data to Host\n        if (toBeUpdatedStates) {\n            toBeUpdatedStates.forEach(function (state) {\n                var stateValue = StateProviderHelpers.makeSettingItemValue(JSON.stringify(state));\n                _this.hostBasedStorage.upsertSettingItem(FileType[FileType.GovernedChannelStates], String(state.getType()), stateValue);\n            });\n        }\n        // Write merged data to File\n        if (this.fileBasedStateProvider) {\n            this.fileBasedStateProvider.save(mergedStates);\n        }\n    };\n    HostBasedGovernedChannelStateProvider.prototype.getStatesFromHost = function () {\n        var states = [];\n        var settings = this.hostBasedStorage.readSettingList(FileType[FileType.GovernedChannelStates]);\n        for (var key in settings) {\n            if (!settings.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = settings[key];\n            var dataString = StateProviderHelpers.extractSettingItemValueSubString(value);\n            var itemObject = {};\n            try {\n                itemObject = JSON.parse(dataString);\n                var newState = GovernedChannelState.deserialize(itemObject);\n                if (newState) {\n                    states.push(newState);\n                }\n            }\n            catch (e) {\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.HostBasedGovernedChannelStateProvider.GetStatesFromHost.Failed, { ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\n            }\n        }\n        return states;\n    };\n    return HostBasedGovernedChannelStateProvider;\n}());\nexports.HostBasedGovernedChannelStateProvider = HostBasedGovernedChannelStateProvider;\nvar FileBasedGovernedChannelStateProvider = /** @class */ (function () {\n    function FileBasedGovernedChannelStateProvider(storage) {\n        if (!storage) {\n            throw new Error(\"storage must not be null\");\n        }\n        this.storage = storage;\n    }\n    // @Override\n    FileBasedGovernedChannelStateProvider.prototype.load = function () {\n        // Load channel state from file using _storageProvider (get back string)\n        var readString = this.storage.read(FileType.GovernedChannelStates);\n        if (!readString) {\n            return [];\n        }\n        var fileData;\n        try {\n            fileData = JSON.parse(readString);\n            var result_1 = [];\n            if (fileData && fileData.ChannelStates) {\n                fileData.ChannelStates.forEach(function (state) {\n                    var newState = GovernedChannelState.deserialize(state);\n                    if (newState) {\n                        result_1.push(newState);\n                    }\n                });\n            }\n            return result_1;\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.FileBasedGovernedChannelStateProvider.Load.Failed, { ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + readString });\n            return [];\n        }\n    };\n    // @Override\n    FileBasedGovernedChannelStateProvider.prototype.save = function (states) {\n        if (!states) {\n            return;\n        }\n        var fileData = new FileData();\n        fileData.ChannelStates = states;\n        var writeString = JSON.stringify(fileData);\n        this.storage.write(FileType.GovernedChannelStates, writeString);\n    };\n    return FileBasedGovernedChannelStateProvider;\n}());\nexports.FileBasedGovernedChannelStateProvider = FileBasedGovernedChannelStateProvider;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/GovernedChannelStateProvider.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Governor.js":
/*!*********************************************!*\
  !*** ../FloodgateCore/dist/src/Governor.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Governor = exports.DEFAULT_TEACHING_MESSAGE_COOLDOWN = void 0;\nvar GovernedChannel_1 = __webpack_require__(/*! ./GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\nvar GovernedChannelStateProvider_1 = __webpack_require__(/*! ./GovernedChannelStateProvider */ \"../FloodgateCore/dist/src/GovernedChannelStateProvider.js\");\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar isNOU = Utils.isNOU;\nexports.DEFAULT_TEACHING_MESSAGE_COOLDOWN = 15;\nvar DefaultChannelData = /** @class */ (function () {\n    function DefaultChannelData(name, cooldownSeconds) {\n        this.name = name;\n        this.cooldownSeconds = cooldownSeconds;\n    }\n    return DefaultChannelData;\n}());\nvar Governor = /** @class */ (function () {\n    function Governor(channelStateProvider) {\n        this.channels = [];\n        if (!channelStateProvider) {\n            throw new Error(\"channelStateProvider must not be null\");\n        }\n        this.channelStateProvider = channelStateProvider;\n        this.loadChannels();\n    }\n    Governor.GetChannelCoolDown = function (channelType) {\n        var channelData = Governor.defaultChannelData[channelType];\n        return channelData ? channelData.cooldownSeconds : 0;\n    };\n    Governor.SetDefaultChannelCoolDown = function (channelType, cooldownSeconds) {\n        var channelData = Governor.defaultChannelData[channelType];\n        if (channelData) {\n            channelData.cooldownSeconds = cooldownSeconds;\n        }\n    };\n    // @Override\n    Governor.prototype.refreshChannelData = function () {\n        this.loadChannels();\n    };\n    // @Override\n    Governor.prototype.getAvailableChannelData = function () {\n        var channelData = [];\n        for (var key in this.channels) {\n            if (this.channels.hasOwnProperty(key)) {\n                var channel = this.channels[key];\n                if (channel.isOpen()) {\n                    channelData.push(channel);\n                }\n            }\n        }\n        return channelData;\n    };\n    // @Override\n    Governor.prototype.isChannelOpen = function (type) {\n        if (isNOU(type)) {\n            throw new Error(\"type must not be null\");\n        }\n        return this.channels[type].isOpen();\n    };\n    // @Override\n    Governor.prototype.startChannelCooldown = function (type, date) {\n        if (isNOU(type)) {\n            throw new Error(\"type must not be null\");\n        }\n        date = date ? date : new Date();\n        // Start the cool down\n        this.channels[type].setCooldownStartTime(date);\n        // Save the new channel state for future sessions\n        this.saveChannelStates();\n    };\n    Governor.prototype.saveChannelStates = function () {\n        // Build up the list of channel states\n        var channelStates = [];\n        for (var key in this.channels) {\n            if (this.channels.hasOwnProperty(key)) {\n                var channel = this.channels[key];\n                var channelState = new GovernedChannelStateProvider_1.GovernedChannelState(channel.getType(), channel.getCooldownStartTime());\n                channelStates.push(channelState);\n            }\n        }\n        this.channelStateProvider.save(channelStates);\n    };\n    Governor.prototype.loadChannels = function () {\n        // Load up state from previous sessions\n        this.loadChannelStatesFromProvider();\n        // For any missing channels, init them from scratch\n        // There's no straightforward way to iterate enums, we need to iterate through the enum array\n        //    filtering out just the numeric enum values (excluding enum names).\n        for (var item in GovernedChannel_1.GovernedChannelType) {\n            if (GovernedChannel_1.GovernedChannelType.hasOwnProperty(item)) {\n                var key = Number(item);\n                // skip if key is not numeric enum value, or if already exists\n                if (isNaN(key) || this.channels[key]) {\n                    continue;\n                }\n                var defaultData = Governor.defaultChannelData[key];\n                var newChannel = new GovernedChannel_1.GovernedChannel(key, defaultData.name, defaultData.cooldownSeconds, null);\n                this.channels[key] = newChannel;\n            }\n        }\n    };\n    Governor.prototype.loadChannelStatesFromProvider = function () {\n        this.channels = [];\n        var channelStates = this.channelStateProvider.load();\n        for (var key in channelStates) {\n            if (channelStates.hasOwnProperty(key)) {\n                var channelState = channelStates[key];\n                var type = channelState.getType();\n                var defaultData = Governor.defaultChannelData[type];\n                var newChannel = new GovernedChannel_1.GovernedChannel(type, defaultData.name, defaultData.cooldownSeconds, channelState.getCooldownStartTime());\n                this.channels[newChannel.getType()] = newChannel;\n            }\n        }\n    };\n    Governor.minute = 60;\n    Governor.hour = 60 * Governor.minute;\n    Governor.day = 24 * Governor.hour;\n    // Array of default values for each channel type. Indexed by the GovernedChannelType enum name.\n    Governor.defaultChannelData = [\n        new DefaultChannelData(GovernedChannel_1.GovernedChannelType[GovernedChannel_1.GovernedChannelType.Standard], 14 * Governor.day),\n        new DefaultChannelData(GovernedChannel_1.GovernedChannelType[GovernedChannel_1.GovernedChannelType.Urgent], 0),\n        new DefaultChannelData(GovernedChannel_1.GovernedChannelType[GovernedChannel_1.GovernedChannelType.Banner], 15 * Governor.day),\n        new DefaultChannelData(GovernedChannel_1.GovernedChannelType[GovernedChannel_1.GovernedChannelType.TeachingMessage], exports.DEFAULT_TEACHING_MESSAGE_COOLDOWN * Governor.day),\n    ];\n    return Governor;\n}());\nexports.Governor = Governor;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Governor.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/ISurveyInfo.js":
/*!************************************************!*\
  !*** ../FloodgateCore/dist/src/ISurveyInfo.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyInfo;\n(function (ISurveyInfo) {\n    var BusinessLevel;\n    (function (BusinessLevel) {\n        BusinessLevel[BusinessLevel[\"None\"] = 0] = \"None\";\n        BusinessLevel[BusinessLevel[\"Critical\"] = 1] = \"Critical\";\n    })(BusinessLevel = ISurveyInfo.BusinessLevel || (ISurveyInfo.BusinessLevel = {}));\n    ISurveyInfo.DOM_TYPE_TAGNAME = \"Type\";\n    ISurveyInfo.DOM_TYPE_VALUE = \"Survey\";\n    ISurveyInfo.DOM_ID_TAGNAME = \"SurveyID\";\n    ISurveyInfo.JSON_SURVEY_KEYNAME = \"survey\";\n    ISurveyInfo.JSON_ID_KEYNAME = \"surveyId\";\n})(ISurveyInfo || (ISurveyInfo = {}));\nmodule.exports = ISurveyInfo;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0lTdXJ2ZXlJbmZvLnRzP2ZmYTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXlHQSxJQUFPLFdBQVcsQ0F5QmpCO0FBekJELFdBQU8sV0FBVztJQVVqQixJQUFZLGFBR1g7SUFIRCxXQUFZLGFBQWE7UUFDeEIsaURBQVE7UUFDUix5REFBUTtJQUNULENBQUMsRUFIVyxhQUFhLEdBQWIseUJBQWEsS0FBYix5QkFBYSxRQUd4QjtJQU9ZLDRCQUFnQixHQUFHLE1BQU0sQ0FBQztJQUMxQiwwQkFBYyxHQUFHLFFBQVEsQ0FBQztJQUMxQiwwQkFBYyxHQUFHLFVBQVUsQ0FBQztJQUM1QiwrQkFBbUIsR0FBRyxRQUFRLENBQUM7SUFDL0IsMkJBQWUsR0FBRyxVQUFVLENBQUM7QUFDM0MsQ0FBQyxFQXpCTSxXQUFXLEtBQVgsV0FBVyxRQXlCakI7QUFFRCxpQkFBUyxXQUFXLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9JU3VydmV5SW5mby5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTdXJ2ZXlEb21Xcml0ZXIgfSBmcm9tIFwiLi9BcGkvSVN1cnZleURvbVdyaXRlclwiO1xyXG5pbXBvcnQgeyBJU3VydmV5SnNvbldyaXRlciB9IGZyb20gXCIuL0FwaS9JU3VydmV5SnNvbldyaXRlclwiO1xyXG5pbXBvcnQgeyBHb3Zlcm5lZENoYW5uZWxUeXBlIH0gZnJvbSBcIi4vR292ZXJuZWRDaGFubmVsXCI7XHJcbmltcG9ydCAqIGFzIElTdXJ2ZXlFdmVudCBmcm9tIFwiLi9JU3VydmV5RXZlbnRcIjtcclxuaW1wb3J0IHsgSVN1cnZleU1ldGFkYXRhIH0gZnJvbSBcIi4vSVN1cnZleU1ldGFkYXRhXCI7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWNjZXNzIHRoZSBiYXNpY3Mgb2YgYSBTdXJ2ZXlcclxuICovXHJcbmludGVyZmFjZSBJU3VydmV5SW5mbyBleHRlbmRzIElTdXJ2ZXlEb21Xcml0ZXIsIElTdXJ2ZXlKc29uV3JpdGVyIHtcclxuXHQvKipcclxuXHQgKiBBIGdsb2JhbGx5IHVuaXF1ZSwgYnV0IG90aGVyd2lzZSBvcGFxdWUsIGlkZW50aXR5IGZvciB0aGlzIHBhcnRpY3VsYXIgc3VydmV5XHJcblx0ICovXHJcblx0Z2V0SWQoKTogc3RyaW5nO1xyXG5cclxuXHQvKipcclxuXHQgKiBBIGdsb2JhbGx5IHVuaXF1ZSwgYnV0IG90aGVyd2lzZSBvcGFxdWUsIGlkZW50aXR5IGZvciB0aGlzIHBhcnRpY3VsYXIgc3VydmV5IG9uIHRoZSBPQ1YgYmFja2VuZFxyXG5cdCAqIE1heSBiZSB0aGUgc2FtZSwgb3IgZGlmZmVyZW50IHRoYW4gZ2V0SWRcclxuXHQgKi9cclxuXHRnZXRCYWNrRW5kSWQoKTogc3RyaW5nO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgZ292ZXJlbmQgY2hhbm5lbCB0aGF0IHRoaXMgc3VydmV5IHdpbGwgYmUgZGVsaXZlcmVkL2ZpbHRlcmVkIHRocm91Z2hcclxuXHQgKi9cclxuXHRnZXRHb3Zlcm5lZENoYW5uZWxUeXBlKCk6IEdvdmVybmVkQ2hhbm5lbFR5cGU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSByYXcgc3RyaW5nIHByb3ZpZGVkIGFzIHRoZSBzdXJ2ZXkncyBzdGFydCBkYXRlLCB3aXRoIG5vIGVycm9yIGNoZWNraW5nXHJcblx0ICovXHJcblx0Z2V0UmF3U3RhcnRUaW1lVXRjKCk6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHN0YXJ0IHRpbWUsIGluIFVUQywgb2YgdGhpcyBTdXJ2ZXkuICBCZWZvcmUgdGhlIGNsaWVudCBoYXMgcGFzc2VkIHRoaXMgZGF0ZVxyXG5cdCAqIHRoZSBzdXJ2ZXkgd2lsbCB3b24ndCBiZSBsb2FkZWQgaW50byB0aGUgc3VydmV5IGFjdGl2aXR5IGxpc3RlbmVyLlxyXG5cdCAqIElmIG5vIHN0YXJ0IGRhdGUgaXMgZ2l2ZW4sIHJldHVybnMgZGlzdGFudFBhc3QuXHJcblx0ICogSWYgYmFkIHN0YXJ0IGRhdGUgZ2l2ZW4sIHJldHVybnMgZGlzdGFudEZ1dHVyZVxyXG5cdCAqIE90aGVyd2lzZSwgcmV0dXJucyBkYXRlXHJcblx0ICovXHJcblx0Z2V0U3RhcnRUaW1lVXRjKCk6IERhdGU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBleHBpcmF0aW9uIHRpbWUsIGluIFVUQywgb2YgdGhpcyBTdXJ2ZXkuIE9uY2UgdGhlIGNsaWVudCBoYXMgcGFzc2VkIHRoaXMgZGF0ZSwgaXQgc2hvdWxkIGNsZWFuIGFueVxyXG5cdCAqIGNhY2hlZCBkYXRhLCBhbmQgc2hvdWxkIHJlamVjdCBhbnkgaW5jb21pbmcgc3VydmV5cyB0aGF0IGhhdmUgb3RoZXJ3aXNlIGV4cGlyZWQgYnV0IGFyZSBzdGlsbCBhY3RpdmVcclxuXHQgKiBpbiB0aGUgZmxpZ2h0aW5nIHN5c3RlbVxyXG5cdCAqIElmIG5vL2JhZCBleHBpcmF0aW9uIGRhdGUgZ2l2ZW4sIHJldHVybnMgZGlzdGFudFBhc3QgdG8gbWFrZSBzdXJlIHRoaXMgc3VydmV5IGlzIGFsd2F5cyBleHBpcmVkLlxyXG5cdCAqL1xyXG5cdGdldEV4cGlyYXRpb25UaW1lVXRjKCk6IERhdGU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBleHBpcmF0aW9uIHRpbWUsIGluIFVUQywgb2YgdGhpcyBTdXJ2ZXkuICBPbmNlIHRoZSBjbGllbnQgaGFzIHBhc3NlZCB0aGlzIGRhdGUsIGl0IHNob3VsZCBjbGVhbiBhbnlcclxuXHQgKiBjYWNoZWQgZGF0YSwgYW5kIHNob3VsZCByZWplY3QgYW55IGluY29taW5nIHN1cnZleXMgdGhhdCBoYXZlIG90aGVyd2lzZSBleHBpcmVkIGJ1dCBhcmUgc3RpbGwgYWN0aXZlXHJcblx0ICogaW4gdGhlIGZsaWdodGluZyBzeXN0ZW1cclxuXHQgKi9cclxuXHRnZXRSYXdFeHBpcmF0aW9uVGltZVV0YygpOiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlICdkYXRlJyBpcyBiZXR3ZWVuIHRoZSBzdGFydC9leHBpcmF0aW9uIGRhdGVzIGZvciB0aGlzIHN1cnZleS5cclxuXHQgKi9cclxuXHRpc0FjdGl2ZUZvckRhdGUoZGF0ZTogRGF0ZSk6IGJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGFjdGl2YXRpb24gZXZlbnQgdGhhdCBzaG91bGQgYmUgcGx1bWJlZCB0aHJvdWdoIHRvIHRoZSBGbG9vZGdhdGVFbmdpbmUvU3VydmV5QWN0aXZpeXRMaXN0ZW5lci5cclxuXHQgKiBXaGVuIGFjdGl2YXRlZCwgdGhpcyBzdXJ2ZXkgc2hvdWxkIGJlIHNob3duIHRvIHRoZSB1c2VyLlxyXG5cdCAqL1xyXG5cdGdldEFjdGl2YXRpb25FdmVudCgpOiBJU3VydmV5RXZlbnQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIHByZWZlcnJlZCBsYXVuY2ggbWVjaGFuaXNtIGJhc2VkIG9uIHRoaXMgc3VydmV5J3MgZGF0YSBwYXlsb2FkLiAgVGhpcyBtYXkgb3IgbWF5IG5vdCBiZVxyXG5cdCAqIHJlc3BlY3RlZCBieSB0aGUgTGF1bmNoZXJGYWN0b3J5IGRlcGVuZGluZyBvbiB0aGUgcGxhdGZvcm0gYW5kIGltcGxlbWVudGF0aW9uLCBhbmQgaXMgc3RyaWN0bHkgY29uc2lkZXJlZFxyXG5cdCAqIGEgYmVoYXZpb3JhbCBoaW50XHJcblx0ICovXHJcblx0Z2V0UHJlZmVycmVkTGF1bmNoVHlwZSgpOiBJU3VydmV5SW5mby5MYXVuY2hUeXBlO1xyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm4gYWRkaXRpb25hbERhdGFSZXF1ZXN0ZWQgYXJyYXlcclxuXHQgKi9cclxuXHRpc0FkZGl0aW9uYWxEYXRhUmVxdWVzdGVkKGFkZGl0aW9uYWxEYXRhOiBJU3VydmV5SW5mby5BZGRpdGlvbmFsRGF0YVR5cGUpOiBib29sZWFuO1xyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm4gdGhlIGxhdW5jaGVyIHR5cGUgc3RyaW5nXHJcblx0ICovXHJcblx0Z2V0TGF1bmNoZXJUeXBlKCk6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgbWV0YWRhdGEgb2YgdGhlIHN1cnZleSwgdGhpcyBpcyBvcHRpb25hbCBidXQgaWYgYXZhaWxhYmxlIGl0IGNhbiBiZSB1c2VkIGJ5IGxhdW5jaGVyIHRvXHJcblx0ICogbWFrZSBhcHByb3ByaWF0ZSBkZWNpc2lvbnMgd2hpbGUgbGF1bmNoaW5nIGEgc3VyZmFjZS5cclxuXHQgKi9cclxuXHRnZXRNZXRhZGF0YSgpOiBJU3VydmV5TWV0YWRhdGE7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYnVzaW5lc3NMZXZlbFxyXG5cdCAqL1xyXG5cdGdldEJ1c2luZXNzTGV2ZWwoKTogSVN1cnZleUluZm8uQnVzaW5lc3NMZXZlbDtcclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBtYXhMYXVuY2hlc1xyXG5cdCAqL1xyXG5cdGdldE1heExhdW5jaGVzKCk6IG51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBtYXhMYXVuY2hlcyBQZXIgc2Vzc2lvblxyXG5cdCAqL1xyXG5cdGdldE1heExhdW5jaGVzUGVyU2Vzc2lvbigpOiBudW1iZXI7XHJcbn1cclxuXHJcbm1vZHVsZSBJU3VydmV5SW5mbyB7XHJcblx0ZXhwb3J0IGNvbnN0IGVudW0gTGF1bmNoVHlwZSB7XHJcblx0XHQvLyBObyBsYXVuY2ggdHlwZSBzcGVjaWZpZWQsIGRlZmVyIHRvIHRoZSBsYXVuY2hlciBmYWN0b3J5IGNvZGVcclxuXHRcdERlZmF1bHQgPSBcIkRlZmF1bHRcIixcclxuXHRcdC8vIFByZWZlciBhIG5vdGlmaWNhdGlvbi1iYXNlZCBsYXVuY2hlciAobGlrZSB0aGUgd2luZG93cyB0b2FzdCBsYXVuY2hlciB3aGVuIHByZXNlbnQpXHJcblx0XHROb3RpZmljYXRpb24gPSBcIk5vdGlmaWNhdGlvblwiLFxyXG5cdFx0Ly8gUHJlZmVyIGEgbW9kYWwtZGlhbG9nIGJhc2VkIGxhdW5jaGVyXHJcblx0XHRNb2RhbCA9IFwiTW9kYWxcIixcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBlbnVtIEJ1c2luZXNzTGV2ZWwge1xyXG5cdFx0Tm9uZSA9IDAsXHJcblx0XHRDcml0aWNhbCxcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBjb25zdCBlbnVtIEFkZGl0aW9uYWxEYXRhVHlwZSB7XHJcblx0XHQvLyBSZXF1ZXN0IGVtYWlsIGFkZHJlc3NcclxuXHRcdEVtYWlsQWRkcmVzcyxcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBjb25zdCBET01fVFlQRV9UQUdOQU1FID0gXCJUeXBlXCI7XHJcblx0ZXhwb3J0IGNvbnN0IERPTV9UWVBFX1ZBTFVFID0gXCJTdXJ2ZXlcIjtcclxuXHRleHBvcnQgY29uc3QgRE9NX0lEX1RBR05BTUUgPSBcIlN1cnZleUlEXCI7XHJcblx0ZXhwb3J0IGNvbnN0IEpTT05fU1VSVkVZX0tFWU5BTUUgPSBcInN1cnZleVwiO1xyXG5cdGV4cG9ydCBjb25zdCBKU09OX0lEX0tFWU5BTUUgPSBcInN1cnZleUlkXCI7XHJcbn1cclxuXHJcbmV4cG9ydCA9IElTdXJ2ZXlJbmZvO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/ISurveyInfo.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/IndexedTracker.js":
/*!***************************************************!*\
  !*** ../FloodgateCore/dist/src/IndexedTracker.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndexedTracker = void 0;\nvar IndexedTracker = /** @class */ (function () {\n    function IndexedTracker() {\n    }\n    return IndexedTracker;\n}());\nexports.IndexedTracker = IndexedTracker;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0luZGV4ZWRUcmFja2VyLnRzPzE5ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7SUFBQTtJQUlBLENBQUM7SUFBRCxxQkFBQztBQUFELENBQUM7QUFKWSx3Q0FBYyIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL0luZGV4ZWRUcmFja2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFjdGl2aXR5VHJhY2tlciA9IHJlcXVpcmUoXCIuL0FjdGl2aXR5VHJhY2tlclwiKTtcclxuaW1wb3J0IElTdXJ2ZXkgPSByZXF1aXJlKFwiLi9BcGkvSVN1cnZleVwiKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbmRleGVkVHJhY2tlciB7XHJcblx0cHVibGljIGluZGV4OiBudW1iZXI7XHJcblx0cHVibGljIHN1cnZleUlkOiBzdHJpbmc7XHJcblx0cHVibGljIHRyYWNrZXI6IEFjdGl2aXR5VHJhY2tlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/IndexedTracker.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/StateProviderHelpers.js":
/*!*********************************************************!*\
  !*** ../FloodgateCore/dist/src/StateProviderHelpers.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeAndUpdateSurveyActivationStats = exports.MergeAndUpdateCampaignStates = exports.MergeAndUpdateGovernedChannelStates = exports.makeSettingItemValue = exports.extractSettingItemValueSubString = exports.ItemCollection = void 0;\nvar SurveyStatCollectionActivation_1 = __webpack_require__(/*! ../src/SurveyStatCollectionActivation */ \"../FloodgateCore/dist/src/SurveyStatCollectionActivation.js\");\nvar ItemCollection = /** @class */ (function () {\n    function ItemCollection() {\n        this.items = {};\n        this.itemCount = 0;\n    }\n    ItemCollection.prototype.add = function (key, value) {\n        if (!this.items[key]) {\n            this.itemCount++;\n        }\n        this.items[key] = value;\n    };\n    ItemCollection.prototype.find = function (key) {\n        return this.items[key];\n    };\n    ItemCollection.prototype.remove = function (key) {\n        var item = this.items[key];\n        if (item) {\n            delete this.items[key];\n            this.itemCount--;\n        }\n        return item;\n    };\n    ItemCollection.prototype.count = function () {\n        return this.itemCount;\n    };\n    return ItemCollection;\n}());\nexports.ItemCollection = ItemCollection;\nfunction extractSettingItemValueSubString(itemValue) {\n    if (!itemValue) {\n        return itemValue;\n    }\n    var beginPos = itemValue.indexOf(SETTING_DATA_OPEN_TAG) + SETTING_DATA_OPEN_TAG.length;\n    var endPos = itemValue.indexOf(SETTING_DATA_CLOSE_TAG);\n    if (beginPos < 0 || endPos < 0) {\n        return itemValue;\n    }\n    return itemValue.substring(beginPos, endPos);\n}\nexports.extractSettingItemValueSubString = extractSettingItemValueSubString;\nfunction makeSettingItemValue(value) {\n    if (!value) {\n        return SETTING_DATA_OPEN_TAG + SETTING_DATA_CLOSE_TAG;\n    }\n    return SETTING_DATA_OPEN_TAG + value + SETTING_DATA_CLOSE_TAG;\n}\nexports.makeSettingItemValue = makeSettingItemValue;\nfunction MergeAndUpdateGovernedChannelStates(previousStates, currentStates) {\n    var stateCollections = new ItemCollection();\n    // Todo: move the following into a generic method to be shared\n    if (!previousStates && !currentStates) {\n        return stateCollections;\n    }\n    if (!previousStates) {\n        stateCollections.add(0 /* Merged */, currentStates);\n        return stateCollections;\n    }\n    if (!currentStates) {\n        stateCollections.add(0 /* Merged */, previousStates);\n        stateCollections.add(1 /* ToBeUpdated */, previousStates);\n        return stateCollections;\n    }\n    var mergedStates = [];\n    var toBeUpdatedStates = [];\n    if (previousStates) {\n        previousStates.forEach(function (previousState) {\n            // find matching in current states\n            var pos = -1;\n            var currentState;\n            for (var i = 0; i < currentStates.length; i++) {\n                currentState = currentStates[i];\n                if (currentState.getType() === previousState.getType()) {\n                    pos = i;\n                    break;\n                }\n            }\n            // if previous state is not in current states\n            if (pos === -1) {\n                // add previous state to merged\n                mergedStates.push(previousState);\n                // add previous state to toUpdated\n                toBeUpdatedStates.push(previousState);\n                return;\n            }\n            // if ActivationTimeUtc of previous is greater than current\n            if (previousState.getCooldownStartTime() > currentState.getCooldownStartTime()) {\n                // add previous state to merged\n                mergedStates.push(previousState);\n                // add previous state to toUpdated\n                toBeUpdatedStates.push(previousState);\n            }\n            else {\n                // add current state to merged\n                mergedStates.push(currentState);\n            }\n            // remove state from current states\n            currentStates.splice(pos, 1);\n        });\n    }\n    // for the remaining current states\n    if (currentStates) {\n        currentStates.forEach(function (currentState) {\n            // add current state to merged\n            mergedStates.push(currentState);\n        });\n    }\n    stateCollections.add(0 /* Merged */, mergedStates);\n    if (toBeUpdatedStates.length > 0) {\n        stateCollections.add(1 /* ToBeUpdated */, toBeUpdatedStates);\n    }\n    return stateCollections;\n}\nexports.MergeAndUpdateGovernedChannelStates = MergeAndUpdateGovernedChannelStates;\nfunction MergeAndUpdateCampaignStates(previousStates, currentStates) {\n    var stateCollections = new ItemCollection();\n    if (!previousStates && !currentStates) {\n        return stateCollections;\n    }\n    if (!previousStates) {\n        stateCollections.add(0 /* Merged */, currentStates);\n        return stateCollections;\n    }\n    if (!currentStates) {\n        stateCollections.add(0 /* Merged */, previousStates);\n        stateCollections.add(1 /* ToBeUpdated */, previousStates);\n        return stateCollections;\n    }\n    var mergedStates = [];\n    var toBeUpdatedStates = [];\n    if (previousStates) {\n        previousStates.forEach(function (previousState) {\n            var current = new Date();\n            // find matching in current states\n            var pos = -1;\n            var currentState;\n            for (var i = 0; i < currentStates.length; i++) {\n                currentState = currentStates[i];\n                if (currentState.CampaignId === previousState.CampaignId) {\n                    pos = i;\n                    break;\n                }\n            }\n            // if previous state is not in current states\n            if (pos === -1) {\n                // add previous state to merged\n                mergedStates.push(previousState);\n                // add previous state to toUpdated\n                toBeUpdatedStates.push(previousState);\n                return;\n            }\n            // if current state is in cooldown, add to merged list\n            if (currentState.LastCooldownEndTimeUtc > current) {\n                // add previous state to merged list\n                mergedStates.push(currentState);\n                // emove state from current states\n                currentStates.splice(pos, 1);\n                return;\n            }\n            // if previous state is in cooldown, add to merged and toUpdated lists\n            if (previousState.LastCooldownEndTimeUtc > current) {\n                // add previous state to merged list\n                mergedStates.push(previousState);\n                // add previous state to to-be-updated list\n                toBeUpdatedStates.push(previousState);\n                // emove state from current states\n                currentStates.splice(pos, 1);\n                return;\n            }\n            // add previous state to toUpdated and merged for the following two conditions:\n            //  1. previous cooldown time wins, or\n            //  2. cooldown times are the same and previous nomination wins\n            if (previousState.getCooldownStartDate() > currentState.getCooldownStartDate()\n                || (previousState.getCooldownStartDate() === currentState.getCooldownStartDate()\n                    && previousState.LastNominationTimeUtc > currentState.LastNominationTimeUtc)) {\n                mergedStates.push(previousState);\n                toBeUpdatedStates.push(previousState);\n            }\n            else {\n                // add current state to merged\n                mergedStates.push(currentState);\n            }\n            // remove state from current states\n            currentStates.splice(pos, 1);\n        });\n    }\n    // for the remaining current states\n    if (currentStates) {\n        currentStates.forEach(function (current) {\n            // add current state to merged\n            mergedStates.push(current);\n        });\n    }\n    stateCollections.add(0 /* Merged */, mergedStates);\n    if (toBeUpdatedStates.length > 0) {\n        stateCollections.add(1 /* ToBeUpdated */, toBeUpdatedStates);\n    }\n    return stateCollections;\n}\nexports.MergeAndUpdateCampaignStates = MergeAndUpdateCampaignStates;\nfunction MergeAndUpdateSurveyActivationStats(previousStats, currentStats) {\n    var statsCollections = new ItemCollection();\n    // Handle previousStats and/or currentStats equal to null\n    if (!previousStats && !currentStats) {\n        return statsCollections;\n    }\n    if (!previousStats) {\n        statsCollections.add(0 /* Merged */, currentStats);\n        return statsCollections;\n    }\n    if (!currentStats) {\n        statsCollections.add(0 /* Merged */, previousStats);\n        statsCollections.add(1 /* ToBeUpdated */, previousStats);\n        return statsCollections;\n    }\n    // Enumerate preivous stats\n    var mergedStats = new SurveyStatCollectionActivation_1.SurveyStatCollectionActivation();\n    var toBeUpdatedStats = new SurveyStatCollectionActivation_1.SurveyStatCollectionActivation();\n    var previousStatsDictionary = previousStats.getStats();\n    var currentStatsDictionary = currentStats.getStats();\n    for (var surveyId in previousStatsDictionary) {\n        if (previousStatsDictionary.hasOwnProperty(surveyId)) {\n            // if an updated stat is not found\n            var currentActivationStats = currentStatsDictionary[surveyId];\n            if (!currentActivationStats) {\n                // add to merged collection\n                mergedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\n                // add to-be-updated collection\n                toBeUpdatedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\n                continue;\n            }\n            // if previous stat has higher activation time\n            var previousActivationStats = previousStatsDictionary[surveyId];\n            if (previousActivationStats.ActivationTimeUtc > currentActivationStats.ActivationTimeUtc) {\n                // add to merged collection\n                mergedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\n                // add to-be-updated collection\n                toBeUpdatedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\n            }\n            else {\n                // add to current stat merged collection\n                mergedStats.addStats(surveyId, currentStatsDictionary[surveyId]);\n            }\n            // delete from stats\n            delete currentStatsDictionary[surveyId];\n        }\n    }\n    // merge any remaining stats\n    for (var surveyId in currentStatsDictionary) {\n        if (currentStatsDictionary.hasOwnProperty(surveyId)) {\n            mergedStats.addStats(surveyId, currentStatsDictionary[surveyId]);\n        }\n    }\n    // always return merged list\n    statsCollections.add(0 /* Merged */, mergedStats);\n    // since dictionaries don't have an empty check, enumerate the  first entry to check for non-empty\n    var toBeUpdatedStatsDictionary = toBeUpdatedStats.getStats();\n    for (var toBeUpdated in toBeUpdatedStatsDictionary) {\n        if (toBeUpdatedStatsDictionary.hasOwnProperty(toBeUpdated)) {\n            // not empty, return to-be-updated\n            statsCollections.add(1 /* ToBeUpdated */, toBeUpdatedStats);\n            break;\n        }\n    }\n    return statsCollections;\n}\nexports.MergeAndUpdateSurveyActivationStats = MergeAndUpdateSurveyActivationStats;\nvar SETTING_DATA_OPEN_TAG = \"<data>\";\nvar SETTING_DATA_CLOSE_TAG = \"</data>\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/StateProviderHelpers.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyActivityListener.js":
/*!***********************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyActivityListener.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ActivityTracker = __webpack_require__(/*! ./ActivityTracker */ \"../FloodgateCore/dist/src/ActivityTracker.js\");\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar IndexedTracker_1 = __webpack_require__(/*! ./IndexedTracker */ \"../FloodgateCore/dist/src/IndexedTracker.js\");\nvar SurveyStatCollectionEventActivity_1 = __webpack_require__(/*! ./SurveyStatCollectionEventActivity */ \"../FloodgateCore/dist/src/SurveyStatCollectionEventActivity.js\");\nvar Utils_1 = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar queuedActivities = [];\nvar pendingActivityCount = 0;\nvar previousTrackedActivityMap = {};\n/**\n * This class tracks log calls against named activity strings (matched on strict case-sensitive equality)\n * and calls the provided callback when all activity thresholds for a given survey have been crossed\n */\nvar SurveyActivityListener = /** @class */ (function () {\n    function SurveyActivityListener(callback, loggerCallback) {\n        // Save incoming activity context data in a dictionary with SurveyID as key, activity data array as value\n        this.activityContext = {};\n        if (!callback) {\n            throw new Error(\"callback must not be null\");\n        }\n        this.trackedActivityMap = {};\n        this.callback = callback;\n        this.loggerCallback = loggerCallback;\n    }\n    SurveyActivityListener.resetSessionActivity = function () {\n        previousTrackedActivityMap = {};\n    };\n    SurveyActivityListener.prototype.logActivity = function (activityName, increment, context) {\n        if (increment === void 0) { increment = 1; }\n        this.logActivity_private(activityName, 0 /* Increment */, increment, null, context);\n    };\n    SurveyActivityListener.prototype.logActivityStartTime = function (activityName, startTime) {\n        this.logActivity_private(activityName, 1 /* StartTime */, 0, startTime, null);\n    };\n    SurveyActivityListener.prototype.logActivityStopTime = function (activityName, stopTime) {\n        this.logActivity_private(activityName, 2 /* StopTime */, 0, stopTime, null);\n    };\n    SurveyActivityListener.prototype.SetActivityTrackingContracts = function (activityTrackingContracts, baseline) {\n        if (baseline === void 0) { baseline = new SurveyStatCollectionEventActivity_1.SurveyStatCollectionEventActivity(); }\n        var duplicateCounter = 0;\n        if (!activityTrackingContracts || activityTrackingContracts.length === 0 || !baseline) {\n            return;\n        }\n        // Populate a new map based on the passed in surveys, but propagating and tracking activity counts\n        // we may have seen against those events\n        // NOTE: We will lose activity counts for survey events that are no longer relevant.\n        var newMap = {};\n        var trackedSurveyIds = [];\n        for (var _i = 0, activityTrackingContracts_1 = activityTrackingContracts; _i < activityTrackingContracts_1.length; _i++) {\n            var activityTrackingContract = activityTrackingContracts_1[_i];\n            var trackingSet = activityTrackingContract.trackingSet;\n            // Added to the new set to make sure they are not duplicated. Based on MSO.\n            if (trackedSurveyIds.indexOf(activityTrackingContract.surveyId) === -1) {\n                trackedSurveyIds.push(activityTrackingContract.surveyId);\n            }\n            else {\n                // Duplicate surveyId being added, count it for the log.\n                duplicateCounter++;\n                continue;\n            }\n            // At this point, the survey's activities are safe to add.\n            // Set up the structures we need to transfer baseline counts (from previous sessions) or current counts (from previous trackers)\n            // Both vectors must be sorted in the same order as the trackingSet.List items\n            var baselineStats = baseline.getBySurveyId(activityTrackingContract.surveyId);\n            var baselineCounts = [trackingSet.getList().length];\n            var currentIndexedTrackers = new Array(trackingSet.getList().length);\n            var currentBaselineIndex = 0;\n            var currentIndex = 0;\n            for (var _a = 0, _b = trackingSet.getList(); _a < _b.length; _a++) {\n                var trackingData = _b[_a];\n                // Baseline stats count is 0 for events with \"IsAggregate = false\"\n                baselineCounts[currentIndex] = 0;\n                if (trackingData.getIsAggregate() && baselineStats && currentBaselineIndex < baselineStats.Counts.length) {\n                    baselineCounts[currentIndex] = baselineStats.Counts[currentBaselineIndex++];\n                }\n                // Session stats may be available in the previous trackedActivityMap\n                // Transfer the old \"current session\" count to the new tracker\n                // Is set to null if not available\n                if (previousTrackedActivityMap[trackingData.getActivity()]) {\n                    for (var _c = 0, _d = previousTrackedActivityMap[trackingData.getActivity()]; _c < _d.length; _c++) {\n                        var tracker = _d[_c];\n                        if (tracker.surveyId === activityTrackingContract.surveyId) {\n                            currentIndexedTrackers[currentIndex] = tracker;\n                            break;\n                        }\n                    }\n                }\n                currentIndex++;\n            }\n            // Make a new tracker and init the counts appropriately.\n            var newTracker = new ActivityTracker(trackingSet);\n            // If in a future change we start keeping trackers registered past activation, this will change\n            newTracker.initCounts(baselineCounts, currentIndexedTrackers, false /*wasActivatedThisSession*/);\n            // Setup the indexed trackers\n            for (var _e = 0, _f = newTracker.generateActivityIndexList(); _e < _f.length; _e++) {\n                var activityIndex = _f[_e];\n                var indexedTracker = new IndexedTracker_1.IndexedTracker();\n                indexedTracker.index = activityIndex.index;\n                indexedTracker.surveyId = activityTrackingContract.surveyId;\n                indexedTracker.tracker = newTracker;\n                if (!newMap[activityIndex.activity]) {\n                    newMap[activityIndex.activity] = [];\n                }\n                // Register the new tracker in our new map\n                newMap[activityIndex.activity].push(indexedTracker);\n            }\n        }\n        if (duplicateCounter > 0) {\n            var telemetryLogger = this.loggerCallback && this.loggerCallback();\n            if (telemetryLogger) {\n                telemetryLogger.log_Error(Constants_1.TelemetryEvent.SurveyActivity.SetActivityTrackingContracts.DuplicateSurveyID, \"Duplicate surveyId passed in activityTrackingContracts. Duplicate count: \" + duplicateCounter);\n            }\n        }\n        // Set the new map in place of the old\n        this.copyObject(this.trackedActivityMap, newMap);\n    };\n    SurveyActivityListener.prototype.clearSurveys = function () {\n        var _this = this;\n        Object.getOwnPropertyNames(this.trackedActivityMap).forEach(function (key) {\n            delete _this.trackedActivityMap[key];\n        });\n    };\n    SurveyActivityListener.prototype.saveSessionTrackingActivity = function (activity) {\n        // Set the new activity in place of the old\n        previousTrackedActivityMap[activity] = this.trackedActivityMap[activity];\n    };\n    // Get the indexedTracker that corresponds to the SurveyID and return that count. otherwise return 0.\n    SurveyActivityListener.prototype.getCount = function (activity, surveyId) {\n        var indexedTracker = this.getIndexedTracker(activity, surveyId);\n        if (!indexedTracker) {\n            return 0;\n        }\n        return indexedTracker.tracker.getCount(indexedTracker.index);\n    };\n    SurveyActivityListener.prototype.getSessionCount = function (activity, surveyId) {\n        var indexedTracker = this.getIndexedTracker(activity, surveyId);\n        if (!indexedTracker) {\n            return 0;\n        }\n        return indexedTracker.tracker.getSessionCount(indexedTracker.index);\n    };\n    /**\n     * An atomic get-and-set method.  Returns the current SessionCount, resetting it to zero and adding it into the established baseline\n     */\n    SurveyActivityListener.prototype.moveSessionCountIntoBaseCount = function (activity, surveyId) {\n        var indexedTracker = this.getIndexedTracker(activity, surveyId);\n        if (!indexedTracker) {\n            return 0;\n        }\n        return indexedTracker.tracker.moveSessionCountIntoBaseCount(indexedTracker.index);\n    };\n    SurveyActivityListener.prototype.getSurveyIds = function (activity) {\n        if (Utils_1.isNOU(activity)) {\n            return undefined;\n        }\n        var indexedTrackers = this.trackedActivityMap[activity];\n        if (!indexedTrackers) {\n            return undefined;\n        }\n        var surveyIds = indexedTrackers.map(function (indexedTracker) { return indexedTracker.surveyId; });\n        return surveyIds;\n    };\n    SurveyActivityListener.prototype.setCallback = function (callback) {\n        this.callback = callback;\n    };\n    SurveyActivityListener.prototype.UpdateActivityTrackingContracts = function (surveyList) {\n        if (Utils_1.isNOU(surveyList) || Object.keys(surveyList).length === 0) {\n            this.clearSurveys();\n            return;\n        }\n        for (var key in this.trackedActivityMap) {\n            if (this.trackedActivityMap.hasOwnProperty(key)) {\n                var tracker = this.trackedActivityMap[key];\n                // loop through tracker and remove the ones not associate with given surveys\n                for (var i = tracker.length - 1; i >= 0; --i) {\n                    if (surveyList.hasOwnProperty(tracker[i].surveyId)) {\n                        continue;\n                    }\n                    tracker.splice(i, 1);\n                }\n            }\n        }\n    };\n    SurveyActivityListener.prototype.getIndexedTracker = function (activity, surveyId) {\n        var indexedTrackers = this.trackedActivityMap[activity];\n        if (!indexedTrackers) {\n            return undefined;\n        }\n        var indexedTracker;\n        for (var _i = 0, indexedTrackers_1 = indexedTrackers; _i < indexedTrackers_1.length; _i++) {\n            var tracker = indexedTrackers_1[_i];\n            if (tracker.surveyId === surveyId) {\n                indexedTracker = tracker;\n                break;\n            }\n        }\n        return indexedTracker;\n    };\n    SurveyActivityListener.prototype.resetQueuedActivities = function () {\n        queuedActivities = [];\n    };\n    SurveyActivityListener.prototype.logActivity_private = function (activityName, logType, increment, timestamp, context) {\n        var _this = this;\n        if (this.callback && !this.callback.shouldAcceptActivity(activityName)) {\n            pendingActivityCount++;\n            if (queuedActivities.length < SurveyActivityListener.MaxPendingActivitiesQueueSize) {\n                queuedActivities.push({ activityName: activityName, logType: logType, increment: increment, timestamp: timestamp });\n            }\n        }\n        // Count any activities that are posted before 'FloodgateFirstStart' activity happens\n        if (activityName === SurveyActivityListener.FloodgateStartActivityName) {\n            if (pendingActivityCount > 0) {\n                // Get the activity names of the queued activities for telemetry, send only first 25.\n                var activityNames = queuedActivities.slice(0, 25).map(function (queuedActivity) { return queuedActivity.activityName; });\n                var telemetryLogger = this.loggerCallback && this.loggerCallback();\n                if (telemetryLogger) {\n                    // Sampling this telemetry event to 5%\n                    telemetryLogger.log_Event(Constants_1.TelemetryEvent.SurveyActivity.LogActivity.EventsReprocessed, {\n                        ActivityNames: JSON.stringify(activityNames),\n                        Count: queuedActivities.length,\n                        Dropped: pendingActivityCount - queuedActivities.length,\n                    }, 0.05);\n                }\n                // replay all the queued activities one by one as the floodgate engine has started now\n                queuedActivities.map(function (queuedActivity) { return _this.logActivity_core(queuedActivity.activityName, queuedActivity.logType, queuedActivity.increment, queuedActivity.timestamp, context); });\n            }\n            pendingActivityCount = 0;\n            this.resetQueuedActivities();\n        }\n        this.logActivity_core(activityName, logType, increment, timestamp, context);\n    };\n    SurveyActivityListener.prototype.logActivity_core = function (activityName, logType, increment, timestamp, context) {\n        var indexedTrackers = this.trackedActivityMap[activityName];\n        if (!indexedTrackers || indexedTrackers.length === 0) {\n            return;\n        }\n        var indices = [];\n        // If we have more than one tracker shuffle trackers to randomize which is evaluated first\n        if (indexedTrackers.length > 1) {\n            indices = new Array(indexedTrackers.length);\n            for (var i = 0; i < indices.length; i++) {\n                indices[i] = i;\n            }\n            indices = Utils_1.fyShuffle(indices); // shuffle and reassign\n        }\n        else {\n            indices.push(0); // just have a zero. Shuffling is not needed.\n        }\n        // Loop through trackers in shuffled order\n        for (var _i = 0, indices_1 = indices; _i < indices_1.length; _i++) {\n            var index = indices_1[_i];\n            var tracker = indexedTrackers[index];\n            switch (logType) {\n                case 1 /* StartTime */: {\n                    tracker.tracker.startTime(tracker.index, timestamp);\n                    continue; // Look at the next tracker. Increment not needed.\n                }\n                case 2 /* StopTime */: {\n                    increment = tracker.tracker.stopTime(tracker.index, timestamp);\n                    // fall through to increment the activity as well.\n                }\n                case 0 /* Increment */: {\n                    break;\n                }\n                default: {\n                    continue;\n                }\n            }\n            if (context) {\n                var trackerSurveyId = tracker.surveyId;\n                this.activityContext[trackerSurveyId] = this.activityContext[trackerSurveyId] || [];\n                this.activityContext[trackerSurveyId].push({ activityName: activityName, context: context });\n            }\n            var result = tracker.tracker.incrementActivity(tracker.index, increment);\n            if (result === 2 /* AllActivitiesActivated */) {\n                // Check the activated surveys list to ensure whether any previous survey is still in process\n                // If not, the length should be 1 and call to execute this survey right away\n                // This should only happen if calling to Governance Service, due to the call is asynchronous\n                this.executeCallback(tracker.surveyId);\n                break;\n                /* Breaking here to let one and only one callback to be made from a logActivity call.\n                This ensures only one survey can fully 'trigger' for a logActivity call. Others that would also\n                have triggered must wait until the next call to trigger (without there being a cooldown, of course).\n                */\n            }\n        }\n    };\n    SurveyActivityListener.prototype.executeCallback = function (surveyId) {\n        this.callback.run(surveyId, this.activityContext[surveyId]);\n    };\n    SurveyActivityListener.prototype.copyObject = function (target, source) {\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    };\n    SurveyActivityListener.FloodgateStartActivityName = \"FloodgateFirstStart\";\n    // The size of the dropped activities is set to 100 due to the following two reasons.\n    // 1) To prevent the array growing too big and causing memory issues.\n    // 2) Based on the telemetry analysis of number of dropped activities, the count is very small and much lesser than 100.\n    SurveyActivityListener.MaxPendingActivitiesQueueSize = 100;\n    return SurveyActivityListener;\n}());\nmodule.exports = SurveyActivityListener;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyActivityListener.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/CVSurveyComponent.js":
/*!***********************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/CVSurveyComponent.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar CVSurveyComponent = /** @class */ (function () {\n    function CVSurveyComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.customerVoiceFormId) {\n            throw new Error(\"data.formID must not be null or empty\");\n        }\n        this.data = data;\n    }\n    CVSurveyComponent.make = function (data) {\n        try {\n            return new CVSurveyComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    CVSurveyComponent.prototype.getType = function () {\n        return \"CVSurvey\" /* CVSurvey */;\n    };\n    CVSurveyComponent.prototype.getFormId = function () {\n        return this.data.customerVoiceFormId;\n    };\n    // @Override\n    CVSurveyComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurveyComponent.DOM_CVSURVEY_TAGNAME);\n        return [element];\n    };\n    // @Override\n    CVSurveyComponent.prototype.getJsonElements = function () {\n        var result = {};\n        result[ISurveyComponent.JSON_CVSURVEY_KEYNAME] = this.getFormId();\n        return result;\n    };\n    // @Override\n    CVSurveyComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_CVSURVEYFORMID_KEYNAME] = this.getFormId(),\n            _a;\n    };\n    return CVSurveyComponent;\n}());\n(function (CVSurveyComponent) {\n    var CVSurveyComponentData = /** @class */ (function () {\n        function CVSurveyComponentData() {\n        }\n        return CVSurveyComponentData;\n    }());\n    CVSurveyComponent.CVSurveyComponentData = CVSurveyComponentData;\n})(CVSurveyComponent || (CVSurveyComponent = {}));\nmodule.exports = CVSurveyComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleUNvbXBvbmVudHMvQ1ZTdXJ2ZXlDb21wb25lbnQudHM/MmU3ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsK0hBQTREO0FBRTVEO0lBV0MsMkJBQW1CLElBQTZDO1FBQy9ELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztTQUN6RDtRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFuQmEsc0JBQUksR0FBbEIsVUFBbUIsSUFBNkM7UUFDL0QsSUFBSTtZQUNILE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFlTSxtQ0FBTyxHQUFkO1FBQ0MsaUNBQXNDO0lBQ3ZDLENBQUM7SUFFTSxxQ0FBUyxHQUFoQjtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBWTtJQUNMLDBDQUFjLEdBQXJCLFVBQXNCLEdBQWE7UUFDbEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUM3QztRQUNELElBQU0sT0FBTyxHQUFZLEdBQUcsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNsRixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFlBQVk7SUFDTCwyQ0FBZSxHQUF0QjtRQUNDLElBQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQztRQUUxQixNQUFNLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEUsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQsWUFBWTtJQUNMLDRDQUFnQixHQUF2Qjs7UUFDQztZQUNDLEdBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLElBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRTtlQUMvRDtJQUNILENBQUM7SUFDRix3QkFBQztBQUFELENBQUM7QUFFRCxXQUFPLGlCQUFpQjtJQUN2QjtRQUFBO1FBRUEsQ0FBQztRQUFELDRCQUFDO0lBQUQsQ0FBQztJQUZZLHVDQUFxQix3QkFFakM7QUFDRixDQUFDLEVBSk0saUJBQWlCLEtBQWpCLGlCQUFpQixRQUl2QjtBQUVELGlCQUFTLGlCQUFpQixDQUFDIiwiZmlsZSI6Ii4uL0Zsb29kZ2F0ZUNvcmUvZGlzdC9zcmMvU3VydmV5Q29tcG9uZW50cy9DVlN1cnZleUNvbXBvbmVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDVlN1cnZleUNvbXBvbmVudCB9IGZyb20gXCJzcmMvQXBpL0FwaVwiO1xyXG5pbXBvcnQgKiBhcyBJU3VydmV5Q29tcG9uZW50IGZyb20gXCIuLi9BcGkvSVN1cnZleUNvbXBvbmVudFwiO1xyXG5cclxuY2xhc3MgQ1ZTdXJ2ZXlDb21wb25lbnQgaW1wbGVtZW50cyBJQ1ZTdXJ2ZXlDb21wb25lbnQge1xyXG5cdHB1YmxpYyBzdGF0aWMgbWFrZShkYXRhOiBDVlN1cnZleUNvbXBvbmVudC5DVlN1cnZleUNvbXBvbmVudERhdGEpOiBJQ1ZTdXJ2ZXlDb21wb25lbnQge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIG5ldyBDVlN1cnZleUNvbXBvbmVudChkYXRhKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGRhdGE6IENWU3VydmV5Q29tcG9uZW50LkNWU3VydmV5Q29tcG9uZW50RGF0YTtcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKGRhdGE6IENWU3VydmV5Q29tcG9uZW50LkNWU3VydmV5Q29tcG9uZW50RGF0YSkge1xyXG5cdFx0aWYgKCFkYXRhKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImRhdGEgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghZGF0YS5jdXN0b21lclZvaWNlRm9ybUlkKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImRhdGEuZm9ybUlEIG11c3Qgbm90IGJlIG51bGwgb3IgZW1wdHlcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRUeXBlKCk6IElTdXJ2ZXlDb21wb25lbnQuVHlwZSB7XHJcblx0XHRyZXR1cm4gSVN1cnZleUNvbXBvbmVudC5UeXBlLkNWU3VydmV5O1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEZvcm1JZCgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5jdXN0b21lclZvaWNlRm9ybUlkO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldERvbUVsZW1lbnRzKGRvYzogRG9jdW1lbnQpOiBFbGVtZW50W10ge1xyXG5cdFx0aWYgKCFkb2MpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRG9jdW1lbnQgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGVsZW1lbnQ6IEVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudChJU3VydmV5Q29tcG9uZW50LkRPTV9DVlNVUlZFWV9UQUdOQU1FKTtcclxuXHRcdHJldHVybiBbZWxlbWVudF07XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0SnNvbkVsZW1lbnRzKCk6IG9iamVjdCB7XHJcblx0XHRjb25zdCByZXN1bHQ6IG9iamVjdCA9IHt9O1xyXG5cclxuXHRcdHJlc3VsdFtJU3VydmV5Q29tcG9uZW50LkpTT05fQ1ZTVVJWRVlfS0VZTkFNRV0gPSB0aGlzLmdldEZvcm1JZCgpO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXRDb21wb25lbnRKc29uKCk6IG9iamVjdCB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRbSVN1cnZleUNvbXBvbmVudC5KU09OX0NWU1VSVkVZRk9STUlEX0tFWU5BTUVdOiB0aGlzLmdldEZvcm1JZCgpLFxyXG5cdFx0fTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZSBDVlN1cnZleUNvbXBvbmVudCB7XHJcblx0ZXhwb3J0IGNsYXNzIENWU3VydmV5Q29tcG9uZW50RGF0YSB7XHJcblx0XHRwdWJsaWMgY3VzdG9tZXJWb2ljZUZvcm1JZDogc3RyaW5nO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQ1ZTdXJ2ZXlDb21wb25lbnQ7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/CVSurveyComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js":
/*!**********************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ./../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar CommentComponent = /** @class */ (function () {\n    function CommentComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.question) {\n            throw new Error(\"data.question must not be null or empty\");\n        }\n        this.data = data;\n        this.userComment = \"\";\n    }\n    CommentComponent.make = function (data) {\n        try {\n            return new CommentComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    // @Override\n    CommentComponent.prototype.getType = function () {\n        return \"Comment\" /* Comment */;\n    };\n    // @Override\n    CommentComponent.prototype.getQuestion = function () {\n        return this.data.question;\n    };\n    // @Override\n    CommentComponent.prototype.setSubmittedText = function (userComment) {\n        this.userComment = userComment;\n    };\n    // @Override\n    CommentComponent.prototype.getSubmittedText = function () {\n        return this.userComment;\n    };\n    // @Override\n    CommentComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurveyComponent.DOM_COMMENT_TAGNAME);\n        element.appendChild(doc.createTextNode(this.getSubmittedText()));\n        return [element];\n    };\n    // @Override\n    CommentComponent.prototype.getJsonElements = function () {\n        var result = {};\n        result[ISurveyComponent.JSON_COMMENT_KEYNAME] = this.getSubmittedText();\n        return result;\n    };\n    // @Override\n    CommentComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_QUESTION_KEYNAME] = this.getQuestion(),\n            _a;\n    };\n    return CommentComponent;\n}());\n(function (CommentComponent) {\n    var CommentComponentData = /** @class */ (function () {\n        function CommentComponentData() {\n        }\n        return CommentComponentData;\n    }());\n    CommentComponent.CommentComponentData = CommentComponentData;\n})(CommentComponent || (CommentComponent = {}));\nmodule.exports = CommentComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleUNvbXBvbmVudHMvQ29tbWVudENvbXBvbmVudC50cz8zODJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxpSUFBK0Q7QUFFL0Q7SUFZQywwQkFBbUIsSUFBMkM7UUFDN0QsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFyQmEscUJBQUksR0FBbEIsVUFBbUIsSUFBMkM7UUFDN0QsSUFBSTtZQUNILE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFpQkQsWUFBWTtJQUNMLGtDQUFPLEdBQWQ7UUFDQywrQkFBcUM7SUFDdEMsQ0FBQztJQUVELFlBQVk7SUFDTCxzQ0FBVyxHQUFsQjtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELFlBQVk7SUFDTCwyQ0FBZ0IsR0FBdkIsVUFBd0IsV0FBbUI7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQVk7SUFDTCwyQ0FBZ0IsR0FBdkI7UUFDQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekIsQ0FBQztJQUVELFlBQVk7SUFDTCx5Q0FBYyxHQUFyQixVQUFzQixHQUFhO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDN0M7UUFFRCxJQUFNLE9BQU8sR0FBWSxHQUFHLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakYsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVqRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFlBQVk7SUFDTCwwQ0FBZSxHQUF0QjtRQUNDLElBQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQztRQUMxQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4RSxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFRCxZQUFZO0lBQ0wsMkNBQWdCLEdBQXZCOztRQUNDO1lBQ0MsR0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsSUFBRyxJQUFJLENBQUMsV0FBVyxFQUFFO2VBQzNEO0lBQ0gsQ0FBQztJQUNGLHVCQUFDO0FBQUQsQ0FBQztBQUVELFdBQU8sZ0JBQWdCO0lBQ3RCO1FBQUE7UUFFQSxDQUFDO1FBQUQsMkJBQUM7SUFBRCxDQUFDO0lBRlkscUNBQW9CLHVCQUVoQztBQUNGLENBQUMsRUFKTSxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBSXRCO0FBRUQsaUJBQVMsZ0JBQWdCLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9TdXJ2ZXlDb21wb25lbnRzL0NvbW1lbnRDb21wb25lbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tbWVudENvbXBvbmVudCB9IGZyb20gXCIuLy4uL0FwaS9JQ29tbWVudENvbXBvbmVudFwiO1xyXG5pbXBvcnQgSVN1cnZleUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuLy4uL0FwaS9JU3VydmV5Q29tcG9uZW50XCIpO1xyXG5cclxuY2xhc3MgQ29tbWVudENvbXBvbmVudCBpbXBsZW1lbnRzIElDb21tZW50Q29tcG9uZW50IHtcclxuXHRwdWJsaWMgc3RhdGljIG1ha2UoZGF0YTogQ29tbWVudENvbXBvbmVudC5Db21tZW50Q29tcG9uZW50RGF0YSk6IElDb21tZW50Q29tcG9uZW50IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJldHVybiBuZXcgQ29tbWVudENvbXBvbmVudChkYXRhKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGRhdGE6IENvbW1lbnRDb21wb25lbnQuQ29tbWVudENvbXBvbmVudERhdGE7XHJcblx0cHJpdmF0ZSB1c2VyQ29tbWVudDogc3RyaW5nO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoZGF0YTogQ29tbWVudENvbXBvbmVudC5Db21tZW50Q29tcG9uZW50RGF0YSkge1xyXG5cdFx0aWYgKCFkYXRhKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImRhdGEgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghZGF0YS5xdWVzdGlvbikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJkYXRhLnF1ZXN0aW9uIG11c3Qgbm90IGJlIG51bGwgb3IgZW1wdHlcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcclxuXHRcdHRoaXMudXNlckNvbW1lbnQgPSBcIlwiO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldFR5cGUoKTogSVN1cnZleUNvbXBvbmVudC5UeXBlIHtcclxuXHRcdHJldHVybiBJU3VydmV5Q29tcG9uZW50LlR5cGUuQ29tbWVudDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXRRdWVzdGlvbigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5xdWVzdGlvbjtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBzZXRTdWJtaXR0ZWRUZXh0KHVzZXJDb21tZW50OiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHRoaXMudXNlckNvbW1lbnQgPSB1c2VyQ29tbWVudDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXRTdWJtaXR0ZWRUZXh0KCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy51c2VyQ29tbWVudDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXREb21FbGVtZW50cyhkb2M6IERvY3VtZW50KTogRWxlbWVudFtdIHtcclxuXHRcdGlmICghZG9jKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IG11c3Qgbm90IGJlIG51bGxcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZWxlbWVudDogRWxlbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KElTdXJ2ZXlDb21wb25lbnQuRE9NX0NPTU1FTlRfVEFHTkFNRSk7XHJcblx0XHRlbGVtZW50LmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZSh0aGlzLmdldFN1Ym1pdHRlZFRleHQoKSkpO1xyXG5cclxuXHRcdHJldHVybiBbZWxlbWVudF07XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0SnNvbkVsZW1lbnRzKCk6IG9iamVjdCB7XHJcblx0XHRjb25zdCByZXN1bHQ6IG9iamVjdCA9IHt9O1xyXG5cdFx0cmVzdWx0W0lTdXJ2ZXlDb21wb25lbnQuSlNPTl9DT01NRU5UX0tFWU5BTUVdID0gdGhpcy5nZXRTdWJtaXR0ZWRUZXh0KCk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldENvbXBvbmVudEpzb24oKTogb2JqZWN0IHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdFtJU3VydmV5Q29tcG9uZW50LkpTT05fUVVFU1RJT05fS0VZTkFNRV06IHRoaXMuZ2V0UXVlc3Rpb24oKSxcclxuXHRcdH07XHJcblx0fVxyXG59XHJcblxyXG5tb2R1bGUgQ29tbWVudENvbXBvbmVudCB7XHJcblx0ZXhwb3J0IGNsYXNzIENvbW1lbnRDb21wb25lbnREYXRhIHtcclxuXHRcdHB1YmxpYyBxdWVzdGlvbjogc3RyaW5nO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQ29tbWVudENvbXBvbmVudDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/InterceptComponent.js":
/*!************************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/InterceptComponent.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar InterceptComponent = /** @class */ (function () {\n    function InterceptComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.question) {\n            throw new Error(\"data.question must not be null or empty\");\n        }\n        if (!data.title) {\n            throw new Error(\"data.title must not be null or empty\");\n        }\n        if (!data.url) {\n            throw new Error(\"data.url must not be null or empty\");\n        }\n        this.data = data;\n    }\n    InterceptComponent.make = function (data) {\n        try {\n            return new InterceptComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    // @Override\n    InterceptComponent.prototype.getType = function () {\n        return \"Intercept\" /* Intercept */;\n    };\n    // @Override\n    InterceptComponent.prototype.getTitle = function () {\n        return this.data.title;\n    };\n    // @Override\n    InterceptComponent.prototype.getQuestion = function () {\n        return this.data.question;\n    };\n    // @Override\n    InterceptComponent.prototype.getUrl = function () {\n        return this.data.url;\n    };\n    // @Override\n    InterceptComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        return [doc.createElement(ISurveyComponent.DOM_INTERCEPT_TAGNAME)];\n    };\n    // @Override\n    InterceptComponent.prototype.getJsonElements = function () {\n        var _a;\n        return _a = {}, _a[ISurveyComponent.JSON_INTERCEPT_KEYNAME] = \"\", _a;\n    };\n    // @Override\n    InterceptComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_TITLE_KEYNAME] = this.getTitle(),\n            _a[ISurveyComponent.JSON_QUESTION_KEYNAME] = this.getQuestion(),\n            _a[ISurveyComponent.JSON_INTERCEPTURL_KEYNAME] = this.getUrl(),\n            _a;\n    };\n    return InterceptComponent;\n}());\n(function (InterceptComponent) {\n    var InterceptComponentData = /** @class */ (function () {\n        function InterceptComponentData() {\n        }\n        return InterceptComponentData;\n    }());\n    InterceptComponent.InterceptComponentData = InterceptComponentData;\n})(InterceptComponent || (InterceptComponent = {}));\nmodule.exports = InterceptComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleUNvbXBvbmVudHMvSW50ZXJjZXB0Q29tcG9uZW50LnRzPzMyNDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtIQUE0RDtBQUc1RDtJQVdDLDRCQUFtQixJQUErQztRQUNqRSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBekJhLHVCQUFJLEdBQWxCLFVBQW1CLElBQStDO1FBQ2pFLElBQUk7WUFDSCxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ1o7SUFDRixDQUFDO0lBcUJELFlBQVk7SUFDTCxvQ0FBTyxHQUFkO1FBQ0MsbUNBQXVDO0lBQ3hDLENBQUM7SUFFRCxZQUFZO0lBQ0wscUNBQVEsR0FBZjtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVELFlBQVk7SUFDTCx3Q0FBVyxHQUFsQjtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELFlBQVk7SUFDTCxtQ0FBTSxHQUFiO1FBQ0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBRUQsWUFBWTtJQUNMLDJDQUFjLEdBQXJCLFVBQXNCLEdBQWE7UUFDbEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsWUFBWTtJQUNMLDRDQUFlLEdBQXRCOztRQUNDLGdCQUFRLEdBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLElBQUcsRUFBRSxLQUFFO0lBQ3hELENBQUM7SUFFRCxZQUFZO0lBQ0wsNkNBQWdCLEdBQXZCOztRQUNDO1lBQ0MsR0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsSUFBRyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3RELEdBQUMsZ0JBQWdCLENBQUMscUJBQXFCLElBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUM1RCxHQUFDLGdCQUFnQixDQUFDLHlCQUF5QixJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7ZUFDMUQ7SUFDSCxDQUFDO0lBQ0YseUJBQUM7QUFBRCxDQUFDO0FBRUQsV0FBTyxrQkFBa0I7SUFDeEI7UUFBQTtRQUlBLENBQUM7UUFBRCw2QkFBQztJQUFELENBQUM7SUFKWSx5Q0FBc0IseUJBSWxDO0FBQ0YsQ0FBQyxFQU5NLGtCQUFrQixLQUFsQixrQkFBa0IsUUFNeEI7QUFFRCxpQkFBUyxrQkFBa0IsQ0FBQyIsImZpbGUiOiIuLi9GbG9vZGdhdGVDb3JlL2Rpc3Qvc3JjL1N1cnZleUNvbXBvbmVudHMvSW50ZXJjZXB0Q29tcG9uZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSVN1cnZleUNvbXBvbmVudCBmcm9tIFwiLi4vQXBpL0lTdXJ2ZXlDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgSUludGVyY2VwdENvbXBvbmVudCB9IGZyb20gXCIuLy4uL0FwaS9JSW50ZXJjZXB0Q29tcG9uZW50XCI7XHJcblxyXG5jbGFzcyBJbnRlcmNlcHRDb21wb25lbnQgaW1wbGVtZW50cyBJSW50ZXJjZXB0Q29tcG9uZW50IHtcclxuXHRwdWJsaWMgc3RhdGljIG1ha2UoZGF0YTogSW50ZXJjZXB0Q29tcG9uZW50LkludGVyY2VwdENvbXBvbmVudERhdGEpOiBJSW50ZXJjZXB0Q29tcG9uZW50IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJldHVybiBuZXcgSW50ZXJjZXB0Q29tcG9uZW50KGRhdGEpO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgZGF0YTogSW50ZXJjZXB0Q29tcG9uZW50LkludGVyY2VwdENvbXBvbmVudERhdGE7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihkYXRhOiBJbnRlcmNlcHRDb21wb25lbnQuSW50ZXJjZXB0Q29tcG9uZW50RGF0YSkge1xyXG5cdFx0aWYgKCFkYXRhKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImRhdGEgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghZGF0YS5xdWVzdGlvbikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJkYXRhLnF1ZXN0aW9uIG11c3Qgbm90IGJlIG51bGwgb3IgZW1wdHlcIik7XHJcblx0XHR9XHJcblx0XHRpZiAoIWRhdGEudGl0bGUpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZGF0YS50aXRsZSBtdXN0IG5vdCBiZSBudWxsIG9yIGVtcHR5XCIpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFkYXRhLnVybCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJkYXRhLnVybCBtdXN0IG5vdCBiZSBudWxsIG9yIGVtcHR5XCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0VHlwZSgpOiBJU3VydmV5Q29tcG9uZW50LlR5cGUge1xyXG5cdFx0cmV0dXJuIElTdXJ2ZXlDb21wb25lbnQuVHlwZS5JbnRlcmNlcHQ7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0VGl0bGUoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmRhdGEudGl0bGU7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0UXVlc3Rpb24oKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmRhdGEucXVlc3Rpb247XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0VXJsKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5kYXRhLnVybDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXREb21FbGVtZW50cyhkb2M6IERvY3VtZW50KTogRWxlbWVudFtdICB7XHJcblx0XHRpZiAoIWRvYykge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJEb2N1bWVudCBtdXN0IG5vdCBiZSBudWxsXCIpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIFtkb2MuY3JlYXRlRWxlbWVudChJU3VydmV5Q29tcG9uZW50LkRPTV9JTlRFUkNFUFRfVEFHTkFNRSldO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldEpzb25FbGVtZW50cygpOiBvYmplY3Qge1xyXG5cdFx0cmV0dXJuIHtbSVN1cnZleUNvbXBvbmVudC5KU09OX0lOVEVSQ0VQVF9LRVlOQU1FXTogXCJcIn07XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0Q29tcG9uZW50SnNvbigpOiBvYmplY3Qge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0W0lTdXJ2ZXlDb21wb25lbnQuSlNPTl9USVRMRV9LRVlOQU1FXTogdGhpcy5nZXRUaXRsZSgpLFxyXG5cdFx0XHRbSVN1cnZleUNvbXBvbmVudC5KU09OX1FVRVNUSU9OX0tFWU5BTUVdOiB0aGlzLmdldFF1ZXN0aW9uKCksXHJcblx0XHRcdFtJU3VydmV5Q29tcG9uZW50LkpTT05fSU5URVJDRVBUVVJMX0tFWU5BTUVdOiB0aGlzLmdldFVybCgpLFxyXG5cdFx0fTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZSBJbnRlcmNlcHRDb21wb25lbnQge1xyXG5cdGV4cG9ydCBjbGFzcyBJbnRlcmNlcHRDb21wb25lbnREYXRhIHtcclxuXHRcdHB1YmxpYyBxdWVzdGlvbjogc3RyaW5nO1xyXG5cdFx0cHVibGljIHRpdGxlOiBzdHJpbmc7XHJcblx0XHRwdWJsaWMgdXJsOiBzdHJpbmc7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBJbnRlcmNlcHRDb21wb25lbnQ7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/InterceptComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/MultipleChoiceComponent.js":
/*!*****************************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/MultipleChoiceComponent.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar MultipleChoiceComponent = /** @class */ (function () {\n    function MultipleChoiceComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.question) {\n            throw new Error(\"data.question must not be null or empty\");\n        }\n        if (!data.availableOptions || data.availableOptions.length < 2) {\n            throw new Error(\"data.availableOptions must not be null or have less than two choices\");\n        }\n        data.availableOptions.forEach(function (option) {\n            if (!option) {\n                throw new Error(\"Option values must not contain null or empty\");\n            }\n        });\n        this.data = data;\n        this.optionStates = new Array(data.availableOptions.length);\n        // Initialize with all false values\n        for (var i = 0; i < this.optionStates.length; i++) {\n            this.optionStates[i] = false;\n        }\n    }\n    MultipleChoiceComponent.make = function (data) {\n        try {\n            return new MultipleChoiceComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    MultipleChoiceComponent.prototype.getType = function () {\n        return \"MultipleChoice\" /* MultipleChoice */;\n    };\n    MultipleChoiceComponent.prototype.getQuestion = function () {\n        return this.data.question;\n    };\n    MultipleChoiceComponent.prototype.getAvailableOptions = function () {\n        return this.data.availableOptions;\n    };\n    MultipleChoiceComponent.prototype.getOptionSelectedStates = function () {\n        return this.optionStates;\n    };\n    MultipleChoiceComponent.prototype.getMinNumberofSelectedOptions = function () {\n        return this.data.minNumberOfSelectedOptions;\n    };\n    MultipleChoiceComponent.prototype.getMaxNumberofSelectedOptions = function () {\n        return this.data.maxNumberOfSelectedOptions;\n    };\n    MultipleChoiceComponent.prototype.setOptionSelectedStates = function (selectedStates) {\n        for (var i = 0; i < selectedStates.length; i++) {\n            this.optionStates[i] = selectedStates[i];\n        }\n    };\n    MultipleChoiceComponent.prototype.ValidateMinNumberofSelectedOptions = function () {\n        var result = 0;\n        this.optionStates.forEach(function (element) {\n            if (element) {\n                result++;\n            }\n        });\n        return (result >= this.getMinNumberofSelectedOptions());\n    };\n    MultipleChoiceComponent.prototype.ValidateMaxNumberofSelectedOptions = function () {\n        var result = 0;\n        this.optionStates.forEach(function (element) {\n            if (element) {\n                result++;\n            }\n        });\n        return (result <= this.getMaxNumberofSelectedOptions());\n    };\n    MultipleChoiceComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurveyComponent.DOM_MULTIPLECHOICE_TAGNAME);\n        element.appendChild(doc.createTextNode(this.getOptionSelectedStates().toString()));\n        return [element];\n    };\n    // @Override\n    MultipleChoiceComponent.prototype.getJsonElements = function () {\n        var result = {};\n        result[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] = this.getOptionSelectedStates().toString();\n        return result;\n    };\n    // @Override\n    MultipleChoiceComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_QUESTION_KEYNAME] = this.getQuestion(),\n            _a[ISurveyComponent.JSON_RATINGOPTIONS_KEYNAME] = this.getAvailableOptions(),\n            _a;\n    };\n    return MultipleChoiceComponent;\n}());\n(function (MultipleChoiceComponent) {\n    var MultipleChoiceComponentData = /** @class */ (function () {\n        function MultipleChoiceComponentData() {\n        }\n        return MultipleChoiceComponentData;\n    }());\n    MultipleChoiceComponent.MultipleChoiceComponentData = MultipleChoiceComponentData;\n})(MultipleChoiceComponent || (MultipleChoiceComponent = {}));\nmodule.exports = MultipleChoiceComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/MultipleChoiceComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js":
/*!*********************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar PromptComponent = /** @class */ (function () {\n    function PromptComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.question) {\n            throw new Error(\"data.question must not be null or empty\");\n        }\n        if (!data.title) {\n            throw new Error(\"data.title must not be null or empty\");\n        }\n        if (!data.yesButtonLabel) {\n            throw new Error(\"data.yesButtonLabel must not be null or empty\");\n        }\n        if (!data.noButtonLabel) {\n            throw new Error(\"data.noButtonLabel must not be null or empty\");\n        }\n        this.data = data;\n        this.selectedButton = 0 /* Unselected */;\n    }\n    PromptComponent.make = function (data) {\n        try {\n            return new PromptComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    // @Override\n    PromptComponent.prototype.getType = function () {\n        return \"Prompt\" /* Prompt */;\n    };\n    // @Override\n    PromptComponent.prototype.getTitle = function () {\n        return this.data.title;\n    };\n    // @Override\n    PromptComponent.prototype.getQuestion = function () {\n        return this.data.question;\n    };\n    // @Override\n    PromptComponent.prototype.getYesButtonText = function () {\n        return this.data.yesButtonLabel;\n    };\n    // @Override\n    PromptComponent.prototype.getNoButtonText = function () {\n        return this.data.noButtonLabel;\n    };\n    // @Override\n    PromptComponent.prototype.setButtonSelected = function (selected) {\n        if (selected) {\n            this.selectedButton = selected;\n        }\n    };\n    // @Override\n    PromptComponent.prototype.getButtonSelected = function () {\n        return this.selectedButton;\n    };\n    // @Override\n    PromptComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurveyComponent.DOM_PROMPT_TAGNAME);\n        element.appendChild(doc.createTextNode(this.promptButtonToString(this.getButtonSelected())));\n        return [element];\n    };\n    // @Override\n    PromptComponent.prototype.getJsonElements = function () {\n        var result = {};\n        result[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.promptButtonToString(this.getButtonSelected());\n        return result;\n    };\n    // @Override\n    PromptComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_TITLE_KEYNAME] = this.getTitle(),\n            _a[ISurveyComponent.JSON_QUESTION_KEYNAME] = this.getQuestion(),\n            _a[ISurveyComponent.JSON_PROMPTYESTEXT_KEYNAME] = this.getYesButtonText(),\n            _a[ISurveyComponent.JSON_PROMPTNOTEXT_KEYNAME] = this.getNoButtonText(),\n            _a;\n    };\n    PromptComponent.prototype.promptButtonToString = function (value) {\n        switch (value) {\n            case 0 /* Unselected */:\n                return \"Unselected\";\n            case 1 /* Yes */:\n                return \"Yes\";\n            case 2 /* No */:\n                return \"No\";\n            default:\n                return \"Unknown\";\n        }\n    };\n    return PromptComponent;\n}());\n(function (PromptComponent) {\n    var PromptComponentData = /** @class */ (function () {\n        function PromptComponentData() {\n        }\n        return PromptComponentData;\n    }());\n    PromptComponent.PromptComponentData = PromptComponentData;\n})(PromptComponent || (PromptComponent = {}));\nmodule.exports = PromptComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js":
/*!*********************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar RatingComponent = /** @class */ (function () {\n    function RatingComponent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.question) {\n            throw new Error(\"data.question must not be null or empty\");\n        }\n        if (!data.ratingValuesAscending || data.ratingValuesAscending.length < 2) {\n            throw new Error(\"data.ratingValuesAscending must not be null or have less than two choices\");\n        }\n        data.ratingValuesAscending.forEach(function (rating) {\n            if (!rating) {\n                throw new Error(\"rating values must not contain null or empty\");\n            }\n        });\n        this.data = data;\n        this.selectedIndex = -1;\n    }\n    RatingComponent.make = function (data) {\n        try {\n            return new RatingComponent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    RatingComponent.prototype.getType = function () {\n        return \"Rating\" /* Rating */;\n    };\n    RatingComponent.prototype.getQuestion = function () {\n        return this.data.question;\n    };\n    RatingComponent.prototype.getRatingValuesAscending = function () {\n        return this.data.ratingValuesAscending;\n    };\n    RatingComponent.prototype.getSelectedRating = function () {\n        if (!this.isRatingIndexValid(this.selectedIndex)) {\n            return \"\";\n        }\n        return this.data.ratingValuesAscending[this.selectedIndex];\n    };\n    RatingComponent.prototype.setSelectedRatingIndex = function (selected) {\n        if (this.isRatingIndexValid(selected)) {\n            this.selectedIndex = selected;\n        }\n        else {\n            this.selectedIndex = -1;\n        }\n    };\n    RatingComponent.prototype.getSelectedRatingIndex = function () {\n        return this.selectedIndex;\n    };\n    RatingComponent.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurveyComponent.DOM_RATING_TAGNAME);\n        if (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\n            element.appendChild(doc.createTextNode(\"Not rated\"));\n        }\n        else {\n            // Enforce six digits after the decimal\n            element.appendChild(doc.createTextNode(this.getNormalizedRatingScore().toFixed(6)));\n        }\n        return [element];\n    };\n    // @Override\n    RatingComponent.prototype.getJsonElements = function () {\n        var result = {};\n        if (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\n            result[ISurveyComponent.JSON_RATING_KEYNAME] = \"Not rated\";\n        }\n        else {\n            result[ISurveyComponent.JSON_RATING_KEYNAME] = this.getNormalizedRatingScore();\n        }\n        return result;\n    };\n    // @Override\n    RatingComponent.prototype.getComponentJson = function () {\n        var _a;\n        return _a = {},\n            _a[ISurveyComponent.JSON_QUESTION_KEYNAME] = this.getQuestion(),\n            _a[ISurveyComponent.JSON_RATINGOPTIONS_KEYNAME] = this.getRatingValuesAscending(),\n            _a;\n    };\n    RatingComponent.prototype.getNormalizedRatingScore = function () {\n        if (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\n            return -1;\n        }\n        if (this.data.isZeroBased) {\n            return (this.selectedIndex) / (this.data.ratingValuesAscending.length - 1);\n        }\n        else {\n            return (this.selectedIndex + 1.0) / this.data.ratingValuesAscending.length;\n        }\n    };\n    RatingComponent.prototype.isRatingIndexValid = function (index) {\n        return (index >= 0 && index < this.data.ratingValuesAscending.length);\n    };\n    return RatingComponent;\n}());\n(function (RatingComponent) {\n    var RatingComponentData = /** @class */ (function () {\n        function RatingComponentData() {\n        }\n        return RatingComponentData;\n    }());\n    RatingComponent.RatingComponentData = RatingComponentData;\n})(RatingComponent || (RatingComponent = {}));\nmodule.exports = RatingComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyEvents.js":
/*!*************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyEvents.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CountedActivitySequenceEventData = exports.CountedActivitySequenceEvent = exports.CountedActivityEventData = exports.CountedActivityEvent = void 0;\nvar ActivityTrackingData_1 = __webpack_require__(/*! ./ActivityTrackingData */ \"../FloodgateCore/dist/src/ActivityTrackingData.js\");\nvar ActivityTrackingSet_1 = __webpack_require__(/*! ./ActivityTrackingSet */ \"../FloodgateCore/dist/src/ActivityTrackingSet.js\");\nvar CountedActivityEvent = /** @class */ (function () {\n    function CountedActivityEvent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (data.count <= 0) {\n            throw new Error(\"count must be greater than 0\");\n        }\n        if (!data.activity || data.activity.length === 0) {\n            throw new Error(\"activity must not be null or an empty string\");\n        }\n        this.data = data;\n    }\n    CountedActivityEvent.make = function (data) {\n        try {\n            return new CountedActivityEvent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    CountedActivityEvent.prototype.getActivity = function () {\n        return this.data.activity;\n    };\n    CountedActivityEvent.prototype.getCount = function () {\n        return this.data.count;\n    };\n    CountedActivityEvent.prototype.isAggregate = function () {\n        return this.data.isAggregate;\n    };\n    CountedActivityEvent.prototype.getType = function () {\n        return \"CountedActivity\" /* CountedActivity */;\n    };\n    CountedActivityEvent.prototype.getTrackingSet = function () {\n        var trackingDataList = new Array();\n        trackingDataList.push(new ActivityTrackingData_1.ActivityTrackingData(this.data.activity, this.data.count, this.data.isAggregate));\n        return new ActivityTrackingSet_1.ActivityTrackingSet(false, trackingDataList);\n    };\n    return CountedActivityEvent;\n}());\nexports.CountedActivityEvent = CountedActivityEvent;\n/**\n * Data class for serialization and deserialization. Do not add logic in here.\n */\nvar CountedActivityEventData = /** @class */ (function () {\n    function CountedActivityEventData() {\n    }\n    return CountedActivityEventData;\n}());\nexports.CountedActivityEventData = CountedActivityEventData;\nvar CountedActivitySequenceEvent = /** @class */ (function () {\n    function CountedActivitySequenceEvent(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.sequence) {\n            throw new Error(\"data.sequence must not be null\");\n        }\n        if (data.sequence.length === 0) {\n            throw new Error(\"data.sequence size must be greater than 0\");\n        }\n        this.data = [];\n        for (var _i = 0, _a = data.sequence; _i < _a.length; _i++) {\n            var countedActivityEventData = _a[_i];\n            this.data.push(new CountedActivityEvent(countedActivityEventData));\n        }\n    }\n    CountedActivitySequenceEvent.make = function (data) {\n        try {\n            return new CountedActivitySequenceEvent(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    CountedActivitySequenceEvent.prototype.getSequence = function () {\n        return this.data;\n    };\n    CountedActivitySequenceEvent.prototype.getType = function () {\n        return \"CountedActivitySequence\" /* CountedActivitySequence */;\n    };\n    CountedActivitySequenceEvent.prototype.getTrackingSet = function () {\n        var trackingDataList = new Array();\n        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {\n            var countedActivityEvent = _a[_i];\n            trackingDataList.push(new ActivityTrackingData_1.ActivityTrackingData(countedActivityEvent.getActivity(), countedActivityEvent.getCount(), countedActivityEvent.isAggregate()));\n        }\n        return new ActivityTrackingSet_1.ActivityTrackingSet(true, trackingDataList);\n    };\n    return CountedActivitySequenceEvent;\n}());\nexports.CountedActivitySequenceEvent = CountedActivitySequenceEvent;\n/**\n * Data class for serialization and deserialization. Do not add logic in here.\n */\nvar CountedActivitySequenceEventData = /** @class */ (function () {\n    function CountedActivitySequenceEventData() {\n    }\n    /**\n     * No args constructor needed for serialization.\n     */\n    CountedActivitySequenceEventData.prototype.CountedActivitySequenceEventData = function () {\n    };\n    return CountedActivitySequenceEventData;\n}());\nexports.CountedActivitySequenceEventData = CountedActivitySequenceEventData;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyEvents.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyMetadata.js":
/*!***************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyMetadata.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Metadata = exports.SurveyMetadata = void 0;\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar SurveyMetadata = /** @class */ (function () {\n    function SurveyMetadata(data) {\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        if (!data.contentMetadata) {\n            throw new Error(\"content metadata must not be null\");\n        }\n        if (!Utils.isObject(data.contentMetadata)) {\n            throw new Error(\"content metadata must be of object type\");\n        }\n        this.data = data;\n    }\n    SurveyMetadata.make = function (data) {\n        try {\n            return new SurveyMetadata(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    SurveyMetadata.prototype.getContentMetadata = function () {\n        return this.data.contentMetadata;\n    };\n    return SurveyMetadata;\n}());\nexports.SurveyMetadata = SurveyMetadata;\n/**\n * Data class for serialization and deserialization. Do not add logic in here.\n */\nvar Metadata = /** @class */ (function () {\n    function Metadata() {\n    }\n    return Metadata;\n}());\nexports.Metadata = Metadata;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleU1ldGFkYXRhLnRzP2U0NzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUZBQWlDO0FBRWpDO0lBV0Msd0JBQW1CLElBQWM7UUFDaEMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDM0Q7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBdEJhLG1CQUFJLEdBQWxCLFVBQW1CLElBQWM7UUFDaEMsSUFBSTtZQUNILE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ1o7SUFDRixDQUFDO0lBa0JNLDJDQUFrQixHQUF6QjtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDbEMsQ0FBQztJQUNGLHFCQUFDO0FBQUQsQ0FBQztBQTVCWSx3Q0FBYztBQThCM0I7O0dBRUc7QUFDSDtJQUFBO0lBRUEsQ0FBQztJQUFELGVBQUM7QUFBRCxDQUFDO0FBRlksNEJBQVEiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9TdXJ2ZXlNZXRhZGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTdXJ2ZXlNZXRhZGF0YSB9IGZyb20gXCIuL0lTdXJ2ZXlNZXRhZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN1cnZleU1ldGFkYXRhIGltcGxlbWVudHMgSVN1cnZleU1ldGFkYXRhIHtcclxuXHRwdWJsaWMgc3RhdGljIG1ha2UoZGF0YTogTWV0YWRhdGEpOiBJU3VydmV5TWV0YWRhdGEge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdXJ2ZXlNZXRhZGF0YShkYXRhKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGRhdGE6IE1ldGFkYXRhO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoZGF0YTogTWV0YWRhdGEpIHtcclxuXHRcdGlmICghZGF0YSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIG11c3Qgbm90IGJlIG51bGxcIik7XHJcblx0XHR9XHJcblx0XHRpZiAoIWRhdGEuY29udGVudE1ldGFkYXRhKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImNvbnRlbnQgbWV0YWRhdGEgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghVXRpbHMuaXNPYmplY3QoZGF0YS5jb250ZW50TWV0YWRhdGEpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImNvbnRlbnQgbWV0YWRhdGEgbXVzdCBiZSBvZiBvYmplY3QgdHlwZVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENvbnRlbnRNZXRhZGF0YSgpOiBvYmplY3Qge1xyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5jb250ZW50TWV0YWRhdGE7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogRGF0YSBjbGFzcyBmb3Igc2VyaWFsaXphdGlvbiBhbmQgZGVzZXJpYWxpemF0aW9uLiBEbyBub3QgYWRkIGxvZ2ljIGluIGhlcmUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWV0YWRhdGEge1xyXG5cdHB1YmxpYyBjb250ZW50TWV0YWRhdGE6IG9iamVjdDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyMetadata.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyStatCollection.js":
/*!*********************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyStatCollection.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SurveyStatCollection = void 0;\n/**\n * Generic class for managing a collection of survey stats. Includes read-from/write-to json structures or a file,\n * as well as merge routines for combining collections\n */\nvar SurveyStatCollection = /** @class */ (function () {\n    function SurveyStatCollection() {\n        // The following property name matches the JSON root key name for proper serialization/ deserialization\n        this.Surveys = {};\n        this.Surveys = {};\n    }\n    /**\n     * Add stats. Overwrites if already exists.\n     */\n    SurveyStatCollection.prototype.addStats = function (surveyId, stats) {\n        this.Surveys[surveyId] = stats;\n    };\n    /**\n     * Get a SurveyActivationStats object by surveyId. Returns null if surveyId is not found\n     */\n    SurveyStatCollection.prototype.getBySurveyId = function (surveyId) {\n        return (this.Surveys[surveyId]);\n    };\n    /**\n     * Get all stats available\n     */\n    SurveyStatCollection.prototype.getStats = function () {\n        return this.Surveys;\n    };\n    return SurveyStatCollection;\n}());\nexports.SurveyStatCollection = SurveyStatCollection;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleVN0YXRDb2xsZWN0aW9uLnRzPzJkMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUE7OztHQUdHO0FBQ0g7SUFJQztRQUhBLHVHQUF1RztRQUMvRixZQUFPLEdBQXdCLEVBQUUsQ0FBQztRQUd6QyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSSx1Q0FBUSxHQUFmLFVBQWdCLFFBQWdCLEVBQUUsS0FBYTtRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSw0Q0FBYSxHQUFwQixVQUFxQixRQUFnQjtRQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNJLHVDQUFRLEdBQWY7UUFDQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztJQUNGLDJCQUFDO0FBQUQsQ0FBQztBQTVCcUIsb0RBQW9CIiwiZmlsZSI6Ii4uL0Zsb29kZ2F0ZUNvcmUvZGlzdC9zcmMvU3VydmV5U3RhdENvbGxlY3Rpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGljdGlvbmFyeSB9IGZyb20gXCIuL0NvbW1vblwiO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyaWMgY2xhc3MgZm9yIG1hbmFnaW5nIGEgY29sbGVjdGlvbiBvZiBzdXJ2ZXkgc3RhdHMuIEluY2x1ZGVzIHJlYWQtZnJvbS93cml0ZS10byBqc29uIHN0cnVjdHVyZXMgb3IgYSBmaWxlLFxyXG4gKiBhcyB3ZWxsIGFzIG1lcmdlIHJvdXRpbmVzIGZvciBjb21iaW5pbmcgY29sbGVjdGlvbnNcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdXJ2ZXlTdGF0Q29sbGVjdGlvbjxUU3RhdHM+IHtcclxuXHQvLyBUaGUgZm9sbG93aW5nIHByb3BlcnR5IG5hbWUgbWF0Y2hlcyB0aGUgSlNPTiByb290IGtleSBuYW1lIGZvciBwcm9wZXIgc2VyaWFsaXphdGlvbi8gZGVzZXJpYWxpemF0aW9uXHJcblx0cHJpdmF0ZSBTdXJ2ZXlzOiBJRGljdGlvbmFyeTxUU3RhdHM+ID0ge307XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuU3VydmV5cyA9IHt9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkIHN0YXRzLiBPdmVyd3JpdGVzIGlmIGFscmVhZHkgZXhpc3RzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhZGRTdGF0cyhzdXJ2ZXlJZDogc3RyaW5nLCBzdGF0czogVFN0YXRzKTogdm9pZCB7XHJcblx0XHR0aGlzLlN1cnZleXNbc3VydmV5SWRdID0gc3RhdHM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgYSBTdXJ2ZXlBY3RpdmF0aW9uU3RhdHMgb2JqZWN0IGJ5IHN1cnZleUlkLiBSZXR1cm5zIG51bGwgaWYgc3VydmV5SWQgaXMgbm90IGZvdW5kXHJcblx0ICovXHJcblx0cHVibGljIGdldEJ5U3VydmV5SWQoc3VydmV5SWQ6IHN0cmluZyk6IFRTdGF0cyB7XHJcblx0XHRyZXR1cm4gKHRoaXMuU3VydmV5c1tzdXJ2ZXlJZF0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGFsbCBzdGF0cyBhdmFpbGFibGVcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0U3RhdHMoKTogSURpY3Rpb25hcnk8VFN0YXRzPiB7XHJcblx0XHRyZXR1cm4gdGhpcy5TdXJ2ZXlzO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyStatCollection.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyStatCollectionActivation.js":
/*!*******************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyStatCollectionActivation.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SurveyActivationStats = exports.FileBasedSurveyActivationStatsProvider = exports.HostBasedSurveyActivationStatsProvider = exports.SurveyActivationStatsProviderFactory = exports.SurveyStatCollectionActivation = void 0;\nvar IFloodgateStorageProvider = __webpack_require__(/*! ./Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\nvar FileType = IFloodgateStorageProvider.FileType;\nvar ISurvey = __webpack_require__(/*! ./Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ./FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar StateProviderHelpers = __webpack_require__(/*! ./StateProviderHelpers */ \"../FloodgateCore/dist/src/StateProviderHelpers.js\");\nvar SurveyStatCollection_1 = __webpack_require__(/*! ./SurveyStatCollection */ \"../FloodgateCore/dist/src/SurveyStatCollection.js\");\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n/**\n * StatCollection for activated surveys.  Should be used to track the SurveyIds\n * that have been recently shown to a user\n */\n// TODO (gachoi) Check if this applies - VSOBug: 1443010 One bad Stat object fails the entire serialization\nvar SurveyStatCollectionActivation = /** @class */ (function (_super) {\n    __extends(SurveyStatCollectionActivation, _super);\n    function SurveyStatCollectionActivation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Load from Json\n     */\n    SurveyStatCollectionActivation.fromJson = function (json) {\n        var statCollection = new SurveyStatCollectionActivation();\n        if (!json) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.SurveyStatCollectionActivation.FromJson.Failed, { ErrorMessage: \"Input json is null or empty.\" });\n            return statCollection;\n        }\n        var readStats;\n        try {\n            readStats = JSON.parse(json);\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.SurveyStatCollectionActivation.FromJson.Failed, { ErrorMessage: \"Json parsing failed. \" + e.toString() });\n            return statCollection;\n        }\n        if (!statCollection.deserialize(readStats)) {\n            return new SurveyStatCollectionActivation();\n        }\n        return statCollection;\n    };\n    /**\n     * Convert to Json\n     */\n    SurveyStatCollectionActivation.toJson = function (object) {\n        if (!object) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.SurveyStatCollectionActivation.ToJson.Failed, { ErrorMessage: \"Input json is null or empty.\" });\n            object = new SurveyStatCollectionActivation();\n        }\n        return JSON.stringify(object);\n    };\n    /**\n     * Add another SurveyStatCollectionActivation object\n     */\n    SurveyStatCollectionActivation.prototype.accumulate = function (other) {\n        if (!other) {\n            return;\n        }\n        var stats = other.getStats();\n        // SurveyActivationStats accumulation simply overwrites any keys from 'other' into our collection\n        for (var key in stats) {\n            if (stats.hasOwnProperty(key)) {\n                this.addStats(key, stats[key]);\n            }\n        }\n    };\n    /**\n     * Method to deserialize SurveyStatCollectionActivation\n     * @param input: collection of SurveyStatCollectionActivation\n     * Returns result of validation check\n     */\n    SurveyStatCollectionActivation.prototype.deserialize = function (input) {\n        var rawStats = input.Surveys;\n        var now = new Date();\n        for (var key in rawStats) {\n            if (rawStats.hasOwnProperty(key)) {\n                var newStat = new SurveyActivationStats();\n                if (newStat.deserialize(rawStats[key]) && newStat.ExpirationTimeUtc > now) {\n                    this.addStats(key, newStat);\n                }\n            }\n        }\n        return this.validate();\n    };\n    /**\n     * Validate the Surveys\n     * Returns false if validation fails\n     */\n    SurveyStatCollectionActivation.prototype.validate = function () {\n        return Utils.isObject(this.getStats());\n    };\n    return SurveyStatCollectionActivation;\n}(SurveyStatCollection_1.SurveyStatCollection));\nexports.SurveyStatCollectionActivation = SurveyStatCollectionActivation;\nvar SurveyActivationStatsProviderFactory = /** @class */ (function () {\n    function SurveyActivationStatsProviderFactory() {\n    }\n    SurveyActivationStatsProviderFactory.make = function (fileBasedStorage, hostBasedStorage) {\n        if (hostBasedStorage) {\n            return new HostBasedSurveyActivationStatsProvider(fileBasedStorage, hostBasedStorage);\n        }\n        return new FileBasedSurveyActivationStatsProvider(fileBasedStorage);\n    };\n    return SurveyActivationStatsProviderFactory;\n}());\nexports.SurveyActivationStatsProviderFactory = SurveyActivationStatsProviderFactory;\nvar HostBasedSurveyActivationStatsProvider = /** @class */ (function () {\n    function HostBasedSurveyActivationStatsProvider(fileBasedStorageProvider, hostBasedStorage) {\n        if (!hostBasedStorage) {\n            throw new Error(\"host-based storage must not be null\");\n        }\n        this.hostBasedStorage = hostBasedStorage;\n        // file based provider is optional\n        if (fileBasedStorageProvider) {\n            this.fileBasedStorageProvider = new FileBasedSurveyActivationStatsProvider(fileBasedStorageProvider);\n        }\n    }\n    // @Override\n    HostBasedSurveyActivationStatsProvider.prototype.load = function () {\n        var surveyStatsFromHost = this.getSurveyStatsFromHost();\n        var surveyStatsFromFile = new SurveyStatCollectionActivation();\n        if (this.fileBasedStorageProvider) {\n            surveyStatsFromFile = this.fileBasedStorageProvider.load();\n        }\n        var surveyStatsCollections = StateProviderHelpers.MergeAndUpdateSurveyActivationStats(surveyStatsFromFile, surveyStatsFromHost);\n        return surveyStatsCollections.find(0 /* Merged */);\n    };\n    // @Override\n    HostBasedSurveyActivationStatsProvider.prototype.save = function (stats) {\n        if (!stats) {\n            return;\n        }\n        var statsFromHost = this.getSurveyStatsFromHost();\n        var statCollection = StateProviderHelpers.MergeAndUpdateSurveyActivationStats(stats, statsFromHost);\n        var toBeUpdatedStats = statCollection.find(1 /* ToBeUpdated */);\n        var mergedStates = statCollection.find(0 /* Merged */);\n        // write delta_data to Roaming\n        if (toBeUpdatedStats) {\n            var toBeUpdatedStatsDictionary = toBeUpdatedStats.getStats();\n            for (var surveyId in toBeUpdatedStatsDictionary) {\n                if (toBeUpdatedStatsDictionary.hasOwnProperty(surveyId)) {\n                    var item = StateProviderHelpers.makeSettingItemValue(JSON.stringify(toBeUpdatedStatsDictionary[surveyId]));\n                    this.hostBasedStorage.upsertSettingItem(FileType[FileType.SurveyActivationStats], surveyId, item);\n                }\n            }\n        }\n        // Write merged data to File\n        if (this.fileBasedStorageProvider) {\n            this.fileBasedStorageProvider.save(mergedStates);\n        }\n    };\n    HostBasedSurveyActivationStatsProvider.prototype.getSurveyStatsFromHost = function () {\n        var statsCollection = new SurveyStatCollectionActivation();\n        var itemData = this.hostBasedStorage.readSettingList(FileType[FileType.SurveyActivationStats]);\n        var now = new Date();\n        for (var surveyId in itemData) {\n            if (!itemData.hasOwnProperty(surveyId)) {\n                continue;\n            }\n            var dataString = StateProviderHelpers.extractSettingItemValueSubString(itemData[surveyId]);\n            var newStats = new SurveyActivationStats();\n            try {\n                var readStats = JSON.parse(dataString);\n                newStats.deserialize(readStats);\n            }\n            catch (e) {\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.HostBasedSurveyActivationStatsProvider.GetSurveyStatsFromHost.Failed, { ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\n            }\n            if (newStats.ExpirationTimeUtc <= now) {\n                // Delete survey stat from host storage if it's expired.\n                this.hostBasedStorage.deleteSettingItem(FileType[FileType.SurveyActivationStats], surveyId);\n            }\n            else {\n                statsCollection.addStats(surveyId, newStats);\n            }\n        }\n        return statsCollection;\n    };\n    return HostBasedSurveyActivationStatsProvider;\n}());\nexports.HostBasedSurveyActivationStatsProvider = HostBasedSurveyActivationStatsProvider;\nvar FileBasedSurveyActivationStatsProvider = /** @class */ (function () {\n    function FileBasedSurveyActivationStatsProvider(storage) {\n        if (!storage) {\n            throw new Error(\"storage must not be null\");\n        }\n        this.storage = storage;\n    }\n    // @Override\n    FileBasedSurveyActivationStatsProvider.prototype.load = function () {\n        var readString = this.storage.read(IFloodgateStorageProvider.FileType.SurveyActivationStats);\n        if (!readString) {\n            return new SurveyStatCollectionActivation();\n        }\n        return SurveyStatCollectionActivation.fromJson(readString);\n    };\n    // @Override\n    FileBasedSurveyActivationStatsProvider.prototype.save = function (surveyStatCollectionActivation) {\n        if (!surveyStatCollectionActivation) {\n            return;\n        }\n        var writeString = SurveyStatCollectionActivation.toJson(surveyStatCollectionActivation);\n        this.storage.write(IFloodgateStorageProvider.FileType.SurveyActivationStats, writeString);\n    };\n    return FileBasedSurveyActivationStatsProvider;\n}());\nexports.FileBasedSurveyActivationStatsProvider = FileBasedSurveyActivationStatsProvider;\nvar SurveyActivationStats = /** @class */ (function () {\n    function SurveyActivationStats() {\n        this.SurveyLaunchCount = 0;\n        this.SurveyLaunchCountPerSession = 0;\n    }\n    /**\n     * Method to deserialize a JSON object to class object\n     * @param input: JSON object\n     * Returns result of validation check\n     */\n    SurveyActivationStats.prototype.deserialize = function (input) {\n        var _a, _b;\n        this.ActivationTimeUtc = input.ActivationTimeUtc;\n        this.ExpirationTimeUtc = input.ExpirationTimeUtc;\n        this.Type = input.Type;\n        this.SurveyLaunchCount = (_a = input.SurveyLaunchCount) !== null && _a !== void 0 ? _a : 0;\n        this.SurveyLaunchCountPerSession = (_b = input.SurveyLaunchCountPerSession) !== null && _b !== void 0 ? _b : 0;\n        return this.validate();\n    };\n    /**\n     * Method to call after deserialization to validate generated object.\n     * Returns false if not valid.\n     */\n    SurveyActivationStats.prototype.validate = function () {\n        // make it a date object if it's a valid UTC date time value\n        if (Utils.isUtcDatetimeString(this.ActivationTimeUtc)) {\n            this.ActivationTimeUtc = Utils.stringToDate(this.ActivationTimeUtc);\n        }\n        else {\n            return false;\n        }\n        // make it a date object if it's a valid UTC date time value\n        if (Utils.isUtcDatetimeString(this.ExpirationTimeUtc)) {\n            this.ExpirationTimeUtc = Utils.stringToDate(this.ExpirationTimeUtc);\n        }\n        else {\n            return false;\n        }\n        if (!Utils.isNumber(this.SurveyLaunchCount) ||\n            !Utils.isNumber(this.SurveyLaunchCountPerSession)) {\n            return false;\n        }\n        return Utils.isEnumValue(this.Type, ISurvey.Type);\n    };\n    return SurveyActivationStats;\n}());\nexports.SurveyActivationStats = SurveyActivationStats;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyStatCollectionActivation.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/SurveyStatCollectionEventActivity.js":
/*!**********************************************************************!*\
  !*** ../FloodgateCore/dist/src/SurveyStatCollectionEventActivity.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SurveyEventActivityStats = exports.SurveyStatCollectionEventActivity = void 0;\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ./FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar SurveyStatCollection_1 = __webpack_require__(/*! ./SurveyStatCollection */ \"../FloodgateCore/dist/src/SurveyStatCollection.js\");\nvar Utils = __webpack_require__(/*! ./Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n/**\n * StatCollection for EventActivity counts.  Should be used to store/merge\n * aggregate values between sessions tracking the same surveys/events\n * E.g. A survey that activates after 3 boots.\n */\n// TODO (gachoi) check the following - VSOBug: 1443010 One bad Stat object fails the entire serialization\nvar SurveyStatCollectionEventActivity = /** @class */ (function (_super) {\n    __extends(SurveyStatCollectionEventActivity, _super);\n    function SurveyStatCollectionEventActivity() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Load from Json\n     */\n    SurveyStatCollectionEventActivity.fromJson = function (json) {\n        var statCollection = new SurveyStatCollectionEventActivity();\n        if (!json) {\n            return statCollection;\n        }\n        var readStats;\n        try {\n            readStats = JSON.parse(json);\n        }\n        catch (e) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.SurveyStatCollectionEventActivity.FromJson.Failed, { ErrorMessage: \"Json parsing failed. \" + e.toString() });\n            return statCollection;\n        }\n        if (!statCollection.deserialize(readStats)) {\n            return new SurveyStatCollectionEventActivity();\n        }\n        return statCollection;\n    };\n    /**\n     * Convert to Json\n     */\n    SurveyStatCollectionEventActivity.toJson = function (object) {\n        if (!object) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.SurveyStatCollectionEventActivity.ToJson.Failed, { ErrorMessage: \"Input json is null or empty.\" });\n            object = new SurveyStatCollectionEventActivity();\n        }\n        return JSON.stringify(object);\n    };\n    /**\n     * Add another SurveyStatCollectionEventActivity object\n     */\n    SurveyStatCollectionEventActivity.prototype.accumulate = function (other) {\n        if (!other) {\n            return;\n        }\n        var stats = other.getStats();\n        // SurveyEventActivityStats accumulation simply overwrites any keys from 'other' into our collection\n        for (var key in stats) {\n            if (stats.hasOwnProperty(key)) {\n                var ourStats = this.getBySurveyId(key);\n                // If it does not already exist\n                if (!ourStats) {\n                    ourStats = new SurveyEventActivityStats();\n                    ourStats.Counts = [];\n                    this.addStats(key, ourStats);\n                }\n                ourStats.ExpirationTimeUtc = stats[key].ExpirationTimeUtc;\n                // If for some reason the other counts array is larger, resize ourStats.counts\n                if (ourStats.Counts.length < stats[key].Counts.length) {\n                    var resizedCounts = ourStats.Counts.slice();\n                    ourStats.Counts = resizedCounts;\n                }\n                for (var i = 0; i < stats[key].Counts.length; i++) {\n                    if (!ourStats.Counts[i]) {\n                        ourStats.Counts[i] = 0;\n                    }\n                    ourStats.Counts[i] += stats[key].Counts[i];\n                }\n            }\n        }\n    };\n    /**\n     * Method to deserialize SurveyStatCollectionEventActivity\n     * @param input: collection of SurveyStatCollectionEventActivity\n     * Returns result of validation check\n     */\n    SurveyStatCollectionEventActivity.prototype.deserialize = function (input) {\n        var rawStats = input.Surveys;\n        var now = new Date();\n        for (var key in rawStats) {\n            if (rawStats.hasOwnProperty(key)) {\n                var newStat = new SurveyEventActivityStats();\n                if (newStat.deserialize(rawStats[key]) && newStat.ExpirationTimeUtc > now) {\n                    this.addStats(key, newStat);\n                }\n            }\n        }\n        return this.validate();\n    };\n    /**\n     * Validate the Surveys\n     * Returns false if validation fails\n     */\n    SurveyStatCollectionEventActivity.prototype.validate = function () {\n        return Utils.isObject(this.getStats());\n    };\n    return SurveyStatCollectionEventActivity;\n}(SurveyStatCollection_1.SurveyStatCollection));\nexports.SurveyStatCollectionEventActivity = SurveyStatCollectionEventActivity;\nvar SurveyEventActivityStats = /** @class */ (function () {\n    function SurveyEventActivityStats() {\n    }\n    /**\n     * Method to deserialize a JSON object to class object\n     * @param input: JSON object\n     * Returns result of validation check\n     */\n    SurveyEventActivityStats.prototype.deserialize = function (input) {\n        this.ExpirationTimeUtc = input.ExpirationTimeUtc;\n        this.Counts = input.Counts;\n        return this.validate();\n    };\n    /**\n     * Method to call after deserialization to validate generated object.\n     * Returns false if not valid.\n     */\n    SurveyEventActivityStats.prototype.validate = function () {\n        if (!this.Counts) {\n            return false;\n        }\n        for (var i = 0; i < this.Counts.length; i++) {\n            var val = this.Counts[i];\n            if (!Utils.isNumber(val)) {\n                return false;\n            }\n            if (val < 0) {\n                this.Counts[i] = 0;\n            }\n        }\n        // make it a date object if it's a valid UTC date time value\n        if (Utils.isUtcDatetimeString(this.ExpirationTimeUtc)) {\n            this.ExpirationTimeUtc = Utils.stringToDate(this.ExpirationTimeUtc);\n        }\n        else {\n            return false;\n        }\n        return true;\n    };\n    return SurveyEventActivityStats;\n}());\nexports.SurveyEventActivityStats = SurveyEventActivityStats;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/SurveyStatCollectionEventActivity.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/FpsSurvey.js":
/*!******************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/FpsSurvey.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar CommentComponent = __webpack_require__(/*! ../SurveyComponents/CommentComponent */ \"../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js\");\nvar CVSurveyComponent = __webpack_require__(/*! ../SurveyComponents/CVSurveyComponent */ \"../FloodgateCore/dist/src/SurveyComponents/CVSurveyComponent.js\");\nvar MultipleChoiceComponent = __webpack_require__(/*! ../SurveyComponents/MultipleChoiceComponent */ \"../FloodgateCore/dist/src/SurveyComponents/MultipleChoiceComponent.js\");\nvar PromptComponent = __webpack_require__(/*! ../SurveyComponents/PromptComponent */ \"../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js\");\nvar RatingComponent = __webpack_require__(/*! ../SurveyComponents/RatingComponent */ \"../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey_1 = __webpack_require__(/*! ./Survey */ \"../FloodgateCore/dist/src/Surveys/Survey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ./SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar isNOU = Utils.isNOU;\nvar FpsSurvey = /** @class */ (function (_super) {\n    __extends(FpsSurvey, _super);\n    function FpsSurvey(data) {\n        var _this = _super.call(this) || this;\n        if (isNOU(data)) {\n            throw new Error(\"data must not be null\");\n        }\n        _this.surveyInfo = new SurveyDataSource(data.baseData);\n        _this.prompt = new PromptComponent(data.promptData);\n        _this.question = data.commentData ? (new CommentComponent(data.commentData)) : null;\n        _this.rating = data.ratingData ? (new RatingComponent(data.ratingData)) : null;\n        _this.multipleChoice = data.multipleChoiceData ? (new MultipleChoiceComponent(data.multipleChoiceData)) : null;\n        _this.cvSurvey = data.cvSurveyData ? (new CVSurveyComponent(data.cvSurveyData)) : null;\n        return _this;\n    }\n    FpsSurvey.make = function (data) {\n        try {\n            return new FpsSurvey(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    FpsSurvey.makeFps = function (baseData, sp, surveyModel) {\n        if (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\n            return null;\n        }\n        var ratingValuesAscending = [];\n        var availableOptions = [];\n        var content = surveyModel.content;\n        // Prompt is required and at least one of the other components are required\n        if (isNOU(content) || isNOU(content.prompt) ||\n            (isNOU(content.rating) && isNOU(content.multipleChoice) &&\n                isNOU(content.comment))) {\n            return null;\n        }\n        var data = new FpsSurvey.FpsSurveyData();\n        data.baseData = baseData;\n        data.promptData = new PromptComponent.PromptComponentData();\n        data.promptData.title = sp.getCustomString(content.prompt.title);\n        data.promptData.question = sp.getCustomString(content.prompt.question);\n        data.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\n        data.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\n        if (isNOU(data.promptData.title)\n            || isNOU(data.promptData.question)\n            || isNOU(data.promptData.yesButtonLabel)\n            || isNOU(data.promptData.noButtonLabel)) {\n            return null;\n        }\n        if (content.rating) {\n            data.ratingData = new RatingComponent.RatingComponentData();\n            data.ratingData.question = sp.getCustomString(content.rating.question);\n            data.ratingData.isZeroBased = content.rating.isZeroBased;\n            for (var _i = 0, _a = content.rating.ratingValuesAscending; _i < _a.length; _i++) {\n                var value = _a[_i];\n                var customString = sp.getCustomString(value);\n                if (isNOU(customString)) {\n                    return null;\n                }\n                ratingValuesAscending.push(customString);\n            }\n            data.ratingData.ratingValuesAscending = ratingValuesAscending;\n            if (isNOU(data.ratingData.question)\n                || isNOU(data.ratingData.ratingValuesAscending)) {\n                return null;\n            }\n        }\n        if (content.multipleChoice) {\n            data.multipleChoiceData = new MultipleChoiceComponent.MultipleChoiceComponentData();\n            data.multipleChoiceData.question = sp.getCustomString(content.multipleChoice.question);\n            data.multipleChoiceData.minNumberOfSelectedOptions = content.multipleChoice.minNumberOfSelectedOptions;\n            data.multipleChoiceData.maxNumberOfSelectedOptions = content.multipleChoice.maxNumberOfSelectedOptions;\n            for (var _b = 0, _c = content.multipleChoice.availableOptions; _b < _c.length; _b++) {\n                var value = _c[_b];\n                var customString = sp.getCustomString(value);\n                if (isNOU(customString)) {\n                    return null;\n                }\n                availableOptions.push(customString);\n            }\n            data.multipleChoiceData.availableOptions = availableOptions;\n            if (isNOU(data.multipleChoiceData.question)\n                || isNOU(data.multipleChoiceData.availableOptions)) {\n                return null;\n            }\n        }\n        if (content.comment) {\n            data.commentData = new CommentComponent.CommentComponentData();\n            data.commentData.question = sp.getCustomString(content.comment.question);\n            if (isNOU(data.commentData.question)) {\n                return null;\n            }\n        }\n        // cvsurvey data is not required on all surveys.\n        if (content.cvSurvey) {\n            data.cvSurveyData = new CVSurveyComponent.CVSurveyComponentData();\n            data.cvSurveyData.customerVoiceFormId = content.cvSurvey.customerVoiceFormId;\n            if (isNOU(data.cvSurveyData.customerVoiceFormId)) {\n                return null;\n            }\n        }\n        return this.make(data);\n    };\n    // @Override\n    FpsSurvey.prototype.getType = function () {\n        return ISurvey.Type.Fps;\n    };\n    // @Override\n    FpsSurvey.prototype.getSurveyInfo = function () {\n        return this.surveyInfo;\n    };\n    // @Override\n    FpsSurvey.prototype.getCommentComponent = function () {\n        return this.question;\n    };\n    // @Override\n    FpsSurvey.prototype.getPromptComponent = function () {\n        return this.prompt;\n    };\n    // @Override\n    FpsSurvey.prototype.getRatingComponent = function () {\n        return this.rating;\n    };\n    // @Override\n    FpsSurvey.prototype.getMultipleChoiceComponent = function () {\n        return this.multipleChoice;\n    };\n    FpsSurvey.prototype.getCVSurveyComponent = function () {\n        return this.cvSurvey;\n    };\n    // @Override\n    FpsSurvey.prototype.getComponent = function (componentType) {\n        switch (componentType) {\n            case \"Comment\" /* Comment */:\n                return this.getCommentComponent();\n            case \"Prompt\" /* Prompt */:\n                return this.getPromptComponent();\n            case \"Rating\" /* Rating */:\n                return this.getRatingComponent();\n            case \"MultipleChoice\" /* MultipleChoice */:\n                return this.getMultipleChoiceComponent();\n            case \"CVSurvey\" /* CVSurvey */:\n                return this.getCVSurveyComponent();\n            default:\n                return null;\n        }\n    };\n    // @Override\n    FpsSurvey.prototype.getDomElements = function (doc) {\n        if (isNOU(doc)) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurvey.DOM_FPS_TAGNAME);\n        this.getSurveyInfo().getDomElements(doc).forEach(function (child) {\n            if (!isNOU(child)) {\n                element.appendChild(child);\n            }\n        });\n        this.getCommentComponent().getDomElements(doc).forEach(function (child) {\n            if (!isNOU(child)) {\n                element.appendChild(child);\n            }\n        });\n        if (this.getRatingComponent()) {\n            this.getRatingComponent().getDomElements(doc).forEach(function (child) {\n                if (!isNOU(child)) {\n                    element.appendChild(child);\n                }\n            });\n        }\n        if (this.getMultipleChoiceComponent()) {\n            this.getMultipleChoiceComponent().getDomElements(doc).forEach(function (child) {\n                if (!isNOU(child)) {\n                    element.appendChild(child);\n                }\n            });\n        }\n        return [element];\n    };\n    // @Override\n    FpsSurvey.prototype.getJsonElements = function () {\n        var _a;\n        var result = {};\n        result = Utils.overrideValues(this.getSurveyInfo().getJsonElements(), result);\n        result[ISurveyComponent.JSON_APPLICATION_KEYNAME] = {};\n        result[ISurveyComponent.JSON_APPLICATION_KEYNAME][ISurveyComponent.JSON_EXTENDEDMANIFESTDATA_KEYNAME] =\n            JSON.stringify((_a = {},\n                _a[ISurveyComponent.JSON_SURVEYSTRINGS_KEYNAME] = this.makeSurveyStrings(),\n                _a[ISurveyComponent.JSON_SURVEYSPECIFICDATA_KEYNAME] = this.makeResponseString(),\n                _a));\n        return result;\n    };\n    // Makes the string to send to Manifest respecting the components present in the survey\n    FpsSurvey.prototype.makeResponseString = function () {\n        var response = {};\n        if (this.question) {\n            response[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.getCommentComponent().getSubmittedText()];\n        }\n        if (this.multipleChoice) {\n            response[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] =\n                [this.getMultipleChoiceComponent().getOptionSelectedStates()];\n        }\n        if (this.rating) {\n            response[ISurveyComponent.JSON_RATING_KEYNAME] = [\n                { numberOfOptions: this.getRatingComponent().getRatingValuesAscending().length,\n                    selectedRating: this.getRatingComponent().getSelectedRatingIndex() }\n            ];\n        }\n        return JSON.stringify(response);\n    };\n    // Makes the string to send to Manifest respecting the components present in the survey\n    FpsSurvey.prototype.makeSurveyStrings = function () {\n        var actualStrings = {};\n        if (this.prompt) {\n            actualStrings[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.prompt.getComponentJson();\n        }\n        if (this.rating) {\n            actualStrings[ISurveyComponent.JSON_RATING_KEYNAME] = [this.rating.getComponentJson()];\n        }\n        if (this.question) {\n            actualStrings[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.question.getComponentJson()];\n        }\n        if (this.multipleChoice) {\n            actualStrings[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] = [this.multipleChoice.getComponentJson()];\n        }\n        return JSON.stringify(actualStrings);\n    };\n    return FpsSurvey;\n}(Survey_1.Survey));\n(function (FpsSurvey) {\n    /**\n     * Data required for a Fps Survey\n     */\n    var FpsSurveyData = /** @class */ (function () {\n        function FpsSurveyData() {\n        }\n        return FpsSurveyData;\n    }());\n    FpsSurvey.FpsSurveyData = FpsSurveyData;\n})(FpsSurvey || (FpsSurvey = {}));\nmodule.exports = FpsSurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/FpsSurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/GenericMessagingSurfaceSurvey.js":
/*!**************************************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/GenericMessagingSurfaceSurvey.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey_1 = __webpack_require__(/*! ./Survey */ \"../FloodgateCore/dist/src/Surveys/Survey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ./SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar isNOU = Utils.isNOU;\nvar GenericMessagingSurfaceSurvey = /** @class */ (function (_super) {\n    __extends(GenericMessagingSurfaceSurvey, _super);\n    function GenericMessagingSurfaceSurvey(data) {\n        var _this = _super.call(this) || this;\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        _this.surveyInfo = new SurveyDataSource(data.baseData);\n        // This check cannot be done in survey info constructor\n        // as metadata is specific to this survey type.\n        if (isNOU(_this.surveyInfo.getMetadata())) {\n            throw new Error(\"metadata must not be null\");\n        }\n        return _this;\n    }\n    GenericMessagingSurfaceSurvey.make = function (data) {\n        try {\n            return new GenericMessagingSurfaceSurvey(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    GenericMessagingSurfaceSurvey.makeCustom = function (baseData) {\n        if (isNOU(baseData)) {\n            return null;\n        }\n        var data = new GenericMessagingSurfaceSurvey.GenericMessagingSurfaceSurveyData();\n        data.baseData = baseData;\n        return this.make(data);\n    };\n    // @Override\n    GenericMessagingSurfaceSurvey.prototype.getType = function () {\n        return ISurvey.Type.GenericMessagingSurface;\n    };\n    // @Override\n    GenericMessagingSurfaceSurvey.prototype.getSurveyInfo = function () {\n        return this.surveyInfo;\n    };\n    // @Override\n    GenericMessagingSurfaceSurvey.prototype.getComponent = function (componentType) {\n        return null;\n    };\n    // @Override\n    GenericMessagingSurfaceSurvey.prototype.getDomElements = function (doc) {\n        return [];\n    };\n    // @Override\n    GenericMessagingSurfaceSurvey.prototype.getJsonElements = function () {\n        return {};\n    };\n    return GenericMessagingSurfaceSurvey;\n}(Survey_1.Survey));\n(function (GenericMessagingSurfaceSurvey) {\n    /**\n     * Data required for a Generic Surface Survey\n     */\n    var GenericMessagingSurfaceSurveyData = /** @class */ (function () {\n        function GenericMessagingSurfaceSurveyData() {\n        }\n        return GenericMessagingSurfaceSurveyData;\n    }());\n    GenericMessagingSurfaceSurvey.GenericMessagingSurfaceSurveyData = GenericMessagingSurfaceSurveyData;\n})(GenericMessagingSurfaceSurvey || (GenericMessagingSurfaceSurvey = {}));\nmodule.exports = GenericMessagingSurfaceSurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleXMvR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXkudHM/ZWEwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLG9HQUEwQztBQUcxQyxzRkFBa0M7QUFDbEMsa0dBQWtDO0FBQ2xDLDhIQUF1RDtBQUUvQyxTQUFLLEdBQUssS0FBSyxNQUFWLENBQVc7QUFFeEI7SUFBNEMsaURBQU07SUFzQmpELHVDQUFvQixJQUFxRTtRQUF6RixZQUNDLGlCQUFPLFNBWVA7UUFYQSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0RCx1REFBdUQ7UUFDdkQsK0NBQStDO1FBQy9DLElBQUksS0FBSyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRTtZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDN0M7O0lBQ0YsQ0FBQztJQWxDYSxrQ0FBSSxHQUFsQixVQUFtQixJQUFxRTtRQUN2RixJQUFJO1lBQ0gsT0FBTyxJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9DO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQztTQUNaO0lBQ0YsQ0FBQztJQUVhLHdDQUFVLEdBQXhCLFVBQXlCLFFBQStDO1FBQ3ZFLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLElBQUksR0FBRyxJQUFJLDZCQUE2QixDQUFDLGlDQUFpQyxFQUFFLENBQUM7UUFDbkYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFtQkQsWUFBWTtJQUNMLCtDQUFPLEdBQWQ7UUFDQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDN0MsQ0FBQztJQUVELFlBQVk7SUFDTCxxREFBYSxHQUFwQjtRQUNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4QixDQUFDO0lBRUQsWUFBWTtJQUNMLG9EQUFZLEdBQW5CLFVBQW9CLGFBQW9DO1FBQ3ZELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFlBQVk7SUFDTCxzREFBYyxHQUFyQixVQUFzQixHQUFhO1FBQ2xDLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELFlBQVk7SUFDTCx1REFBZSxHQUF0QjtRQUNDLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUNGLG9DQUFDO0FBQUQsQ0FBQyxDQTdEMkMsZUFBTSxHQTZEakQ7QUFFRCxXQUFPLDZCQUE2QjtJQUNuQzs7T0FFRztJQUNIO1FBQUE7UUFFQSxDQUFDO1FBQUQsd0NBQUM7SUFBRCxDQUFDO0lBRlksK0RBQWlDLG9DQUU3QztBQUNGLENBQUMsRUFQTSw2QkFBNkIsS0FBN0IsNkJBQTZCLFFBT25DO0FBRUQsaUJBQVMsNkJBQTZCLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9TdXJ2ZXlzL0dlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSVN1cnZleSBmcm9tIFwiLi4vQXBpL0lTdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleUNvbXBvbmVudCBmcm9tIFwiLi4vQXBpL0lTdXJ2ZXlDb21wb25lbnRcIjtcclxuaW1wb3J0ICogYXMgSVN1cnZleUluZm8gZnJvbSBcIi4uL0lTdXJ2ZXlJbmZvXCI7XHJcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLi9VdGlsc1wiO1xyXG5pbXBvcnQgeyBTdXJ2ZXkgfSBmcm9tIFwiLi9TdXJ2ZXlcIjtcclxuaW1wb3J0ICogYXMgU3VydmV5RGF0YVNvdXJjZSBmcm9tIFwiLi9TdXJ2ZXlEYXRhU291cmNlXCI7XHJcblxyXG5jb25zdCB7IGlzTk9VIH0gPSBVdGlscztcclxuXHJcbmNsYXNzIEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5IGV4dGVuZHMgU3VydmV5IHtcclxuXHRwdWJsaWMgc3RhdGljIG1ha2UoZGF0YTogR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXkuR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXlEYXRhKTogSVN1cnZleSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5KGRhdGEpO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgbWFrZUN1c3RvbShiYXNlRGF0YTogU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YSk6IElTdXJ2ZXkge1xyXG5cdFx0aWYgKGlzTk9VKGJhc2VEYXRhKSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBkYXRhID0gbmV3IEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5LkdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5RGF0YSgpO1xyXG5cdFx0ZGF0YS5iYXNlRGF0YSA9IGJhc2VEYXRhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1ha2UoZGF0YSk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN1cnZleUluZm86IFN1cnZleURhdGFTb3VyY2U7XHJcblxyXG5cdHByaXZhdGUgY29uc3RydWN0b3IoZGF0YTogR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXkuR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXlEYXRhKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0aWYgKCFkYXRhKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImRhdGEgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnN1cnZleUluZm8gPSBuZXcgU3VydmV5RGF0YVNvdXJjZShkYXRhLmJhc2VEYXRhKTtcclxuXHJcblx0XHQvLyBUaGlzIGNoZWNrIGNhbm5vdCBiZSBkb25lIGluIHN1cnZleSBpbmZvIGNvbnN0cnVjdG9yXHJcblx0XHQvLyBhcyBtZXRhZGF0YSBpcyBzcGVjaWZpYyB0byB0aGlzIHN1cnZleSB0eXBlLlxyXG5cdFx0aWYgKGlzTk9VKHRoaXMuc3VydmV5SW5mby5nZXRNZXRhZGF0YSgpKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJtZXRhZGF0YSBtdXN0IG5vdCBiZSBudWxsXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldFR5cGUoKTogSVN1cnZleS5UeXBlIHtcclxuXHRcdHJldHVybiBJU3VydmV5LlR5cGUuR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2U7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0U3VydmV5SW5mbygpOiBJU3VydmV5SW5mbyB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdXJ2ZXlJbmZvO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldENvbXBvbmVudChjb21wb25lbnRUeXBlOiBJU3VydmV5Q29tcG9uZW50LlR5cGUpOiBJU3VydmV5Q29tcG9uZW50IHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldERvbUVsZW1lbnRzKGRvYzogRG9jdW1lbnQpOiBFbGVtZW50W10ge1xyXG5cdFx0cmV0dXJuIFtdO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldEpzb25FbGVtZW50cygpOiBvYmplY3Qge1xyXG5cdFx0cmV0dXJuIHt9O1xyXG5cdH1cclxufVxyXG5cclxubW9kdWxlIEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5IHtcclxuXHQvKipcclxuXHQgKiBEYXRhIHJlcXVpcmVkIGZvciBhIEdlbmVyaWMgU3VyZmFjZSBTdXJ2ZXlcclxuXHQgKi9cclxuXHRleHBvcnQgY2xhc3MgR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VTdXJ2ZXlEYXRhIHtcclxuXHRcdHB1YmxpYyBiYXNlRGF0YTogU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlU3VydmV5O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/GenericMessagingSurfaceSurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/InterceptSurvey.js":
/*!************************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/InterceptSurvey.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar InterceptComponent = __webpack_require__(/*! ../SurveyComponents/InterceptComponent */ \"../FloodgateCore/dist/src/SurveyComponents/InterceptComponent.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey_1 = __webpack_require__(/*! ./Survey */ \"../FloodgateCore/dist/src/Surveys/Survey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ./SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar isNOU = Utils.isNOU;\nvar InterceptSurvey = /** @class */ (function (_super) {\n    __extends(InterceptSurvey, _super);\n    function InterceptSurvey(data) {\n        var _this = _super.call(this) || this;\n        if (isNOU(data)) {\n            throw new Error(\"data must not be null\");\n        }\n        _this.surveyInfo = new SurveyDataSource(data.baseData);\n        _this.intercept = new InterceptComponent(data.interceptData);\n        return _this;\n    }\n    InterceptSurvey.make = function (data) {\n        try {\n            return new InterceptSurvey(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    InterceptSurvey.makeIntercept = function (baseData, sp, surveyModel) {\n        if (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\n            return null;\n        }\n        var content = surveyModel.content;\n        // Intercept component is required.\n        if (isNOU(content) || isNOU(content.intercept)) {\n            return null;\n        }\n        var data = new InterceptSurvey.InterceptSurveyData();\n        data.baseData = baseData;\n        data.interceptData = new InterceptComponent.InterceptComponentData();\n        data.interceptData.title = sp.getCustomString(content.intercept.title);\n        data.interceptData.question = sp.getCustomString(content.intercept.question);\n        data.interceptData.url = sp.getCustomString(content.intercept.url);\n        if (isNOU(data.interceptData.title)\n            || isNOU(data.interceptData.question)\n            || isNOU(data.interceptData.url)) {\n            return null;\n        }\n        return this.make(data);\n    };\n    // @Override\n    InterceptSurvey.prototype.getType = function () {\n        return ISurvey.Type.Intercept;\n    };\n    // @Override\n    InterceptSurvey.prototype.getSurveyInfo = function () {\n        return this.surveyInfo;\n    };\n    // @Override\n    InterceptSurvey.prototype.getInterceptComponent = function () {\n        return this.intercept;\n    };\n    // @Override\n    InterceptSurvey.prototype.getComponent = function (componentType) {\n        return (componentType === \"Intercept\" /* Intercept */) ? this.getInterceptComponent() : null;\n    };\n    // @Override\n    InterceptSurvey.prototype.getDomElements = function (doc) {\n        return [];\n    };\n    // @Override\n    InterceptSurvey.prototype.getJsonElements = function () {\n        return {};\n    };\n    return InterceptSurvey;\n}(Survey_1.Survey));\n(function (InterceptSurvey) {\n    /**\n     * Data required for an Intercept Survey\n     */\n    var InterceptSurveyData = /** @class */ (function () {\n        function InterceptSurveyData() {\n        }\n        return InterceptSurveyData;\n    }());\n    InterceptSurvey.InterceptSurveyData = InterceptSurveyData;\n})(InterceptSurvey || (InterceptSurvey = {}));\nmodule.exports = InterceptSurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleXMvSW50ZXJjZXB0U3VydmV5LnRzPzZiM2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFFQSxvR0FBMEM7QUFJMUMsK0pBQTZFO0FBQzdFLHNGQUFrQztBQUNsQyxrR0FBa0M7QUFDbEMsOEhBQXVEO0FBRS9DLFNBQUssR0FBSyxLQUFLLE1BQVYsQ0FBVztBQUV4QjtJQUE4QixtQ0FBTTtJQTZDbkMseUJBQW9CLElBQXlDO1FBQTdELFlBQ0MsaUJBQU8sU0FPUDtRQU5BLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUVELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs7SUFDN0QsQ0FBQztJQXBEYSxvQkFBSSxHQUFsQixVQUFtQixJQUF5QztRQUMzRCxJQUFJO1lBQ0gsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFFYSw2QkFBYSxHQUEzQixVQUE0QixRQUErQyxFQUFFLEVBQTRCLEVBQ3hHLFdBQW1DO1FBRW5DLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELElBQU0sT0FBTyxHQUEwQixXQUFXLENBQUMsT0FBTyxDQUFDO1FBRTNELG1DQUFtQztRQUNuQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9DLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFNLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRXJFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRW5FLElBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO2VBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztlQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUVsQyxPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFlRCxZQUFZO0lBQ0wsaUNBQU8sR0FBZDtRQUNDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVELFlBQVk7SUFDTCx1Q0FBYSxHQUFwQjtRQUNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4QixDQUFDO0lBRUQsWUFBWTtJQUNMLCtDQUFxQixHQUE1QjtRQUNDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN2QixDQUFDO0lBRUQsWUFBWTtJQUNMLHNDQUFZLEdBQW5CLFVBQW9CLGFBQW9DO1FBQ3ZELE9BQU8sQ0FBQyxhQUFhLGdDQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbEcsQ0FBQztJQUVELFlBQVk7SUFDTCx3Q0FBYyxHQUFyQixVQUFzQixHQUFhO1FBQ2xDLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELFlBQVk7SUFDTCx5Q0FBZSxHQUF0QjtRQUNDLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQyxDQXBGNkIsZUFBTSxHQW9GbkM7QUFDRCxXQUFPLGVBQWU7SUFDckI7O09BRUc7SUFDSDtRQUFBO1FBR0EsQ0FBQztRQUFELDBCQUFDO0lBQUQsQ0FBQztJQUhZLG1DQUFtQixzQkFHL0I7QUFDRixDQUFDLEVBUk0sZUFBZSxLQUFmLGVBQWUsUUFRckI7QUFFRCxpQkFBUyxlQUFlLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9TdXJ2ZXlzL0ludGVyY2VwdFN1cnZleS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIElGbG9vZGdhdGVTdHJpbmdQcm92aWRlciBmcm9tIFwiLi4vQXBpL0lGbG9vZGdhdGVTdHJpbmdQcm92aWRlclwiO1xyXG5pbXBvcnQgeyBJSW50ZXJjZXB0U3VydmV5IH0gZnJvbSBcIi4uL0FwaS9JSW50ZXJjZXB0U3VydmV5XCI7XHJcbmltcG9ydCAqIGFzIElTdXJ2ZXkgZnJvbSBcIi4uL0FwaS9JU3VydmV5XCI7XHJcbmltcG9ydCAqIGFzIElTdXJ2ZXlDb21wb25lbnQgZnJvbSBcIi4uL0FwaS9JU3VydmV5Q29tcG9uZW50XCI7XHJcbmltcG9ydCB7IENhbXBhaWduU3VydmV5Q29udGVudCwgQ2FtcGFpZ25TdXJ2ZXlUZW1wbGF0ZSB9IGZyb20gXCIuLi9DYW1wYWlnbi9DYW1wYWlnbkRlZmluaXRpb25Qcm92aWRlclwiO1xyXG5pbXBvcnQgKiBhcyBJU3VydmV5SW5mbyBmcm9tIFwiLi4vSVN1cnZleUluZm9cIjtcclxuaW1wb3J0ICogYXMgSW50ZXJjZXB0Q29tcG9uZW50IGZyb20gXCIuLi9TdXJ2ZXlDb21wb25lbnRzL0ludGVyY2VwdENvbXBvbmVudFwiO1xyXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi4vVXRpbHNcIjtcclxuaW1wb3J0IHsgU3VydmV5IH0gZnJvbSBcIi4vU3VydmV5XCI7XHJcbmltcG9ydCAqIGFzIFN1cnZleURhdGFTb3VyY2UgZnJvbSBcIi4vU3VydmV5RGF0YVNvdXJjZVwiO1xyXG5cclxuY29uc3QgeyBpc05PVSB9ID0gVXRpbHM7XHJcblxyXG5jbGFzcyBJbnRlcmNlcHRTdXJ2ZXkgZXh0ZW5kcyBTdXJ2ZXkgaW1wbGVtZW50cyBJSW50ZXJjZXB0U3VydmV5IHtcclxuXHRwdWJsaWMgc3RhdGljIG1ha2UoZGF0YTogSW50ZXJjZXB0U3VydmV5LkludGVyY2VwdFN1cnZleURhdGEpOiBJSW50ZXJjZXB0U3VydmV5IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJldHVybiBuZXcgSW50ZXJjZXB0U3VydmV5KGRhdGEpO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgbWFrZUludGVyY2VwdChiYXNlRGF0YTogU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YSwgc3A6IElGbG9vZGdhdGVTdHJpbmdQcm92aWRlcixcclxuXHRcdHN1cnZleU1vZGVsOiBDYW1wYWlnblN1cnZleVRlbXBsYXRlKTogSUludGVyY2VwdFN1cnZleSB7XHJcblxyXG5cdFx0aWYgKGlzTk9VKGJhc2VEYXRhKSB8fCBpc05PVShzcCkgfHwgaXNOT1Uoc3VydmV5TW9kZWwpKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGNvbnRlbnQ6IENhbXBhaWduU3VydmV5Q29udGVudCA9IHN1cnZleU1vZGVsLmNvbnRlbnQ7XHJcblxyXG5cdFx0Ly8gSW50ZXJjZXB0IGNvbXBvbmVudCBpcyByZXF1aXJlZC5cclxuXHRcdGlmIChpc05PVShjb250ZW50KSB8fCBpc05PVShjb250ZW50LmludGVyY2VwdCkpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IG5ldyBJbnRlcmNlcHRTdXJ2ZXkuSW50ZXJjZXB0U3VydmV5RGF0YSgpO1xyXG5cdFx0ZGF0YS5iYXNlRGF0YSA9IGJhc2VEYXRhO1xyXG5cclxuXHRcdGRhdGEuaW50ZXJjZXB0RGF0YSA9IG5ldyBJbnRlcmNlcHRDb21wb25lbnQuSW50ZXJjZXB0Q29tcG9uZW50RGF0YSgpO1xyXG5cclxuXHRcdGRhdGEuaW50ZXJjZXB0RGF0YS50aXRsZSA9IHNwLmdldEN1c3RvbVN0cmluZyhjb250ZW50LmludGVyY2VwdC50aXRsZSk7XHJcblx0XHRkYXRhLmludGVyY2VwdERhdGEucXVlc3Rpb24gPSBzcC5nZXRDdXN0b21TdHJpbmcoY29udGVudC5pbnRlcmNlcHQucXVlc3Rpb24pO1xyXG5cdFx0ZGF0YS5pbnRlcmNlcHREYXRhLnVybCA9IHNwLmdldEN1c3RvbVN0cmluZyhjb250ZW50LmludGVyY2VwdC51cmwpO1xyXG5cclxuXHRcdGlmICggaXNOT1UoZGF0YS5pbnRlcmNlcHREYXRhLnRpdGxlKVxyXG5cdFx0XHR8fCBpc05PVShkYXRhLmludGVyY2VwdERhdGEucXVlc3Rpb24pXHJcblx0XHRcdHx8IGlzTk9VKGRhdGEuaW50ZXJjZXB0RGF0YS51cmwpKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tYWtlKGRhdGEpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBzdXJ2ZXlJbmZvOiBTdXJ2ZXlEYXRhU291cmNlO1xyXG5cdHByaXZhdGUgaW50ZXJjZXB0OiBJbnRlcmNlcHRDb21wb25lbnQ7XHJcblxyXG5cdHByaXZhdGUgY29uc3RydWN0b3IoZGF0YTogSW50ZXJjZXB0U3VydmV5LkludGVyY2VwdFN1cnZleURhdGEpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHRpZiAoaXNOT1UoZGF0YSkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZGF0YSBtdXN0IG5vdCBiZSBudWxsXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3VydmV5SW5mbyA9IG5ldyBTdXJ2ZXlEYXRhU291cmNlKGRhdGEuYmFzZURhdGEpO1xyXG5cdFx0dGhpcy5pbnRlcmNlcHQgPSBuZXcgSW50ZXJjZXB0Q29tcG9uZW50KGRhdGEuaW50ZXJjZXB0RGF0YSk7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0VHlwZSgpOiBJU3VydmV5LlR5cGUge1xyXG5cdFx0cmV0dXJuIElTdXJ2ZXkuVHlwZS5JbnRlcmNlcHQ7XHJcblx0fVxyXG5cclxuXHQvLyBAT3ZlcnJpZGVcclxuXHRwdWJsaWMgZ2V0U3VydmV5SW5mbygpOiBJU3VydmV5SW5mbyB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdXJ2ZXlJbmZvO1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldEludGVyY2VwdENvbXBvbmVudCgpOiBJbnRlcmNlcHRDb21wb25lbnQge1xyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJjZXB0O1xyXG5cdH1cclxuXHJcblx0Ly8gQE92ZXJyaWRlXHJcblx0cHVibGljIGdldENvbXBvbmVudChjb21wb25lbnRUeXBlOiBJU3VydmV5Q29tcG9uZW50LlR5cGUpOiBJU3VydmV5Q29tcG9uZW50IHtcclxuXHRcdHJldHVybiAoY29tcG9uZW50VHlwZSA9PT0gSVN1cnZleUNvbXBvbmVudC5UeXBlLkludGVyY2VwdCkgPyB0aGlzLmdldEludGVyY2VwdENvbXBvbmVudCgpIDogbnVsbDtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXREb21FbGVtZW50cyhkb2M6IERvY3VtZW50KTogRWxlbWVudFtdIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9XHJcblxyXG5cdC8vIEBPdmVycmlkZVxyXG5cdHB1YmxpYyBnZXRKc29uRWxlbWVudHMoKTogb2JqZWN0IHtcclxuXHRcdHJldHVybiB7fTtcclxuXHR9XHJcbn1cclxubW9kdWxlIEludGVyY2VwdFN1cnZleSB7XHJcblx0LyoqXHJcblx0ICogRGF0YSByZXF1aXJlZCBmb3IgYW4gSW50ZXJjZXB0IFN1cnZleVxyXG5cdCAqL1xyXG5cdGV4cG9ydCBjbGFzcyBJbnRlcmNlcHRTdXJ2ZXlEYXRhIHtcclxuXHRcdHB1YmxpYyBiYXNlRGF0YTogU3VydmV5RGF0YVNvdXJjZS5TdXJ2ZXlEYXRhU291cmNlRGF0YTtcclxuXHRcdHB1YmxpYyBpbnRlcmNlcHREYXRhOiBJbnRlcmNlcHRDb21wb25lbnQuSW50ZXJjZXB0Q29tcG9uZW50RGF0YTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEludGVyY2VwdFN1cnZleTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/InterceptSurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/NlqsSurvey.js":
/*!*******************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/NlqsSurvey.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar CommentComponent = __webpack_require__(/*! ../SurveyComponents/CommentComponent */ \"../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js\");\nvar PromptComponent = __webpack_require__(/*! ../SurveyComponents/PromptComponent */ \"../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js\");\nvar RatingComponent = __webpack_require__(/*! ../SurveyComponents/RatingComponent */ \"../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey_1 = __webpack_require__(/*! ./Survey */ \"../FloodgateCore/dist/src/Surveys/Survey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ./SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar isNOU = Utils.isNOU, overrideValues = Utils.overrideValues;\nvar NlqsSurvey = /** @class */ (function (_super) {\n    __extends(NlqsSurvey, _super);\n    function NlqsSurvey(data) {\n        var _this = _super.call(this) || this;\n        if (isNOU(data)) {\n            throw new Error(\"data must not be null\");\n        }\n        _this.surveyInfo = new SurveyDataSource(data.baseData);\n        _this.prompt = new PromptComponent(data.promptData);\n        _this.question = new CommentComponent(data.commentData);\n        _this.rating = new RatingComponent(data.ratingData);\n        return _this;\n    }\n    NlqsSurvey.make = function (data) {\n        try {\n            return new NlqsSurvey(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    NlqsSurvey.makeNlqs = function (baseData, sp, surveyModel) {\n        if (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\n            return null;\n        }\n        var ratingValuesAscending = [];\n        var content = surveyModel.content;\n        if (isNOU(content) || isNOU(content.comment)\n            || isNOU(content.prompt) || isNOU(content.rating)) {\n            return null;\n        }\n        var data = new NlqsSurvey.NlqsSurveyData();\n        data.baseData = baseData;\n        data.promptData = new PromptComponent.PromptComponentData();\n        data.ratingData = new RatingComponent.RatingComponentData();\n        data.commentData = new CommentComponent.CommentComponentData();\n        data.promptData.title = sp.getCustomString(content.prompt.title);\n        data.promptData.question = sp.getCustomString(content.prompt.question);\n        data.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\n        data.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\n        data.ratingData.question = sp.getCustomString(content.rating.question);\n        data.ratingData.isZeroBased = content.rating.isZeroBased;\n        data.commentData.question = sp.getCustomString(content.comment.question);\n        for (var _i = 0, _a = content.rating.ratingValuesAscending; _i < _a.length; _i++) {\n            var value = _a[_i];\n            var customString = sp.getCustomString(value);\n            if (isNOU(customString)) {\n                return null;\n            }\n            ratingValuesAscending.push(customString);\n        }\n        data.ratingData.ratingValuesAscending = ratingValuesAscending;\n        if (isNOU(data.ratingData.question)\n            || isNOU(data.commentData.question)\n            || isNOU(data.promptData.title)\n            || isNOU(data.promptData.question)\n            || isNOU(data.promptData.yesButtonLabel)\n            || isNOU(data.promptData.noButtonLabel)\n            || isNOU(data.ratingData.ratingValuesAscending)) {\n            return null;\n        }\n        return this.make(data);\n    };\n    // @Override\n    NlqsSurvey.prototype.getType = function () {\n        return ISurvey.Type.Nlqs;\n    };\n    // @Override\n    NlqsSurvey.prototype.getSurveyInfo = function () {\n        return this.surveyInfo;\n    };\n    // @Override\n    NlqsSurvey.prototype.getCommentComponent = function () {\n        return this.question;\n    };\n    // @Override\n    NlqsSurvey.prototype.getPromptComponent = function () {\n        return this.prompt;\n    };\n    // @Override\n    NlqsSurvey.prototype.getRatingComponent = function () {\n        return this.rating;\n    };\n    // @Override\n    NlqsSurvey.prototype.getComponent = function (componentType) {\n        switch (componentType) {\n            case \"Comment\" /* Comment */:\n                return this.getCommentComponent();\n            case \"Prompt\" /* Prompt */:\n                return this.getPromptComponent();\n            case \"Rating\" /* Rating */:\n                return this.getRatingComponent();\n            default:\n                return null;\n        }\n    };\n    // @Override\n    NlqsSurvey.prototype.getDomElements = function (doc) {\n        if (isNOU(doc)) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurvey.DOM_NLQS_TAGNAME);\n        this.getSurveyInfo().getDomElements(doc).forEach(function (child) {\n            if (!isNOU(child)) {\n                element.appendChild(child);\n            }\n        });\n        this.getCommentComponent().getDomElements(doc).forEach(function (child) {\n            if (!isNOU(child)) {\n                element.appendChild(child);\n            }\n        });\n        this.getRatingComponent().getDomElements(doc).forEach(function (child) {\n            if (!isNOU(child)) {\n                element.appendChild(child);\n            }\n        });\n        return [element];\n    };\n    // @Override\n    NlqsSurvey.prototype.getJsonElements = function () {\n        var result = {};\n        result = overrideValues(this.getSurveyInfo().getJsonElements(), result);\n        result = overrideValues(this.getCommentComponent().getJsonElements(), result);\n        result = overrideValues(this.getRatingComponent().getJsonElements(), result);\n        return result;\n    };\n    return NlqsSurvey;\n}(Survey_1.Survey));\n(function (NlqsSurvey) {\n    /**\n     * Data required for a Nlqs Survey\n     */\n    var NlqsSurveyData = /** @class */ (function () {\n        function NlqsSurveyData() {\n        }\n        return NlqsSurveyData;\n    }());\n    NlqsSurvey.NlqsSurveyData = NlqsSurveyData;\n})(NlqsSurvey || (NlqsSurvey = {}));\nmodule.exports = NlqsSurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/NlqsSurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/NpsSurvey.js":
/*!******************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/NpsSurvey.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar ISurveyComponent = __webpack_require__(/*! ../Api/ISurveyComponent */ \"../FloodgateCore/dist/src/Api/ISurveyComponent.js\");\nvar CommentComponent = __webpack_require__(/*! ../SurveyComponents/CommentComponent */ \"../FloodgateCore/dist/src/SurveyComponents/CommentComponent.js\");\nvar CVSurveyComponent = __webpack_require__(/*! ../SurveyComponents/CVSurveyComponent */ \"../FloodgateCore/dist/src/SurveyComponents/CVSurveyComponent.js\");\nvar PromptComponent = __webpack_require__(/*! ../SurveyComponents/PromptComponent */ \"../FloodgateCore/dist/src/SurveyComponents/PromptComponent.js\");\nvar RatingComponent = __webpack_require__(/*! ../SurveyComponents/RatingComponent */ \"../FloodgateCore/dist/src/SurveyComponents/RatingComponent.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey_1 = __webpack_require__(/*! ./Survey */ \"../FloodgateCore/dist/src/Surveys/Survey.js\");\nvar SurveyDataSource = __webpack_require__(/*! ./SurveyDataSource */ \"../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\");\nvar isNOU = Utils.isNOU, overrideValues = Utils.overrideValues;\nvar NpsSurvey = /** @class */ (function (_super) {\n    __extends(NpsSurvey, _super);\n    function NpsSurvey(data) {\n        var _this = _super.call(this) || this;\n        if (!data) {\n            throw new Error(\"data must not be null\");\n        }\n        _this.surveyInfo = new SurveyDataSource(data.baseData);\n        _this.prompt = new PromptComponent(data.promptData);\n        _this.question = new CommentComponent(data.commentData);\n        _this.rating = new RatingComponent(data.ratingData);\n        _this.cvSurvey = data.cvSurveyData ? (new CVSurveyComponent(data.cvSurveyData)) : null;\n        return _this;\n    }\n    NpsSurvey.make = function (data) {\n        try {\n            return new NpsSurvey(data);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    NpsSurvey.makeCustom = function (baseData, sp, surveyModel) {\n        if (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\n            return null;\n        }\n        var ratingValuesAscending = [];\n        var content = surveyModel.content;\n        if (isNOU(content) || isNOU(content.comment)\n            || isNOU(content.prompt) || isNOU(content.rating)) {\n            return null;\n        }\n        var data = new NpsSurvey.NpsSurveyData();\n        data.baseData = baseData;\n        data.promptData = new PromptComponent.PromptComponentData();\n        data.ratingData = new RatingComponent.RatingComponentData();\n        data.commentData = new CommentComponent.CommentComponentData();\n        data.promptData.title = sp.getCustomString(content.prompt.title);\n        data.promptData.question = sp.getCustomString(content.prompt.question);\n        data.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\n        data.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\n        data.ratingData.question = sp.getCustomString(content.rating.question);\n        data.ratingData.isZeroBased = content.rating.isZeroBased;\n        data.commentData.question = sp.getCustomString(content.comment.question);\n        for (var _i = 0, _a = content.rating.ratingValuesAscending; _i < _a.length; _i++) {\n            var value = _a[_i];\n            var customString = sp.getCustomString(value);\n            if (isNOU(customString)) {\n                return null;\n            }\n            ratingValuesAscending.push(customString);\n        }\n        data.ratingData.ratingValuesAscending = ratingValuesAscending;\n        if (isNOU(data.ratingData.question)\n            || isNOU(data.commentData.question)\n            || isNOU(data.promptData.title)\n            || isNOU(data.promptData.question)\n            || isNOU(data.promptData.yesButtonLabel)\n            || isNOU(data.promptData.noButtonLabel)\n            || isNOU(data.ratingData.ratingValuesAscending)) {\n            return null;\n        }\n        // cvsurvey data is not required on all surveys.\n        if (content.cvSurvey) {\n            data.cvSurveyData = new CVSurveyComponent.CVSurveyComponentData();\n            data.cvSurveyData.customerVoiceFormId = content.cvSurvey.customerVoiceFormId;\n            if (isNOU(data.cvSurveyData.customerVoiceFormId)) {\n                return null;\n            }\n        }\n        return this.make(data);\n    };\n    NpsSurvey.make5Point = function (baseData, sp) {\n        if (!baseData || !sp) {\n            return null;\n        }\n        var data = new NpsSurvey.NpsSurveyData();\n        data.baseData = baseData;\n        data.ratingData = new RatingComponent.RatingComponentData();\n        data.ratingData.isZeroBased = false;\n        data.commentData = new CommentComponent.CommentComponentData();\n        data.promptData = new PromptComponent.PromptComponentData();\n        data.ratingData.question = sp.loadStringResource(4 /* NpsRatingQuestion */);\n        data.commentData.question = sp.loadStringResource(21 /* NpsCommentQuestion */);\n        data.promptData.title = sp.loadStringResource(0 /* NpsPromptTitle */);\n        data.promptData.question = sp.loadStringResource(1 /* NpsPromptQuestion */);\n        data.promptData.yesButtonLabel = sp.loadStringResource(2 /* NpsPromptYesLabel */);\n        data.promptData.noButtonLabel = sp.loadStringResource(3 /* NpsPromptNotNowLabel */);\n        var ratingValuesAscending = new Array(5);\n        ratingValuesAscending[0] = sp.loadStringResource(16 /* Nps5RatingValue1 */);\n        ratingValuesAscending[1] = sp.loadStringResource(17 /* Nps5RatingValue2 */);\n        ratingValuesAscending[2] = sp.loadStringResource(18 /* Nps5RatingValue3 */);\n        ratingValuesAscending[3] = sp.loadStringResource(19 /* Nps5RatingValue4 */);\n        ratingValuesAscending[4] = sp.loadStringResource(20 /* Nps5RatingValue5 */);\n        if (!data.ratingData.question\n            || !data.commentData.question\n            || !data.promptData.title\n            || !data.promptData.question\n            || !data.promptData.yesButtonLabel\n            || !data.promptData.noButtonLabel\n            || !ratingValuesAscending[0]\n            || !ratingValuesAscending[1]\n            || !ratingValuesAscending[2]\n            || !ratingValuesAscending[3]\n            || !ratingValuesAscending[4]) {\n            return null;\n        }\n        data.ratingData.ratingValuesAscending = ratingValuesAscending;\n        return this.make(data);\n    };\n    NpsSurvey.make11Point = function (baseData, sp) {\n        if (!baseData || !sp) {\n            return null;\n        }\n        var data = new NpsSurvey.NpsSurveyData();\n        data.baseData = baseData;\n        data.ratingData = new RatingComponent.RatingComponentData();\n        data.ratingData.isZeroBased = true;\n        data.commentData = new CommentComponent.CommentComponentData();\n        data.promptData = new PromptComponent.PromptComponentData();\n        data.ratingData.question = sp.loadStringResource(4 /* NpsRatingQuestion */);\n        data.commentData.question = sp.loadStringResource(21 /* NpsCommentQuestion */);\n        data.promptData.title = sp.loadStringResource(0 /* NpsPromptTitle */);\n        data.promptData.question = sp.loadStringResource(1 /* NpsPromptQuestion */);\n        data.promptData.yesButtonLabel = sp.loadStringResource(2 /* NpsPromptYesLabel */);\n        data.promptData.noButtonLabel = sp.loadStringResource(3 /* NpsPromptNotNowLabel */);\n        var ratingValuesAscending = new Array(11);\n        ratingValuesAscending[0] = sp.loadStringResource(5 /* Nps11RatingValue0 */);\n        ratingValuesAscending[1] = sp.loadStringResource(6 /* Nps11RatingValue1 */);\n        ratingValuesAscending[2] = sp.loadStringResource(7 /* Nps11RatingValue2 */);\n        ratingValuesAscending[3] = sp.loadStringResource(8 /* Nps11RatingValue3 */);\n        ratingValuesAscending[4] = sp.loadStringResource(9 /* Nps11RatingValue4 */);\n        ratingValuesAscending[5] = sp.loadStringResource(10 /* Nps11RatingValue5 */);\n        ratingValuesAscending[6] = sp.loadStringResource(11 /* Nps11RatingValue6 */);\n        ratingValuesAscending[7] = sp.loadStringResource(12 /* Nps11RatingValue7 */);\n        ratingValuesAscending[8] = sp.loadStringResource(13 /* Nps11RatingValue8 */);\n        ratingValuesAscending[9] = sp.loadStringResource(14 /* Nps11RatingValue9 */);\n        ratingValuesAscending[10] = sp.loadStringResource(15 /* Nps11RatingValue10 */);\n        if (!data.ratingData.question\n            || !data.commentData.question\n            || !data.promptData.title\n            || !data.promptData.question\n            || !data.promptData.yesButtonLabel\n            || !data.promptData.noButtonLabel\n            || !ratingValuesAscending[0]\n            || !ratingValuesAscending[1]\n            || !ratingValuesAscending[2]\n            || !ratingValuesAscending[3]\n            || !ratingValuesAscending[4]\n            || !ratingValuesAscending[5]\n            || !ratingValuesAscending[6]\n            || !ratingValuesAscending[7]\n            || !ratingValuesAscending[8]\n            || !ratingValuesAscending[9]\n            || !ratingValuesAscending[10]) {\n            return null;\n        }\n        data.ratingData.ratingValuesAscending = ratingValuesAscending;\n        return this.make(data);\n    };\n    // @Override\n    NpsSurvey.prototype.getType = function () {\n        return ISurvey.Type.Nps;\n    };\n    // @Override\n    NpsSurvey.prototype.getSurveyInfo = function () {\n        return this.surveyInfo;\n    };\n    // @Override\n    NpsSurvey.prototype.getCommentComponent = function () {\n        return this.question;\n    };\n    // @Override\n    NpsSurvey.prototype.getPromptComponent = function () {\n        return this.prompt;\n    };\n    // @Override\n    NpsSurvey.prototype.getRatingComponent = function () {\n        return this.rating;\n    };\n    // @Override\n    NpsSurvey.prototype.getCVSurveyComponent = function () {\n        return this.cvSurvey;\n    };\n    // @Override\n    NpsSurvey.prototype.getComponent = function (componentType) {\n        switch (componentType) {\n            case \"Comment\" /* Comment */:\n                return this.getCommentComponent();\n            case \"Prompt\" /* Prompt */:\n                return this.getPromptComponent();\n            case \"Rating\" /* Rating */:\n                return this.getRatingComponent();\n            case \"CVSurvey\" /* CVSurvey */:\n                return this.getCVSurveyComponent();\n            default:\n                return null;\n        }\n    };\n    // @Override\n    NpsSurvey.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var element = doc.createElement(ISurvey.DOM_NPS_TAGNAME);\n        this.getSurveyInfo().getDomElements(doc).forEach(function (child) {\n            if (child) {\n                element.appendChild(child);\n            }\n        });\n        this.getCommentComponent().getDomElements(doc).forEach(function (child) {\n            if (child) {\n                element.appendChild(child);\n            }\n        });\n        this.getRatingComponent().getDomElements(doc).forEach(function (child) {\n            if (child) {\n                element.appendChild(child);\n            }\n        });\n        return [element];\n    };\n    // @Override\n    NpsSurvey.prototype.getJsonElements = function () {\n        var _a;\n        var result = {};\n        result = overrideValues(this.getSurveyInfo().getJsonElements(), result);\n        result = overrideValues(this.getCommentComponent().getJsonElements(), result);\n        result = overrideValues(this.getRatingComponent().getJsonElements(), result);\n        result[ISurveyComponent.JSON_APPLICATION_KEYNAME] = {};\n        result[ISurveyComponent.JSON_APPLICATION_KEYNAME][ISurveyComponent.JSON_EXTENDEDMANIFESTDATA_KEYNAME] =\n            JSON.stringify((_a = {}, _a[ISurveyComponent.JSON_SURVEYSTRINGS_KEYNAME] = this.makeSurveyStrings(), _a));\n        return result;\n    };\n    // Makes the string to send to Manifest respecting the components present in the survey\n    NpsSurvey.prototype.makeSurveyStrings = function () {\n        var actualStrings = {};\n        if (this.prompt) {\n            actualStrings[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.prompt.getComponentJson();\n        }\n        if (this.rating) {\n            actualStrings[ISurveyComponent.JSON_RATING_KEYNAME] = [this.rating.getComponentJson()];\n        }\n        if (this.question) {\n            actualStrings[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.question.getComponentJson()];\n        }\n        return JSON.stringify(actualStrings);\n    };\n    return NpsSurvey;\n}(Survey_1.Survey));\n(function (NpsSurvey) {\n    /**\n     * Data required for a Nps Survey\n     */\n    var NpsSurveyData = /** @class */ (function () {\n        function NpsSurveyData() {\n        }\n        return NpsSurveyData;\n    }());\n    NpsSurvey.NpsSurveyData = NpsSurveyData;\n})(NpsSurvey || (NpsSurvey = {}));\nmodule.exports = NpsSurvey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/NpsSurvey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/Survey.js":
/*!***************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/Survey.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Survey = void 0;\nvar ISurvey = __webpack_require__(/*! ../Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ../FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar Utils = __webpack_require__(/*! ./../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar Survey = /** @class */ (function () {\n    function Survey() {\n    }\n    Survey.prototype.getCampaignId = function () {\n        return this.getSurveyInfo().getBackEndId();\n    };\n    Survey.prototype.getLauncherType = function () {\n        return this.getSurveyInfo().getLauncherType();\n    };\n    Survey.prototype.getClientFeedbackId = function () {\n        return this.clientFeedbackId;\n    };\n    Survey.prototype.submit = function () {\n        var surveyType = ISurvey.Type[this.getType()];\n        var transporter = FloodgateEngine_1.FloodgateEngine.getTransportFactory().makeTransporter(surveyType);\n        transporter.setManifestValues(this.getJsonElements());\n        this.clientFeedbackId = transporter.getClientFeedbackId();\n        transporter.submit();\n    };\n    Survey.prototype.getPreGeneratedClientFeedbackId = function () {\n        if (this.clientFeedbackId) {\n            return this.clientFeedbackId;\n        }\n        else {\n            return this.clientFeedbackId = Utils.guid();\n        }\n    };\n    return Survey;\n}());\nexports.Survey = Survey;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1N1cnZleXMvU3VydmV5LnRzPzZkZDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTJDO0FBRzNDLHNIQUFxRDtBQUVyRCx3RkFBb0M7QUFFcEM7SUFBQTtJQXlDQSxDQUFDO0lBbkNPLDhCQUFhLEdBQXBCO1FBQ0MsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVNLGdDQUFlLEdBQXRCO1FBQ0MsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDL0MsQ0FBQztJQUVNLG9DQUFtQixHQUExQjtRQUNDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQzlCLENBQUM7SUFFTSx1QkFBTSxHQUFiO1FBQ0MsSUFBTSxVQUFVLEdBQVcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFNLFdBQVcsR0FBaUIsaUNBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzFELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU0sZ0RBQStCLEdBQXRDO1FBQ0MsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDN0I7YUFBTTtZQUNOLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM1QztJQUNGLENBQUM7SUFTRixhQUFDO0FBQUQsQ0FBQztBQXpDcUIsd0JBQU0iLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9TdXJ2ZXlzL1N1cnZleS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJU3VydmV5ID0gcmVxdWlyZShcIi4uL0FwaS9JU3VydmV5XCIpO1xyXG5pbXBvcnQgSVN1cnZleUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuLi9BcGkvSVN1cnZleUNvbXBvbmVudFwiKTtcclxuaW1wb3J0IHsgSVRyYW5zcG9ydGVyIH0gZnJvbSBcIi4uL0FwaS9JVHJhbnNwb3J0ZXJcIjtcclxuaW1wb3J0IHsgRmxvb2RnYXRlRW5naW5lIH0gZnJvbSBcIi4uL0Zsb29kZ2F0ZUVuZ2luZVwiO1xyXG5pbXBvcnQgKiBhcyBJU3VydmV5SW5mbyBmcm9tIFwiLi4vSVN1cnZleUluZm9cIjtcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdXJ2ZXkgaW1wbGVtZW50cyBJU3VydmV5IHtcclxuXHRwcml2YXRlIHN1cnZleTogSVN1cnZleTtcclxuXHRwcml2YXRlIGNsaWVudEZlZWRiYWNrSWQ6IHN0cmluZztcclxuXHJcblx0cHVibGljIGFic3RyYWN0IGdldENvbXBvbmVudChjb21wb25lbnRUeXBlOiBJU3VydmV5Q29tcG9uZW50LlR5cGUpOiBJU3VydmV5Q29tcG9uZW50O1xyXG5cclxuXHRwdWJsaWMgZ2V0Q2FtcGFpZ25JZCgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U3VydmV5SW5mbygpLmdldEJhY2tFbmRJZCgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldExhdW5jaGVyVHlwZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U3VydmV5SW5mbygpLmdldExhdW5jaGVyVHlwZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENsaWVudEZlZWRiYWNrSWQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmNsaWVudEZlZWRiYWNrSWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3VibWl0KCkge1xyXG5cdFx0Y29uc3Qgc3VydmV5VHlwZTogc3RyaW5nID0gSVN1cnZleS5UeXBlW3RoaXMuZ2V0VHlwZSgpXTtcclxuXHRcdGNvbnN0IHRyYW5zcG9ydGVyOiBJVHJhbnNwb3J0ZXIgPSBGbG9vZGdhdGVFbmdpbmUuZ2V0VHJhbnNwb3J0RmFjdG9yeSgpLm1ha2VUcmFuc3BvcnRlcihzdXJ2ZXlUeXBlKTtcclxuXHRcdHRyYW5zcG9ydGVyLnNldE1hbmlmZXN0VmFsdWVzKHRoaXMuZ2V0SnNvbkVsZW1lbnRzKCkpO1xyXG5cdFx0dGhpcy5jbGllbnRGZWVkYmFja0lkID0gdHJhbnNwb3J0ZXIuZ2V0Q2xpZW50RmVlZGJhY2tJZCgpO1xyXG5cdFx0dHJhbnNwb3J0ZXIuc3VibWl0KCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0UHJlR2VuZXJhdGVkQ2xpZW50RmVlZGJhY2tJZCgpOiBzdHJpbmcge1xyXG5cdFx0aWYgKHRoaXMuY2xpZW50RmVlZGJhY2tJZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGllbnRGZWVkYmFja0lkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2xpZW50RmVlZGJhY2tJZCA9IFV0aWxzLmd1aWQoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gQWJzdHJhY3QgY2xhc3NlcyB0aGF0IGFyZSBpbXBsZW1lbnRlZCBieSBhY3R1YWwgU3VydmV5c1xyXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXRUeXBlKCk6IElTdXJ2ZXkuVHlwZTtcclxuXHJcblx0cHVibGljIGFic3RyYWN0IGdldFN1cnZleUluZm8oKTogSVN1cnZleUluZm87XHJcblxyXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXRKc29uRWxlbWVudHMoKTogb2JqZWN0O1xyXG5cclxuXHRwdWJsaWMgYWJzdHJhY3QgZ2V0RG9tRWxlbWVudHMoZG9jOiBEb2N1bWVudCk6IEVsZW1lbnRbXTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/Survey.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Surveys/SurveyDataSource.js":
/*!*************************************************************!*\
  !*** ../FloodgateCore/dist/src/Surveys/SurveyDataSource.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar ISurvey = __webpack_require__(/*! ../../src/Api/ISurvey */ \"../FloodgateCore/dist/src/Api/ISurvey.js\");\nvar GovernedChannel_1 = __webpack_require__(/*! ../GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\nvar ISurveyInfo = __webpack_require__(/*! ../ISurveyInfo */ \"../FloodgateCore/dist/src/ISurveyInfo.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar getDistantFuture = Utils.getDistantFuture, getDistantPast = Utils.getDistantPast, isNOU = Utils.isNOU, isDate = Utils.isDate;\nvar SurveyDataSource = /** @class */ (function () {\n    function SurveyDataSource(data) {\n        if (isNOU(data)) {\n            throw new Error(\"data must not be null\");\n        }\n        if (isNOU(data.id) || data.id === \"\") {\n            throw new Error(\"data.id must not be null or empty\");\n        }\n        if (isNOU(data.governedChannelType)) {\n            data.governedChannelType = GovernedChannel_1.GovernedChannelType.getDefault();\n        }\n        if (isNOU(data.expirationTimeUtc) || data.expirationTimeUtc === \"\") {\n            throw new Error(\"data.expirationTimeUtc must not be null or empty\");\n        }\n        if (isNOU(data.activationEvent)) {\n            throw new Error(\"data.activationEvent must not be null\");\n        }\n        if (isNOU(data.backEndIdentifier) || data.backEndIdentifier === \"\") {\n            data.backEndIdentifier = data.id;\n        }\n        if (isNOU(data.launcherType)) {\n            data.launcherType = ISurvey.LAUNCHER_TYPE_DEFAULT;\n        }\n        this.data = data;\n    }\n    // @Override\n    SurveyDataSource.prototype.getId = function () {\n        return this.data.id;\n    };\n    // @Override\n    SurveyDataSource.prototype.getBackEndId = function () {\n        return this.data.backEndIdentifier;\n    };\n    // @Override\n    SurveyDataSource.prototype.getGovernedChannelType = function () {\n        return this.data.governedChannelType;\n    };\n    // @Override\n    SurveyDataSource.prototype.getRawStartTimeUtc = function () {\n        return this.data.startTimeUtc;\n    };\n    // @Override\n    SurveyDataSource.prototype.getStartTimeUtc = function () {\n        if (isNOU(this.data.startTimeUtc)) {\n            return getDistantPast(); // Optional start date means the survey has started\n        }\n        var parsed = new Date(this.data.startTimeUtc);\n        if (!isDate(parsed)) {\n            return getDistantFuture(); // Badly specified start dates means the survey never starts\n        }\n        return parsed;\n    };\n    // @Override\n    SurveyDataSource.prototype.getExpirationTimeUtc = function () {\n        // Bad or missing expiration date means survey is always expired.\n        if (isNOU(this.data.expirationTimeUtc)) {\n            return getDistantPast();\n        }\n        var parsed = new Date(this.data.expirationTimeUtc);\n        if (!isDate(parsed)) {\n            return getDistantPast();\n        }\n        return parsed;\n    };\n    // @Override\n    SurveyDataSource.prototype.getRawExpirationTimeUtc = function () {\n        return this.data.expirationTimeUtc;\n    };\n    // @Override\n    SurveyDataSource.prototype.isActiveForDate = function (date) {\n        if (isNOU(date)) {\n            return false;\n        }\n        return (date >= this.getStartTimeUtc() && date <= this.getExpirationTimeUtc());\n    };\n    // @Override\n    SurveyDataSource.prototype.getActivationEvent = function () {\n        return this.data.activationEvent;\n    };\n    // @Override\n    SurveyDataSource.prototype.getPreferredLaunchType = function () {\n        return this.data.preferredLaunchType;\n    };\n    // @Override\n    SurveyDataSource.prototype.isAdditionalDataRequested = function (additionalDataToCheck) {\n        if (isNOU(this.data.additionalDataRequested)) {\n            return false;\n        }\n        for (var _i = 0, _a = this.data.additionalDataRequested; _i < _a.length; _i++) {\n            var additionalData = _a[_i];\n            if (additionalData === additionalDataToCheck) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // @Override\n    SurveyDataSource.prototype.getLauncherType = function () {\n        return this.data.launcherType;\n    };\n    // @Override\n    SurveyDataSource.prototype.getMetadata = function () {\n        return this.data.metadata;\n    };\n    // @Override\n    SurveyDataSource.prototype.getBusinessLevel = function () {\n        return this.data.businessLevel;\n    };\n    // @Override\n    SurveyDataSource.prototype.getMaxLaunches = function () {\n        return this.data.maxLaunches;\n    };\n    // @Override\n    SurveyDataSource.prototype.getMaxLaunchesPerSession = function () {\n        return this.data.maxLaunchesPerSession;\n    };\n    // @Override\n    SurveyDataSource.prototype.getDomElements = function (doc) {\n        if (!doc) {\n            throw new Error(\"Document must not be null\");\n        }\n        var typeElement = doc.createElement(ISurveyInfo.DOM_TYPE_TAGNAME);\n        typeElement.appendChild(doc.createTextNode(ISurveyInfo.DOM_TYPE_VALUE));\n        var idElement = doc.createElement(ISurveyInfo.DOM_ID_TAGNAME);\n        idElement.appendChild(doc.createTextNode(this.getBackEndId()));\n        return [typeElement, idElement];\n    };\n    // @Override\n    SurveyDataSource.prototype.getJsonElements = function () {\n        var surveyObject = {};\n        surveyObject[ISurveyInfo.JSON_ID_KEYNAME] = this.getBackEndId();\n        var result = {};\n        result[ISurveyInfo.JSON_SURVEY_KEYNAME] = surveyObject;\n        return result;\n    };\n    return SurveyDataSource;\n}());\n(function (SurveyDataSource) {\n    /**\n     * Basic data needed for all Surveys\n     */\n    var SurveyDataSourceData = /** @class */ (function () {\n        function SurveyDataSourceData() {\n            this.preferredLaunchType = \"Default\" /* Default */;\n        }\n        return SurveyDataSourceData;\n    }());\n    SurveyDataSource.SurveyDataSourceData = SurveyDataSourceData;\n})(SurveyDataSource || (SurveyDataSource = {}));\nmodule.exports = SurveyDataSource;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Surveys/SurveyDataSource.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/UserFact/UserFact.js":
/*!******************************************************!*\
  !*** ../FloodgateCore/dist/src/UserFact/UserFact.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserFact = void 0;\nvar Constants_1 = __webpack_require__(/*! ../Constants */ \"../FloodgateCore/dist/src/Constants.js\");\nvar FloodgateEngine_1 = __webpack_require__(/*! ../FloodgateEngine */ \"../FloodgateCore/dist/src/FloodgateEngine.js\");\nvar Utils = __webpack_require__(/*! ../Utils */ \"../FloodgateCore/dist/src/Utils.js\");\nvar isNOU = Utils.isNOU, isNumber = Utils.isNumber, isArray = Utils.isArray;\nvar commonComparatorTypes = [\n    0 /* Equal */,\n    1 /* NotEqual */,\n    2 /* GreaterThan */,\n    3 /* GreaterThanOrEqual */,\n    4 /* LessThan */,\n    5 /* LessThanOrEqual */,\n];\nvar UserFact = /** @class */ (function () {\n    function UserFact(input) {\n        this.input = input;\n    }\n    UserFact.deserialize = function (rawUserFactSpec) {\n        return this.validate(rawUserFactSpec) ? new UserFact(rawUserFactSpec) : null;\n    };\n    UserFact.validate = function (input) {\n        if (!input) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Input is null or undefined for user fact\");\n            return false;\n        }\n        // Values is used for type UserFactType.ListOfStrings\n        if (!input.Value && input.Values) {\n            input.Value = input.Values;\n        }\n        if (isNOU(input.Name) || isNOU(input.Type) || isNOU(input.Value)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Either of the required parameters Name: \" + input.Name + \", Type: \" + input.Type + \" or Value: \" + input.Value + \" are not provided for the user fact\");\n            return false;\n        }\n        if (!this.validateUserFactType(input.Type)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Invalid UserFactType value \" + input.Type + \" is provided for user fact\");\n            return false;\n        }\n        if (input.Type === 6 /* ListFile */) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Unsupported UserFactType value \" + input.Type + \" is provided for user fact\");\n            return false;\n        }\n        if (input.LatencyType && !this.validateLatencyType(input.LatencyType)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Invalid LatencyType value \" + input.LatencyType + \" is provided for user fact of type \" + input.Type);\n            return false;\n        }\n        if (input.LatencyType && input.LatencyType !== 0 /* None */ && isNOU(input.LatencyDurationInSeconds)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"LatencyDurationInSeconds value \" + input.LatencyDurationInSeconds + \" is not provided for user fact of type \" + input.Type);\n            return false;\n        }\n        if (input.LatencyDurationInSeconds && !isNumber(input.LatencyDurationInSeconds)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Invalid LatencyDurationInSeconds value \" + input.LatencyDurationInSeconds + \" is provided for user fact of type \" + input.Type);\n            return false;\n        }\n        if (input.Type === 1 /* TimeIntervalInSeconds */ && isNOU(input.IntervalType)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed, \"Required parameter intervalType is not provided for user fact of type \" + input.Type);\n            return false;\n        }\n        var supportedComparatorTypes = this.getComparatorTypes(input.Type);\n        if (input.Comparator && !isComparatorTypeSupported(input.Comparator, supportedComparatorTypes)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed, \"Unsupported comparator type for user fact of type \" + input.Type);\n            return false;\n        }\n        return true;\n    };\n    UserFact.getComparatorTypes = function (userFactType) {\n        switch (userFactType) {\n            case 0 /* Boolean */:\n                return [0 /* Equal */, 1 /* NotEqual */];\n            case 4 /* String */:\n                return [0 /* Equal */,\n                    1 /* NotEqual */,\n                    6 /* In */,\n                    7 /* NotIn */,\n                    8 /* InverseIn */,\n                    9 /* InverseNotIn */];\n            case 5 /* ListOfStrings */:\n                return [6 /* In */, 7 /* NotIn */, 8 /* InverseIn */, 9 /* InverseNotIn */];\n            case 1 /* TimeIntervalInSeconds */:\n            case 2 /* DateTimeUTC */:\n            case 3 /* Number */:\n            case 6 /* ListFile */:\n                return commonComparatorTypes;\n            default:\n                assertNever(userFactType);\n        }\n        return commonComparatorTypes;\n    };\n    UserFact.validateLatencyType = function (latency) {\n        return (latency === 0 /* None */ ||\n            latency === 3 /* ClientIngestionDateTime */ ||\n            latency === 1 /* SourceDateTime */ ||\n            latency === 2 /* StorageDateTime */) ? true : assertNever(latency);\n    };\n    UserFact.validateUserFactType = function (factType) {\n        return (factType === 0 /* Boolean */ ||\n            factType === 2 /* DateTimeUTC */ ||\n            factType === 3 /* Number */ ||\n            factType === 4 /* String */ ||\n            factType === 1 /* TimeIntervalInSeconds */ ||\n            factType === 5 /* ListOfStrings */ ||\n            factType === 6 /* ListFile */) ? true : assertNever(factType);\n    };\n    UserFact.prototype.isAMatch = function (rawUserFact) {\n        if (!rawUserFact || !rawUserFact.userFactValue) {\n            return false;\n        }\n        if (!this.isLatencyAcceptable(rawUserFact)) {\n            return false;\n        }\n        try {\n            var factType = this.getType();\n            if (factType === 0 /* Boolean */) {\n                return compareBooleanValues(this.getValue(), rawUserFact, this.getComparator());\n            }\n            else if (factType === 2 /* DateTimeUTC */) {\n                return compareDateTimeUTCValues(this.getValue(), rawUserFact, this.getComparator());\n            }\n            else if (factType === 3 /* Number */) {\n                return compareNumberValues(this.getValue(), rawUserFact, this.getComparator());\n            }\n            else if (factType === 4 /* String */) {\n                return compareStringValues(this.getValue(), rawUserFact, this.getComparator());\n            }\n            else if (factType === 1 /* TimeIntervalInSeconds */) {\n                return compareTimeIntervalValues(this.getValue(), rawUserFact, this.getComparator(), this.getIntervalType());\n            }\n            else if (factType === 5 /* ListOfStrings */) {\n                return compareListValues(this.getValue(), rawUserFact, this.getComparator());\n            }\n            else {\n                FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed, \"Unsupported type of user fact was provided \" + factType);\n                return false;\n            }\n        }\n        catch (error) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed, error);\n            return false;\n        }\n    };\n    UserFact.prototype.getType = function () {\n        return this.input.Type;\n    };\n    UserFact.prototype.getName = function () {\n        return this.input.Name;\n    };\n    UserFact.prototype.getValue = function () {\n        return this.input.Value;\n    };\n    UserFact.prototype.getComparator = function () {\n        return this.input.Comparator || 0 /* Equal */;\n    };\n    UserFact.prototype.getLatencyType = function () {\n        return this.input.LatencyType || 0 /* None */;\n    };\n    UserFact.prototype.getLatencyDurationInSeconds = function () {\n        return this.input.LatencyDurationInSeconds;\n    };\n    UserFact.prototype.getIntervalType = function () {\n        return this.input.IntervalType;\n    };\n    UserFact.prototype.isLatencyAcceptable = function (rawUserFact) {\n        var factType = this.getType();\n        if (!isNOU(this.getLatencyDurationInSeconds()) &&\n            !evaluateFactCandidacy(this.getLatencyType(), this.getLatencyDurationInSeconds(), rawUserFact)) {\n            FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Mismatch, {\n                ErrorMessage: \"Latency duration not acceptable - { Name: \\\"\" + rawUserFact.userFactName + \"\\\" }\",\n                TimeMilliseconds: this.getLatencyDurationInSeconds(),\n                Type: \"\" + factType,\n            });\n            return false;\n        }\n        return true;\n    };\n    return UserFact;\n}());\nexports.UserFact = UserFact;\nfunction evaluateFactCandidacy(latencyType, latencyDurationInSeconds, userFact) {\n    var userFactTime;\n    switch (latencyType) {\n        case 0 /* None */:\n            break;\n        case 1 /* SourceDateTime */:\n            userFactTime = userFact.sourceDateTime;\n            break;\n        case 2 /* StorageDateTime */:\n            userFactTime = userFact.storageDateTime;\n            break;\n        case 3 /* ClientIngestionDateTime */:\n            userFactTime = userFact.clientIngestionDateTime;\n            break;\n        default:\n            assertNever(latencyType);\n    }\n    if (!isNOU(userFactTime)) {\n        var userFactTimeInMilliseconds = Date.parse(userFactTime);\n        var currentTimeInMilliseconds = Date.now();\n        return currentTimeInMilliseconds - userFactTimeInMilliseconds <= (latencyDurationInSeconds * 1000);\n    }\n    return true;\n}\nfunction compareBooleanValues(userFactSpecValue, rawUserFact, comparator) {\n    var rawUserFactValueInBoolean = JSON.parse(rawUserFact.userFactValue.toLowerCase());\n    return compareValues(!!userFactSpecValue, !!rawUserFactValueInBoolean, comparator);\n}\nfunction compareDateTimeUTCValues(userFactSpecValue, rawUserFact, comparator) {\n    var rawUserFactValueInMilliseconds = Date.parse(rawUserFact.userFactValue);\n    if (!isAValidNumber(rawUserFactValueInMilliseconds, rawUserFact.userFactValue, rawUserFact.userFactName)) {\n        return false;\n    }\n    var userFactSpecValueInMilliseconds = Date.parse(userFactSpecValue);\n    if (!isAValidNumber(userFactSpecValueInMilliseconds, userFactSpecValue, null, 2 /* DateTimeUTC */)) {\n        return false;\n    }\n    return compareValues(userFactSpecValueInMilliseconds, rawUserFactValueInMilliseconds, comparator);\n}\nfunction compareNumberValues(userFactSpecValue, rawUserFact, comparator) {\n    var rawUserFactValueInNumber = parseInt(rawUserFact.userFactValue, 10);\n    if (!isAValidNumber(rawUserFactValueInNumber, rawUserFact.userFactValue, rawUserFact.userFactName)) {\n        return false;\n    }\n    return compareValues(userFactSpecValue, rawUserFactValueInNumber, comparator);\n}\nfunction compareStringValues(userFactSpecValue, rawUserFact, comparator) {\n    return compareValues(userFactSpecValue.toLowerCase(), rawUserFact.userFactValue.toLowerCase(), comparator);\n}\nfunction compareTimeIntervalValues(userFactSpecValue, rawUserFact, comparator, intervalType) {\n    var rawUserFactValueInMilliseconds = Date.parse(rawUserFact.userFactValue);\n    if (!isAValidNumber(rawUserFactValueInMilliseconds, rawUserFact.userFactValue, rawUserFact.userFactName)) {\n        return false;\n    }\n    // Diff from now and users input date\n    // IntervalTo - Internval to current date from fact date (fact date is expected to be before current date)\n    // IntervalFrom - Interval from current date to fact date (fact date is expected to be after current date)\n    var currentTimeInMilliseconds = Date.now();\n    var currentDateDiff = intervalType === 0 /* IntervalTo */ ?\n        (currentTimeInMilliseconds - rawUserFactValueInMilliseconds) : (rawUserFactValueInMilliseconds - currentTimeInMilliseconds);\n    if (currentDateDiff < 0) {\n        FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Event(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Mismatch, {\n            ErrorMessage: \"Interval type not acceptable - { Spec: \" + userFactSpecValue + \", Name: \\\"\" + rawUserFact.userFactName + \"\\\" }\",\n            TimeMilliseconds: currentDateDiff,\n            Type: \"\" + intervalType,\n        });\n        return false;\n    }\n    var dayInMilliseconds = 86400000;\n    var userFactSpecValueInMilliseconds = userFactSpecValue * dayInMilliseconds;\n    // check if the above diff satisfies the comparison criteria\n    return compareValues(userFactSpecValueInMilliseconds, currentDateDiff, comparator);\n}\nfunction compareListValues(userFactSpecValue, rawUserFact, comparator) {\n    return compareValues(userFactSpecValue, rawUserFact.userFactValue, comparator);\n}\nfunction isComparatorTypeSupported(comparator, supportedComparatorTypes) {\n    return supportedComparatorTypes.indexOf(comparator) !== -1;\n}\nfunction compareValues(userFactSpecValue, userFactRawValue, comparator) {\n    switch (comparator) {\n        case 0 /* Equal */:\n            return userFactRawValue === userFactSpecValue;\n        case 1 /* NotEqual */:\n            return userFactRawValue !== userFactSpecValue;\n        case 2 /* GreaterThan */:\n            return userFactRawValue > userFactSpecValue;\n        case 3 /* GreaterThanOrEqual */:\n            return userFactRawValue >= userFactSpecValue;\n        case 4 /* LessThan */:\n            return userFactRawValue < userFactSpecValue;\n        case 5 /* LessThanOrEqual */:\n            return userFactRawValue <= userFactSpecValue;\n        case 6 /* In */:\n            return isFactValueInTargetItem(userFactSpecValue, userFactRawValue);\n        case 7 /* NotIn */:\n            return !isFactValueInTargetItem(userFactSpecValue, userFactRawValue);\n        case 8 /* InverseIn */:\n            return isFactValueInTargetItem(userFactRawValue, userFactSpecValue);\n        case 9 /* InverseNotIn */:\n            return !isFactValueInTargetItem(userFactRawValue, userFactSpecValue);\n        default:\n            assertNever(comparator);\n    }\n}\nfunction assertNever(_) {\n    return false;\n}\nfunction isFactValueInTargetItem(userFactTargetValues, userFactRawValue) {\n    if (typeof userFactRawValue === \"string\") {\n        var factValue_1 = userFactRawValue.toLowerCase();\n        if (typeof userFactTargetValues === \"string\") {\n            // both the inputs are strings, do a plain indexOf\n            return userFactTargetValues.toLowerCase().indexOf(factValue_1) !== -1;\n        }\n        if (isArray(userFactTargetValues)) {\n            var specValues = userFactTargetValues;\n            return specValues.some(function (specValue) { return specValue && specValue.toString().toLowerCase() === factValue_1; });\n        }\n    }\n    if (isArray(userFactTargetValues)) {\n        return userFactTargetValues.indexOf(userFactRawValue) !== -1;\n    }\n    return false;\n}\nfunction isAValidNumber(numberValue, value, rawUserFactName, factType) {\n    if (!isNumber(numberValue)) {\n        var errorMessage = \"User fact \" + rawUserFactName + \" has invalid value \" + value;\n        if (factType) {\n            errorMessage = \"Invalid value \" + value + \" was provided for user fact of type \" + factType;\n        }\n        FloodgateEngine_1.FloodgateEngine.getTelemetryLogger().log_Error(Constants_1.TelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed, errorMessage);\n        return false;\n    }\n    return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/UserFact/UserFact.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/UserFact/UserFactHelper.js":
/*!************************************************************!*\
  !*** ../FloodgateCore/dist/src/UserFact/UserFactHelper.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateUserFacts = exports.deserializeUserFacts = void 0;\nvar UserFact_1 = __webpack_require__(/*! ./UserFact */ \"../FloodgateCore/dist/src/UserFact/UserFact.js\");\nexports.deserializeUserFacts = function (input) {\n    var userFacts = [];\n    for (var key in input.UserFacts) {\n        if (input.UserFacts.hasOwnProperty(key)) {\n            var userFactInput = input.UserFacts[key];\n            if (userFactInput) {\n                userFacts.push(UserFact_1.UserFact.deserialize(userFactInput));\n            }\n        }\n    }\n    if (userFacts.length === 0) {\n        userFacts = null;\n    }\n    return userFacts;\n};\nexports.validateUserFacts = function (userFacts) {\n    if (userFacts) {\n        for (var key in userFacts) {\n            if (userFacts.hasOwnProperty(key) && !userFacts[key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL1VzZXJGYWN0L1VzZXJGYWN0SGVscGVyLnRzPzk4OGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUdBQXNDO0FBRXpCLDRCQUFvQixHQUFHLFVBQUMsS0FBVTtJQUM5QyxJQUFJLFNBQVMsR0FBZSxFQUFFLENBQUM7SUFDL0IsS0FBSyxJQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1FBQ2xDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQyxJQUFJLGFBQWEsRUFBRTtnQkFDbEIsU0FBUyxDQUFDLElBQUksQ0FBQyxtQkFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO1NBQ0Q7S0FDRDtJQUVELElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDM0IsU0FBUyxHQUFHLElBQUksQ0FBQztLQUNqQjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBRWxCLENBQUMsQ0FBQztBQUVXLHlCQUFpQixHQUFHLFVBQUMsU0FBcUI7SUFDdEQsSUFBSSxTQUFTLEVBQUU7UUFDZCxLQUFLLElBQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtZQUM1QixJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3JELE9BQU8sS0FBSyxDQUFDO2FBQ2I7U0FDRDtLQUNEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDLENBQUMiLCJmaWxlIjoiLi4vRmxvb2RnYXRlQ29yZS9kaXN0L3NyYy9Vc2VyRmFjdC9Vc2VyRmFjdEhlbHBlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJGYWN0IH0gZnJvbSBcIi4vVXNlckZhY3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZXNlcmlhbGl6ZVVzZXJGYWN0cyA9IChpbnB1dDogYW55KTogVXNlckZhY3RbXSA9PiB7XHJcblx0bGV0IHVzZXJGYWN0czogVXNlckZhY3RbXSA9IFtdO1xyXG5cdGZvciAoY29uc3Qga2V5IGluIGlucHV0LlVzZXJGYWN0cykge1xyXG5cdFx0aWYgKGlucHV0LlVzZXJGYWN0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdGNvbnN0IHVzZXJGYWN0SW5wdXQgPSBpbnB1dC5Vc2VyRmFjdHNba2V5XTtcclxuXHJcblx0XHRcdGlmICh1c2VyRmFjdElucHV0KSB7XHJcblx0XHRcdFx0dXNlckZhY3RzLnB1c2goVXNlckZhY3QuZGVzZXJpYWxpemUodXNlckZhY3RJbnB1dCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAodXNlckZhY3RzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0dXNlckZhY3RzID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHJldHVybiB1c2VyRmFjdHM7XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlVXNlckZhY3RzID0gKHVzZXJGYWN0czogVXNlckZhY3RbXSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICh1c2VyRmFjdHMpIHtcclxuXHRcdGZvciAoY29uc3Qga2V5IGluIHVzZXJGYWN0cykge1xyXG5cdFx0XHRpZiAodXNlckZhY3RzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVzZXJGYWN0c1trZXldKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHJ1ZTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/UserFact/UserFactHelper.js\n");

/***/ }),

/***/ "../FloodgateCore/dist/src/Utils.js":
/*!******************************************!*\
  !*** ../FloodgateCore/dist/src/Utils.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Utils.ts\n *\n * Module for utility functions\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeParseObject = exports.isValidUserId = exports.fyShuffle = exports.dateToShortUtcString = exports.isUtcDatetimeString = exports.overrideValues = exports.stringToDate = exports.makeArrayFromObjectValuesSortedByKeyString = exports.guid = exports.extractLanguageSubtag = exports.isValidLanguageSubTag = exports.subtractSecondsWithoutOverflow = exports.addSecondsWithoutOverflow = exports.MIN_DATE_MILLISECONDS = exports.MAX_DATE_MILLISECONDS = exports.getDistantFuture = exports.getDistantPast = exports.isBoolean = exports.isString = exports.isArray = exports.isFunction = exports.isObject = exports.isNOU = exports.isNumber = exports.isEnumValue = exports.isDate = exports.timeAdd = void 0;\n/**\n * Add time to a given date\n * Example, timeAdd(new Date(), 'minute', 5)  //returns 5 minutes from now\n * @param date  Date to start with\n * @param interval  One of: hour or h, minute or m, second or s\n * @param units  units of the given interval to add\n * @return date\n */\nfunction timeAdd(date, interval, units) {\n    switch (interval.toLowerCase()) {\n        case \"h\":\n        case \"hour\":\n            return new Date(date.getTime() + (units * 3600000));\n        case \"m\":\n        case \"minute\":\n            return new Date(date.getTime() + (units * 60000));\n        case \"s\":\n        case \"second\":\n            return new Date(date.getTime() + (units * 1000));\n        default:\n            throw new Error(\"Invalid interval value of \" + interval);\n    }\n}\nexports.timeAdd = timeAdd;\n/**\n * Check if an input value is a valid date, null or undefined return false.\n * @param input  input value\n * @return boolean\n */\nfunction isDate(input) {\n    if (Object.prototype.toString.call(input) === \"[object Date]\") {\n        // it is a date\n        if (!(isNaN(input.getTime()))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isDate = isDate;\n/**\n * Check if an input value is a valid value in the input enum\n * @param value  input value\n * @param input  input enum\n * Returns true if value exists in the enum\n */\nfunction isEnumValue(value, input) {\n    return (value in input);\n}\nexports.isEnumValue = isEnumValue;\n/**\n * Check if an input value is a number\n * @param value: input value\n */\nfunction isNumber(value) {\n    return (value !== null && !isNaN(value) && isFinite(value));\n}\nexports.isNumber = isNumber;\n/**\n * Check if an input value is null or undefined\n * @param value: input value\n */\nfunction isNOU(value) {\n    return (value === null || value === undefined);\n}\nexports.isNOU = isNOU;\n/**\n * Check if an input value is an object\n * @param value: input value\n */\nfunction isObject(value) {\n    return (value !== null && value !== undefined && (typeof value === \"object\"));\n}\nexports.isObject = isObject;\n/**\n * Check if an input value is an array\n * @param value: input value\n */\nfunction isFunction(value) {\n    return (value !== null && value !== undefined && (typeof value === \"function\"));\n}\nexports.isFunction = isFunction;\n/**\n * Check if an input value is an array\n * @param value: input value\n */\nfunction isArray(value) {\n    return (value !== null && value !== undefined && (Array.isArray(value)));\n}\nexports.isArray = isArray;\n/**\n * Check if given value is a string\n * @param {any} value value\n */\nfunction isString(value) {\n    return (typeof value === \"string\");\n}\nexports.isString = isString;\n/**\n * Check if value is an object\n * @param {any} value value\n */\nfunction isBoolean(value) {\n    return typeof (value) === \"boolean\";\n}\nexports.isBoolean = isBoolean;\n/**\n * Returns a lower temporal boundary\n * @return date\n */\nfunction getDistantPast() {\n    // Corresponds to UTC 1601-01-01T00:00:00Z\n    return new Date(-11644473600000);\n}\nexports.getDistantPast = getDistantPast;\n/**\n * Get an upper temporal boundary\n * @return date\n */\nfunction getDistantFuture() {\n    // Corresponds to UTC 4001-01-01T00:00:00Z\n    return new Date(64092211200000);\n}\nexports.getDistantFuture = getDistantFuture;\nexports.MAX_DATE_MILLISECONDS = 8640000000000000;\nexports.MIN_DATE_MILLISECONDS = -8640000000000000;\n/**\n * Adds seconds to a date, if overflows returns Date(Number.Max_VALUE)\n *\n * @param date    date to add to\n * @param seconds seconds as number\n * @return Resulting date\n */\nfunction addSecondsWithoutOverflow(date, seconds) {\n    if (!date) {\n        return null;\n    }\n    if (seconds < 0) {\n        return subtractSecondsWithoutOverflow(date, -1 * seconds);\n    }\n    else {\n        var milliseconds = date.getTime() + seconds * 1000;\n        if (milliseconds < exports.MAX_DATE_MILLISECONDS) {\n            return new Date(milliseconds);\n        }\n        else {\n            return new Date(exports.MAX_DATE_MILLISECONDS);\n        }\n    }\n}\nexports.addSecondsWithoutOverflow = addSecondsWithoutOverflow;\n/**\n * Subtracts seconds from a date, if overflows returns Date(Number.MIN_VALUE)\n *\n * @param date   date to subtract from\n * @param seconds seconds as number\n * @return Resulting date\n */\nfunction subtractSecondsWithoutOverflow(date, seconds) {\n    if (!date) {\n        return null;\n    }\n    if (seconds < 0) {\n        seconds = -seconds;\n        return this.addSecondsWithoutOverflow(date, seconds);\n    }\n    var milliseconds = date.getTime() - (seconds * 1000);\n    if (milliseconds > exports.MIN_DATE_MILLISECONDS) {\n        return new Date(milliseconds);\n    }\n    else {\n        return new Date(exports.MIN_DATE_MILLISECONDS);\n    }\n}\nexports.subtractSecondsWithoutOverflow = subtractSecondsWithoutOverflow;\n// region Language related\n/**\n * Effectively un-anchored on the right side because tags can have many more trailing sub-parts than we care to extract\n * Refer to https://www.ietf.org/rfc/rfc5646.txt\n */\nvar LANGUAGE_AND_SCRIPT_TAG_PATTERN = \"^\" +\n    // capture 1:language subtag\n    \"(\" +\n    \"(?:[a-zA-Z]{2,3}(?:-[a-zA-Z]{3}){0,3})\" + // 2-3 Alpha chars, followed by up to three optional extension tags, each of format -AAA, A=Alpha char\n    \"|\" +\n    \"(?:[a-zA-Z]{4,8})\" + // 4-Alpha chars (reserved in standard) or 5-8 Alpha chars\n    \")\" +\n    \"(?:\" +\n    \"-\" +\n    // capture 2: optional script subtag (without leading dash), exactly 4 alpha chars\n    \"([a-zA-Z]{4})\" + // 4-Alpha chars\n    \")?\" +\n    // capture 3: optional region subtag (without leading dash), exactly 2 alpha chars or 3 digits\n    \"(?:-([a-zA-Z]{2}|[0-9]{3}))?\" +\n    \"(\" +\n    // capture 4: any left-overs, rejecting remainder strings that don't end here or lead with a dash.\n    \"-.*\" +\n    \")?\" +\n    \"$\";\nfunction isValidLanguageSubTag(subTag) {\n    if (!subTag) {\n        return false;\n    }\n    var extractedSubTag = extractLanguageSubtag(subTag);\n    if (!extractedSubTag) {\n        return false;\n    }\n    return extractedSubTag === subTag;\n}\nexports.isValidLanguageSubTag = isValidLanguageSubTag;\nfunction extractLanguageSubtag(language) {\n    if (!language) {\n        return null;\n    }\n    var matches = language.match(LANGUAGE_AND_SCRIPT_TAG_PATTERN);\n    if (!matches || matches.length < 1 || !isNOU(matches[4])) {\n        return null;\n    }\n    // return the first capture group which should be the original input if there is a match\n    // For example, \"en-US\" input should return \"en-US\", and \"en\" input should return \"en\".\n    return matches[0];\n}\nexports.extractLanguageSubtag = extractLanguageSubtag;\n// endregion\n/**\n * Create guid string\n */\nfunction guid() {\n    // Stitch in '4' in the third group\n    return (randomHex4() + randomHex4() + \"-\" + randomHex4() + \"-4\" + randomHex4().substr(0, 3) + \"-\" + randomHex4() + \"-\"\n        + randomHex4() + randomHex4() + randomHex4()).toLowerCase();\n}\nexports.guid = guid;\n/**\n * Create random Hex4 string\n */\nfunction randomHex4() {\n    return (Math.floor(((1 + Math.random()) * 0x10000))).toString(16).substring(1);\n}\n/**\n * Create an array from input object values sorted by object key\n * @param Object input object\n * @return array\n */\nfunction makeArrayFromObjectValuesSortedByKeyString(object) {\n    var keys = Object.keys(object);\n    keys.sort();\n    var values = [];\n    for (var id in keys) {\n        if (keys.hasOwnProperty(id)) {\n            var key = keys[id];\n            values.push(object[key]);\n        }\n    }\n    return values;\n}\nexports.makeArrayFromObjectValuesSortedByKeyString = makeArrayFromObjectValuesSortedByKeyString;\n/**\n * Create a date object from an input string\n * @param Object input string\n * @return date\n */\nfunction stringToDate(input) {\n    if (!isString(input)) {\n        return null;\n    }\n    var newDate = input ? new Date(input) : null;\n    return isDate(newDate) ? newDate : null;\n}\nexports.stringToDate = stringToDate;\n/**\n * Takes two objects (source, target) and returns the target object with values in the source added to it.\n * It overwrites any source properties which already exist in target.\n */\nfunction overrideValues(sourceObject, targetobject) {\n    if (!targetobject) {\n        return targetobject;\n    }\n    var result = targetobject;\n    if (sourceObject) {\n        for (var field in sourceObject) {\n            if (sourceObject.hasOwnProperty(field)) {\n                result[field] = sourceObject[field];\n            }\n        }\n    }\n    return result;\n}\nexports.overrideValues = overrideValues;\n/**\n * Test a string is in our supported ISO8601 UTC format of \"yyyy-MM-ddTHH:mm:ssZ\" and \"yyyy-MM-ddTHH:mm:ss.fffZ\"\n * @param input Input string to be evaluated.\n */\nfunction isUtcDatetimeString(input) {\n    if (!isString(input)) {\n        return false;\n    }\n    var supportedUtcRegex = /^(\\d{4}\\-\\d\\d\\-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d\\d\\d)?Z)$/;\n    return supportedUtcRegex.test(input);\n}\nexports.isUtcDatetimeString = isUtcDatetimeString;\n/**\n * Convert a date object to a string in ISO8601 UTC format supported by Floodgate (\"yyyy-MM-ddTHH:mm:ssZ\")\n * @param input Input date object\n */\nfunction dateToShortUtcString(input) {\n    if (!isDate(input)) {\n        return null;\n    }\n    function pad(n) {\n        return (n < 10) ? (\"0\" + n) : n.toString();\n    }\n    return input.getUTCFullYear() +\n        \"-\" + pad(input.getUTCMonth() + 1) +\n        \"-\" + pad(input.getUTCDate()) +\n        \"T\" + pad(input.getUTCHours()) +\n        \":\" + pad(input.getUTCMinutes()) +\n        \":\" + pad(input.getUTCSeconds()) +\n        \"Z\";\n}\nexports.dateToShortUtcString = dateToShortUtcString;\n/*\nImplementing the Fisher-Yates Shuffle\n(Shuffles in situ)\n*/\nfunction fyShuffle(arrIn) {\n    if (isNOU(arrIn)) {\n        return undefined;\n    }\n    // If the array is empty or has one element, do nothing.\n    if (arrIn.length === 0 || arrIn.length === 1) {\n        return arrIn;\n    }\n    var lastNonShuffledElement = arrIn.length - 1;\n    // While there is still a non shuffled element.\n    while (lastNonShuffledElement > 0) {\n        // Pick one of the non shuffled elements (num range [0,lastNonShuffledElement+1))\n        var pickIndex = Math.floor(Math.random() * (lastNonShuffledElement + 1));\n        // And swap it with the last non shuffled element\n        var temp = arrIn[lastNonShuffledElement];\n        arrIn[lastNonShuffledElement] = arrIn[pickIndex];\n        arrIn[pickIndex] = temp;\n        lastNonShuffledElement--;\n    }\n    return arrIn;\n}\nexports.fyShuffle = fyShuffle;\n/**\n * Check if value is an valid user id\n * One or two character before colon, a colon, and some word after colon.\n * @param {any} value value\n */\nfunction isValidUserId(value) {\n    if (!isString(value)) {\n        return false;\n    }\n    var supportedUserIdRegex = /^([a-z]{1,2}):\\w+/;\n    return supportedUserIdRegex.test(value);\n}\nexports.isValidUserId = isValidUserId;\n/**\n * Safely read an object\n */\nfunction safeParseObject(serializedValue, defaultValue) {\n    try {\n        var parsedObject = serializedValue && (serializedValue[0] === \"{\" || serializedValue[0] === \"[\")\n            ? JSON.parse(serializedValue)\n            : undefined;\n        return parsedObject !== null && parsedObject !== void 0 ? parsedObject : defaultValue;\n    }\n    catch (e) {\n        // ignore\n    }\n    return defaultValue;\n}\nexports.safeParseObject = safeParseObject;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../FloodgateCore/dist/src/Utils.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/annotations.js":
/*!******************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/annotations.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AnnotationState = void 0;\r\nvar AnnotationState;\r\n(function (AnnotationState) {\r\n    AnnotationState[AnnotationState[\"Undefined\"] = 0] = \"Undefined\";\r\n    //only dealt with on server side\r\n    AnnotationState[AnnotationState[\"Created\"] = 10] = \"Created\";\r\n    AnnotationState[AnnotationState[\"Sent\"] = 20] = \"Sent\";\r\n    AnnotationState[AnnotationState[\"Duplicated\"] = 30] = \"Duplicated\";\r\n    //dealt with on client side and server side\r\n    AnnotationState[AnnotationState[\"Seen\"] = 40] = \"Seen\";\r\n    AnnotationState[AnnotationState[\"Tried\"] = 50] = \"Tried\";\r\n    AnnotationState[AnnotationState[\"Kept\"] = 60] = \"Kept\";\r\n    AnnotationState[AnnotationState[\"Rejected\"] = 70] = \"Rejected\";\r\n})(AnnotationState = exports.AnnotationState || (exports.AnnotationState = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vc3JjL2Fubm90YXRpb25zLnRzPzg2MWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsSUFBWSxlQVdYO0FBWEQsV0FBWSxlQUFlO0lBQ3ZCLCtEQUFhO0lBQ2IsZ0NBQWdDO0lBQ2hDLDREQUFZO0lBQ1osc0RBQVM7SUFDVCxrRUFBZTtJQUNmLDJDQUEyQztJQUMzQyxzREFBUztJQUNULHdEQUFVO0lBQ1Ysc0RBQVM7SUFDVCw4REFBYTtBQUNqQixDQUFDLEVBWFcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFXMUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGF1Z2xvb3AvdHlwZXMtY29yZS9kaXN0L3NyYy9hbm5vdGF0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTY2hlbWFPYmplY3QgfSBmcm9tICcuL3NjaGVtYS1vYmplY3QnO1xyXG5cclxuZXhwb3J0IGVudW0gQW5ub3RhdGlvblN0YXRlIHtcclxuICAgIFVuZGVmaW5lZCA9IDAsXHJcbiAgICAvL29ubHkgZGVhbHQgd2l0aCBvbiBzZXJ2ZXIgc2lkZVxyXG4gICAgQ3JlYXRlZCA9IDEwLFxyXG4gICAgU2VudCA9IDIwLFxyXG4gICAgRHVwbGljYXRlZCA9IDMwLCAvL29ubHkgdG8gYmUgdXNlZCBmb3IgbG9ncyAtLSBhbm5vdGF0aW9uIHNob3VsZCBuZXZlciBiZSBhc3NpZ25lZCB0aGlzIHN0YXRlXHJcbiAgICAvL2RlYWx0IHdpdGggb24gY2xpZW50IHNpZGUgYW5kIHNlcnZlciBzaWRlXHJcbiAgICBTZWVuID0gNDAsXHJcbiAgICBUcmllZCA9IDUwLFxyXG4gICAgS2VwdCA9IDYwLFxyXG4gICAgUmVqZWN0ZWQgPSA3MFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFubm90YXRpb25NZXRhRGF0YSB7XHJcbiAgICBzdGF0ZT86IEFubm90YXRpb25TdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGFubm90YXRpb24gY2FuIGJlIHNoYXJlZCB3aXRoIGNvYXV0aG9ycyxcclxuICAgICAqIGkuZS4sIGFuIGFubm90YXRpb24gdGhhdCBpcyBub3QgcGVyc29uYWxpemVkIHRvIGEgZ2l2ZW4gdXNlci5cclxuICAgICAqL1xyXG4gICAgc2hhcmVhYmxlPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmaWVsZCBpcyBpbnRlbmRlZCB0byBiZSBleHRlbmRlZCBieSB3b3JrZmxvdyBhdXRob3JzXHJcbiAgICAgKiB0aGF0IHdhbnQgdG8gdXNlIGN1c3RvbSBtZXRhZGF0YSBmb3IgdGhlaXIgYW5ub3RhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGN1c3RvbU1ldGFkYXRhPzogSVNjaGVtYU9iamVjdDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQW5ub3RhdGlvbkFjdGl2YXRpb25Db25maWdzIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgbmFtZSBvZiBhbm5vdGF0aW9uLlxyXG4gICAgICovXHJcbiAgICBhbm5vdGF0aW9uVHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmaWVsZCBjb250YWlucyBhbGwgY29uZmlncyBvZiBnaXZlbiBhbm5vdGF0aW9uIHR5cGUuXHJcbiAgICAgKiBUaGUgbGF0ZXIgY29uZmlnIGFycml2ZXMsIHRoZSBsYXRlciBpdCBhcHBlYXJzIGluIHRoZSBhcnJheS5cclxuICAgICAqL1xyXG4gICAgY29uZmlnczogSVNjaGVtYU9iamVjdFtdO1xyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGFubm90YXRpb25zLiBNYXkgaGF2ZSBvdGhlciBhbm5vdGF0aW9ucyBhcyBjaGlsZHJlbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFubm90YXRpb24gZXh0ZW5kcyBJU2NoZW1hT2JqZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogVW5pcXVlIElEIG9mIHRoaXMgYW5ub3RhdGlvbi4gTXVzdCBub3QgYmUgcmUtdXNlZCBmb3IgYW4gYW5ub3RhdGlvbiBvbiBhXHJcbiAgICAgKiBkaWZmZXJlbnQgcGFyZW50IChzaW1pbGFybHksIGFubm90YXRpb25zIG1heSBiZSB1cGRhdGVkIG9yIGRlbGV0ZWQsIGJ1dFxyXG4gICAgICogbWF5IG5vdCBiZSBtb3ZlZCB0byBhIGRpZmZlcmVudCBwYXJlbnQpLiBJZiB0aGlzIGlzIG5vdCBzZXQgYnkgdGhlIHdvcmtmbG93XHJcbiAgICAgKiB0aGF0IHByb2R1Y2VkIHRoZSBhbm5vdGF0aW9uLCBpdCB3aWxsIGJlIHNldCB0byBhIHJhbmRvbSBHVUlEIGJ5IHRoZVxyXG4gICAgICogcnVudGltZS4gSWYgYSB3b3JrZmxvdyBwcm9kdWNlcyBhbiBhbm5vdGF0aW9uIGlkZW50aWNhbCB0byBhbiBleGlzdGluZ1xyXG4gICAgICogYW5ub3RhdGlvbiB0aGF0IGRpZmZlcnMgb25seSBieSBJRCwgdGhlIG5ld2VyIGFubm90YXRpb24gd2lsbCBiZSBkaXNjYXJkZWRcclxuICAgICAqIGFuZCBubyB1cGRhdGUgd2lsbCBiZSBzZW50IHRvIHRoZSBjbGllbnQuXHJcbiAgICAgKi9cclxuICAgIGlkPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIElEIG9mIHRoZSBvd25lciBvZiB0aGUgYW5ub3RhdGlvbiAoaS5lLiB0aGUgc2VydmljZSBvciB0aGUgZW5naW5lIHRoYXRcclxuICAgICAqIHByb2R1Y2VkIHRoZSBhbm5vdGF0aW9uKVxyXG4gICAgICovXHJcbiAgICBvd25lcklkPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhYmxlIGJ1dCBub3QgbmVjZXNzYXJpbHkgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHRoZSByYW5nZSBvZiBjb250ZW50IGNvdmVyZWRcclxuICAgICAqIGJ5IHRoaXMgYW5ub3RhdGlvbi4gVGhlIG1ldGhvZCBieSB3aGljaCB0aGlzIGlzIGdlbmVyYXRlZCBpcyB1bnNwZWNpZmllZFxyXG4gICAgICogYW5kIHdpbGwgc29tZXRpbWVzIHZhcnkgYWNyb3NzIGRpZmZlcmVudCB0eXBlcyBvZiBhbm5vdGF0aW9ucywgYnV0IGl0XHJcbiAgICAgKiBzaG91bGQgZ2VuZXJhbGx5IGJlIHRob3VnaHQgb2YgYXMgYSBoYXNoIG92ZXIgYWxsIHRoZSBjb250ZW50IHdpdGhpbiB0aGVcclxuICAgICAqIFwiaW52YWxpZGF0aW9uIHJhbmdlXCIgb2YgdGhlIGFubm90YXRpb24gKHRoYXQgaXMsIHRoZSBwYXJ0cyBvZiB0aGUgdXNlciBjb250ZW50XHJcbiAgICAgKiBpbiB3aGljaCBhbnkgZWRpdCB3aWxsIHJlbmRlciB0aGUgYW5ub3RhdGlvbiBzdGFsZSwgcG9zc2libHkgaW5jbHVkaW5nIGZvcm1hdHRpbmdcclxuICAgICAqIGFuZCBvdGhlciBtZXRhZGF0YSBpbiBhZGRpdGlvbiB0byBiYXNpYyBjb250ZW50IHN1Y2ggYXMgdGV4dCkuXHJcbiAgICAgKlxyXG4gICAgICogVGhlc2UgbWF5IGJlIHNoYXJlZCBieSBtdWx0aXBsZSBhbm5vdGF0aW9ucyBjb3ZlcmluZyBleGFjdGx5IHRoZSBzYW1lIGNvbnRlbnQuXHJcbiAgICAgKiBSYW5kb20gY29sbGlzaW9ucyBiZXR3ZWVuIGRpZmZlcmVudCByZWdpb25zIG11c3QgYmUgYXZvaWRlZC4gVGhpcyBoYXNoIHNob3VsZFxyXG4gICAgICogaGF2ZSBhIG1pbmltdW0gb2YgOCBieXRlcyBvZiBlbnRyb3B5LlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgaXMgdXNlZCBieSBPZmZpY2UgY2xpZW50cyB0byBpbXBsZW1lbnQgcGVyc2lzdGVuY2UgZmVhdHVyZXMuIElmIGxlZnRcclxuICAgICAqIHVuc2V0LCBzb21lIGZlYXR1cmVzIG1heSBiZSB0dXJuZWQgb2ZmIGZvciB0aGlzIGFubm90YXRpb24uXHJcbiAgICAgKi9cclxuICAgIGludmFsaWRhdGlvbkhhc2g/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmZvcm1hdGlvbiBhYm91dCBob3cgdGhlIHVzZXIgaGFzIGludGVyYWN0ZWQgd2l0aCB0aGUgYW5ub3RhdGlvblxyXG4gICAgICogKHNlbnQsIHNlZW4sIHRyaWVkLCBrZXB0KS4gVGhlIHByb3BlcnR5IG5hbWUgaXMgZGVsaWJlcmF0ZWx5XHJcbiAgICAgKiBvYmZ1c2NhdGVkIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiB0aGUgc2VyaWFsaXplZCBvYmplY3QgYW5kIGlzXHJcbiAgICAgKiBpbnRlbmRlZCBmb3IgaW50ZXJuYWwgdXNlLCB3aGVyZWFzIHRoZSBtZXRhZGF0YSBwcm9wZXJ0eSBpcyBpbnRlbmRlZFxyXG4gICAgICogZm9yIGV4dGVybmFsIHVzZSBieSB3b3JrZmxvdyBhdXRob3JzLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgcHJvcGVydHkgd2lsbCBoYXZlIHRoZSBmb2xsb3dpbmcgbmFtZXMgaW4gb3VyIHRhcmdldCBsYW5ndWFnZXM6XHJcbiAgICAgKiBAY3BwbmFtZSBNZXRhZGF0YVxyXG4gICAgICovXHJcbiAgICBNXz86IEFubm90YXRpb25NZXRhRGF0YTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGUgdXNlciBoYXMgaW50ZXJhY3RlZCB3aXRoIHRoZSBhbm5vdGF0aW9uXHJcbiAgICAgKiAoc2VudCwgc2VlbiwgdHJpZWQsIGtlcHQpLiBUaGlzIGlzIGJhY2tlZCBieSB0aGUgTV8gZmllbGQsIGJ1dFxyXG4gICAgICogcHJvdmlkZXMgYSBiZXR0ZXIgcHJvcGVydHkgbmFtZSBmb3Igd29ya2Zsb3cgYXV0aG9ycyB0byB1c2UuXHJcbiAgICAgKi9cclxuICAgIG1ldGFkYXRhPzogQW5ub3RhdGlvbk1ldGFEYXRhO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHNpbXBsZSB0cnVlL2ZhbHNlIGNsYXNzaWZpY2F0aW9uIGFubm90YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElCaW5hcnlDbGFzc2lmaWNhdGlvbkFubm90YXRpb24gZXh0ZW5kcyBJQW5ub3RhdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjbGFzc2lmaWNhdGlvblxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNsYXNzaWZpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IHZhbHVlOiBib29sZWFuO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/annotations.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/generated/annotations.g.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/generated/annotations.g.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fannotations.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BinaryClassificationAnnotation = exports.Annotation = void 0;\r\nvar schema_object_g_1 = __webpack_require__(/*! ./schema-object.g */ \"./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\");\r\nvar Annotation = /** @class */ (function () {\r\n    function Annotation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Annotation, this, obj);\r\n    }\r\n    Object.defineProperty(Annotation.prototype, \"metadata\", {\r\n        get: function () { return this.M_; },\r\n        set: function (value) { this.M_ = value; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Annotation.getTypeName = function () {\r\n        return 'AugLoop_Core_Annotation';\r\n    };\r\n    Annotation.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Annotation type or its inheritor and implements {@link IAnnotation}\r\n     */\r\n    Annotation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Annotation.getTypeName()]);\r\n    };\r\n    Annotation.H_ = { T_: Annotation.getTypeName(), B_: Annotation.getBaseTypes() };\r\n    return Annotation;\r\n}());\r\nexports.Annotation = Annotation;\r\nvar BinaryClassificationAnnotation = /** @class */ (function () {\r\n    function BinaryClassificationAnnotation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(BinaryClassificationAnnotation, this, obj);\r\n    }\r\n    Object.defineProperty(BinaryClassificationAnnotation.prototype, \"metadata\", {\r\n        get: function () { return this.M_; },\r\n        set: function (value) { this.M_ = value; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    BinaryClassificationAnnotation.getTypeName = function () {\r\n        return 'AugLoop_Core_BinaryClassificationAnnotation';\r\n    };\r\n    BinaryClassificationAnnotation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Annotation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of BinaryClassificationAnnotation type or its inheritor and implements {@link IBinaryClassificationAnnotation}\r\n     */\r\n    BinaryClassificationAnnotation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [BinaryClassificationAnnotation.getTypeName()]);\r\n    };\r\n    BinaryClassificationAnnotation.H_ = { T_: BinaryClassificationAnnotation.getTypeName(), B_: BinaryClassificationAnnotation.getBaseTypes() };\r\n    return BinaryClassificationAnnotation;\r\n}());\r\nexports.BinaryClassificationAnnotation = BinaryClassificationAnnotation;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vc3JjL2dlbmVyYXRlZC9hbm5vdGF0aW9ucy5nLnRzP2Q0MTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlGQUFpRjtBQUNqRixtQkFBbUI7QUFDbkIseURBQXlEO0FBQ3pELG1IQUFtSDtBQUNuSCx3RkFBd0Y7QUFDeEYsb0JBQW9CO0FBQ3BCLGlGQUFpRjs7O0FBR2pGLGlKQUFpRDtBQUdqRDtJQVFJLG9CQUFtQixHQUFpQjtRQUNoQyw4QkFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFMRCxzQkFBVyxnQ0FBUTthQUFuQixjQUF3RCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3pFLFVBQW9CLEtBQXFDLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7T0FETjtJQU0zRCxzQkFBVyxHQUF6QjtRQUNJLE9BQU8seUJBQXlCLENBQUM7SUFDckMsQ0FBQztJQUNhLHVCQUFZLEdBQTFCO1FBQ0ksT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDVyxvQkFBUyxHQUF2QixVQUF3QixZQUEyQjtRQUMvQyxPQUFPLDhCQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQU5zQixhQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztJQU9oRyxpQkFBQztDQUFBO0FBeEJZLGdDQUFVO0FBMEJ2QjtJQVVJLHdDQUFtQixHQUFxQztRQUNwRCw4QkFBWSxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUxELHNCQUFXLG9EQUFRO2FBQW5CLGNBQXdELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDekUsVUFBb0IsS0FBcUMsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUROO0lBTTNELDBDQUFXLEdBQXpCO1FBQ0ksT0FBTyw2Q0FBNkMsQ0FBQztJQUN6RCxDQUFDO0lBQ2EsMkNBQVksR0FBMUI7UUFDSSxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDVyx3Q0FBUyxHQUF2QixVQUF3QixZQUEyQjtRQUMvQyxPQUFPLDhCQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLDhCQUE4QixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBTnNCLGlDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsOEJBQThCLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxFQUFFLDhCQUE4QixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7SUFPeEkscUNBQUM7Q0FBQTtBQTFCWSx3RUFBOEIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGF1Z2xvb3AvdHlwZXMtY29yZS9kaXN0L3NyYy9nZW5lcmF0ZWQvYW5ub3RhdGlvbnMuZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyA8YXV0by1nZW5lcmF0ZWQ+XHJcbi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBAYXVnbG9vcC9jb2RlLWdlbiB0b29sLlxyXG4vLyBTb3VyY2U6IGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9vZmZpY2UvSVNTL19naXQvYXVnbG9vcC1zZXJ2ZXI/cGF0aD0lMkZtb2R1bGVzJTJGdHlwZXMtY29yZSUyRnNyYyUyRmFubm90YXRpb25zLnRzXHJcbi8vIENoYW5nZXMgdG8gdGhpcyBmaWxlIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IgYW5kIHdpbGwgYmUgbG9zdCB1cG9uIHJlZ2VuZXJhdGlvbi5cclxuLy8gPC9hdXRvLWdlbmVyYXRlZD5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5pbXBvcnQgeyBBbm5vdGF0aW9uTWV0YURhdGEsIElBbm5vdGF0aW9uLCBJQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9uIH0gZnJvbSAnLi4vYW5ub3RhdGlvbnMnO1xyXG5pbXBvcnQgeyBTY2hlbWFPYmplY3QgfSBmcm9tICcuL3NjaGVtYS1vYmplY3QuZyc7XHJcbmltcG9ydCB7IElTY2hlbWFPYmplY3QsIFNjaGVtYU9iamVjdEhlYWRlciB9IGZyb20gJy4uL3NjaGVtYS1vYmplY3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFubm90YXRpb24gaW1wbGVtZW50cyBJQW5ub3RhdGlvbiB7XHJcbiAgICBwdWJsaWMgaWQ/OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgb3duZXJJZD86IHN0cmluZztcclxuICAgIHB1YmxpYyBpbnZhbGlkYXRpb25IYXNoPzogc3RyaW5nO1xyXG4gICAgcHVibGljIE1fPzogQW5ub3RhdGlvbk1ldGFEYXRhO1xyXG4gICAgcHVibGljIGdldCBtZXRhZGF0YSgpOiBBbm5vdGF0aW9uTWV0YURhdGEgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5NXzsgfVxyXG4gICAgcHVibGljIHNldCBtZXRhZGF0YSh2YWx1ZTogQW5ub3RhdGlvbk1ldGFEYXRhIHwgdW5kZWZpbmVkKSB7IHRoaXMuTV8gPSB2YWx1ZTsgfVxyXG4gICAgcHVibGljIHJlYWRvbmx5IEhfOiBTY2hlbWFPYmplY3RIZWFkZXI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iob2JqPzogSUFubm90YXRpb24pIHtcclxuICAgICAgICBTY2hlbWFPYmplY3QuYXNzaWduKEFubm90YXRpb24sIHRoaXMsIG9iaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdBdWdMb29wX0NvcmVfQW5ub3RhdGlvbic7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEJhc2VUeXBlcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIXyA9IHsgVF86IEFubm90YXRpb24uZ2V0VHlwZU5hbWUoKSwgQl86IEFubm90YXRpb24uZ2V0QmFzZVR5cGVzKCkgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHBhc3NlZCBzY2hlbWEgb2JqZWN0IGlzIG9mIEFubm90YXRpb24gdHlwZSBvciBpdHMgaW5oZXJpdG9yIGFuZCBpbXBsZW1lbnRzIHtAbGluayBJQW5ub3RhdGlvbn1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0eXBlR3VhcmQoc2NoZW1hT2JqZWN0OiBJU2NoZW1hT2JqZWN0KTogc2NoZW1hT2JqZWN0IGlzIElBbm5vdGF0aW9uIHtcclxuICAgICAgICByZXR1cm4gU2NoZW1hT2JqZWN0Lm1hdGNoZXNUeXBlc0ZvcihzY2hlbWFPYmplY3QsIFtBbm5vdGF0aW9uLmdldFR5cGVOYW1lKCldKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpbmFyeUNsYXNzaWZpY2F0aW9uQW5ub3RhdGlvbiBpbXBsZW1lbnRzIElCaW5hcnlDbGFzc2lmaWNhdGlvbkFubm90YXRpb24ge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBpZD86IHN0cmluZztcclxuICAgIHB1YmxpYyBvd25lcklkPzogc3RyaW5nO1xyXG4gICAgcHVibGljIGludmFsaWRhdGlvbkhhc2g/OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgTV8/OiBBbm5vdGF0aW9uTWV0YURhdGE7XHJcbiAgICBwdWJsaWMgZ2V0IG1ldGFkYXRhKCk6IEFubm90YXRpb25NZXRhRGF0YSB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLk1fOyB9XHJcbiAgICBwdWJsaWMgc2V0IG1ldGFkYXRhKHZhbHVlOiBBbm5vdGF0aW9uTWV0YURhdGEgfCB1bmRlZmluZWQpIHsgdGhpcy5NXyA9IHZhbHVlOyB9XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgSF86IFNjaGVtYU9iamVjdEhlYWRlcjtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvYmo/OiBJQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9uKSB7XHJcbiAgICAgICAgU2NoZW1hT2JqZWN0LmFzc2lnbihCaW5hcnlDbGFzc2lmaWNhdGlvbkFubm90YXRpb24sIHRoaXMsIG9iaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdBdWdMb29wX0NvcmVfQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9uJztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QmFzZVR5cGVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gWydBdWdMb29wX0NvcmVfQW5ub3RhdGlvbiddO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIXyA9IHsgVF86IEJpbmFyeUNsYXNzaWZpY2F0aW9uQW5ub3RhdGlvbi5nZXRUeXBlTmFtZSgpLCBCXzogQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9uLmdldEJhc2VUeXBlcygpIH07XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiBwYXNzZWQgc2NoZW1hIG9iamVjdCBpcyBvZiBCaW5hcnlDbGFzc2lmaWNhdGlvbkFubm90YXRpb24gdHlwZSBvciBpdHMgaW5oZXJpdG9yIGFuZCBpbXBsZW1lbnRzIHtAbGluayBJQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9ufVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHR5cGVHdWFyZChzY2hlbWFPYmplY3Q6IElTY2hlbWFPYmplY3QpOiBzY2hlbWFPYmplY3QgaXMgSUJpbmFyeUNsYXNzaWZpY2F0aW9uQW5ub3RhdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIFNjaGVtYU9iamVjdC5tYXRjaGVzVHlwZXNGb3Ioc2NoZW1hT2JqZWN0LCBbQmluYXJ5Q2xhc3NpZmljYXRpb25Bbm5vdGF0aW9uLmdldFR5cGVOYW1lKCldKTtcclxuICAgIH1cclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/generated/annotations.g.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/generated/operations.g.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/generated/operations.g.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Foperations.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SignalOperation = exports.MicroSyncOperation = exports.DeltaUpdateOperation = exports.VisibilityOperation = exports.FocusOperation = exports.PurgeOperation = exports.DeleteOperation = exports.UpdateOperation = exports.UpdateAnnotationMetaDataOperation = exports.MoveOperation = exports.AddOperation = exports.OperationWithSiblingContext = exports.Operation = exports.ItemChangesDelta = exports.ItemDelta = void 0;\r\nvar schema_object_g_1 = __webpack_require__(/*! ./schema-object.g */ \"./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\");\r\nvar ItemDelta = /** @class */ (function () {\r\n    function ItemDelta(obj) {\r\n        schema_object_g_1.SchemaObject.assign(ItemDelta, this, obj);\r\n    }\r\n    ItemDelta.getTypeName = function () {\r\n        return 'AugLoop_Core_ItemDelta';\r\n    };\r\n    ItemDelta.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of ItemDelta type or its inheritor and implements {@link IItemDelta}\r\n     */\r\n    ItemDelta.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [ItemDelta.getTypeName()]);\r\n    };\r\n    ItemDelta.H_ = { T_: ItemDelta.getTypeName(), B_: ItemDelta.getBaseTypes() };\r\n    return ItemDelta;\r\n}());\r\nexports.ItemDelta = ItemDelta;\r\nvar ItemChangesDelta = /** @class */ (function () {\r\n    function ItemChangesDelta(obj) {\r\n        schema_object_g_1.SchemaObject.assign(ItemChangesDelta, this, obj);\r\n    }\r\n    ItemChangesDelta.getTypeName = function () {\r\n        return 'AugLoop_Core_ItemChangesDelta';\r\n    };\r\n    ItemChangesDelta.getBaseTypes = function () {\r\n        return ['AugLoop_Core_ItemDelta'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of ItemChangesDelta type or its inheritor and implements {@link IItemChangesDelta}\r\n     */\r\n    ItemChangesDelta.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [ItemChangesDelta.getTypeName()]);\r\n    };\r\n    ItemChangesDelta.H_ = { T_: ItemChangesDelta.getTypeName(), B_: ItemChangesDelta.getBaseTypes() };\r\n    return ItemChangesDelta;\r\n}());\r\nexports.ItemChangesDelta = ItemChangesDelta;\r\nvar Operation = /** @class */ (function () {\r\n    function Operation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Operation, this, obj);\r\n    }\r\n    Operation.getTypeName = function () {\r\n        return 'AugLoop_Core_Operation';\r\n    };\r\n    Operation.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Operation type or its inheritor and implements {@link IOperation}\r\n     */\r\n    Operation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Operation.getTypeName()]);\r\n    };\r\n    Operation.H_ = { T_: Operation.getTypeName(), B_: Operation.getBaseTypes() };\r\n    return Operation;\r\n}());\r\nexports.Operation = Operation;\r\nvar OperationWithSiblingContext = /** @class */ (function () {\r\n    function OperationWithSiblingContext(obj) {\r\n        schema_object_g_1.SchemaObject.assign(OperationWithSiblingContext, this, obj);\r\n    }\r\n    OperationWithSiblingContext.getTypeName = function () {\r\n        return 'AugLoop_Core_OperationWithSiblingContext';\r\n    };\r\n    OperationWithSiblingContext.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of OperationWithSiblingContext type or its inheritor and implements {@link IOperationWithSiblingContext}\r\n     */\r\n    OperationWithSiblingContext.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [OperationWithSiblingContext.getTypeName()]);\r\n    };\r\n    OperationWithSiblingContext.H_ = { T_: OperationWithSiblingContext.getTypeName(), B_: OperationWithSiblingContext.getBaseTypes() };\r\n    return OperationWithSiblingContext;\r\n}());\r\nexports.OperationWithSiblingContext = OperationWithSiblingContext;\r\nvar AddOperation = /** @class */ (function () {\r\n    function AddOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(AddOperation, this, obj);\r\n    }\r\n    AddOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_AddOperation';\r\n    };\r\n    AddOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of AddOperation type or its inheritor and implements {@link IAddOperation}\r\n     */\r\n    AddOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [AddOperation.getTypeName()]);\r\n    };\r\n    AddOperation.H_ = { T_: AddOperation.getTypeName(), B_: AddOperation.getBaseTypes() };\r\n    return AddOperation;\r\n}());\r\nexports.AddOperation = AddOperation;\r\nvar MoveOperation = /** @class */ (function () {\r\n    function MoveOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(MoveOperation, this, obj);\r\n    }\r\n    MoveOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_MoveOperation';\r\n    };\r\n    MoveOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of MoveOperation type or its inheritor and implements {@link IMoveOperation}\r\n     */\r\n    MoveOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [MoveOperation.getTypeName()]);\r\n    };\r\n    MoveOperation.H_ = { T_: MoveOperation.getTypeName(), B_: MoveOperation.getBaseTypes() };\r\n    return MoveOperation;\r\n}());\r\nexports.MoveOperation = MoveOperation;\r\nvar UpdateAnnotationMetaDataOperation = /** @class */ (function () {\r\n    function UpdateAnnotationMetaDataOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(UpdateAnnotationMetaDataOperation, this, obj);\r\n    }\r\n    UpdateAnnotationMetaDataOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_UpdateAnnotationMetaDataOperation';\r\n    };\r\n    UpdateAnnotationMetaDataOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of UpdateAnnotationMetaDataOperation type or its inheritor and implements {@link IUpdateAnnotationMetaDataOperation}\r\n     */\r\n    UpdateAnnotationMetaDataOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [UpdateAnnotationMetaDataOperation.getTypeName()]);\r\n    };\r\n    UpdateAnnotationMetaDataOperation.H_ = { T_: UpdateAnnotationMetaDataOperation.getTypeName(), B_: UpdateAnnotationMetaDataOperation.getBaseTypes() };\r\n    return UpdateAnnotationMetaDataOperation;\r\n}());\r\nexports.UpdateAnnotationMetaDataOperation = UpdateAnnotationMetaDataOperation;\r\nvar UpdateOperation = /** @class */ (function () {\r\n    function UpdateOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(UpdateOperation, this, obj);\r\n    }\r\n    UpdateOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_UpdateOperation';\r\n    };\r\n    UpdateOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of UpdateOperation type or its inheritor and implements {@link IUpdateOperation}\r\n     */\r\n    UpdateOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [UpdateOperation.getTypeName()]);\r\n    };\r\n    UpdateOperation.H_ = { T_: UpdateOperation.getTypeName(), B_: UpdateOperation.getBaseTypes() };\r\n    return UpdateOperation;\r\n}());\r\nexports.UpdateOperation = UpdateOperation;\r\nvar DeleteOperation = /** @class */ (function () {\r\n    function DeleteOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(DeleteOperation, this, obj);\r\n    }\r\n    DeleteOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_DeleteOperation';\r\n    };\r\n    DeleteOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of DeleteOperation type or its inheritor and implements {@link IDeleteOperation}\r\n     */\r\n    DeleteOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [DeleteOperation.getTypeName()]);\r\n    };\r\n    DeleteOperation.H_ = { T_: DeleteOperation.getTypeName(), B_: DeleteOperation.getBaseTypes() };\r\n    return DeleteOperation;\r\n}());\r\nexports.DeleteOperation = DeleteOperation;\r\nvar PurgeOperation = /** @class */ (function () {\r\n    function PurgeOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(PurgeOperation, this, obj);\r\n    }\r\n    PurgeOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_PurgeOperation';\r\n    };\r\n    PurgeOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of PurgeOperation type or its inheritor and implements {@link IPurgeOperation}\r\n     */\r\n    PurgeOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [PurgeOperation.getTypeName()]);\r\n    };\r\n    PurgeOperation.H_ = { T_: PurgeOperation.getTypeName(), B_: PurgeOperation.getBaseTypes() };\r\n    return PurgeOperation;\r\n}());\r\nexports.PurgeOperation = PurgeOperation;\r\nvar FocusOperation = /** @class */ (function () {\r\n    function FocusOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(FocusOperation, this, obj);\r\n    }\r\n    FocusOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_FocusOperation';\r\n    };\r\n    FocusOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of FocusOperation type or its inheritor and implements {@link IFocusOperation}\r\n     */\r\n    FocusOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [FocusOperation.getTypeName()]);\r\n    };\r\n    FocusOperation.H_ = { T_: FocusOperation.getTypeName(), B_: FocusOperation.getBaseTypes() };\r\n    return FocusOperation;\r\n}());\r\nexports.FocusOperation = FocusOperation;\r\nvar VisibilityOperation = /** @class */ (function () {\r\n    function VisibilityOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(VisibilityOperation, this, obj);\r\n    }\r\n    VisibilityOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_VisibilityOperation';\r\n    };\r\n    VisibilityOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of VisibilityOperation type or its inheritor and implements {@link IVisibilityOperation}\r\n     */\r\n    VisibilityOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [VisibilityOperation.getTypeName()]);\r\n    };\r\n    VisibilityOperation.H_ = { T_: VisibilityOperation.getTypeName(), B_: VisibilityOperation.getBaseTypes() };\r\n    return VisibilityOperation;\r\n}());\r\nexports.VisibilityOperation = VisibilityOperation;\r\nvar DeltaUpdateOperation = /** @class */ (function () {\r\n    function DeltaUpdateOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(DeltaUpdateOperation, this, obj);\r\n    }\r\n    DeltaUpdateOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_DeltaUpdateOperation';\r\n    };\r\n    DeltaUpdateOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of DeltaUpdateOperation type or its inheritor and implements {@link IDeltaUpdateOperation}\r\n     */\r\n    DeltaUpdateOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [DeltaUpdateOperation.getTypeName()]);\r\n    };\r\n    DeltaUpdateOperation.H_ = { T_: DeltaUpdateOperation.getTypeName(), B_: DeltaUpdateOperation.getBaseTypes() };\r\n    return DeltaUpdateOperation;\r\n}());\r\nexports.DeltaUpdateOperation = DeltaUpdateOperation;\r\nvar MicroSyncOperation = /** @class */ (function () {\r\n    function MicroSyncOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(MicroSyncOperation, this, obj);\r\n    }\r\n    MicroSyncOperation.getTypeName = function () {\r\n        return 'AugLoop_Core_MicroSyncOperation';\r\n    };\r\n    MicroSyncOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of MicroSyncOperation type or its inheritor and implements {@link IMicroSyncOperation}\r\n     */\r\n    MicroSyncOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [MicroSyncOperation.getTypeName()]);\r\n    };\r\n    MicroSyncOperation.H_ = { T_: MicroSyncOperation.getTypeName(), B_: MicroSyncOperation.getBaseTypes() };\r\n    return MicroSyncOperation;\r\n}());\r\nexports.MicroSyncOperation = MicroSyncOperation;\r\nvar SignalOperation = /** @class */ (function () {\r\n    function SignalOperation(obj) {\r\n        schema_object_g_1.SchemaObject.assign(SignalOperation, this, obj);\r\n    }\r\n    SignalOperation.getTypeName = function () {\r\n        return 'AugLoop_Signals_SignalOperation';\r\n    };\r\n    SignalOperation.getBaseTypes = function () {\r\n        return ['AugLoop_Core_Operation'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of SignalOperation type or its inheritor and implements {@link ISignalOperation}\r\n     */\r\n    SignalOperation.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [SignalOperation.getTypeName()]);\r\n    };\r\n    SignalOperation.H_ = { T_: SignalOperation.getTypeName(), B_: SignalOperation.getBaseTypes() };\r\n    return SignalOperation;\r\n}());\r\nexports.SignalOperation = SignalOperation;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/generated/operations.g.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fschema-object.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SchemaObject = void 0;\r\nvar SchemaObject = /** @class */ (function () {\r\n    function SchemaObject(obj) {\r\n        SchemaObject.assign(SchemaObject, this, obj);\r\n    }\r\n    SchemaObject.getTypeName = function () {\r\n        return 'AugLoop_Core_SchemaObject';\r\n    };\r\n    SchemaObject.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    // Get type name for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getTypeNameFor(new Foo()) === 'Foo'\r\n    SchemaObject.getTypeNameFor = function (obj) {\r\n        return (obj && obj.H_) ? obj.H_.T_ : undefined;\r\n    };\r\n    // Get base types for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getBaseTypesFor(new Foo()) === ['Bar', 'Baz']\r\n    SchemaObject.getBaseTypesFor = function (obj) {\r\n        return (obj && obj.H_ && obj.H_.B_) ? obj.H_.B_ : [];\r\n    };\r\n    // Get all types (direct and base) for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getTypesFor(new Foo()) == ['Foo', 'Bar', 'Baz']\r\n    SchemaObject.getAllTypesFor = function (obj) {\r\n        var typeName = SchemaObject.getTypeNameFor(obj);\r\n        return typeName ? __spreadArray([typeName], SchemaObject.getBaseTypesFor(obj), true) : [];\r\n    };\r\n    // Returns true if the given object has any of the types in the given array,\r\n    // or if that array is undefined or empty.\r\n    SchemaObject.matchesTypesFor = function (obj, types) {\r\n        if (!Array.isArray(types) || types.length === 0) {\r\n            // Nothing passed in means \"match everything\"\r\n            return true;\r\n        }\r\n        var objType = SchemaObject.getTypeNameFor(obj);\r\n        var baseTypes = SchemaObject.getBaseTypesFor(obj);\r\n        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\r\n            var typeName = types_1[_i];\r\n            if (typeName === objType) {\r\n                return true;\r\n            }\r\n            if (baseTypes.indexOf(typeName) >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    SchemaObject.assign = function (ctr, target, source) {\r\n        // Assign source properties to target\r\n        if (source) {\r\n            for (var _i = 0, _a = Object.keys(source); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n        // Cast away readonly to set the header\r\n        target.H_ = ctr.H_;\r\n        // Return target instance\r\n        return target;\r\n    };\r\n    SchemaObject.H_ = { T_: SchemaObject.getTypeName(), B_: SchemaObject.getBaseTypes() };\r\n    return SchemaObject;\r\n}());\r\nexports.SchemaObject = SchemaObject;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vc3JjL2dlbmVyYXRlZC9zY2hlbWEtb2JqZWN0LmcudHM/YjJhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUZBQWlGO0FBQ2pGLG1CQUFtQjtBQUNuQix5REFBeUQ7QUFDekQscUhBQXFIO0FBQ3JILHdGQUF3RjtBQUN4RixvQkFBb0I7QUFDcEIsaUZBQWlGOzs7Ozs7Ozs7Ozs7QUFLakY7SUFFSSxzQkFBbUIsR0FBbUI7UUFDbEMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDYSx3QkFBVyxHQUF6QjtRQUNJLE9BQU8sMkJBQTJCLENBQUM7SUFDdkMsQ0FBQztJQUNhLHlCQUFZLEdBQTFCO1FBQ0ksT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBR0Qsc0RBQXNEO0lBQ3RELFdBQVc7SUFDWCxxREFBcUQ7SUFDdkMsMkJBQWMsR0FBNUIsVUFBNkIsR0FBa0I7UUFDM0MsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkQsQ0FBQztJQUVELHVEQUF1RDtJQUN2RCxXQUFXO0lBQ1gsK0RBQStEO0lBQ2pELDRCQUFlLEdBQTdCLFVBQThCLEdBQWtCO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFFRCx3RUFBd0U7SUFDeEUsV0FBVztJQUNYLGlFQUFpRTtJQUNuRCwyQkFBYyxHQUE1QixVQUE2QixHQUFrQjtRQUMzQyxJQUFNLFFBQVEsR0FBVyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFELE9BQU8sUUFBUSxDQUFDLENBQUMsZ0JBQUUsUUFBUSxHQUFLLFlBQVksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDO0lBRUQsNEVBQTRFO0lBQzVFLDBDQUEwQztJQUM1Qiw0QkFBZSxHQUE3QixVQUE4QixHQUFrQixFQUFFLEtBQWU7UUFDN0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0MsNkNBQTZDO1lBQzdDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELElBQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsS0FBdUIsVUFBSyxFQUFMLGVBQUssRUFBTCxtQkFBSyxFQUFMLElBQUssRUFBRTtZQUF6QixJQUFNLFFBQVE7WUFDZixJQUFJLFFBQVEsS0FBSyxPQUFPLEVBQUU7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFDRCxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNsQyxPQUFPLElBQUksQ0FBQzthQUNmO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRWEsbUJBQU0sR0FBcEIsVUFBcUIsR0FBNkIsRUFBRSxNQUFxQixFQUFFLE1BQXNCO1FBQzdGLHFDQUFxQztRQUNyQyxJQUFJLE1BQU0sRUFBRTtZQUNSLEtBQWtCLFVBQW1CLEVBQW5CLFdBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQW5CLGNBQW1CLEVBQW5CLElBQW1CLEVBQUU7Z0JBQWxDLElBQU0sR0FBRztnQkFDVixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzdCO1NBQ0o7UUFDRCx1Q0FBdUM7UUFDdEMsTUFBcUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNuRix5QkFBeUI7UUFDekIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQXZEc0IsZUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7SUF3RHBHLG1CQUFDO0NBQUE7QUFuRVksb0NBQVkiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGF1Z2xvb3AvdHlwZXMtY29yZS9kaXN0L3NyYy9nZW5lcmF0ZWQvc2NoZW1hLW9iamVjdC5nLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIDxhdXRvLWdlbmVyYXRlZD5cclxuLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIEBhdWdsb29wL2NvZGUtZ2VuIHRvb2wuXHJcbi8vIFNvdXJjZTogaHR0cHM6Ly9kZXYuYXp1cmUuY29tL29mZmljZS9JU1MvX2dpdC9hdWdsb29wLXNlcnZlcj9wYXRoPSUyRm1vZHVsZXMlMkZ0eXBlcy1jb3JlJTJGc3JjJTJGc2NoZW1hLW9iamVjdC50c1xyXG4vLyBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yIGFuZCB3aWxsIGJlIGxvc3QgdXBvbiByZWdlbmVyYXRpb24uXHJcbi8vIDwvYXV0by1nZW5lcmF0ZWQ+XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaW1wb3J0IHsgSVNjaGVtYU9iamVjdCwgU2NoZW1hT2JqZWN0SGVhZGVyIH0gZnJvbSAnLi4vc2NoZW1hLW9iamVjdCc7XHJcbmltcG9ydCB7IElTY2hlbWFPYmplY3RDb25zdHJ1Y3RvciB9IGZyb20gJy4uL3NjaGVtYS1vYmplY3QtY29uc3RydWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNjaGVtYU9iamVjdCBpbXBsZW1lbnRzIElTY2hlbWFPYmplY3Qge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IEhfOiBTY2hlbWFPYmplY3RIZWFkZXI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iob2JqPzogSVNjaGVtYU9iamVjdCkge1xyXG4gICAgICAgIFNjaGVtYU9iamVjdC5hc3NpZ24oU2NoZW1hT2JqZWN0LCB0aGlzLCBvYmopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAnQXVnTG9vcF9Db3JlX1NjaGVtYU9iamVjdCc7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEJhc2VUeXBlcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIXyA9IHsgVF86IFNjaGVtYU9iamVjdC5nZXRUeXBlTmFtZSgpLCBCXzogU2NoZW1hT2JqZWN0LmdldEJhc2VUeXBlcygpIH07XHJcblxyXG4gICAgLy8gR2V0IHR5cGUgbmFtZSBmb3IgdGhlIGdpdmVuIElTY2hlbWFPYmplY3QgaW5zdGFuY2UuXHJcbiAgICAvLyBFeGFtcGxlOlxyXG4gICAgLy8gICBTY2hlbWFPYmplY3QuZ2V0VHlwZU5hbWVGb3IobmV3IEZvbygpKSA9PT0gJ0ZvbydcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VHlwZU5hbWVGb3Iob2JqOiBJU2NoZW1hT2JqZWN0KTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gKG9iaiAmJiBvYmouSF8pID8gb2JqLkhfLlRfIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBiYXNlIHR5cGVzIGZvciB0aGUgZ2l2ZW4gSVNjaGVtYU9iamVjdCBpbnN0YW5jZS5cclxuICAgIC8vIEV4YW1wbGU6XHJcbiAgICAvLyAgIFNjaGVtYU9iamVjdC5nZXRCYXNlVHlwZXNGb3IobmV3IEZvbygpKSA9PT0gWydCYXInLCAnQmF6J11cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QmFzZVR5cGVzRm9yKG9iajogSVNjaGVtYU9iamVjdCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gKG9iaiAmJiBvYmouSF8gJiYgb2JqLkhfLkJfKSA/IG9iai5IXy5CXyA6IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBhbGwgdHlwZXMgKGRpcmVjdCBhbmQgYmFzZSkgZm9yIHRoZSBnaXZlbiBJU2NoZW1hT2JqZWN0IGluc3RhbmNlLlxyXG4gICAgLy8gRXhhbXBsZTpcclxuICAgIC8vICAgU2NoZW1hT2JqZWN0LmdldFR5cGVzRm9yKG5ldyBGb28oKSkgPT0gWydGb28nLCAnQmFyJywgJ0JheiddXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEFsbFR5cGVzRm9yKG9iajogSVNjaGVtYU9iamVjdCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCB0eXBlTmFtZTogc3RyaW5nID0gU2NoZW1hT2JqZWN0LmdldFR5cGVOYW1lRm9yKG9iaik7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVOYW1lID8gW3R5cGVOYW1lLCAuLi5TY2hlbWFPYmplY3QuZ2V0QmFzZVR5cGVzRm9yKG9iaildIDogW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFueSBvZiB0aGUgdHlwZXMgaW4gdGhlIGdpdmVuIGFycmF5LFxyXG4gICAgLy8gb3IgaWYgdGhhdCBhcnJheSBpcyB1bmRlZmluZWQgb3IgZW1wdHkuXHJcbiAgICBwdWJsaWMgc3RhdGljIG1hdGNoZXNUeXBlc0ZvcihvYmo6IElTY2hlbWFPYmplY3QsIHR5cGVzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlcykgfHwgdHlwZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgcGFzc2VkIGluIG1lYW5zIFwibWF0Y2ggZXZlcnl0aGluZ1wiXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvYmpUeXBlID0gU2NoZW1hT2JqZWN0LmdldFR5cGVOYW1lRm9yKG9iaik7XHJcbiAgICAgICAgY29uc3QgYmFzZVR5cGVzID0gU2NoZW1hT2JqZWN0LmdldEJhc2VUeXBlc0ZvcihvYmopO1xyXG4gICAgICAgIGZvciAoY29uc3QgdHlwZU5hbWUgb2YgdHlwZXMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVOYW1lID09PSBvYmpUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYmFzZVR5cGVzLmluZGV4T2YodHlwZU5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzc2lnbihjdHI6IElTY2hlbWFPYmplY3RDb25zdHJ1Y3RvciwgdGFyZ2V0OiBJU2NoZW1hT2JqZWN0LCBzb3VyY2U/OiBJU2NoZW1hT2JqZWN0KSB7XHJcbiAgICAgICAgLy8gQXNzaWduIHNvdXJjZSBwcm9wZXJ0aWVzIHRvIHRhcmdldFxyXG4gICAgICAgIGlmIChzb3VyY2UpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDYXN0IGF3YXkgcmVhZG9ubHkgdG8gc2V0IHRoZSBoZWFkZXJcclxuICAgICAgICAodGFyZ2V0IGFzIHsgLXJlYWRvbmx5IFtLIGluIGtleW9mIElTY2hlbWFPYmplY3RdOiBJU2NoZW1hT2JqZWN0W0tdIH0pLkhfID0gY3RyLkhfO1xyXG4gICAgICAgIC8vIFJldHVybiB0YXJnZXQgaW5zdGFuY2VcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/generated/signals.g.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/generated/signals.g.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fsignals.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Signal = void 0;\r\nvar schema_object_g_1 = __webpack_require__(/*! ./schema-object.g */ \"./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\");\r\nvar Signal = /** @class */ (function () {\r\n    function Signal(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Signal, this, obj);\r\n    }\r\n    Signal.getTypeName = function () {\r\n        return 'AugLoop_Signals_Signal';\r\n    };\r\n    Signal.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Signal type or its inheritor and implements {@link ISignal}\r\n     */\r\n    Signal.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Signal.getTypeName()]);\r\n    };\r\n    Signal.H_ = { T_: Signal.getTypeName(), B_: Signal.getBaseTypes() };\r\n    return Signal;\r\n}());\r\nexports.Signal = Signal;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vc3JjL2dlbmVyYXRlZC9zaWduYWxzLmcudHM/ODhjMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUZBQWlGO0FBQ2pGLG1CQUFtQjtBQUNuQix5REFBeUQ7QUFDekQsK0dBQStHO0FBQy9HLHdGQUF3RjtBQUN4RixvQkFBb0I7QUFDcEIsaUZBQWlGOzs7QUFHakYsaUpBQWlEO0FBR2pEO0lBSUksZ0JBQW1CLEdBQWE7UUFDNUIsOEJBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ2Esa0JBQVcsR0FBekI7UUFDSSxPQUFPLHdCQUF3QixDQUFDO0lBQ3BDLENBQUM7SUFDYSxtQkFBWSxHQUExQjtRQUNJLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ1csZ0JBQVMsR0FBdkIsVUFBd0IsWUFBMkI7UUFDL0MsT0FBTyw4QkFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFOc0IsU0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7SUFPeEYsYUFBQztDQUFBO0FBcEJZLHdCQUFNIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BhdWdsb29wL3R5cGVzLWNvcmUvZGlzdC9zcmMvZ2VuZXJhdGVkL3NpZ25hbHMuZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyA8YXV0by1nZW5lcmF0ZWQ+XHJcbi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBAYXVnbG9vcC9jb2RlLWdlbiB0b29sLlxyXG4vLyBTb3VyY2U6IGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9vZmZpY2UvSVNTL19naXQvYXVnbG9vcC1zZXJ2ZXI/cGF0aD0lMkZtb2R1bGVzJTJGdHlwZXMtY29yZSUyRnNyYyUyRnNpZ25hbHMudHNcclxuLy8gQ2hhbmdlcyB0byB0aGlzIGZpbGUgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvciBhbmQgd2lsbCBiZSBsb3N0IHVwb24gcmVnZW5lcmF0aW9uLlxyXG4vLyA8L2F1dG8tZ2VuZXJhdGVkPlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmltcG9ydCB7IElTaWduYWwgfSBmcm9tICcuLi9zaWduYWxzJztcclxuaW1wb3J0IHsgU2NoZW1hT2JqZWN0IH0gZnJvbSAnLi9zY2hlbWEtb2JqZWN0LmcnO1xyXG5pbXBvcnQgeyBJU2NoZW1hT2JqZWN0LCBTY2hlbWFPYmplY3RIZWFkZXIgfSBmcm9tICcuLi9zY2hlbWEtb2JqZWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaWduYWwgaW1wbGVtZW50cyBJU2lnbmFsIHtcclxuICAgIHB1YmxpYyB0YXJnZXRPYmplY3Q/OiBJU2NoZW1hT2JqZWN0O1xyXG4gICAgcHVibGljIHRpbWVzdGFtcD86IG51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBIXzogU2NoZW1hT2JqZWN0SGVhZGVyO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG9iaj86IElTaWduYWwpIHtcclxuICAgICAgICBTY2hlbWFPYmplY3QuYXNzaWduKFNpZ25hbCwgdGhpcywgb2JqKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ0F1Z0xvb3BfU2lnbmFsc19TaWduYWwnO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRCYXNlVHlwZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSF8gPSB7IFRfOiBTaWduYWwuZ2V0VHlwZU5hbWUoKSwgQl86IFNpZ25hbC5nZXRCYXNlVHlwZXMoKSB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgcGFzc2VkIHNjaGVtYSBvYmplY3QgaXMgb2YgU2lnbmFsIHR5cGUgb3IgaXRzIGluaGVyaXRvciBhbmQgaW1wbGVtZW50cyB7QGxpbmsgSVNpZ25hbH1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0eXBlR3VhcmQoc2NoZW1hT2JqZWN0OiBJU2NoZW1hT2JqZWN0KTogc2NoZW1hT2JqZWN0IGlzIElTaWduYWwge1xyXG4gICAgICAgIHJldHVybiBTY2hlbWFPYmplY3QubWF0Y2hlc1R5cGVzRm9yKHNjaGVtYU9iamVjdCwgW1NpZ25hbC5nZXRUeXBlTmFtZSgpXSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/generated/signals.g.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/generated/tiles.g.js":
/*!************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/generated/tiles.g.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Ftiles.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TenantContextHolder = exports.UserContextHolder = exports.ContextHolder = exports.DynamicContext = exports.GridNeighborhoodContext = exports.GridCell = exports.SubDocument = exports.Document = exports.Session = exports.TileGroup = exports.Binary = exports.Blob = void 0;\r\nvar schema_object_g_1 = __webpack_require__(/*! ./schema-object.g */ \"./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\");\r\nvar Blob = /** @class */ (function () {\r\n    function Blob(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Blob, this, obj);\r\n    }\r\n    Blob.getTypeName = function () {\r\n        return 'AugLoop_Core_Blob';\r\n    };\r\n    Blob.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Blob type or its inheritor and implements {@link IBlob}\r\n     */\r\n    Blob.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Blob.getTypeName()]);\r\n    };\r\n    Blob.H_ = { T_: Blob.getTypeName(), B_: Blob.getBaseTypes() };\r\n    return Blob;\r\n}());\r\nexports.Blob = Blob;\r\nvar Binary = /** @class */ (function () {\r\n    function Binary(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Binary, this, obj);\r\n    }\r\n    Binary.getTypeName = function () {\r\n        return 'AugLoop_Core_Binary';\r\n    };\r\n    Binary.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Binary type or its inheritor and implements {@link IBinary}\r\n     */\r\n    Binary.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Binary.getTypeName()]);\r\n    };\r\n    Binary.H_ = { T_: Binary.getTypeName(), B_: Binary.getBaseTypes() };\r\n    return Binary;\r\n}());\r\nexports.Binary = Binary;\r\nvar TileGroup = /** @class */ (function () {\r\n    function TileGroup(obj) {\r\n        schema_object_g_1.SchemaObject.assign(TileGroup, this, obj);\r\n    }\r\n    TileGroup.getTypeName = function () {\r\n        return 'AugLoop_Core_TileGroup';\r\n    };\r\n    TileGroup.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of TileGroup type or its inheritor and implements {@link ITileGroup}\r\n     */\r\n    TileGroup.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [TileGroup.getTypeName()]);\r\n    };\r\n    TileGroup.H_ = { T_: TileGroup.getTypeName(), B_: TileGroup.getBaseTypes() };\r\n    return TileGroup;\r\n}());\r\nexports.TileGroup = TileGroup;\r\nvar Session = /** @class */ (function () {\r\n    function Session(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Session, this, obj);\r\n    }\r\n    Session.getTypeName = function () {\r\n        return 'AugLoop_Core_Session';\r\n    };\r\n    Session.getBaseTypes = function () {\r\n        return ['AugLoop_Core_TileGroup'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Session type or its inheritor and implements {@link ISession}\r\n     */\r\n    Session.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Session.getTypeName()]);\r\n    };\r\n    Session.H_ = { T_: Session.getTypeName(), B_: Session.getBaseTypes() };\r\n    return Session;\r\n}());\r\nexports.Session = Session;\r\nvar Document = /** @class */ (function () {\r\n    function Document(obj) {\r\n        schema_object_g_1.SchemaObject.assign(Document, this, obj);\r\n    }\r\n    Document.getTypeName = function () {\r\n        return 'AugLoop_Core_Document';\r\n    };\r\n    Document.getBaseTypes = function () {\r\n        return ['AugLoop_Core_TileGroup'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of Document type or its inheritor and implements {@link IDocument}\r\n     */\r\n    Document.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [Document.getTypeName()]);\r\n    };\r\n    Document.H_ = { T_: Document.getTypeName(), B_: Document.getBaseTypes() };\r\n    return Document;\r\n}());\r\nexports.Document = Document;\r\nvar SubDocument = /** @class */ (function () {\r\n    function SubDocument(obj) {\r\n        schema_object_g_1.SchemaObject.assign(SubDocument, this, obj);\r\n    }\r\n    SubDocument.getTypeName = function () {\r\n        return 'AugLoop_Core_SubDocument';\r\n    };\r\n    SubDocument.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of SubDocument type or its inheritor and implements {@link ISubDocument}\r\n     */\r\n    SubDocument.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [SubDocument.getTypeName()]);\r\n    };\r\n    SubDocument.H_ = { T_: SubDocument.getTypeName(), B_: SubDocument.getBaseTypes() };\r\n    return SubDocument;\r\n}());\r\nexports.SubDocument = SubDocument;\r\nvar GridCell = /** @class */ (function () {\r\n    function GridCell(obj) {\r\n        schema_object_g_1.SchemaObject.assign(GridCell, this, obj);\r\n    }\r\n    GridCell.getTypeName = function () {\r\n        return 'AugLoop_Core_GridCell';\r\n    };\r\n    GridCell.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of GridCell type or its inheritor and implements {@link IGridCell}\r\n     */\r\n    GridCell.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [GridCell.getTypeName()]);\r\n    };\r\n    GridCell.H_ = { T_: GridCell.getTypeName(), B_: GridCell.getBaseTypes() };\r\n    return GridCell;\r\n}());\r\nexports.GridCell = GridCell;\r\nvar GridNeighborhoodContext = /** @class */ (function () {\r\n    function GridNeighborhoodContext(obj) {\r\n        schema_object_g_1.SchemaObject.assign(GridNeighborhoodContext, this, obj);\r\n    }\r\n    GridNeighborhoodContext.getTypeName = function () {\r\n        return 'AugLoop_Core_GridNeighborhoodContext';\r\n    };\r\n    GridNeighborhoodContext.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of GridNeighborhoodContext type or its inheritor and implements {@link IGridNeighborhoodContext}\r\n     */\r\n    GridNeighborhoodContext.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [GridNeighborhoodContext.getTypeName()]);\r\n    };\r\n    GridNeighborhoodContext.H_ = { T_: GridNeighborhoodContext.getTypeName(), B_: GridNeighborhoodContext.getBaseTypes() };\r\n    return GridNeighborhoodContext;\r\n}());\r\nexports.GridNeighborhoodContext = GridNeighborhoodContext;\r\nvar DynamicContext = /** @class */ (function () {\r\n    function DynamicContext(obj) {\r\n        schema_object_g_1.SchemaObject.assign(DynamicContext, this, obj);\r\n    }\r\n    DynamicContext.getTypeName = function () {\r\n        return 'AugLoop_Core_DynamicContext';\r\n    };\r\n    DynamicContext.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of DynamicContext type or its inheritor and implements {@link IDynamicContext}\r\n     */\r\n    DynamicContext.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [DynamicContext.getTypeName()]);\r\n    };\r\n    DynamicContext.H_ = { T_: DynamicContext.getTypeName(), B_: DynamicContext.getBaseTypes() };\r\n    return DynamicContext;\r\n}());\r\nexports.DynamicContext = DynamicContext;\r\nvar ContextHolder = /** @class */ (function () {\r\n    function ContextHolder(obj) {\r\n        schema_object_g_1.SchemaObject.assign(ContextHolder, this, obj);\r\n    }\r\n    ContextHolder.getTypeName = function () {\r\n        return 'AugLoop_Core_ContextHolder';\r\n    };\r\n    ContextHolder.getBaseTypes = function () {\r\n        return [];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of ContextHolder type or its inheritor and implements {@link IContextHolder}\r\n     */\r\n    ContextHolder.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [ContextHolder.getTypeName()]);\r\n    };\r\n    ContextHolder.H_ = { T_: ContextHolder.getTypeName(), B_: ContextHolder.getBaseTypes() };\r\n    return ContextHolder;\r\n}());\r\nexports.ContextHolder = ContextHolder;\r\nvar UserContextHolder = /** @class */ (function () {\r\n    function UserContextHolder(obj) {\r\n        schema_object_g_1.SchemaObject.assign(UserContextHolder, this, obj);\r\n    }\r\n    UserContextHolder.getTypeName = function () {\r\n        return 'AugLoop_Core_UserContextHolder';\r\n    };\r\n    UserContextHolder.getBaseTypes = function () {\r\n        return ['AugLoop_Core_ContextHolder'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of UserContextHolder type or its inheritor and implements {@link IUserContextHolder}\r\n     */\r\n    UserContextHolder.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [UserContextHolder.getTypeName()]);\r\n    };\r\n    UserContextHolder.H_ = { T_: UserContextHolder.getTypeName(), B_: UserContextHolder.getBaseTypes() };\r\n    return UserContextHolder;\r\n}());\r\nexports.UserContextHolder = UserContextHolder;\r\nvar TenantContextHolder = /** @class */ (function () {\r\n    function TenantContextHolder(obj) {\r\n        schema_object_g_1.SchemaObject.assign(TenantContextHolder, this, obj);\r\n    }\r\n    TenantContextHolder.getTypeName = function () {\r\n        return 'AugLoop_Core_TenantContextHolder';\r\n    };\r\n    TenantContextHolder.getBaseTypes = function () {\r\n        return ['AugLoop_Core_ContextHolder'];\r\n    };\r\n    /**\r\n     * Checks if passed schema object is of TenantContextHolder type or its inheritor and implements {@link ITenantContextHolder}\r\n     */\r\n    TenantContextHolder.typeGuard = function (schemaObject) {\r\n        return schema_object_g_1.SchemaObject.matchesTypesFor(schemaObject, [TenantContextHolder.getTypeName()]);\r\n    };\r\n    TenantContextHolder.H_ = { T_: TenantContextHolder.getTypeName(), B_: TenantContextHolder.getBaseTypes() };\r\n    return TenantContextHolder;\r\n}());\r\nexports.TenantContextHolder = TenantContextHolder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/generated/tiles.g.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ItemChanges = exports.ItemOperation = void 0;\r\n__exportStar(__webpack_require__(/*! ./annotations */ \"./node_modules/@augloop/types-core/dist/src/annotations.js\"), exports);\r\nvar operations_1 = __webpack_require__(/*! ./operations */ \"./node_modules/@augloop/types-core/dist/src/operations.js\");\r\nObject.defineProperty(exports, \"ItemOperation\", { enumerable: true, get: function () { return operations_1.ItemOperation; } });\r\nObject.defineProperty(exports, \"ItemChanges\", { enumerable: true, get: function () { return operations_1.ItemChanges; } });\r\n__exportStar(__webpack_require__(/*! ./schema-object-constructor */ \"./node_modules/@augloop/types-core/dist/src/schema-object-constructor.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./signals */ \"./node_modules/@augloop/types-core/dist/src/signals.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./tiles */ \"./node_modules/@augloop/types-core/dist/src/tiles.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./generated/annotations.g */ \"./node_modules/@augloop/types-core/dist/src/generated/annotations.g.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./generated/operations.g */ \"./node_modules/@augloop/types-core/dist/src/generated/operations.g.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./generated/schema-object.g */ \"./node_modules/@augloop/types-core/dist/src/generated/schema-object.g.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./generated/signals.g */ \"./node_modules/@augloop/types-core/dist/src/generated/signals.g.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./generated/tiles.g */ \"./node_modules/@augloop/types-core/dist/src/generated/tiles.g.js\"), exports);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vc3JjL2luZGV4LnRzPzBlM2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDhIQUE4QjtBQUM5Qix3SEFBOFg7QUFBcEUsd0hBQWE7QUFBcUIsb0hBQVc7QUFFdlcsMEpBQTRDO0FBQzVDLHNIQUEwQjtBQUMxQixrSEFBd0I7QUFDeEIsc0pBQTBDO0FBQzFDLG9KQUF5QztBQUN6QywwSkFBNEM7QUFDNUMsOElBQXNDO0FBQ3RDLDBJQUFvQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYXVnbG9vcC90eXBlcy1jb3JlL2Rpc3Qvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hbm5vdGF0aW9ucyc7XHJcbmV4cG9ydCB7IEl0ZW1QYXRoS2V5LCBPcGVyYXRpb25UeXBlLCBJQWRkT3BlcmF0aW9uLCBJRGVsZXRlT3BlcmF0aW9uLCBJRm9jdXNPcGVyYXRpb24sIElNb3ZlT3BlcmF0aW9uLCBJT3BlcmF0aW9uLCBJT3BlcmF0aW9uV2l0aFNpYmxpbmdDb250ZXh0LCBJUHVyZ2VPcGVyYXRpb24sIElVcGRhdGVBbm5vdGF0aW9uTWV0YURhdGFPcGVyYXRpb24sIElVcGRhdGVPcGVyYXRpb24sIElWaXNpYmlsaXR5T3BlcmF0aW9uLCBJU2lnbmFsT3BlcmF0aW9uLCBJdGVtLCBJdGVtUGF0aCwgSXRlbVdpdGhQYXRoLCBJSXRlbVJlZmVyZW5jZSwgSUl0ZW1EZWx0YSwgSXRlbU9wZXJhdGlvbiwgSUl0ZW1DaGFuZ2VzRGVsdGEsIEl0ZW1DaGFuZ2VzIH0gZnJvbSAnLi9vcGVyYXRpb25zJztcclxuZXhwb3J0IHsgSVNjaGVtYU9iamVjdCwgU2NoZW1hT2JqZWN0SGVhZGVyIH0gZnJvbSAnLi9zY2hlbWEtb2JqZWN0JztcclxuZXhwb3J0ICogZnJvbSAnLi9zY2hlbWEtb2JqZWN0LWNvbnN0cnVjdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9zaWduYWxzJztcclxuZXhwb3J0ICogZnJvbSAnLi90aWxlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZ2VuZXJhdGVkL2Fubm90YXRpb25zLmcnO1xyXG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlZC9vcGVyYXRpb25zLmcnO1xyXG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlZC9zY2hlbWEtb2JqZWN0LmcnO1xyXG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlZC9zaWduYWxzLmcnO1xyXG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlZC90aWxlcy5nJztcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/index.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/operations.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/operations.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ItemChanges = exports.ItemOperation = void 0;\r\nvar ItemOperation;\r\n(function (ItemOperation) {\r\n    ItemOperation[ItemOperation[\"None\"] = 0] = \"None\";\r\n    ItemOperation[ItemOperation[\"Added\"] = 1] = \"Added\";\r\n    ItemOperation[ItemOperation[\"Updated\"] = 2] = \"Updated\";\r\n    ItemOperation[ItemOperation[\"Deleted\"] = 3] = \"Deleted\";\r\n})(ItemOperation = exports.ItemOperation || (exports.ItemOperation = {}));\r\n/**\r\n * Types of changes for tiles.\r\n * What each change means depends on specific scenario.\r\n */\r\nvar ItemChanges;\r\n(function (ItemChanges) {\r\n    /**\r\n     * TextTile: Content of tile has changed.\r\n     */\r\n    ItemChanges[ItemChanges[\"ContentChanged\"] = 0] = \"ContentChanged\";\r\n    /**\r\n     * TextTile: Content was previously empty (null, undefined, only white spaces).\r\n     */\r\n    ItemChanges[ItemChanges[\"ContentWasEmpty\"] = 1] = \"ContentWasEmpty\";\r\n    /**\r\n     * FormattedTextTile: Formatting has changed.\r\n     */\r\n    ItemChanges[ItemChanges[\"FormattingChanged\"] = 2] = \"FormattingChanged\";\r\n})(ItemChanges = exports.ItemChanges || (exports.ItemChanges = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/operations.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/schema-object-constructor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/schema-object-constructor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYXVnbG9vcC90eXBlcy1jb3JlL2Rpc3Qvc3JjL3NjaGVtYS1vYmplY3QtY29uc3RydWN0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/schema-object-constructor.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/signals.js":
/*!**************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/signals.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3NpZ25hbHMudHM/YjE5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUciLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGF1Z2xvb3AvdHlwZXMtY29yZS9kaXN0L3NyYy9zaWduYWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBjb3B5cmlnaHQgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IElTY2hlbWFPYmplY3QgfSBmcm9tICcuL3NjaGVtYS1vYmplY3QnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGludGVyZmFjZSBvZiBhbGwgc2lnbmFscy5cclxuICogQHJlbWFya3MgU2lnbmFscyBhcmUgdXNlZCB0byBjYXB0dXJlIHVzZXIgYW5kIHN5c3RlbSBhY3Rpb25zIGluIHRoZSBzZXNzaW9uXHJcbiAqIGFuZCBidWlsZCBsb2dpYyBvbiB0b3Agb2YgdGhhdCBmb3IgYXV0b21hdGljIHRyaWdnZXJpbmcgYW5kIHJlY29tbWVuZGF0aW9uc1xyXG4gKiBAZXh0ZW5kcyBJU2NoZW1hT2JqZWN0XHJcbiAqIEB0eXBlcHJlZml4IEF1Z0xvb3BfU2lnbmFsc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU2lnbmFsIGV4dGVuZHMgSVNjaGVtYU9iamVjdCB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBvYmplY3QgdGhpcyBzaWduYWwgaXMgdGFyZ2V0aW5nLiBJdCBjYW4gYmUgYSBkb2N1bWVudCwgdGlsZSwgb3IgYW4gYW5ub3RhdGlvbi5cclxuICAgICAqIEByZW1hcmtzIFdoZW4gYG51bGxgLCB0aGUgc2lnbmFsIGlzIGEgZ2VuZXJpYyBzaWduYWwgaW4gdGhlIHNlc3Npb24uXHJcbiAgICAgKi9cclxuICAgIHRhcmdldE9iamVjdD86IElTY2hlbWFPYmplY3Q7IC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIGEgc2NoZW1hIG9iamVjdCByZWZlcmVuY2VcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0aW1lIG9mIHNpZ25hbCBjcmVhdGlvbi5cclxuICAgICAqL1xyXG4gICAgdGltZXN0YW1wPzogbnVtYmVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/signals.js\n");

/***/ }),

/***/ "./node_modules/@augloop/types-core/dist/src/tiles.js":
/*!************************************************************!*\
  !*** ./node_modules/@augloop/types-core/dist/src/tiles.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridConstants = exports.OpenType = exports.BlobRefType = void 0;\r\n// Binary\r\n// Below types are allowing us to send one or more binary contents contained in other schema objects\r\n// Will be sent more efficiently over the network\r\nvar BlobRefType;\r\n(function (BlobRefType) {\r\n    // If this is set then there is no way to get the binary data\r\n    BlobRefType[BlobRefType[\"None\"] = 0] = \"None\";\r\n    // When this is set value is URL we can simply call HTTPS GET to fetch binary data. This URL must be on the AL service allow-list.\r\n    BlobRefType[BlobRefType[\"HttpsGetDownloadUrl\"] = 1] = \"HttpsGetDownloadUrl\";\r\n    // When this is set value is a blob coded location that can be used to retrieve the data from the Azure Blob Storage.\r\n    // It is only valid for one pair of session key and userId.\r\n    BlobRefType[BlobRefType[\"AlCodedLocation\"] = 2] = \"AlCodedLocation\";\r\n})(BlobRefType = exports.BlobRefType || (exports.BlobRefType = {}));\r\n// Document Open Type\r\n// Represents the method with which the document was opened at the client\r\nvar OpenType;\r\n(function (OpenType) {\r\n    // the document was newly created\r\n    OpenType[OpenType[\"NewDocument\"] = 0] = \"NewDocument\";\r\n    // an old document opened for editing\r\n    OpenType[OpenType[\"EditDocument\"] = 1] = \"EditDocument\";\r\n    // document to be viewed\r\n    OpenType[OpenType[\"ViewOnlyDocument\"] = 2] = \"ViewOnlyDocument\";\r\n})(OpenType = exports.OpenType || (exports.OpenType = {}));\r\nvar GridConstants = /** @class */ (function () {\r\n    function GridConstants() {\r\n    }\r\n    GridConstants.lowerIndexBound = 1;\r\n    GridConstants.maxNumberOfRows = 1048576;\r\n    GridConstants.maxNumberOfColumns = 16384;\r\n    GridConstants.firstColumnName = 'A';\r\n    GridConstants.lastColumnName = 'XFD';\r\n    return GridConstants;\r\n}());\r\nexports.GridConstants = GridConstants;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3RpbGVzLnRzPzkyZjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBUztBQUNULG9HQUFvRztBQUNwRyxpREFBaUQ7QUFDakQsSUFBWSxXQVFYO0FBUkQsV0FBWSxXQUFXO0lBQ25CLDZEQUE2RDtJQUM3RCw2Q0FBUTtJQUNSLGtJQUFrSTtJQUNsSSwyRUFBbUI7SUFDbkIscUhBQXFIO0lBQ3JILDJEQUEyRDtJQUMzRCxtRUFBZTtBQUNuQixDQUFDLEVBUlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFRdEI7QUE4Q0QscUJBQXFCO0FBQ3JCLHlFQUF5RTtBQUN6RSxJQUFZLFFBT1g7QUFQRCxXQUFZLFFBQVE7SUFDaEIsaUNBQWlDO0lBQ2pDLHFEQUFlO0lBQ2YscUNBQXFDO0lBQ3JDLHVEQUFnQjtJQUNoQix3QkFBd0I7SUFDeEIsK0RBQW9CO0FBQ3hCLENBQUMsRUFQVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQU9uQjtBQXFCRDtJQUFBO0lBTUEsQ0FBQztJQUxtQiw2QkFBZSxHQUFHLENBQUMsQ0FBQztJQUNwQiw2QkFBZSxHQUFHLE9BQU8sQ0FBQztJQUMxQixnQ0FBa0IsR0FBRyxLQUFLLENBQUM7SUFDM0IsNkJBQWUsR0FBRyxHQUFHLENBQUM7SUFDdEIsNEJBQWMsR0FBRyxLQUFLLENBQUM7SUFDM0Msb0JBQUM7Q0FBQTtBQU5ZLHNDQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BhdWdsb29wL3R5cGVzLWNvcmUvZGlzdC9zcmMvdGlsZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2NoZW1hT2JqZWN0IH0gZnJvbSAnLi9zY2hlbWEtb2JqZWN0JztcclxuXHJcbi8vIEJpbmFyeVxyXG4vLyBCZWxvdyB0eXBlcyBhcmUgYWxsb3dpbmcgdXMgdG8gc2VuZCBvbmUgb3IgbW9yZSBiaW5hcnkgY29udGVudHMgY29udGFpbmVkIGluIG90aGVyIHNjaGVtYSBvYmplY3RzXHJcbi8vIFdpbGwgYmUgc2VudCBtb3JlIGVmZmljaWVudGx5IG92ZXIgdGhlIG5ldHdvcmtcclxuZXhwb3J0IGVudW0gQmxvYlJlZlR5cGUge1xyXG4gICAgLy8gSWYgdGhpcyBpcyBzZXQgdGhlbiB0aGVyZSBpcyBubyB3YXkgdG8gZ2V0IHRoZSBiaW5hcnkgZGF0YVxyXG4gICAgTm9uZSA9IDAsXHJcbiAgICAvLyBXaGVuIHRoaXMgaXMgc2V0IHZhbHVlIGlzIFVSTCB3ZSBjYW4gc2ltcGx5IGNhbGwgSFRUUFMgR0VUIHRvIGZldGNoIGJpbmFyeSBkYXRhLiBUaGlzIFVSTCBtdXN0IGJlIG9uIHRoZSBBTCBzZXJ2aWNlIGFsbG93LWxpc3QuXHJcbiAgICBIdHRwc0dldERvd25sb2FkVXJsLFxyXG4gICAgLy8gV2hlbiB0aGlzIGlzIHNldCB2YWx1ZSBpcyBhIGJsb2IgY29kZWQgbG9jYXRpb24gdGhhdCBjYW4gYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgZGF0YSBmcm9tIHRoZSBBenVyZSBCbG9iIFN0b3JhZ2UuXHJcbiAgICAvLyBJdCBpcyBvbmx5IHZhbGlkIGZvciBvbmUgcGFpciBvZiBzZXNzaW9uIGtleSBhbmQgdXNlcklkLlxyXG4gICAgQWxDb2RlZExvY2F0aW9uXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJsb2JSZWYge1xyXG4gICAgcmVhZG9ubHkgcmVmVHlwZTogQmxvYlJlZlR5cGU7XHJcbiAgICByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElCbG9iIGV4dGVuZHMgSVNjaGVtYU9iamVjdCB7XHJcbiAgICAvLyBVbmlxdWUgSWQgc2V0IGZvciB0aGUgY29udGVudCB3aGVuIHVwbG9hZGluZyBpdC4gVGhpcyBpcyBzZXQgYnkgY2xpZW50IGFuZCBtdXN0IGJlIHVuaXF1ZSBmb3IgdGhlIHdob2xlIHNlc3Npb24uXHJcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xyXG5cclxuICAgIC8vIFNpemUgb2YgZGF0YSBpbiBieXRlc1xyXG4gICAgcmVhZG9ubHkgc2l6ZUJ5dGVzOiBudW1iZXI7XHJcblxyXG4gICAgLy8gQWN0dWFsIGRhdGEgb3IgQUwgaW50ZXJuYWwgSWQgdXNlZCBmb3IgZmV0Y2hpbmcgZGF0YS4gT3B0aW9uYWwgaWYgZGF0YSBpcyBub3QgZGVsaXZlcmVkIGF0IHRoaXMgcG9pbnQgaW4gdGltZS5cclxuICAgIC8vIElmIGl0IGlzIGludGVybmFsIElkIGl0IGlzIGNyZWF0ZWQgYW5kIG1haW50YWluZWQgYnkgQUwuXHJcbiAgICByZWFkb25seSBkYXRhPzogVWludDhBcnJheTtcclxuXHJcbiAgICAvLyBSZWZlcmVuY2UgdG8gZGF0YS4gT3B0aW9uYWwgaWYgZGF0YS9yZWZlcmVuY2UgaXMgbm90IGRlbGl2ZXJlZCBhdCB0aGlzIHBvaW50IGluIHRpbWUuXHJcbiAgICByZWFkb25seSBkYXRhUG9pbnRlcj86IElCbG9iUmVmO1xyXG59XHJcblxyXG4vLyBCaW5hcnlcclxuLy8gVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBzY2hlbWEgb2JqZWN0cyB0aGF0IGhhdmUgbGFyZ2UgYmluYXJ5IHBvcnRpb25zXHJcbi8vIFdpbGwgYmUgc2VudCBtb3JlIGVmZmljaWVudGx5IG92ZXIgdGhlIG5ldHdvcmtcclxuZXhwb3J0IGludGVyZmFjZSBJQmluYXJ5IGV4dGVuZHMgSVNjaGVtYU9iamVjdCB7XHJcbiAgICBkYXRhPzogVWludDhBcnJheTtcclxufVxyXG5cclxuLy8gVGlsZUdyb3VwXHJcbi8vIFJlcHJlc2VudHMgYSBncm91cCBvZiB0aWxlcy4gVGhpcyBjYW4gYmUgdXNlZCBieSBob3N0cyB0b1xyXG4vLyBwcm92aWRlIGFueSBhcmJpdHJhcnkgZ3JvdXBpbmcgb2YgdGlsZXMgYXQgYW55IGxldmVsLlxyXG5leHBvcnQgaW50ZXJmYWNlIElUaWxlR3JvdXAgZXh0ZW5kcyBJU2NoZW1hT2JqZWN0IHsgfVxyXG5cclxuLy8gU2Vzc2lvblxyXG4vLyBSZXByZXNlbnRzIGEgdXNlciBzZXNzaW9uLiBBIHVzZXIgc2Vzc2lvbiBjYW4gaGF2ZSBtb3JlIHRoYW4gb25lIGRvY3VtZW50LlxyXG4vLyBJdCBpcyB0aGUgcm9vdCBvZiB0aGUgd2hvbGUgY29udGVudCB0cmVlXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNlc3Npb24gZXh0ZW5kcyBJVGlsZUdyb3VwIHtcclxuICAgIC8vIFRoZSBjdXJyZW50IGFjdGl2ZSB1c2VyIElEXHJcbiAgICByZWFkb25seSBhY3RpdmVVc2VySWQ6IHN0cmluZztcclxuXHJcbiAgICAvLyBEUElzIG9mIGNsaWVudCBzY3JlZW5cclxuICAgIHJlYWRvbmx5IHdpZHRoRHBpPzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaGVpZ2h0RHBpPzogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBEb2N1bWVudCBPcGVuIFR5cGVcclxuLy8gUmVwcmVzZW50cyB0aGUgbWV0aG9kIHdpdGggd2hpY2ggdGhlIGRvY3VtZW50IHdhcyBvcGVuZWQgYXQgdGhlIGNsaWVudFxyXG5leHBvcnQgZW51bSBPcGVuVHlwZSB7XHJcbiAgICAvLyB0aGUgZG9jdW1lbnQgd2FzIG5ld2x5IGNyZWF0ZWRcclxuICAgIE5ld0RvY3VtZW50ID0gMCxcclxuICAgIC8vIGFuIG9sZCBkb2N1bWVudCBvcGVuZWQgZm9yIGVkaXRpbmdcclxuICAgIEVkaXREb2N1bWVudCA9IDEsXHJcbiAgICAvLyBkb2N1bWVudCB0byBiZSB2aWV3ZWRcclxuICAgIFZpZXdPbmx5RG9jdW1lbnQgPSAyXHJcbn1cclxuXHJcbi8vIERvY3VtZW50XHJcbi8vIFJlcHJlc2VudHMgYSBkb2N1bWVudCBub2RlXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURvY3VtZW50IGV4dGVuZHMgSVRpbGVHcm91cCB7XHJcbiAgICAvLyB3aGV0aGVyIHRoZSBkb2N1bWVudCBpcyByZWFkb25seSBvciBub3RcclxuICAgIHJlYWRvbmx5IGlzUmVhZG9ubHk6IGJvb2xlYW47XHJcblxyXG4gICAgLy8gZG9jdW1lbnQgdGl0bGVcclxuICAgIHJlYWRvbmx5IHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAgIC8vIGRvY3VtZW50IHVybFxyXG4gICAgcmVhZG9ubHkgdXJsPzogc3RyaW5nO1xyXG5cclxuICAgIC8vIGRldGVybWluZXMgdGhlIE9wZW5UeXBlIG9mIHRoZSBkb2N1bWVudFxyXG4gICAgcmVhZG9ubHkgb3BlblR5cGU/OiBPcGVuVHlwZTtcclxufVxyXG5cclxuLy8gUmVwcmVzZW50cyBhbiBpbnRlcmZhY2UgZm9yIHN1Yi1kb2N1bWVudCBub2Rlc1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdWJEb2N1bWVudCBleHRlbmRzIElTY2hlbWFPYmplY3Qge31cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkQ29uc3RhbnRzIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBsb3dlckluZGV4Qm91bmQgPSAxO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IG1heE51bWJlck9mUm93cyA9IDEwNDg1NzY7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgbWF4TnVtYmVyT2ZDb2x1bW5zID0gMTYzODQ7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZmlyc3RDb2x1bW5OYW1lID0gJ0EnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGxhc3RDb2x1bW5OYW1lID0gJ1hGRCc7XHJcbn1cclxuXHJcbi8vIFJlcHJlc2VudHMgYW55IGNlbGwgd2l0aGluIGEgdGFibGUuIFRoaXMgY2FuIGJlIHVzZWQgYnkgYm90aCBXb3JkIGFuZCBFeGNlbCB0YWJsZXMuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRDZWxsIGV4dGVuZHMgSVNjaGVtYU9iamVjdCB7XHJcbiAgICAvLyBUaGUgY29sdW1uIG51bWJlciBvZiB0aGlzIGNlbGxcclxuICAgIHJlYWRvbmx5IGNvbHVtbjogbnVtYmVyO1xyXG5cclxuICAgIC8vIFRoZSByb3cgbnVtYmVyIG9mIHRoaXMgY2VsbFxyXG4gICAgcmVhZG9ubHkgcm93OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIFJlcHJlc2VudHMgdGhlIGNvbnRleHQgb2YgdGhlIGdyaWQgbmVpZ2hib3Job29kIGZvciB3aGVuIGEgZ3JpZCBpcyBwYXNzZWQgdG9cclxuLy8gZXhlY3V0ZSB3b3JrZmxvdyBhcyBhbiBhcnJheS4gVXNlZCBieSB0aGUgd29ya2Zsb3cgdG8gcmVjb25zdHJ1Y3QgdGhlIG5laWdoYm9yaG9vZFxyXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkTmVpZ2hib3Job29kQ29udGV4dCBleHRlbmRzIElTY2hlbWFPYmplY3Qge1xyXG4gICAgLy8gVGhlIHdpZHRoIG9mIHRoZSBuZWlnaGJvcmhvb2RcclxuICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XHJcblxyXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgbmVpZ2hib3Job29kXHJcbiAgICByZWFkb25seSBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICAvLyBUaGUgd2lkdGggb2YgdGhlIHJldHJpZXZlZCBwYXJ0IG9mIG5laWdoYm9yaG9vZFxyXG4gICAgcmVhZG9ubHkgcmV0cmlldmVkV2lkdGg6IG51bWJlcjtcclxuXHJcbiAgICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSByZXRyaWV2ZWQgcGFydCBvZiBuZWlnaGJvcmhvb2RcclxuICAgIHJlYWRvbmx5IHJldHJpZXZlZEhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIC8vIFRoZSByb3cgb2YgdGhlIGNlbGwgYXQgdGhlIHRvcCBsZWZ0IG9mIHRoZSBuZWlnaGJvcmhvb2RcclxuICAgIHJlYWRvbmx5IG5laWdoYm9yaG9vZFRvcFJvdzogbnVtYmVyO1xyXG5cclxuICAgIC8vIFRoZSBjb2x1bW4gb2YgdGhlIGNlbGwgYXQgdGhlIHRvcCBsZWZ0IG9mIHRoZSBuZWlnaGJvcmhvb2RcclxuICAgIHJlYWRvbmx5IG5laWdoYm9yaG9vZExlZnRDb2x1bW46IG51bWJlcjtcclxuXHJcbiAgICAvLyBUaGUgcm93IG9mIHRoZSBjZWxsIGF0IHRoZSB0b3AgbGVmdCBvZiB0aGUgZ3JpZCBpbnNpZGUgdGhlIG5laWdoYm9yaG9vZFxyXG4gICAgcmVhZG9ubHkgdGFyZ2V0R3JpZFRvcFJvdzogbnVtYmVyO1xyXG5cclxuICAgIC8vIFRoZSBjb2x1bW4gb2YgdGhlIGNlbGwgYXQgdGhlIHRvcCBsZWZ0IG9mIHRoZSBncmlkIGluc2lkZSB0aGUgbmVpZ2hib3Job29kXHJcbiAgICByZWFkb25seSB0YXJnZXRHcmlkTGVmdENvbHVtbjogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVsYXRpdmUgbG9jYXRpb24gb2YgdG9wIHJvdyBvZiB0YXJnZXQgZ3JpZCBpbiB0aGUgbmVpZ2hib3Job29kXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IHRhcmdldEdyaWRSZWxhdGl2ZVRvcFJvdzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVsYXRpdmUgbG9jYXRpb24gb2YgbGVmdCBjb2x1bW4gb2YgdGFyZ2V0IGdyaWQgaW4gdGhlIG5laWdoYm9yaG9vZFxyXG4gICAgICovXHJcbiAgICByZWFkb25seSB0YXJnZXRHcmlkUmVsYXRpdmVMZWZ0Q29sdW1uOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG5vbi1lbXB0eSBjZWxscyBvZiB0aGUgbmVpZ2hib3Job29kXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IG51bWJlck9mTm9uRW1wdHlDZWxsczogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBpbnRlcmZhY2UgcmVwcmVzZW50cyBhbGwgdGhlIGNvbnRleHQgaW5mb3JtYXRpb24gZm9yIGR5bmFtaWMgd29ya2Zsb3cgZXhlY3V0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRHluYW1pY0NvbnRleHQgZXh0ZW5kcyBJU2NoZW1hT2JqZWN0IHsgfVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIHJlcHJlc2VudGluZyBzZXNzaW9uIGNvbnRleHQgaG9sZGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dEhvbGRlciBleHRlbmRzIElTY2hlbWFPYmplY3QgeyB9XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBVc2VyIHdpdGhpbiB0aGUgc2Vzc2lvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXJDb250ZXh0SG9sZGVyIGV4dGVuZHMgSUNvbnRleHRIb2xkZXIge1xyXG4gICAgLy8gQ3VycmVudGx5IGVtcHR5LCBpbiBmdXR1cmUgc2hvdWxkIHByb2JhYmx5IHRha2Ugc29tZSB1c2VyIHJlbGF0ZWQgcHJvcGVydGllcyBmcm9tIHNlc3Npb24uXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRlbmFudENvbnRleHRIb2xkZXIgZXh0ZW5kcyBJQ29udGV4dEhvbGRlciB7XHJcbiAgICAvLyBDdXJyZW50bHkgZW1wdHksIGluIGZ1dHVyZSBzaG91bGQgcHJvYmFibHkgdGFrZSBzb21lIHRlbmFudCByZWxhdGVkIHByb3BlcnRpZXMgZnJvbSBzZXNzaW9uLlxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@augloop/types-core/dist/src/tiles.js\n");

/***/ }),

/***/ "./node_modules/es6-promise/auto.js":
/*!******************************************!*\
  !*** ./node_modules/es6-promise/auto.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// This file can be required in Browserify and Node.js for automatic polyfill\n// To use it:  require('es6-promise/auto');\n\nmodule.exports = __webpack_require__(/*! ./ */ \"./node_modules/es6-promise/dist/es6-promise.js\").polyfill();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvYXV0by5qcz8wODIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDYTtBQUNiLGlCQUFpQixtQkFBTyxDQUFDLDBEQUFJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2F1dG8uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgY2FuIGJlIHJlcXVpcmVkIGluIEJyb3dzZXJpZnkgYW5kIE5vZGUuanMgZm9yIGF1dG9tYXRpYyBwb2x5ZmlsbFxuLy8gVG8gdXNlIGl0OiAgcmVxdWlyZSgnZXM2LXByb21pc2UvYXV0bycpO1xuJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLycpLnBvbHlmaWxsKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/auto.js\n");

/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/dist/es6-promise.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__param\", function() { return __param; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__createBinding\", function() { return __createBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__values\", function() { return __values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__read\", function() { return __read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spreadArrays\", function() { return __spreadArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__await\", function() { return __await; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__classPrivateFieldGet\", function() { return __classPrivateFieldGet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__classPrivateFieldSet\", function() { return __classPrivateFieldSet; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzc3ZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n");

/***/ }),

/***/ "./scripts/app/App_Floodgate_Bare.ts":
/*!*******************************************!*\
  !*** ./scripts/app/App_Floodgate_Bare.ts ***!
  \*******************************************/
/*! exports provided: getEngineStartPromise, resetEngine, setEngineStartPromise, start, startInternal, stop, initialize, reset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize\", function() { return initialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reset\", function() { return reset; });\n/* harmony import */ var _CommonApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CommonApp */ \"./scripts/app/CommonApp.ts\");\n/* harmony import */ var _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CommonFloodgate */ \"./scripts/app/CommonFloodgate.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateTelemetryLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FloodgateCore/FloodgateTelemetryLogger */ \"./scripts/app/FloodgateCore/FloodgateTelemetryLogger.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Constants */ \"../FloodgateCore/dist/src/Constants.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getEngineStartPromise\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"getEngineStartPromise\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"resetEngine\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"resetEngine\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"setEngineStartPromise\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"setEngineStartPromise\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"start\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"startInternal\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"startInternal\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"stop\", function() { return _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"stop\"]; });\n\n/**\r\n * App_Floodgate_Bare.ts\r\n *\r\n * The entry point for floodgate with core functionality only, no UI support.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DefaultFloodgateStringProvider = /** @class */ (function () {\r\n    function DefaultFloodgateStringProvider() {\r\n    }\r\n    DefaultFloodgateStringProvider.prototype.loadStringResource = function (stringId) {\r\n        return \"na\";\r\n    };\r\n    DefaultFloodgateStringProvider.prototype.getCustomString = function (str) {\r\n        return \"na\";\r\n    };\r\n    return DefaultFloodgateStringProvider;\r\n}());\r\n/**\r\n * Initialize. Must be called before any other call to floodgate.\r\n * @returns A promise which will be rejected if the call fails.\r\n */\r\nfunction initialize() {\r\n    return new Promise(function (resolve, reject) {\r\n        var rejectAndLogError = function (errorMessage) {\r\n            var telemetryLogger = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_4__[\"FloodgateEngine\"].getTelemetryLogger();\r\n            if (telemetryLogger) {\r\n                telemetryLogger.log_Event(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_5__[\"TelemetryEvent\"].Floodgate.Initialize.Failed, { ErrorMessage: errorMessage });\r\n            }\r\n            reject(errorMessage);\r\n        };\r\n        if (_CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"getInitialized\"]()) {\r\n            resolve();\r\n            return;\r\n        }\r\n        try {\r\n            _CommonApp__WEBPACK_IMPORTED_MODULE_0__[\"initialize\"]();\r\n        }\r\n        catch (err) {\r\n            rejectAndLogError(\"CommonApp initialization failed: {\" + err + \"}\");\r\n            return;\r\n        }\r\n        _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_4__[\"FloodgateEngine\"].setTelemetryLogger(new _FloodgateCore_FloodgateTelemetryLogger__WEBPACK_IMPORTED_MODULE_3__[\"default\"]());\r\n        try {\r\n            // Use a dummy string provider as App_Floodgate_Bare doesn't support UIStrings\r\n            _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"setStringProvider\"](new DefaultFloodgateStringProvider());\r\n            _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"initialize\"]();\r\n        }\r\n        catch (err) {\r\n            rejectAndLogError(\"CommonFloodgate initialization failed: {\" + err + \"}\");\r\n            return;\r\n        }\r\n        resolve();\r\n    });\r\n}\r\n/**\r\n * Reset the floodgate module. Used in unit tests.\r\n */\r\nfunction reset() {\r\n    _CommonApp__WEBPACK_IMPORTED_MODULE_0__[\"reset\"]();\r\n    _CommonFloodgate__WEBPACK_IMPORTED_MODULE_1__[\"reset\"]();\r\n}\r\n_Window_Window__WEBPACK_IMPORTED_MODULE_2__[\"setFloodgateInitialize\"](initialize);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9BcHBfRmxvb2RnYXRlX0JhcmUudHM/OTRkYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7R0FJRztBQUNzQztBQUNZO0FBQ1g7QUFDc0M7QUFHbEI7QUFDa0I7QUFHdkQ7QUFFekI7SUFBQTtJQVFBLENBQUM7SUFQTywyREFBa0IsR0FBekIsVUFBMEIsUUFBaUQ7UUFDMUUsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRU0sd0RBQWUsR0FBdEIsVUFBdUIsR0FBVztRQUNqQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFDRixxQ0FBQztBQUFELENBQUM7QUFFRDs7O0dBR0c7QUFDSSxTQUFTLFVBQVU7SUFDekIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2xDLElBQU0saUJBQWlCLEdBQUcsVUFBQyxZQUFvQjtZQUM5QyxJQUFNLGVBQWUsR0FBRywyRUFBZSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDN0QsSUFBSSxlQUFlLEVBQUU7Z0JBQ3BCLGVBQWUsQ0FBQyxTQUFTLENBQUMsNkZBQWMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO2FBQ3RHO1lBRUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLElBQUksK0RBQThCLEVBQUUsRUFBRTtZQUNyQyxPQUFPLEVBQUUsQ0FBQztZQUNWLE9BQU87U0FDUDtRQUVELElBQUk7WUFDSCxxREFBb0IsRUFBRSxDQUFDO1NBQ3ZCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixpQkFBaUIsQ0FBQyxvQ0FBb0MsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDcEUsT0FBTztTQUNQO1FBRUQsMkVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLCtFQUF3QixFQUFFLENBQUMsQ0FBQztRQUVuRSxJQUFJO1lBQ0gsOEVBQThFO1lBQzlFLGtFQUFpQyxDQUFDLElBQUksOEJBQThCLEVBQUUsQ0FBQyxDQUFDO1lBQ3hFLDJEQUEwQixFQUFFLENBQUM7U0FDN0I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNiLGlCQUFpQixDQUFDLDBDQUEwQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMxRSxPQUFPO1NBQ1A7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0ksU0FBUyxLQUFLO0lBQ3BCLGdEQUFlLEVBQUUsQ0FBQztJQUNsQixzREFBcUIsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxxRUFBNkIsQ0FBQyxVQUFVLENBQUMsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0FwcF9GbG9vZGdhdGVfQmFyZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBcHBfRmxvb2RnYXRlX0JhcmUudHNcclxuICpcclxuICogVGhlIGVudHJ5IHBvaW50IGZvciBmbG9vZGdhdGUgd2l0aCBjb3JlIGZ1bmN0aW9uYWxpdHkgb25seSwgbm8gVUkgc3VwcG9ydC5cclxuICovXHJcbmltcG9ydCAqIGFzIENvbW1vbkFwcCBmcm9tIFwiLi9Db21tb25BcHBcIjtcclxuaW1wb3J0ICogYXMgQ29tbW9uRmxvb2RnYXRlIGZyb20gXCIuL0NvbW1vbkZsb29kZ2F0ZVwiO1xyXG5pbXBvcnQgKiBhcyBXaW5kb3cgZnJvbSBcIi4vV2luZG93L1dpbmRvd1wiO1xyXG5pbXBvcnQgRmxvb2RnYXRlVGVsZW1ldHJ5TG9nZ2VyIGZyb20gXCIuL0Zsb29kZ2F0ZUNvcmUvRmxvb2RnYXRlVGVsZW1ldHJ5TG9nZ2VyXCI7XHJcblxyXG5pbXBvcnQgKiBhcyBBcGkgZnJvbSBcIkBtcy1vZmIvb2ZmaWNlZmxvb2RnYXRlY29yZS9kaXN0L3NyYy9BcGkvQXBpXCI7XHJcbmltcG9ydCB7IEZsb29kZ2F0ZUVuZ2luZSB9IGZyb20gXCJAbXMtb2ZiL29mZmljZWZsb29kZ2F0ZWNvcmVcIjtcclxuaW1wb3J0IHsgVGVsZW1ldHJ5RXZlbnQgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlL2Rpc3Qvc3JjL0NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IHsgZ2V0RW5naW5lU3RhcnRQcm9taXNlLCByZXNldEVuZ2luZSwgc2V0RW5naW5lU3RhcnRQcm9taXNlLCBzdGFydCwgc3RhcnRJbnRlcm5hbCwgc3RvcCB9XHJcblx0ZnJvbSBcIi4vQ29tbW9uRmxvb2RnYXRlXCJcclxuXHJcbmNsYXNzIERlZmF1bHRGbG9vZGdhdGVTdHJpbmdQcm92aWRlciBpbXBsZW1lbnRzIEFwaS5JRmxvb2RnYXRlU3RyaW5nUHJvdmlkZXIge1xyXG5cdHB1YmxpYyBsb2FkU3RyaW5nUmVzb3VyY2Uoc3RyaW5nSWQ6IEFwaS5JRmxvb2RnYXRlU3RyaW5nUHJvdmlkZXIuU3RyaW5nVHlwZSk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gXCJuYVwiO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEN1c3RvbVN0cmluZyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gXCJuYVwiO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUuIE11c3QgYmUgY2FsbGVkIGJlZm9yZSBhbnkgb3RoZXIgY2FsbCB0byBmbG9vZGdhdGUuXHJcbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIHJlamVjdGVkIGlmIHRoZSBjYWxsIGZhaWxzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUoKTogUHJvbWlzZTxhbnk+IHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVqZWN0QW5kTG9nRXJyb3IgPSAoZXJyb3JNZXNzYWdlOiBzdHJpbmcpID0+IHtcclxuXHRcdFx0Y29uc3QgdGVsZW1ldHJ5TG9nZ2VyID0gRmxvb2RnYXRlRW5naW5lLmdldFRlbGVtZXRyeUxvZ2dlcigpO1xyXG5cdFx0XHRpZiAodGVsZW1ldHJ5TG9nZ2VyKSB7XHJcblx0XHRcdFx0dGVsZW1ldHJ5TG9nZ2VyLmxvZ19FdmVudChUZWxlbWV0cnlFdmVudC5GbG9vZGdhdGUuSW5pdGlhbGl6ZS5GYWlsZWQsIHsgRXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UgfSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJlamVjdChlcnJvck1lc3NhZ2UpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoQ29tbW9uRmxvb2RnYXRlLmdldEluaXRpYWxpemVkKCkpIHtcclxuXHRcdFx0cmVzb2x2ZSgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Q29tbW9uQXBwLmluaXRpYWxpemUoKTtcclxuXHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRyZWplY3RBbmRMb2dFcnJvcihcIkNvbW1vbkFwcCBpbml0aWFsaXphdGlvbiBmYWlsZWQ6IHtcIiArIGVyciArIFwifVwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdEZsb29kZ2F0ZUVuZ2luZS5zZXRUZWxlbWV0cnlMb2dnZXIobmV3IEZsb29kZ2F0ZVRlbGVtZXRyeUxvZ2dlcigpKTtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBVc2UgYSBkdW1teSBzdHJpbmcgcHJvdmlkZXIgYXMgQXBwX0Zsb29kZ2F0ZV9CYXJlIGRvZXNuJ3Qgc3VwcG9ydCBVSVN0cmluZ3NcclxuXHRcdFx0Q29tbW9uRmxvb2RnYXRlLnNldFN0cmluZ1Byb3ZpZGVyKG5ldyBEZWZhdWx0Rmxvb2RnYXRlU3RyaW5nUHJvdmlkZXIoKSk7XHJcblx0XHRcdENvbW1vbkZsb29kZ2F0ZS5pbml0aWFsaXplKCk7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0cmVqZWN0QW5kTG9nRXJyb3IoXCJDb21tb25GbG9vZGdhdGUgaW5pdGlhbGl6YXRpb24gZmFpbGVkOiB7XCIgKyBlcnIgKyBcIn1cIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXNvbHZlKCk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgZmxvb2RnYXRlIG1vZHVsZS4gVXNlZCBpbiB1bml0IHRlc3RzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xyXG5cdENvbW1vbkFwcC5yZXNldCgpO1xyXG5cdENvbW1vbkZsb29kZ2F0ZS5yZXNldCgpO1xyXG59XHJcblxyXG5XaW5kb3cuc2V0Rmxvb2RnYXRlSW5pdGlhbGl6ZShpbml0aWFsaXplKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/App_Floodgate_Bare.ts\n");

/***/ }),

/***/ "./scripts/app/Common/UrlUtils.ts":
/*!****************************************!*\
  !*** ./scripts/app/Common/UrlUtils.ts ***!
  \****************************************/
/*! exports provided: buildQueryParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildQueryParameters\", function() { return buildQueryParameters; });\n/*\r\n * UrlUtils.ts\r\n */\r\nfunction buildQueryParameters(keyAndValues, encodeValueAsURI) {\r\n    if (encodeValueAsURI === void 0) { encodeValueAsURI = true; }\r\n    var queryParamsString = \"\";\r\n    for (var key in keyAndValues || []) {\r\n        if (keyAndValues.hasOwnProperty(key)) {\r\n            var value = keyAndValues[key];\r\n            if (value !== null && value !== undefined && typeof value !== \"object\") {\r\n                var prefix = !queryParamsString ? \"\" : \"&\";\r\n                var encodedValue = encodeValueAsURI ? encodeURIComponent(value) : value;\r\n                var queryParamItem = key + \"=\" + encodedValue;\r\n                queryParamsString += prefix + queryParamItem;\r\n            }\r\n        }\r\n    }\r\n    return queryParamsString;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Db21tb24vVXJsVXRpbHMudHM/MmQ5OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7O0dBRUc7QUFNSSxTQUFTLG9CQUFvQixDQUFDLFlBQTBCLEVBQUUsZ0JBQWdDO0lBQWhDLDBEQUFnQztJQUNoRyxJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUMzQixLQUFLLElBQU0sR0FBRyxJQUFJLFlBQVksSUFBSSxFQUFFLEVBQUU7UUFDckMsSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLElBQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZFLElBQU0sTUFBTSxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUM3QyxJQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDMUUsSUFBTSxjQUFjLEdBQU0sR0FBRyxTQUFJLFlBQWMsQ0FBQztnQkFDaEQsaUJBQWlCLElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQzthQUM3QztTQUNEO0tBQ0Q7SUFFRCxPQUFPLGlCQUFpQixDQUFDO0FBQzFCLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9Db21tb24vVXJsVXRpbHMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBVcmxVdGlscy50c1xyXG4gKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVF1ZXJ5UGFyYW1zIHtcclxuXHRba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZFF1ZXJ5UGFyYW1ldGVycyhrZXlBbmRWYWx1ZXM6IElRdWVyeVBhcmFtcywgZW5jb2RlVmFsdWVBc1VSSTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xyXG5cdGxldCBxdWVyeVBhcmFtc1N0cmluZyA9IFwiXCI7XHJcblx0Zm9yIChjb25zdCBrZXkgaW4ga2V5QW5kVmFsdWVzIHx8IFtdKSB7XHJcblx0XHRpZiAoa2V5QW5kVmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHRcdFx0Y29uc3QgdmFsdWUgPSBrZXlBbmRWYWx1ZXNba2V5XTtcclxuXHRcdFx0aWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB7XHJcblx0XHRcdFx0Y29uc3QgcHJlZml4ID0gIXF1ZXJ5UGFyYW1zU3RyaW5nID8gXCJcIiA6IFwiJlwiO1xyXG5cdFx0XHRcdGNvbnN0IGVuY29kZWRWYWx1ZSA9IGVuY29kZVZhbHVlQXNVUkkgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpIDogdmFsdWU7XHJcblx0XHRcdFx0Y29uc3QgcXVlcnlQYXJhbUl0ZW0gPSBgJHtrZXl9PSR7ZW5jb2RlZFZhbHVlfWA7XHJcblx0XHRcdFx0cXVlcnlQYXJhbXNTdHJpbmcgKz0gcHJlZml4ICsgcXVlcnlQYXJhbUl0ZW07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBxdWVyeVBhcmFtc1N0cmluZztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Common/UrlUtils.ts\n");

/***/ }),

/***/ "./scripts/app/CommonApp.ts":
/*!**********************************!*\
  !*** ./scripts/app/CommonApp.ts ***!
  \**********************************/
/*! exports provided: initialize, reset, isFeedbackSurveyEnabledByAADC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize\", function() { return initialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reset\", function() { return reset; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isFeedbackSurveyEnabledByAADC\", function() { return isFeedbackSurveyEnabledByAADC; });\n/* harmony import */ var _Polyfills_Promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Polyfills/Promise */ \"./scripts/app/Polyfills/Promise.ts\");\n/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Version */ \"./scripts/app/Version.ts\");\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/**\r\n * CommonApp.ts\r\n *\r\n * Common logic for entrypoints.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nvar APP_NAME = \"OfficeFeedbackSDK\";\r\n/**\r\n * Has the SDK been initialized\r\n */\r\nvar initialized = false;\r\n/**\r\n * Has the SDK allow AADC\r\n */\r\nvar commonPolicyAllowAADC = false;\r\n/**\r\n * Initialize\r\n */\r\nfunction initialize() {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    if (!_Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().OfficeBrowserFeedback.initOptions) {\r\n        throw new Error(\"Window.OfficeBrowserFeedback.initOptions not set\");\r\n    }\r\n    _Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().OfficeBrowserFeedback.sdkVersion = _Version__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\r\n    _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().setCommonInitOptions(_Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().OfficeBrowserFeedback.initOptions);\r\n    commonPolicyAllowAADC = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().isFeedbackSurveyEnabledByAADC();\r\n    _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"initialize\"](_Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCommonInitOptions(), APP_NAME, _Version__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getSdkSessionId(), _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getEventSampling());\r\n    initialized = true;\r\n    if (!commonPolicyAllowAADC) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"EventIds\"].FEEDBACK_SURVEYSDISABLED_AADC, 1 /* Critical */, {\r\n            Data: JSON.stringify({\r\n                ageGroup: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCommonInitOptions().ageGroup,\r\n                authenticationType: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCommonInitOptions().authenticationType,\r\n            }),\r\n        });\r\n    }\r\n}\r\n/**\r\n * Reset the module. Used in unit tests.\r\n */\r\nfunction reset() {\r\n    initialized = false;\r\n}\r\n/**\r\n * Return Flag to determine whether Feedback and Survey is enabled by AADC.\r\n * Return true if Feedback and Survey is enabled.\r\n * Otherwise, return false.\r\n */\r\nfunction isFeedbackSurveyEnabledByAADC() {\r\n    return commonPolicyAllowAADC;\r\n}\r\n_Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"setIsFeedbackSurveyEnabledByAADC\"](isFeedbackSurveyEnabledByAADC);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Db21tb25BcHAudHM/MWE5NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztHQUlHO0FBRTBCO0FBRUc7QUFDK0I7QUFDckI7QUFDRztBQUU3QyxJQUFNLFFBQVEsR0FBVyxtQkFBbUIsQ0FBQztBQUU3Qzs7R0FFRztBQUNILElBQUksV0FBVyxHQUFZLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILElBQUkscUJBQXFCLEdBQVksS0FBSyxDQUFDO0FBRTNDOztHQUVHO0FBQ0ksU0FBUyxVQUFVO0lBQ3pCLElBQUksV0FBVyxFQUFFO1FBQ2hCLE9BQU87S0FDUDtJQUVELElBQUksQ0FBQyxrREFBVSxFQUFFLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFO1FBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztLQUNwRTtJQUVELGtEQUFVLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEdBQUcsZ0RBQU8sQ0FBQztJQUN4RCxnRUFBaUIsRUFBRSxDQUFDLG9CQUFvQixDQUFDLGtEQUFVLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RixxQkFBcUIsR0FBRyxnRUFBaUIsRUFBRSxDQUFDLDZCQUE2QixFQUFFLENBQUM7SUFFNUUsMkRBQWtCLENBQ2pCLGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsRUFDMUMsUUFBUSxFQUNSLGdEQUFPLEVBQ1AsZ0VBQWlCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFDckMsZ0VBQWlCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUN0QyxDQUFDO0lBRUYsV0FBVyxHQUFHLElBQUksQ0FBQztJQUVuQixJQUFJLENBQUMscUJBQXFCLEVBQUU7UUFDM0IsMERBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMseURBQWdCLENBQUMsNkJBQTZCLG9CQUUxRTtZQUNDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNwQixRQUFRLEVBQUUsZ0VBQWlCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLFFBQVE7Z0JBQzdELGtCQUFrQixFQUFFLGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxrQkFBa0I7YUFDakYsQ0FBQztTQUNGLENBQUMsQ0FBQztLQUNKO0FBQ0YsQ0FBQztBQUVEOztHQUVHO0FBQ0ksU0FBUyxLQUFLO0lBQ3BCLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDckIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSSxTQUFTLDZCQUE2QjtJQUM1QyxPQUFPLHFCQUFxQixDQUFDO0FBQzlCLENBQUM7QUFFRCwrRUFBdUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvQ29tbW9uQXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1vbkFwcC50c1xyXG4gKlxyXG4gKiBDb21tb24gbG9naWMgZm9yIGVudHJ5cG9pbnRzLlxyXG4gKi9cclxuXHJcbmltcG9ydCBcIi4vUG9seWZpbGxzL1Byb21pc2VcIjtcclxuXHJcbmltcG9ydCBWZXJzaW9uIGZyb20gXCIuL1ZlcnNpb25cIjtcclxuaW1wb3J0ICogYXMgQ29uZmlndXJhdGlvbiBmcm9tIFwiLi9Db25maWd1cmF0aW9uL0NvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0ICogYXMgV2luZG93IGZyb20gXCIuL1dpbmRvdy9XaW5kb3dcIjtcclxuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9Mb2dnaW5nL0xvZ2dpbmdcIjtcclxuXHJcbmNvbnN0IEFQUF9OQU1FOiBzdHJpbmcgPSBcIk9mZmljZUZlZWRiYWNrU0RLXCI7XHJcblxyXG4vKipcclxuICogSGFzIHRoZSBTREsgYmVlbiBpbml0aWFsaXplZFxyXG4gKi9cclxubGV0IGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4vKipcclxuICogSGFzIHRoZSBTREsgYWxsb3cgQUFEQ1xyXG4gKi9cclxubGV0IGNvbW1vblBvbGljeUFsbG93QUFEQzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKCk6IHZvaWQge1xyXG5cdGlmIChpbml0aWFsaXplZCkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0aWYgKCFXaW5kb3cuZ2V0KCkuT2ZmaWNlQnJvd3NlckZlZWRiYWNrLmluaXRPcHRpb25zKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJXaW5kb3cuT2ZmaWNlQnJvd3NlckZlZWRiYWNrLmluaXRPcHRpb25zIG5vdCBzZXRcIik7XHJcblx0fVxyXG5cclxuXHRXaW5kb3cuZ2V0KCkuT2ZmaWNlQnJvd3NlckZlZWRiYWNrLnNka1ZlcnNpb24gPSBWZXJzaW9uO1xyXG5cdENvbmZpZ3VyYXRpb24uZ2V0KCkuc2V0Q29tbW9uSW5pdE9wdGlvbnMoV2luZG93LmdldCgpLk9mZmljZUJyb3dzZXJGZWVkYmFjay5pbml0T3B0aW9ucyk7XHJcblx0Y29tbW9uUG9saWN5QWxsb3dBQURDID0gQ29uZmlndXJhdGlvbi5nZXQoKS5pc0ZlZWRiYWNrU3VydmV5RW5hYmxlZEJ5QUFEQygpO1xyXG5cclxuXHRMb2dnaW5nLmluaXRpYWxpemUoXHJcblx0XHRDb25maWd1cmF0aW9uLmdldCgpLmdldENvbW1vbkluaXRPcHRpb25zKCksXHJcblx0XHRBUFBfTkFNRSxcclxuXHRcdFZlcnNpb24sXHJcblx0XHRDb25maWd1cmF0aW9uLmdldCgpLmdldFNka1Nlc3Npb25JZCgpLFxyXG5cdFx0Q29uZmlndXJhdGlvbi5nZXQoKS5nZXRFdmVudFNhbXBsaW5nKClcclxuXHQpO1xyXG5cclxuXHRpbml0aWFsaXplZCA9IHRydWU7XHJcblxyXG5cdGlmICghY29tbW9uUG9saWN5QWxsb3dBQURDKSB7XHJcblx0XHRMb2dnaW5nLmdldExvZ2dlcigpLmxvZ0V2ZW50KExvZ2dpbmcuRXZlbnRJZHMuRkVFREJBQ0tfU1VSVkVZU0RJU0FCTEVEX0FBREMsXHJcblx0XHRcdExvZ2dpbmcuTG9nTGV2ZWwuQ3JpdGljYWwsXHJcblx0XHRcdHtcclxuXHRcdFx0XHREYXRhOiBKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XHRhZ2VHcm91cDogQ29uZmlndXJhdGlvbi5nZXQoKS5nZXRDb21tb25Jbml0T3B0aW9ucygpLmFnZUdyb3VwLFxyXG5cdFx0XHRcdFx0YXV0aGVudGljYXRpb25UeXBlOiBDb25maWd1cmF0aW9uLmdldCgpLmdldENvbW1vbkluaXRPcHRpb25zKCkuYXV0aGVudGljYXRpb25UeXBlLFxyXG5cdFx0XHRcdH0pLFxyXG5cdFx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgbW9kdWxlLiBVc2VkIGluIHVuaXQgdGVzdHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXQoKSB7XHJcblx0aW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybiBGbGFnIHRvIGRldGVybWluZSB3aGV0aGVyIEZlZWRiYWNrIGFuZCBTdXJ2ZXkgaXMgZW5hYmxlZCBieSBBQURDLlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiBGZWVkYmFjayBhbmQgU3VydmV5IGlzIGVuYWJsZWQuXHJcbiAqIE90aGVyd2lzZSwgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmVlZGJhY2tTdXJ2ZXlFbmFibGVkQnlBQURDKCk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBjb21tb25Qb2xpY3lBbGxvd0FBREM7XHJcbn1cclxuXHJcbldpbmRvdy5zZXRJc0ZlZWRiYWNrU3VydmV5RW5hYmxlZEJ5QUFEQyhpc0ZlZWRiYWNrU3VydmV5RW5hYmxlZEJ5QUFEQyk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./scripts/app/CommonApp.ts\n");

/***/ }),

/***/ "./scripts/app/CommonFloodgate.ts":
/*!****************************************!*\
  !*** ./scripts/app/CommonFloodgate.ts ***!
  \****************************************/
/*! exports provided: initialize, setInitialized, getInitialized, setEngineStartPromise, getEngineStartPromise, setStringProvider, startInternal, start, stop, getEngine, resetEngine, reset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize\", function() { return initialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setInitialized\", function() { return setInitialized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInitialized\", function() { return getInitialized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEngineStartPromise\", function() { return setEngineStartPromise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEngineStartPromise\", function() { return getEngineStartPromise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setStringProvider\", function() { return setStringProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startInternal\", function() { return startInternal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stop\", function() { return stop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEngine\", function() { return getEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetEngine\", function() { return resetEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reset\", function() { return reset; });\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _FloodgateCore_AdaptiveSurveyLauncherFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FloodgateCore/AdaptiveSurveyLauncherFactory */ \"./scripts/app/FloodgateCore/AdaptiveSurveyLauncherFactory.ts\");\n/* harmony import */ var _FloodgateCore_TransporterFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FloodgateCore/TransporterFactory */ \"./scripts/app/FloodgateCore/TransporterFactory.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateEnvironmentProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FloodgateCore/FloodgateEnvironmentProvider */ \"./scripts/app/FloodgateCore/FloodgateEnvironmentProvider.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FloodgateCore/FloodgateStorageProvider */ \"./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateStringProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FloodgateCore/FloodgateStringProvider */ \"./scripts/app/FloodgateCore/FloodgateStringProvider.ts\");\n/* harmony import */ var _TargetedMessaging_TargetedMessagingCampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TargetedMessaging/TargetedMessagingCampaignDefinitionProvider */ \"./scripts/app/TargetedMessaging/TargetedMessagingCampaignDefinitionProvider.ts\");\n/* harmony import */ var _TargetedMessaging_UserFactsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TargetedMessaging/UserFactsProvider */ \"./scripts/app/TargetedMessaging/UserFactsProvider.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Campaign/CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Constants */ \"../FloodgateCore/dist/src/Constants.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Governor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Governor */ \"../FloodgateCore/dist/src/Governor.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Governor__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Governor__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_SurveyActivityListener__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/SurveyActivityListener */ \"../FloodgateCore/dist/src/SurveyActivityListener.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_SurveyActivityListener__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_SurveyActivityListener__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _GovernanceService_GovernanceServiceClient__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./GovernanceService/GovernanceServiceClient */ \"./scripts/app/GovernanceService/GovernanceServiceClient.ts\");\n/* harmony import */ var _Personalizer_PersonalizerClient__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Personalizer/PersonalizerClient */ \"./scripts/app/Personalizer/PersonalizerClient.ts\");\n/**\r\n * CommonFloodgate.ts\r\n *\r\n * Common functionalities shared by App_Floodgate and App_Floodgate_Bare modules.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Has floodgate been initialized\r\n */\r\nvar initialized = false;\r\nvar startCount = 0;\r\nvar engine;\r\nvar engineStartPromise = null;\r\nvar engineTmsProvider = null;\r\nvar userFactsProvider = null;\r\nvar stringProvider;\r\nfunction initialize() {\r\n    if (!_FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_5__[\"default\"].isStorageAvailable()) {\r\n        throw new Error(\"window.localStorage is not available.\");\r\n    }\r\n    _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().OfficeBrowserFeedback.floodgate = _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().OfficeBrowserFeedback.floodgate || {};\r\n    var floodgateInitOptions = _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().OfficeBrowserFeedback.floodgate.initOptions;\r\n    floodgateInitOptions = floodgateInitOptions || {};\r\n    // Validate and copy campaign definitions to local storage\r\n    if (floodgateInitOptions.campaignDefinitions !== undefined) {\r\n        var filteredResult = Object(_ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_10__[\"FilterValidCampaignDefinitions\"])(floodgateInitOptions.campaignDefinitions);\r\n        if (filteredResult.error) {\r\n            throw new Error(\"floodgate.initOptions.campaignDefinitions error: \" + filteredResult.error);\r\n        }\r\n        (new _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_5__[\"default\"]()).write(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_11__[\"IFloodgateStorageProvider\"].FileType.CampaignDefinitions, JSON.stringify(floodgateInitOptions.campaignDefinitions));\r\n    }\r\n    var configuration = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]();\r\n    configuration.setFloodgateInitOptions(floodgateInitOptions);\r\n    _ms_ofb_officefloodgatecore_dist_src_SurveyActivityListener__WEBPACK_IMPORTED_MODULE_16___default.a.resetSessionActivity();\r\n    _Personalizer_PersonalizerClient__WEBPACK_IMPORTED_MODULE_18__[\"get\"]().setup(configuration);\r\n    _GovernanceService_GovernanceServiceClient__WEBPACK_IMPORTED_MODULE_17__[\"get\"]().setup(configuration);\r\n    initialized = true;\r\n    if (!configuration.getFloodgateInitOptions().surveyEnabled) {\r\n        var telemetryLogger = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__[\"FloodgateEngine\"].getTelemetryLogger();\r\n        if (telemetryLogger) {\r\n            telemetryLogger.log_Event(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12__[\"TelemetryEvent\"].Floodgate.Start.SurveysDisabled, { Count: startCount, Message: \"Floodgate initialized with surveys disabled (surveyEnabled is false)\" });\r\n        }\r\n    }\r\n}\r\nfunction setInitialized(initValue) {\r\n    initialized = initValue;\r\n}\r\nfunction getInitialized() {\r\n    return initialized;\r\n}\r\nfunction setEngineStartPromise(startPromise) {\r\n    engineStartPromise = startPromise;\r\n}\r\nfunction getEngineStartPromise() {\r\n    return engineStartPromise;\r\n}\r\nfunction setStringProvider(provider) {\r\n    stringProvider = provider;\r\n}\r\n/**\r\n * To support the multi-window scenario on web we need to initialize the engine on each resume.\r\n * Hence this separate method which does make() and start() together.\r\n */\r\nfunction startInternal(loadSynchronously, customEngine) {\r\n    if (customEngine === void 0) { customEngine = null; }\r\n    if (engineStartPromise) {\r\n        return engineStartPromise;\r\n    }\r\n    startCount++;\r\n    var startPromise = new Promise(function (resolve, reject) {\r\n        var rejectAndLogError = function (errorMessage, error) {\r\n            var telemetryLogger = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__[\"FloodgateEngine\"].getTelemetryLogger();\r\n            if (telemetryLogger) {\r\n                telemetryLogger.log_Event(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12__[\"TelemetryEvent\"].Floodgate.Start.Failed, { Count: startCount, ErrorMessage: errorMessage, ErrorDetails: error && error.stack });\r\n            }\r\n            reject(errorMessage);\r\n        };\r\n        try {\r\n            var commonInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getCommonInitOptions();\r\n            if (!commonInitOptions) {\r\n                rejectAndLogError(\"Invalid floodgate common init options, state: \" + initialized);\r\n                return;\r\n            }\r\n            var floodgateInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getFloodgateInitOptions();\r\n            if (!floodgateInitOptions) {\r\n                var telemetryLogger = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__[\"FloodgateEngine\"].getTelemetryLogger();\r\n                if (telemetryLogger) {\r\n                    telemetryLogger.log_Event(_ms_ofb_officefloodgatecore_dist_src_Constants__WEBPACK_IMPORTED_MODULE_12__[\"TelemetryEvent\"].Floodgate.Start.Warning, { Count: startCount, ErrorMessage: \"Invalid floodgate init options, state: \" + initialized });\r\n                }\r\n                _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().setFloodgateInitOptions({});\r\n                floodgateInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getFloodgateInitOptions();\r\n            }\r\n            if (!customEngine && !engineTmsProvider) {\r\n                // AssetsProvider wraps auth callbacks which should not run every time we start()\r\n                var authTokenCallback = floodgateInitOptions && floodgateInitOptions.authTokenCallback;\r\n                if (authTokenCallback) {\r\n                    engineTmsProvider = new _TargetedMessaging_TargetedMessagingCampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_7__[\"TargetedMessagingCampaignDefinitionProvider\"]();\r\n                    userFactsProvider = new _TargetedMessaging_UserFactsProvider__WEBPACK_IMPORTED_MODULE_8__[\"UserFactsProvider\"]();\r\n                }\r\n            }\r\n            var currentTeachingCooldown = _ms_ofb_officefloodgatecore_dist_src_Governor__WEBPACK_IMPORTED_MODULE_14__[\"Governor\"].GetChannelCoolDown(_ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_15__[\"GovernedChannelType\"].TeachingMessage);\r\n            var teachingCooldown = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_13__[\"getDynamicSetting\"])(\"TeachingMessageCooldown\" /* teachingMessageCooldown */, currentTeachingCooldown);\r\n            _ms_ofb_officefloodgatecore_dist_src_Governor__WEBPACK_IMPORTED_MODULE_14__[\"Governor\"].SetDefaultChannelCoolDown(_ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_15__[\"GovernedChannelType\"].TeachingMessage, teachingCooldown);\r\n            engine = customEngine || _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_9__[\"FloodgateEngine\"].make(commonInitOptions.build || \"\", _FloodgateCore_AdaptiveSurveyLauncherFactory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].make(), floodgateInitOptions.onSurveyActivatedCallback, new _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_5__[\"default\"](), floodgateInitOptions.settingStorageCallback, stringProvider ? stringProvider : new _FloodgateCore_FloodgateStringProvider__WEBPACK_IMPORTED_MODULE_6__[\"default\"](), new _FloodgateCore_FloodgateEnvironmentProvider__WEBPACK_IMPORTED_MODULE_4__[\"default\"](), new _FloodgateCore_TransporterFactory__WEBPACK_IMPORTED_MODULE_3__[\"default\"](), [engineTmsProvider], userFactsProvider, _GovernanceService_GovernanceServiceClient__WEBPACK_IMPORTED_MODULE_17__[\"get\"]());\r\n            if (!engine) {\r\n                setEngineStartPromise(null);\r\n                rejectAndLogError(\"Failed to create floodgate engine\");\r\n                return;\r\n            }\r\n            // start subsequent invocations in sync mode\r\n            var shouldStartEngineInSync = loadSynchronously || startCount > 1;\r\n            if (shouldStartEngineInSync) {\r\n                engine.start();\r\n                resolve();\r\n            }\r\n            else {\r\n                var enginePromise = engine.startAsync();\r\n                if (!enginePromise) {\r\n                    // ideally this should never happen\r\n                    setEngineStartPromise(null);\r\n                    rejectAndLogError(\"Failed to get floodgate engine\");\r\n                    return;\r\n                }\r\n                enginePromise.then(function onFulfilled() {\r\n                    resolve();\r\n                }).catch(function onRejected(startError) {\r\n                    setEngineStartPromise(null);\r\n                    rejectAndLogError(\"Failed to start floodgate engine\", startError);\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            setEngineStartPromise(null);\r\n            rejectAndLogError(\"Failed to load floodgate engine: \" + (e && e.toString()), e);\r\n        }\r\n    });\r\n    setEngineStartPromise(startPromise);\r\n    // reset on error\r\n    startPromise.catch(function (error) {\r\n        setEngineStartPromise(null);\r\n    });\r\n    return startPromise;\r\n}\r\nfunction start(loadSynchronously) {\r\n    if (loadSynchronously === void 0) { loadSynchronously = false; }\r\n    return startInternal(loadSynchronously);\r\n}\r\n/**\r\n * A proxy for the engine.stop() method for consistency with the start() method.\r\n */\r\nfunction stop() {\r\n    if (engine) {\r\n        engine.stop();\r\n    }\r\n    setEngineStartPromise(null);\r\n}\r\n/**\r\n * Get the engine object\r\n * @returns the engine object\r\n */\r\nfunction getEngine() {\r\n    return engine;\r\n}\r\n/**\r\n * Reset the floodgate engine state. Used in unit tests.\r\n */\r\nfunction resetEngine() {\r\n    startCount = 0;\r\n    engineStartPromise = null;\r\n    engine = null;\r\n    engineTmsProvider = null;\r\n    userFactsProvider = null;\r\n}\r\n/**\r\n * Reset the floodgate module. Used in unit tests.\r\n */\r\nfunction reset() {\r\n    initialized = false;\r\n    resetEngine();\r\n}\r\n_Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"setFloodgateGetEngine\"](getEngine);\r\n_Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"setFloodgateStart\"](start);\r\n_Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"setFloodgateStop\"](stop);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/CommonFloodgate.ts\n");

/***/ }),

/***/ "./scripts/app/Configuration/Configuration.ts":
/*!****************************************************!*\
  !*** ./scripts/app/Configuration/Configuration.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Configuration\", function() { return Configuration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateFeedbackType\", function() { return validateFeedbackType; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Constants */ \"./scripts/app/Constants.ts\");\n/* harmony import */ var _Localization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../Localization */ \"./scripts/app/Localization.ts\");\n/* harmony import */ var _IInitOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IInitOptions */ \"./scripts/app/Configuration/IInitOptions.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CustomResources\", function() { return _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AgeGroup\", function() { return _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AuthenticationType\", function() { return _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"]; });\n\n/* harmony import */ var _ILaunchOptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ILaunchOptions */ \"./scripts/app/Configuration/ILaunchOptions.ts\");\n/* harmony import */ var _ILaunchOptions__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ILaunchOptions__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _ILaunchOptions__WEBPACK_IMPORTED_MODULE_4__) if([\"default\",\"Configuration\",\"get\",\"validateFeedbackType\",\"CustomResources\",\"AgeGroup\",\"AuthenticationType\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _ILaunchOptions__WEBPACK_IMPORTED_MODULE_4__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/**\r\n * Configuration.ts\r\n *\r\n * Module for logic relating to the sdk user configuration\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Class representing a configuration (user provided options)\r\n */\r\nvar Configuration = /** @class */ (function () {\r\n    function Configuration() {\r\n        this.feedbackSubmitted = false;\r\n    }\r\n    /**\r\n     * Validate category options, default \"show\" to false if CategoryOptions is not provided.\r\n     * @param categories Category options\r\n     * @returns {ICategoryOptions} the validated CategoryOptions\r\n     */\r\n    Configuration.validateCategoryOptions = function (categories) {\r\n        if (!categories) {\r\n            return { show: false };\r\n        }\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](categories.show, \"categories.show\");\r\n        if (categories.customCategories) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectArray\"](categories.customCategories, \"categories.customCategories\");\r\n            for (var _i = 0, _a = categories.customCategories; _i < _a.length; _i++) {\r\n                var customCategory = _a[_i];\r\n                _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](customCategory, \"custom category '\" + customCategory + \"'\");\r\n                if (customCategory.length > 20) {\r\n                    throw \"custom category '\" + customCategory + \"' too long, max 20 characters.\";\r\n                }\r\n            }\r\n        }\r\n        return categories;\r\n    };\r\n    Configuration.prototype.getFeedbackSubmitted = function () {\r\n        return this.feedbackSubmitted;\r\n    };\r\n    Configuration.prototype.setFeedbackSubmitted = function (value) {\r\n        this.feedbackSubmitted = value;\r\n    };\r\n    Configuration.prototype.getCommonInitOptions = function () {\r\n        return this.commonInitOptions;\r\n    };\r\n    Configuration.prototype.getInAppFeedbackInitOptions = function () {\r\n        return this.inAppFeedbackInitOptions;\r\n    };\r\n    Configuration.prototype.getInAppFeedbackLaunchOptions = function () {\r\n        return this.inAppFeedbackLaunchOptions;\r\n    };\r\n    Configuration.prototype.getFloodgateInitOptions = function () {\r\n        return this.floodgateInitOptions;\r\n    };\r\n    Configuration.prototype.getFloodgateSurvey = function () {\r\n        return this.floodgateSurvey;\r\n    };\r\n    Configuration.prototype.getSdkSessionId = function () {\r\n        if (!this.sdkSessionId) {\r\n            this.sdkSessionId = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"guid\"]();\r\n        }\r\n        return this.sdkSessionId;\r\n    };\r\n    Configuration.prototype.getEventSampling = function () {\r\n        return this.eventSampling;\r\n    };\r\n    /**\r\n     * Set initOptions for common functionality.\r\n     */\r\n    Configuration.prototype.setCommonInitOptions = function (passedInitOptions) {\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectObject\"](passedInitOptions, \"passedInitOptions\");\r\n        var initOptions = {\r\n            appId: passedInitOptions.appId,\r\n            applicationGroup: passedInitOptions.applicationGroup || {},\r\n            build: passedInitOptions.build,\r\n            cid: passedInitOptions.cid,\r\n            environment: passedInitOptions.environment,\r\n            intlFilename: passedInitOptions.intlFilename,\r\n            intlUrl: passedInitOptions.intlUrl,\r\n            webSurfacesResourceBaseUrl: passedInitOptions.webSurfacesResourceBaseUrl,\r\n            locale: passedInitOptions.locale,\r\n            onError: passedInitOptions.onError,\r\n            originalLocale: passedInitOptions.locale,\r\n            primaryColour: passedInitOptions.primaryColour,\r\n            secondaryColour: passedInitOptions.secondaryColour,\r\n            sessionId: passedInitOptions.sessionId,\r\n            stylesUrl: passedInitOptions.stylesUrl,\r\n            telemetryGroup: passedInitOptions.telemetryGroup || {},\r\n            userEmail: passedInitOptions.userEmail,\r\n            webGroup: passedInitOptions.webGroup || {},\r\n            eventSampling: passedInitOptions.eventSampling,\r\n            petrolTimeout: passedInitOptions.petrolTimeout,\r\n            isCommercialHost: passedInitOptions.isCommercialHost,\r\n            customResourcesSetExternally: passedInitOptions.customResourcesSetExternally,\r\n            emailPolicyValue: passedInitOptions.emailPolicyValue,\r\n            screenshotPolicyValue: passedInitOptions.screenshotPolicyValue,\r\n            ageGroup: passedInitOptions.ageGroup,\r\n            authenticationType: passedInitOptions.authenticationType,\r\n            applicationSettings: passedInitOptions.applicationSettings,\r\n            webSurfacesSettings: passedInitOptions.webSurfacesSettings,\r\n        };\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectNumber\"](initOptions.appId, \"initOptions.appId\");\r\n        if (!(initOptions.appId % 1 === 0 && initOptions.appId > 0)) {\r\n            throw \"initOptions.appId is not a positive integer: \" + initOptions.appId;\r\n        }\r\n        // tslint:disable-next-line: no-bitwise\r\n        var expectedValues = _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Strings | _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Css;\r\n        if (initOptions.customResourcesSetExternally === undefined) {\r\n            initOptions.customResourcesSetExternally = _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].None;\r\n            // tslint:disable-next-line: no-bitwise\r\n        }\r\n        else if (typeof (initOptions.customResourcesSetExternally) !== \"number\" ||\r\n            // tslint:disable-next-line: no-bitwise\r\n            (initOptions.customResourcesSetExternally | expectedValues) !== expectedValues) {\r\n            throw \"initOptions.customResourcesSetExternally has an invalid value: \" + initOptions.customResourcesSetExternally;\r\n        }\r\n        // tslint:disable-next-line: no-bitwise\r\n        if ((initOptions.customResourcesSetExternally & _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Css) !== _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Css) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.stylesUrl, \"initOptions.stylesUrl\");\r\n        }\r\n        // tslint:disable-next-line: no-bitwise\r\n        if ((initOptions.customResourcesSetExternally & _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Strings) !== _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"CustomResources\"].Strings) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.intlUrl, \"initOptions.intlUrl\");\r\n        }\r\n        if (initOptions.intlFilename !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.intlFilename, \"initOptions.intlFilename\");\r\n        }\r\n        else {\r\n            initOptions.intlFilename = \"officebrowserfeedbackstrings.js\";\r\n        }\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectNumber\"](initOptions.environment, \"initOptions.environment\");\r\n        if (!(initOptions.environment === 1 || initOptions.environment === 0)) {\r\n            throw \"initOptions.environment has a bad value: \" + initOptions.environment;\r\n        }\r\n        if (initOptions.userEmail !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.userEmail, \"initOptions.userEmail\");\r\n        }\r\n        else {\r\n            initOptions.userEmail = \"\";\r\n        }\r\n        if (initOptions.sessionId !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.sessionId, \"initOptions.sessionId\");\r\n        }\r\n        else {\r\n            initOptions.sessionId = \"00000000-0000-0000-0000-000000000000\";\r\n        }\r\n        // Copy sessionID over to telemetryGroup\r\n        initOptions.telemetryGroup.processSessionId = initOptions.sessionId;\r\n        if (initOptions.cid !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.cid, \"initOptions.cid\");\r\n            // Copy cid over to extendedManifestData of applicationGroup\r\n            initOptions.applicationGroup.extendedManifestData = JSON.stringify({ cid: initOptions.cid });\r\n        }\r\n        if (initOptions.build !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.build, \"initOptions.build\");\r\n            var buildRegex = \"^[0-9]{1,9}(\\\\.[0-9]{1,9})?(\\\\.[0-9]{1,9})?(\\\\.[0-9]{1,9})?$\";\r\n            if (!new RegExp(buildRegex).test(initOptions.build)) {\r\n                initOptions.build = \"0.0.0.0\";\r\n            }\r\n        }\r\n        else {\r\n            initOptions.build = \"0.0.0.0\";\r\n        }\r\n        // Copy build over to telemetryGroup\r\n        initOptions.telemetryGroup.officeBuild = initOptions.build;\r\n        var hexColourRegex = new RegExp(\"^#[0-9a-f]{3}([0-9a-f]{3})?$\", \"i\");\r\n        if (initOptions.primaryColour !== undefined) {\r\n            if (!hexColourRegex.test(initOptions.primaryColour)) {\r\n                initOptions.primaryColour = undefined;\r\n            }\r\n        }\r\n        if (initOptions.secondaryColour !== undefined) {\r\n            if (!hexColourRegex.test(initOptions.secondaryColour)) {\r\n                initOptions.secondaryColour = undefined;\r\n            }\r\n        }\r\n        if (initOptions.locale !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.locale, \"initOptions.locale\");\r\n            initOptions.locale = _Localization__WEBPACK_IMPORTED_MODULE_2__[\"validate\"](initOptions.locale);\r\n        }\r\n        else {\r\n            initOptions.locale = \"en\";\r\n        }\r\n        if (initOptions.onError === undefined) {\r\n            initOptions.onError = function (err) { return; };\r\n        }\r\n        if (initOptions.petrolTimeout !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectNumber\"](initOptions.petrolTimeout, \"initOptions.petrolTimeout\");\r\n        }\r\n        if (initOptions.authenticationType !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectEnum\"](initOptions.authenticationType, _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"], \"initOptions.authenticationType\");\r\n        }\r\n        else {\r\n            initOptions.authenticationType = _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"].Unauthenticated;\r\n        }\r\n        // For AAD or Unauthenticated, ageGroup value is unknown, so it's safe to only parse for MSA\r\n        if (initOptions.ageGroup !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectEnum\"](initOptions.ageGroup, _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"], \"initOptions.ageGroup\");\r\n        }\r\n        else {\r\n            initOptions.ageGroup = _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].Undefined;\r\n        }\r\n        this.eventSampling = this.parseEventSamplingOption(initOptions.eventSampling);\r\n        this.commonInitOptions = initOptions;\r\n        this.commonPolicyAllowAADC = this.determineAADCPolicy(initOptions.authenticationType, initOptions.ageGroup);\r\n        if (initOptions.isCommercialHost === undefined || initOptions.isCommercialHost == null) {\r\n            initOptions.isCommercialHost = false; // By default privacy consent is not shown. (From SDK's perspective)\r\n        }\r\n        else {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.isCommercialHost, \"initOptions.isCommercialHost\");\r\n        }\r\n        if (initOptions.emailPolicyValue === undefined) {\r\n            initOptions.emailPolicyValue = 0 /* NotConfigured */;\r\n        }\r\n        else if (typeof (initOptions.emailPolicyValue) !== \"number\" ||\r\n            (initOptions.emailPolicyValue !== 0 /* NotConfigured */ &&\r\n                initOptions.emailPolicyValue !== 1 /* Enabled */ &&\r\n                initOptions.emailPolicyValue !== 2 /* Disabled */)) {\r\n            throw \"initOptions.emailPolicyValue has an invalid value: \" + initOptions.emailPolicyValue;\r\n        }\r\n        if (initOptions.screenshotPolicyValue === undefined) {\r\n            initOptions.screenshotPolicyValue = 0 /* NotConfigured */;\r\n        }\r\n        else if (typeof (initOptions.screenshotPolicyValue) !== \"number\" ||\r\n            initOptions.screenshotPolicyValue !== 0 /* NotConfigured */ &&\r\n                initOptions.screenshotPolicyValue !== 1 /* Enabled */ &&\r\n                initOptions.screenshotPolicyValue !== 2 /* Disabled */) {\r\n            throw \"initOptions.screenshotPolicyValue has an invalid value: \" + initOptions.screenshotPolicyValue;\r\n        }\r\n    };\r\n    /**\r\n     * Set init options for inAppFeedback\r\n     */\r\n    Configuration.prototype.setInAppFeedbackInitOptions = function (passedInitOptions) {\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectObject\"](passedInitOptions, \"passedInitOptions\");\r\n        var initOptions = {\r\n            bugForm: passedInitOptions.bugForm,\r\n            onDismiss: passedInitOptions.onDismiss,\r\n            screenshot: passedInitOptions.screenshot,\r\n            showEmailAddress: passedInitOptions.showEmailAddress,\r\n            userEmail: passedInitOptions.userEmail,\r\n            transitionEnabled: passedInitOptions.transitionEnabled,\r\n            isShowThanks: passedInitOptions.isShowThanks,\r\n            sendFeedbackPolicyValue: passedInitOptions.sendFeedbackPolicyValue,\r\n            feedbackForumUrl: passedInitOptions.feedbackForumUrl !== undefined ?\r\n                passedInitOptions.feedbackForumUrl :\r\n                undefined,\r\n            myFeedbackForumUrl: passedInitOptions.myFeedbackForumUrl !== undefined ?\r\n                passedInitOptions.myFeedbackForumUrl :\r\n                undefined,\r\n        };\r\n        if (initOptions.onDismiss === undefined) {\r\n            initOptions.onDismiss = function (submitted) { return; };\r\n        }\r\n        if (initOptions.bugForm !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.bugForm, \"initOptions.bugForm\");\r\n        }\r\n        else {\r\n            initOptions.bugForm = false;\r\n        }\r\n        if (initOptions.userEmail !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.userEmail, \"initOptions.userEmail\");\r\n        }\r\n        if (initOptions.screenshot !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.screenshot, \"initOptions.screenshot\");\r\n        }\r\n        else {\r\n            initOptions.screenshot = true;\r\n        }\r\n        if (initOptions.showEmailAddress !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.showEmailAddress, \"initOptions.showEmailAddress\");\r\n        }\r\n        else {\r\n            initOptions.showEmailAddress = true;\r\n        }\r\n        if (initOptions.feedbackForumUrl !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.feedbackForumUrl, \"initOptions.feedbackForumUrl\");\r\n        }\r\n        else {\r\n            initOptions.feedbackForumUrl = undefined;\r\n        }\r\n        if (initOptions.isShowThanks !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.isShowThanks, \"initOptions.isShowThanks\");\r\n        }\r\n        else {\r\n            initOptions.isShowThanks = true;\r\n        }\r\n        if (initOptions.myFeedbackForumUrl !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](initOptions.myFeedbackForumUrl, \"initOptions.myFeedbackForumUrl\");\r\n        }\r\n        else {\r\n            initOptions.myFeedbackForumUrl = undefined;\r\n        }\r\n        if (initOptions.transitionEnabled === undefined) {\r\n            initOptions.transitionEnabled = true;\r\n        }\r\n        if (initOptions.sendFeedbackPolicyValue === undefined) {\r\n            initOptions.sendFeedbackPolicyValue = 0 /* NotConfigured */;\r\n        }\r\n        else if (typeof (initOptions.sendFeedbackPolicyValue) !== \"number\" ||\r\n            (initOptions.sendFeedbackPolicyValue !== 0 /* NotConfigured */ &&\r\n                initOptions.sendFeedbackPolicyValue !== 1 /* Enabled */ &&\r\n                initOptions.sendFeedbackPolicyValue !== 2 /* Disabled */)) {\r\n            throw \"initOptions.sendFeedbackPolicyValue has an invalid value: \" + initOptions.sendFeedbackPolicyValue;\r\n        }\r\n        this.inAppFeedbackInitOptions = initOptions;\r\n    };\r\n    /**\r\n     * Set launch options for inAppFeedback\r\n     */\r\n    Configuration.prototype.setInAppFeedbackLaunchOptions = function (launchOptions) {\r\n        if (!this.commonInitOptions) {\r\n            throw \"commonInitOptions not set\";\r\n        }\r\n        if (!launchOptions) {\r\n            launchOptions = {};\r\n        }\r\n        // Override any setting done in LaunchOptions for the metadataGroups\r\n        this.commonInitOptions.applicationGroup = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"overrideValues\"](launchOptions.applicationGroup, this.commonInitOptions.applicationGroup);\r\n        this.commonInitOptions.telemetryGroup = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"overrideValues\"](launchOptions.telemetryGroup, this.commonInitOptions.telemetryGroup);\r\n        this.commonInitOptions.webGroup = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"overrideValues\"](launchOptions.webGroup, this.commonInitOptions.webGroup);\r\n        launchOptions.categories = Configuration.validateCategoryOptions(launchOptions.categories);\r\n        this.inAppFeedbackLaunchOptions = launchOptions;\r\n    };\r\n    /**\r\n     * Set init options for floodgate\r\n     */\r\n    Configuration.prototype.setFloodgateInitOptions = function (passedInitOptions) {\r\n        _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectObject\"](passedInitOptions, \"passedInitOptions\");\r\n        var initOptions = {\r\n            autoDismiss: passedInitOptions.autoDismiss,\r\n            campaignDefinitions: passedInitOptions.campaignDefinitions,\r\n            campaignFlights: passedInitOptions.campaignFlights,\r\n            campaignQueryParameters: passedInitOptions.campaignQueryParameters,\r\n            onDismiss: passedInitOptions.onDismiss,\r\n            onSurveyActivatedCallback: passedInitOptions.onSurveyActivatedCallback,\r\n            settingStorageCallback: passedInitOptions.settingStorageCallback,\r\n            uIStringGetter: passedInitOptions.uIStringGetter,\r\n            authTokenCallback: passedInitOptions.authTokenCallback,\r\n            surveyEnabled: passedInitOptions.surveyEnabled,\r\n            showEmailAddress: passedInitOptions.showEmailAddress,\r\n            augLoopCallback: passedInitOptions.augLoopCallback,\r\n            customerVoiceSurveyParams: passedInitOptions.customerVoiceSurveyParams,\r\n            governanceServiceEnabled: passedInitOptions.governanceServiceEnabled,\r\n            governanceServiceConfig: passedInitOptions.governanceServiceConfig,\r\n            personalizerEnabled: passedInitOptions.personalizerEnabled,\r\n            messagingServiceSettings: passedInitOptions.messagingServiceSettings,\r\n        };\r\n        if (initOptions.autoDismiss === undefined) {\r\n            initOptions.autoDismiss = 0 /* NoAutoDismiss */;\r\n        }\r\n        if (initOptions.onDismiss === undefined) {\r\n            initOptions.onDismiss = function (campaignId, submitted) { return; };\r\n        }\r\n        if (initOptions.onSurveyActivatedCallback === undefined) {\r\n            var defaultOnSurveyActivatedCallback = {\r\n                onSurveyActivated: function (launcher, survey, surveyParams) {\r\n                    launcher.launch();\r\n                },\r\n            };\r\n            initOptions.onSurveyActivatedCallback = defaultOnSurveyActivatedCallback;\r\n        }\r\n        if (initOptions.uIStringGetter === undefined) {\r\n            initOptions.uIStringGetter = function (str) { return str; }; // By default return the string as is.\r\n        }\r\n        if (initOptions.surveyEnabled === undefined) {\r\n            initOptions.surveyEnabled = true; // By default surveys are enabled. (From SDK's perspective)\r\n        }\r\n        else {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.surveyEnabled, \"surveyEnabled\");\r\n        }\r\n        if (initOptions.showEmailAddress !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.showEmailAddress, \"initOptionsFloodgate.showEmailAddress\");\r\n        }\r\n        else {\r\n            initOptions.showEmailAddress = true; // By default email field and collection is enabled. (From SDK's perspective)\r\n        }\r\n        if (initOptions.governanceServiceEnabled !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.governanceServiceEnabled, \"initOptionsFloodgate.governanceServiceEnable\");\r\n        }\r\n        else {\r\n            initOptions.governanceServiceEnabled = false; // By default governanceServiceEnable is disabled\r\n        }\r\n        if (initOptions.governanceServiceEnabled) {\r\n            initOptions.governanceServiceConfig = this.parseGovernanceServiceConfig(initOptions.governanceServiceConfig !== undefined ?\r\n                initOptions.governanceServiceConfig :\r\n                {});\r\n        }\r\n        if (initOptions.customerVoiceSurveyParams === undefined) {\r\n            initOptions.customerVoiceSurveyParams = { cvFlights: \"\", isCVSurveyEnabled: false, productName: \"\", uiHost: \"\" };\r\n        }\r\n        if (initOptions.personalizerEnabled !== undefined) {\r\n            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectBoolean\"](initOptions.personalizerEnabled, \"initOptionsFloodgate.personalizerEnabled\");\r\n        }\r\n        else {\r\n            initOptions.personalizerEnabled = false; // By default personalizerEnabled is disabled\r\n        }\r\n        this.floodgateInitOptions = initOptions;\r\n    };\r\n    /**\r\n     * Set the floodgate survey\r\n     */\r\n    Configuration.prototype.setFloodgateSurvey = function (survey) {\r\n        this.floodgateSurvey = survey;\r\n    };\r\n    // Checks if the surveyEnabled policy is true or false.\r\n    Configuration.prototype.checkIfSurveysEnabled = function () {\r\n        // If no floodgateInitOptions defined, return true for surveyEnabled\r\n        var policyAllowSurvey = this.floodgateInitOptions ? this.floodgateInitOptions.surveyEnabled : true;\r\n        return policyAllowSurvey && this.commonPolicyAllowAADC;\r\n    };\r\n    /**\r\n     * Return the flag the Feedback and Survey enabled by AADC.\r\n     */\r\n    Configuration.prototype.isFeedbackSurveyEnabledByAADC = function () {\r\n        return this.commonPolicyAllowAADC;\r\n    };\r\n    Configuration.prototype.getCVSurveyFlights = function () {\r\n        return this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n            this.floodgateInitOptions.customerVoiceSurveyParams.cvFlights : \"\";\r\n    };\r\n    Configuration.prototype.isCVSurveyEnabled = function () {\r\n        return this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n            this.floodgateInitOptions.customerVoiceSurveyParams.isCVSurveyEnabled : false;\r\n    };\r\n    Configuration.prototype.getProductName = function () {\r\n        return this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n            this.floodgateInitOptions.customerVoiceSurveyParams.productName : \"\";\r\n    };\r\n    Configuration.prototype.getUIHost = function () {\r\n        return this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n            this.floodgateInitOptions.customerVoiceSurveyParams.uiHost : \"\";\r\n    };\r\n    /**\r\n     * Check AADC rule at once since Configuration cannot be set again.\r\n     * So that we don't need to repeat the same process over again.\r\n     */\r\n    Configuration.prototype.determineAADCPolicy = function (authenticationType, ageGroup) {\r\n        // Return Based on authentication first\r\n        if (authenticationType === _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"].Unauthenticated ||\r\n            authenticationType === _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"].AAD) {\r\n            return true;\r\n        }\r\n        // Return based on AgeGroup\r\n        return ageGroup !== _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].MinorWithParentalConsent &&\r\n            ageGroup !== _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].MinorWithoutParentalConsent;\r\n    };\r\n    // Keep implementation in sync with %SRCROOT%\\privacy\\idconsentprovider\\IdentityBasedConsentGroupProvider.cpp\r\n    Configuration.prototype.getUserConsentGroup = function () {\r\n        var authenticationType = this.commonInitOptions.authenticationType;\r\n        if (authenticationType === _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"].Unauthenticated ||\r\n            authenticationType === _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AuthenticationType\"].AAD) {\r\n            return 1 /* CanConsent */;\r\n        }\r\n        var ageGroup = this.commonInitOptions.ageGroup;\r\n        switch (ageGroup) {\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].Undefined:\r\n                return 1 /* CanConsent */;\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].MinorWithoutParentalConsent:\r\n                return 3 /* CannotConsent */;\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].MinorWithParentalConsent:\r\n                return 3 /* CannotConsent */;\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].Adult:\r\n                return 1 /* CanConsent */;\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].NotAdult:\r\n                return 2 /* PartialConsent */;\r\n            case _IInitOptions__WEBPACK_IMPORTED_MODULE_3__[\"AgeGroup\"].MinorNoParentalConsentRequired:\r\n                return 1 /* CanConsent */;\r\n            default:\r\n                return 3 /* CannotConsent */;\r\n        }\r\n        return 3 /* CannotConsent */;\r\n    };\r\n    Configuration.prototype.parseEventSamplingOption = function (samplingOptions) {\r\n        var eventInitSampling = { event: {} };\r\n        if (samplingOptions !== undefined) {\r\n            // Iterating through init options\r\n            for (var index in samplingOptions) {\r\n                if (samplingOptions.hasOwnProperty(index)) {\r\n                    // Check for correct Type\r\n                    switch (samplingOptions[index].type) {\r\n                        case \"Event\":\r\n                            // Parsing the Name and SampleRate\r\n                            var sampleRate = samplingOptions[index].sampleRate;\r\n                            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectNumber\"](sampleRate, \"initOption.EventSampling.SampleRate\");\r\n                            _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](samplingOptions[index].name, \"initOption.EventSampling.Name\");\r\n                            // check the range for sampling percentage\r\n                            if (sampleRate < 0 || sampleRate > 1) {\r\n                                throw \"initOption.EventSampling.\" + samplingOptions[index].name + \".SampleRate is out of range\";\r\n                            }\r\n                            // finally, save the sampling event\r\n                            eventInitSampling.event[samplingOptions[index].name] = sampleRate;\r\n                            break;\r\n                        default:\r\n                            throw \"initOption.EventSampling.Type value is not recognized\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return eventInitSampling;\r\n    };\r\n    Configuration.prototype.parseGovernanceServiceConfig = function (config) {\r\n        var _a, _b, _c, _d;\r\n        return {\r\n            // by default, disable the trigger in failure\r\n            forceServicelessSurveyDisplay: (_a = config.forceServicelessSurveyDisplay) !== null && _a !== void 0 ? _a : false,\r\n            // by default, no retry\r\n            retry: (_b = config.retry) !== null && _b !== void 0 ? _b : 1,\r\n            // by default, timeout is 1000 miliseconds\r\n            timeout: (_c = config.timeout) !== null && _c !== void 0 ? _c : 1000,\r\n            // simple request is default to false\r\n            simpleRequestEnabled: (_d = config.simpleRequestEnabled) !== null && _d !== void 0 ? _d : false,\r\n        };\r\n    };\r\n    return Configuration;\r\n}());\r\n\r\nvar configuration = new Configuration();\r\n/**\r\n * Get the current configuration\r\n */\r\nfunction get() {\r\n    return configuration;\r\n}\r\n/**\r\n * Validate feedbackType\r\n * @param feedbackType feedbackType\r\n * @returns {Constants.FeedbackType} the validated feedbackType\r\n */\r\nfunction validateFeedbackType(feedbackType) {\r\n    _Utils__WEBPACK_IMPORTED_MODULE_0__[\"expectString\"](feedbackType, \"feedbackType\");\r\n    if (feedbackType === _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"][_Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Smile]) {\r\n        return _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Smile;\r\n    }\r\n    else if (feedbackType === _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"][_Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Frown]) {\r\n        return _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Frown;\r\n    }\r\n    else if (feedbackType === _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"][_Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Bug]) {\r\n        return _Constants__WEBPACK_IMPORTED_MODULE_1__[\"FeedbackType\"].Bug;\r\n    }\r\n    else {\r\n        throw \"feedbackType should be one of Smile, Frown or Bug\";\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Configuration/Configuration.ts\n");

/***/ }),

/***/ "./scripts/app/Configuration/DynamicConfiguration.ts":
/*!***********************************************************!*\
  !*** ./scripts/app/Configuration/DynamicConfiguration.ts ***!
  \***********************************************************/
/*! exports provided: getDynamicSetting, resetDynamicSettingsTmsgCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDynamicSetting\", function() { return getDynamicSetting; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetDynamicSettingsTmsgCache\", function() { return resetDynamicSettingsTmsgCache; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../FloodgateCore/FloodgateStorageProvider */ \"./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\");\n/* harmony import */ var _TargetedMessaging_TargetedMessagingCache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TargetedMessaging/TargetedMessagingCache */ \"./scripts/app/TargetedMessaging/TargetedMessagingCache.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n\r\n\r\n\r\n\r\nvar isNOU = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"isNOU\"];\r\nvar dynamicSettingsTmsgCache = null;\r\nfunction getDynamicSetting(key, defaultValue) {\r\n    try {\r\n        if (!dynamicSettingsTmsgCache && _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isStorageAvailable()) {\r\n            dynamicSettingsTmsgCache = new _TargetedMessaging_TargetedMessagingCache__WEBPACK_IMPORTED_MODULE_2__[\"TargetedMessagingCache\"]([\"DynamicSettings\" /* dynamicSettings */]);\r\n        }\r\n        if (!dynamicSettingsTmsgCache) {\r\n            return defaultValue;\r\n        }\r\n        var settingsObj = dynamicSettingsTmsgCache.getItemContent(\"DynamicSettings\" /* dynamicSettings */);\r\n        if (!isNOU(settingsObj)\r\n            && settingsObj.hasOwnProperty(key)\r\n            && !isNOU(settingsObj[key])) {\r\n            var settingValue = settingsObj[key];\r\n            // parse types\r\n            if (typeof defaultValue === \"number\" && typeof settingValue !== \"number\") {\r\n                if (typeof settingValue === \"string\") {\r\n                    var returnValue = settingValue.indexOf(\".\") === -1 ? parseInt(settingValue, 10) : parseFloat(settingValue);\r\n                    return isNaN(returnValue) ? defaultValue : returnValue;\r\n                }\r\n                return defaultValue;\r\n            }\r\n            return settingValue;\r\n        }\r\n    }\r\n    catch (error) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_3__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_3__[\"EventIds\"].Common.Error.VALUE, 2 /* Error */, {\r\n            ErrorMessage: \"Error reading dynamic setting \" + (error && error.message),\r\n            Type: key,\r\n        });\r\n    }\r\n    return defaultValue;\r\n}\r\nfunction resetDynamicSettingsTmsgCache() {\r\n    dynamicSettingsTmsgCache = null;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Db25maWd1cmF0aW9uL0R5bmFtaWNDb25maWd1cmF0aW9uLnRzP2RiOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBa0M7QUFDK0M7QUFDSTtBQUd2QztBQUV0QyxTQUFLLEdBQUssNENBQUwsQ0FBVztBQW9DeEIsSUFBSSx3QkFBd0IsR0FBMkIsSUFBSSxDQUFDO0FBRXJELFNBQVMsaUJBQWlCLENBQUksR0FBZSxFQUFFLFlBQWU7SUFDcEUsSUFBSTtRQUNILElBQUksQ0FBQyx3QkFBd0IsSUFBSSwrRUFBd0IsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFO1lBQy9FLHdCQUF3QixHQUFJLElBQUksZ0dBQXNCLENBQUMseUNBQTZCLENBQUMsQ0FBQztTQUN0RjtRQUVELElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUM5QixPQUFPLFlBQVksQ0FBQztTQUNwQjtRQUVELElBQU0sV0FBVyxHQUFHLHdCQUF3QixDQUFDLGNBQWMseUNBQWdELENBQUM7UUFDNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7ZUFDbkIsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7ZUFDL0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDN0IsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLGNBQWM7WUFDZCxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLEVBQUU7Z0JBQ3pFLElBQUksT0FBTyxZQUFZLEtBQUssUUFBUSxFQUFFO29CQUNyQyxJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzdHLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQTJCLENBQUM7aUJBQ3ZFO2dCQUVELE9BQU8sWUFBWSxDQUFDO2FBQ3BCO1lBRUQsT0FBTyxZQUFZLENBQUM7U0FDcEI7S0FDRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2YsMERBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQzNCLHlEQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFFbkM7WUFDQyxZQUFZLEVBQUUsb0NBQWlDLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFFO1lBQ3ZFLElBQUksRUFBRSxHQUFHO1NBQ1QsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLFlBQVksQ0FBQztBQUNyQixDQUFDO0FBRU0sU0FBUyw2QkFBNkI7SUFDNUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9Db25maWd1cmF0aW9uL0R5bmFtaWNDb25maWd1cmF0aW9uLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uL1V0aWxzXCI7XHJcbmltcG9ydCBGbG9vZGdhdGVTdG9yYWdlUHJvdmlkZXIgZnJvbSBcIi4uL0Zsb29kZ2F0ZUNvcmUvRmxvb2RnYXRlU3RvcmFnZVByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFRhcmdldGVkTWVzc2FnaW5nQ2FjaGUgfSBmcm9tIFwiLi4vVGFyZ2V0ZWRNZXNzYWdpbmcvVGFyZ2V0ZWRNZXNzYWdpbmdDYWNoZVwiO1xyXG5pbXBvcnQgeyBDb250ZW50VHlwZSB9IGZyb20gXCIuLi9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ0NvbnRlbnRUeXBlXCI7XHJcblxyXG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuLi9Mb2dnaW5nL0xvZ2dpbmdcIjtcclxuXHJcbmNvbnN0IHsgaXNOT1UgfSA9IFV0aWxzO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gU2V0dGluZ0tleSB7XHJcblx0Ly8gR2VuZXJhbFxyXG5cdGxvZ0xldmVsU2V0dGluZ3MgPSBcIkxvZ0xldmVsU2V0dGluZ3NcIixcclxuXHJcblx0Ly8gV2ViIHN1cmZhY2VzXHJcblx0dGVhY2hpbmdNZXNzYWdlQ29vbGRvd24gPSBcIlRlYWNoaW5nTWVzc2FnZUNvb2xkb3duXCIsXHJcblx0d2ViU3VyZmFjZXNJbnRMaW5rID0gXCJXZWJTdXJmYWNlc0ludExpbmtcIixcclxuXHR3ZWJTdXJmYWNlc1Byb2RMaW5rID0gXCJXZWJTdXJmYWNlc1Byb2RMaW5rXCIsXHJcblxyXG5cdC8vIFRNUyBzZXR0aW5nc1xyXG5cdHRtc0FwcElkID0gXCJUbXNBcHBJZFwiLFxyXG5cdHRtc1NlcnZpY2VVcmwgPSBcIlRtc1NlcnZpY2VVcmxcIixcclxuXHR0bXNBY3Rpb25VcmwgPSBcIlRtc0FjdGlvblVybFwiLFxyXG5cdHRtc0xvYWRUaW1lb3V0ID0gXCJUbXNMb2FkVGltZW91dFwiLFxyXG5cdHRtc01lc3NhZ2VNZXRhZGF0YUV4cGlyeSA9IFwiVG1zTWVzc2FnZU1ldGFkYXRhRXhwaXJ5XCIsXHJcblx0dG1zVXNlckdvdmVybmFuY2VSdWxlc0V4cGlyeSA9IFwiVG1zVXNlckdvdmVybmFuY2VSdWxlc0V4cGlyeVwiLFxyXG5cdHRtc0NhbXBhaWduQ29udGVudEV4cGlyeSA9IFwiVG1zQ2FtcGFpZ25Db250ZW50RXhwaXJ5XCIsXHJcblx0dG1zRHluYW1pY1NldHRpbmdzRXhwaXJ5ID0gXCJUbXNEeW5hbWljU2V0dGluZ3NFeHBpcnlcIixcclxuXHR0bXNMb2dMZXZlbFNldHRpbmdzRXhwaXJ5ID0gXCJUbXNMb2dMZXZlbFNldHRpbmdzRXhwaXJ5XCIsXHJcblx0dG1zVXNlckZhY3RzRXhwaXJ5ID0gXCJUbXNVc2VyRmFjdHNFeHBpcnlcIixcclxuXHJcblx0Ly8gVHVsaXBzXHJcblx0dHVsaXBzQXBwSWQgPSBcIlR1bGlwc0FwcElkXCIsXHJcblx0dHVsaXBzTG9hZFRpbWVvdXQgPSBcIlR1bGlwc0xvYWRUaW1lb3V0XCIsXHJcblx0dHVsaXBzU2VydmljZVVybCA9IFwiVHVsaXBzU2VydmljZVVybFwiLFxyXG5cdHR1bGlwc0luZ2VzdGlvblRpbWVJbnRlcnZhbCA9IFwiVHVsaXBzSW5nZXN0aW9uVGltZUludGVydmFsXCIsXHJcblxyXG5cdC8vIEF1Z0xvb3BcclxuXHR0dWxpcHNBdWdMb29wQW5ub3RhdGlvbk5hbWUgPSBcIlR1bGlwc0F1Z0xvb3BBbm5vdGF0aW9uTmFtZVwiLFxyXG5cdHR1bGlwc0F1Z0xvb3BQYWNrYWdlRGVsYXlMb2FkID0gXCJUdWxpcHNBdWdMb29wUGFja2FnZURlbGF5TG9hZFwiLFxyXG5cdHR1bGlwc0F1Z0xvb3BMb2FkUmV0cnlUaW1lcyA9IFwiVHVsaXBzQXVnTG9vcExvYWRSZXRyeVRpbWVzXCIsXHJcblx0dHVsaXBzQXVnTG9vcExvYWRUaW1lb3V0ID0gXCJUdWxpcHNBdWdMb29wTG9hZFRpbWVvdXRcIixcclxufVxyXG5cclxubGV0IGR5bmFtaWNTZXR0aW5nc1Rtc2dDYWNoZTogVGFyZ2V0ZWRNZXNzYWdpbmdDYWNoZSA9IG51bGw7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHluYW1pY1NldHRpbmc8VD4oa2V5OiBTZXR0aW5nS2V5LCBkZWZhdWx0VmFsdWU6IFQpOiBUIHtcclxuXHR0cnlcdHtcclxuXHRcdGlmICghZHluYW1pY1NldHRpbmdzVG1zZ0NhY2hlICYmIEZsb29kZ2F0ZVN0b3JhZ2VQcm92aWRlci5pc1N0b3JhZ2VBdmFpbGFibGUoKSkge1xyXG5cdFx0XHRkeW5hbWljU2V0dGluZ3NUbXNnQ2FjaGUgPSAgbmV3IFRhcmdldGVkTWVzc2FnaW5nQ2FjaGUoW0NvbnRlbnRUeXBlLmR5bmFtaWNTZXR0aW5nc10pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghZHluYW1pY1NldHRpbmdzVG1zZ0NhY2hlKSB7XHJcblx0XHRcdHJldHVybiBkZWZhdWx0VmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc2V0dGluZ3NPYmogPSBkeW5hbWljU2V0dGluZ3NUbXNnQ2FjaGUuZ2V0SXRlbUNvbnRlbnQ8UmVjb3JkPHN0cmluZywgVD4+KENvbnRlbnRUeXBlLmR5bmFtaWNTZXR0aW5ncyk7XHJcblx0XHRpZiAoIWlzTk9VKHNldHRpbmdzT2JqKVxyXG5cdFx0XHQmJiBzZXR0aW5nc09iai5oYXNPd25Qcm9wZXJ0eShrZXkpXHJcblx0XHRcdCYmICFpc05PVShzZXR0aW5nc09ialtrZXldKSkge1xyXG5cdFx0XHRjb25zdCBzZXR0aW5nVmFsdWUgPSBzZXR0aW5nc09ialtrZXldO1xyXG5cclxuXHRcdFx0Ly8gcGFyc2UgdHlwZXNcclxuXHRcdFx0aWYgKHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHNldHRpbmdWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc2V0dGluZ1ZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcblx0XHRcdFx0XHRjb25zdCByZXR1cm5WYWx1ZSA9IHNldHRpbmdWYWx1ZS5pbmRleE9mKFwiLlwiKSA9PT0gLTEgPyBwYXJzZUludChzZXR0aW5nVmFsdWUsIDEwKSA6IHBhcnNlRmxvYXQoc2V0dGluZ1ZhbHVlKTtcclxuXHRcdFx0XHRcdHJldHVybiBpc05hTihyZXR1cm5WYWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiByZXR1cm5WYWx1ZSBhcyB1bmtub3duIGFzIFQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ1ZhbHVlO1xyXG5cdFx0fVxyXG5cdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRMb2dnaW5nLmdldExvZ2dlcigpLmxvZ0V2ZW50KFxyXG5cdFx0XHRMb2dnaW5nLkV2ZW50SWRzLkNvbW1vbi5FcnJvci5WQUxVRSxcclxuXHRcdFx0TG9nZ2luZy5Mb2dMZXZlbC5FcnJvcixcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEVycm9yTWVzc2FnZTogYEVycm9yIHJlYWRpbmcgZHluYW1pYyBzZXR0aW5nICR7ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX1gLFxyXG5cdFx0XHRcdFR5cGU6IGtleSxcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXREeW5hbWljU2V0dGluZ3NUbXNnQ2FjaGUoKSB7XHJcblx0ZHluYW1pY1NldHRpbmdzVG1zZ0NhY2hlID0gbnVsbDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Configuration/DynamicConfiguration.ts\n");

/***/ }),

/***/ "./scripts/app/Configuration/IInitOptions.ts":
/*!***************************************************!*\
  !*** ./scripts/app/Configuration/IInitOptions.ts ***!
  \***************************************************/
/*! exports provided: CustomResources, AgeGroup, AuthenticationType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CustomResources\", function() { return CustomResources; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AgeGroup\", function() { return AgeGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AuthenticationType\", function() { return AuthenticationType; });\n// bit mask flag: values should be set 0,1,2,4,8,16, etc...\r\n// Example for Css and Strings both, use 3.\r\nvar CustomResources;\r\n(function (CustomResources) {\r\n    CustomResources[CustomResources[\"None\"] = 0] = \"None\";\r\n    CustomResources[CustomResources[\"Css\"] = 1] = \"Css\";\r\n    CustomResources[CustomResources[\"Strings\"] = 2] = \"Strings\";\r\n})(CustomResources || (CustomResources = {}));\r\nvar AgeGroup;\r\n(function (AgeGroup) {\r\n    AgeGroup[AgeGroup[\"Undefined\"] = 0] = \"Undefined\";\r\n    AgeGroup[AgeGroup[\"MinorWithoutParentalConsent\"] = 1] = \"MinorWithoutParentalConsent\";\r\n    AgeGroup[AgeGroup[\"MinorWithParentalConsent\"] = 2] = \"MinorWithParentalConsent\";\r\n    AgeGroup[AgeGroup[\"Adult\"] = 3] = \"Adult\";\r\n    AgeGroup[AgeGroup[\"NotAdult\"] = 4] = \"NotAdult\";\r\n    AgeGroup[AgeGroup[\"MinorNoParentalConsentRequired\"] = 5] = \"MinorNoParentalConsentRequired\";\r\n})(AgeGroup || (AgeGroup = {}));\r\nvar AuthenticationType;\r\n(function (AuthenticationType) {\r\n    AuthenticationType[AuthenticationType[\"MSA\"] = 0] = \"MSA\";\r\n    AuthenticationType[AuthenticationType[\"AAD\"] = 1] = \"AAD\";\r\n    AuthenticationType[AuthenticationType[\"Unauthenticated\"] = 2] = \"Unauthenticated\";\r\n})(AuthenticationType || (AuthenticationType = {}));\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Configuration/IInitOptions.ts\n");

/***/ }),

/***/ "./scripts/app/Configuration/ILaunchOptions.ts":
/*!*****************************************************!*\
  !*** ./scripts/app/Configuration/ILaunchOptions.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * LaunchOptions interfaces\r\n */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Db25maWd1cmF0aW9uL0lMYXVuY2hPcHRpb25zLnRzP2YyOWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUciLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9Db25maWd1cmF0aW9uL0lMYXVuY2hPcHRpb25zLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIExhdW5jaE9wdGlvbnMgaW50ZXJmYWNlc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7SUNhdGVnb3J5T3B0aW9uc30gZnJvbSBcIi4vSUNhdGVnb3J5T3B0aW9uc1wiO1xyXG5pbXBvcnQge0lNYW5pZmVzdERhdGFBcHBsaWNhdGlvbiwgSU1hbmlmZXN0RGF0YVRlbGVtZXRyeSwgSU1hbmlmZXN0RGF0YVdlYn0gZnJvbSBcIi4vLi4vVHJhbnNwb3J0L1RyYW5zcG9ydFwiO1xyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBmb3IgbGF1bmNoIG9wdGlvbnMgZm9yIGluQXBwRmVlZGJhY2tcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxhdW5jaE9wdGlvbnNJbkFwcEZlZWRiYWNrIHtcclxuXHRhcHBsaWNhdGlvbkdyb3VwPzogSU1hbmlmZXN0RGF0YUFwcGxpY2F0aW9uO1xyXG5cdHRlbGVtZXRyeUdyb3VwPzogSU1hbmlmZXN0RGF0YVRlbGVtZXRyeTtcclxuXHR3ZWJHcm91cD86IElNYW5pZmVzdERhdGFXZWI7XHJcblx0Y2F0ZWdvcmllcz86IElDYXRlZ29yeU9wdGlvbnM7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/Configuration/ILaunchOptions.ts\n");

/***/ }),

/***/ "./scripts/app/Constants.ts":
/*!**********************************!*\
  !*** ./scripts/app/Constants.ts ***!
  \**********************************/
/*! exports provided: customerVoiceLauncherType, customerVoiceSurveyUX, FeedbackType, DynamicScriptUrls, GUIDs, SDK_VERSION_PREFIX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"customerVoiceLauncherType\", function() { return customerVoiceLauncherType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"customerVoiceSurveyUX\", function() { return customerVoiceSurveyUX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeedbackType\", function() { return FeedbackType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DynamicScriptUrls\", function() { return DynamicScriptUrls; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GUIDs\", function() { return GUIDs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SDK_VERSION_PREFIX\", function() { return SDK_VERSION_PREFIX; });\n/**\r\n * Constants.ts\r\n *\r\n * A module for non-UI constants.\r\n */\r\n/**\r\n * Value for the Customer Voice Launcher Type\r\n */\r\nvar customerVoiceLauncherType = \"customervoice\";\r\n/**\r\n * Value for the Customer Voice Survey text for adding to App data\r\n */\r\nvar customerVoiceSurveyUX = \"Customer Voice Survey UX\";\r\n/**\r\n * Values for types of feedback that go into the json\r\n * Also used to determine the FormTemplate used on each one of the feedback types.\r\n */\r\nvar FeedbackType;\r\n(function (FeedbackType) {\r\n    FeedbackType[FeedbackType[\"Smile\"] = 0] = \"Smile\";\r\n    FeedbackType[FeedbackType[\"Frown\"] = 1] = \"Frown\";\r\n    FeedbackType[FeedbackType[\"Idea\"] = 2] = \"Idea\";\r\n    FeedbackType[FeedbackType[\"Bug\"] = 3] = \"Bug\";\r\n    FeedbackType[FeedbackType[\"IdeaRedirect\"] = 4] = \"IdeaRedirect\";\r\n})(FeedbackType || (FeedbackType = {}));\r\n/**\r\n * Dynamic scripts\r\n */\r\nvar DynamicScriptUrls = /** @class */ (function () {\r\n    function DynamicScriptUrls() {\r\n    }\r\n    /**\r\n     * Link to the Office WebSurfaces UX package\r\n     */\r\n    /* tslint:disable:max-line-length */\r\n    DynamicScriptUrls.WebSurfacesIntLink = \"https://content.growth.office.net/mirrored/resources/programmablesurfaces/int/officewebsurfaces.core.min.js\";\r\n    DynamicScriptUrls.WebSurfacesProdLink = \"https://content.growth.office.net/mirrored/resources/programmablesurfaces/prod/officewebsurfaces.core.min.js\";\r\n    return DynamicScriptUrls;\r\n}());\r\n\r\n/**\r\n * Constant GUIDs\r\n */\r\nvar GUIDs = /** @class */ (function () {\r\n    function GUIDs() {\r\n    }\r\n    GUIDs.TMSAppID = \"4c4f550b-42b2-4a16-93f9-fdb9e01bb6ed\";\r\n    GUIDs.TULIPSAppID = \"05c88d91-956e-46b4-91b0-77a33cc21a4d\";\r\n    return GUIDs;\r\n}());\r\n\r\n/**\r\n * Prefix for SDK version string\r\n */\r\nvar SDK_VERSION_PREFIX = \"Web SDK v\";\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Db25zdGFudHMudHM/MTBhZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0dBSUc7QUFFSDs7R0FFRztBQUNJLElBQU0seUJBQXlCLEdBQUcsZUFBZSxDQUFDO0FBRXpEOztHQUVHO0FBQ0ksSUFBTSxxQkFBcUIsR0FBRywwQkFBMEIsQ0FBQztBQUVoRTs7O0dBR0c7QUFDSCxJQUFZLFlBTVg7QUFORCxXQUFZLFlBQVk7SUFDdkIsaURBQUs7SUFDTCxpREFBSztJQUNMLCtDQUFJO0lBQ0osNkNBQUc7SUFDSCwrREFBWTtBQUNiLENBQUMsRUFOVyxZQUFZLEtBQVosWUFBWSxRQU12QjtBQWlDRDs7R0FFRztBQUNIO0lBQUE7SUFPQSxDQUFDO0lBTkE7O09BRUc7SUFDSCxvQ0FBb0M7SUFDdEIsb0NBQWtCLEdBQVcsNkdBQTZHLENBQUM7SUFDM0kscUNBQW1CLEdBQVcsOEdBQThHLENBQUM7SUFDNUosd0JBQUM7Q0FBQTtBQVA2QjtBQVM5Qjs7R0FFRztBQUNIO0lBQUE7SUFHQSxDQUFDO0lBRmMsY0FBUSxHQUFXLHNDQUFzQyxDQUFDO0lBQzFELGlCQUFXLEdBQVcsc0NBQXNDLENBQUM7SUFDNUUsWUFBQztDQUFBO0FBSGlCO0FBaUJsQjs7R0FFRztBQUNJLElBQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUFDIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvQ29uc3RhbnRzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbnN0YW50cy50c1xyXG4gKlxyXG4gKiBBIG1vZHVsZSBmb3Igbm9uLVVJIGNvbnN0YW50cy5cclxuICovXHJcblxyXG4vKipcclxuICogVmFsdWUgZm9yIHRoZSBDdXN0b21lciBWb2ljZSBMYXVuY2hlciBUeXBlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY3VzdG9tZXJWb2ljZUxhdW5jaGVyVHlwZSA9IFwiY3VzdG9tZXJ2b2ljZVwiO1xyXG5cclxuLyoqXHJcbiAqIFZhbHVlIGZvciB0aGUgQ3VzdG9tZXIgVm9pY2UgU3VydmV5IHRleHQgZm9yIGFkZGluZyB0byBBcHAgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGN1c3RvbWVyVm9pY2VTdXJ2ZXlVWCA9IFwiQ3VzdG9tZXIgVm9pY2UgU3VydmV5IFVYXCI7XHJcblxyXG4vKipcclxuICogVmFsdWVzIGZvciB0eXBlcyBvZiBmZWVkYmFjayB0aGF0IGdvIGludG8gdGhlIGpzb25cclxuICogQWxzbyB1c2VkIHRvIGRldGVybWluZSB0aGUgRm9ybVRlbXBsYXRlIHVzZWQgb24gZWFjaCBvbmUgb2YgdGhlIGZlZWRiYWNrIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gRmVlZGJhY2tUeXBlIHtcclxuXHRTbWlsZSxcclxuXHRGcm93bixcclxuXHRJZGVhLFxyXG5cdEJ1ZyxcclxuXHRJZGVhUmVkaXJlY3QsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWx1ZXMgZm9yIHR5cGVzIG9mIHBhbmVscyB0aGF0IGdvIGludG8gdGhlIGpzb25cclxuICogQWxzbyB1c2VkIHRvIGRldGVybWluZSB0aGUgUGFuZWxUZW1wbGF0ZSB1c2VkIG9uIGVhY2ggb25lIG9mIHRoZSBwYW5lbCB0eXBlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbnVtIFBhbmVsVHlwZSB7XHJcblx0VGhhbmtzXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWx1ZXMgZm9yIHRoZSBlbnZpcm9ubWVudFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudW0gRW52aXJvbm1lbnQge1xyXG5cdFByb2R1Y3Rpb24sXHJcblx0SW50XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWx1ZXMgZm9yIGF1dG9kaXNtaXNzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBBdXRvRGlzbWlzc1ZhbHVlcyB7XHJcblx0Tm9BdXRvRGlzbWlzcyxcclxuXHRTZXZlblNlY29uZHMsXHJcblx0Rm91cnRlZW5TZWNvbmRzLFxyXG5cdFR3ZW50eU9uZVNlY29uZHMsXHJcblx0VHdlbnR5RWlnaHRTZWNvbmRzLFxyXG5cdFNpeHR5U2Vjb25kcyxcclxuXHROaW5ldHlTZWNvbmRzLFxyXG5cdE9uZUh1bmRyZWRBbmRUd2VudHlTZWNvbmRzLFxyXG5cdE9uZUh1bmRyZWRBbmRGaWZ0eVNlY29uZHMsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEeW5hbWljIHNjcmlwdHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljU2NyaXB0VXJscyB7XHJcblx0LyoqXHJcblx0ICogTGluayB0byB0aGUgT2ZmaWNlIFdlYlN1cmZhY2VzIFVYIHBhY2thZ2VcclxuXHQgKi9cclxuXHQvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuXHRwdWJsaWMgc3RhdGljIFdlYlN1cmZhY2VzSW50TGluazogc3RyaW5nID0gXCJodHRwczovL2NvbnRlbnQuZ3Jvd3RoLm9mZmljZS5uZXQvbWlycm9yZWQvcmVzb3VyY2VzL3Byb2dyYW1tYWJsZXN1cmZhY2VzL2ludC9vZmZpY2V3ZWJzdXJmYWNlcy5jb3JlLm1pbi5qc1wiO1xyXG5cdHB1YmxpYyBzdGF0aWMgV2ViU3VyZmFjZXNQcm9kTGluazogc3RyaW5nID0gXCJodHRwczovL2NvbnRlbnQuZ3Jvd3RoLm9mZmljZS5uZXQvbWlycm9yZWQvcmVzb3VyY2VzL3Byb2dyYW1tYWJsZXN1cmZhY2VzL3Byb2Qvb2ZmaWNld2Vic3VyZmFjZXMuY29yZS5taW4uanNcIjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnN0YW50IEdVSURzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR1VJRHMge1xyXG5cdHB1YmxpYyBzdGF0aWMgVE1TQXBwSUQ6IHN0cmluZyA9IFwiNGM0ZjU1MGItNDJiMi00YTE2LTkzZjktZmRiOWUwMWJiNmVkXCI7XHJcblx0cHVibGljIHN0YXRpYyBUVUxJUFNBcHBJRDogc3RyaW5nID0gXCIwNWM4OGQ5MS05NTZlLTQ2YjQtOTFiMC03N2EzM2NjMjFhNGRcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gT0NQU1ZhbHVlcyB7XHJcblx0Tm90Q29uZmlndXJlZCA9IDAsXHJcblx0RW5hYmxlZCA9IDEsXHJcblx0RGlzYWJsZWQgPSAyXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIEZlZWRiYWNrU3RhdHVzIHtcclxuXHRFbmFibGVkLFxyXG5cdERpc2FibGVkQnlBZG1pbixcclxuXHREaXNhYmxlZEJ5QWdlR3JvdXBcclxufVxyXG5cclxuLyoqXHJcbiAqIFByZWZpeCBmb3IgU0RLIHZlcnNpb24gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU0RLX1ZFUlNJT05fUFJFRklYID0gXCJXZWIgU0RLIHZcIjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/Constants.ts\n");

/***/ }),

/***/ "./scripts/app/DynamicContent/DynamicContentTransport.ts":
/*!***************************************************************!*\
  !*** ./scripts/app/DynamicContent/DynamicContentTransport.ts ***!
  \***************************************************************/
/*! exports provided: DynamicContentTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DynamicContentTransport\", function() { return DynamicContentTransport; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Polyfills_Fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Polyfills/Fetch */ \"./scripts/app/Polyfills/Fetch.ts\");\n/* harmony import */ var _TargetedMessaging_TargetedMessagingTransport__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../TargetedMessaging/TargetedMessagingTransport */ \"./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts\");\n\r\n\r\n\r\n\r\n\r\nvar DynamicContentTransport = /** @class */ (function (_super) {\r\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__extends\"])(DynamicContentTransport, _super);\r\n    function DynamicContentTransport(simpleRequestEnabled) {\r\n        var _this = _super.call(this) || this;\r\n        _this.simpleRequestEnabled = false;\r\n        // Default to use the normal request\r\n        _this.simpleRequestEnabled = simpleRequestEnabled !== null && simpleRequestEnabled !== void 0 ? simpleRequestEnabled : false;\r\n        return _this;\r\n    }\r\n    DynamicContentTransport.prototype.postRequestWithRetry = function (requestUrl, body, retry, timeout) {\r\n        var thisDynamicContentTransport = this;\r\n        return new Promise(function (resolve, reject) {\r\n            thisDynamicContentTransport.sendPostRequest(requestUrl, body, undefined, true, timeout)\r\n                .then(resolve)\r\n                .catch(function (error) {\r\n                _Logging_Logging__WEBPACK_IMPORTED_MODULE_1__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_1__[\"EventIds\"].DYNAMICTRANSPORT_POST_ERROR, 2 /* Error */, {\r\n                    ErrorMessage: error.toString(),\r\n                    TimeMilliseconds: timeout,\r\n                    Count: retry,\r\n                    CorrelationId: thisDynamicContentTransport.requestId,\r\n                });\r\n                if (retry <= 1) {\r\n                    return reject(error);\r\n                }\r\n                thisDynamicContentTransport.postRequestWithRetry(requestUrl, body, retry - 1, timeout)\r\n                    .then(resolve)\r\n                    .catch(reject);\r\n            });\r\n        });\r\n    };\r\n    DynamicContentTransport.prototype.createHeaders = function (token) {\r\n        var headers = typeof Headers !== \"undefined\" && new Headers();\r\n        if (headers) {\r\n            // Create header based on the request\r\n            if (this.simpleRequestEnabled) {\r\n                this.createSimpleHeaders(headers);\r\n            }\r\n            else {\r\n                this.createNormalHeaders(headers);\r\n            }\r\n            // Governance Service doesn't need to use token for now\r\n            if (!Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_2__[\"isNOU\"])(token)) {\r\n                headers.append(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    DynamicContentTransport.prototype.createNormalHeaders = function (headers) {\r\n        this.requestId = Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_2__[\"guid\"])();\r\n        headers.append(\"X-Request-ID\", this.requestId);\r\n        headers.append(\"Content-Type\", \"application/json\");\r\n    };\r\n    DynamicContentTransport.prototype.createSimpleHeaders = function (headers) {\r\n        headers.append(\"Content-Type\", \"text/plain\");\r\n    };\r\n    return DynamicContentTransport;\r\n}(_TargetedMessaging_TargetedMessagingTransport__WEBPACK_IMPORTED_MODULE_4__[\"TargetedMessagingTransport\"]));\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9EeW5hbWljQ29udGVudC9EeW5hbWljQ29udGVudFRyYW5zcG9ydC50cz8wNDRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE4QztBQUMyQjtBQUM3QztBQUNpRTtBQUU3RjtJQUE2Qyx5RkFBMEI7SUFJdEUsaUNBQVksb0JBQThCO1FBQTFDLFlBQ0MsaUJBQU8sU0FJUDtRQVBPLDBCQUFvQixHQUFZLEtBQUssQ0FBQztRQUs3QyxvQ0FBb0M7UUFDcEMsS0FBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixhQUFwQixvQkFBb0IsY0FBcEIsb0JBQW9CLEdBQUksS0FBSyxDQUFDOztJQUMzRCxDQUFDO0lBRU0sc0RBQW9CLEdBQTNCLFVBQTRCLFVBQWtCLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxPQUFlO1FBQzNGLElBQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtZQUMxQywyQkFBMkIsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQztpQkFDdEYsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDYixLQUFLLENBQUMsVUFBUyxLQUFLO2dCQUNwQiwwREFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FDM0IseURBQWdCLENBQUMsMkJBQTJCLGlCQUU1QztvQkFDQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDOUIsZ0JBQWdCLEVBQUUsT0FBTztvQkFDekIsS0FBSyxFQUFFLEtBQUs7b0JBQ1osYUFBYSxFQUFFLDJCQUEyQixDQUFDLFNBQVM7aUJBQ3BELENBQUMsQ0FBQztnQkFFSixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7b0JBQ2YsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3JCO2dCQUNELDJCQUEyQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUM7cUJBQ3JGLElBQUksQ0FBQyxPQUFPLENBQUM7cUJBQ2IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRVMsK0NBQWEsR0FBdkIsVUFBd0IsS0FBYztRQUNyQyxJQUFNLE9BQU8sR0FBWSxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUV6RSxJQUFJLE9BQU8sRUFBRTtZQUNaLHFDQUFxQztZQUNyQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2xDO2lCQUFNO2dCQUNOLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNsQztZQUVELHVEQUF1RDtZQUN2RCxJQUFJLENBQUMsd0ZBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDO2FBQ25EO1NBQ0Q7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBRU8scURBQW1CLEdBQTNCLFVBQTRCLE9BQWdCO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsdUZBQUksRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTyxxREFBbUIsR0FBM0IsVUFBNEIsT0FBZ0I7UUFDM0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNGLDhCQUFDO0FBQUQsQ0FBQyxDQWpFNEMsd0dBQTBCLEdBaUV0RSIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0R5bmFtaWNDb250ZW50L0R5bmFtaWNDb250ZW50VHJhbnNwb3J0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi4vTG9nZ2luZy9Mb2dnaW5nXCI7XHJcbmltcG9ydCB7IGlzTk9VLCBndWlkIH0gZnJvbSBcIkBtcy1vZmIvb2ZmaWNlZmxvb2RnYXRlY29yZS9kaXN0L3NyYy9VdGlsc1wiO1xyXG5pbXBvcnQgXCIuLi9Qb2x5ZmlsbHMvRmV0Y2hcIjtcclxuaW1wb3J0IHsgVGFyZ2V0ZWRNZXNzYWdpbmdUcmFuc3BvcnQgfSBmcm9tIFwiLi4vVGFyZ2V0ZWRNZXNzYWdpbmcvVGFyZ2V0ZWRNZXNzYWdpbmdUcmFuc3BvcnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ29udGVudFRyYW5zcG9ydCBleHRlbmRzIFRhcmdldGVkTWVzc2FnaW5nVHJhbnNwb3J0IHtcclxuXHRwdWJsaWMgcmVxdWVzdElkOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBzaW1wbGVSZXF1ZXN0RW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihzaW1wbGVSZXF1ZXN0RW5hYmxlZD86IGJvb2xlYW4pIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0Ly8gRGVmYXVsdCB0byB1c2UgdGhlIG5vcm1hbCByZXF1ZXN0XHJcblx0XHR0aGlzLnNpbXBsZVJlcXVlc3RFbmFibGVkID0gc2ltcGxlUmVxdWVzdEVuYWJsZWQgPz8gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcG9zdFJlcXVlc3RXaXRoUmV0cnkocmVxdWVzdFVybDogc3RyaW5nLCBib2R5OiBzdHJpbmcsIHJldHJ5OiBudW1iZXIsIHRpbWVvdXQ6IG51bWJlcik6IFByb21pc2U8UmVzcG9uc2U+IHtcclxuXHRcdGNvbnN0IHRoaXNEeW5hbWljQ29udGVudFRyYW5zcG9ydCA9IHRoaXM7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblx0XHRcdHRoaXNEeW5hbWljQ29udGVudFRyYW5zcG9ydC5zZW5kUG9zdFJlcXVlc3QocmVxdWVzdFVybCwgYm9keSwgdW5kZWZpbmVkLCB0cnVlLCB0aW1lb3V0KVxyXG5cdFx0XHQudGhlbihyZXNvbHZlKVxyXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdFx0XHRMb2dnaW5nLmdldExvZ2dlcigpLmxvZ0V2ZW50KFxyXG5cdFx0XHRcdFx0TG9nZ2luZy5FdmVudElkcy5EWU5BTUlDVFJBTlNQT1JUX1BPU1RfRVJST1IsXHJcblx0XHRcdFx0XHRMb2dnaW5nLkxvZ0xldmVsLkVycm9yLFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRFcnJvck1lc3NhZ2U6IGVycm9yLnRvU3RyaW5nKCksXHJcblx0XHRcdFx0XHRcdFRpbWVNaWxsaXNlY29uZHM6IHRpbWVvdXQsXHJcblx0XHRcdFx0XHRcdENvdW50OiByZXRyeSxcclxuXHRcdFx0XHRcdFx0Q29ycmVsYXRpb25JZDogdGhpc0R5bmFtaWNDb250ZW50VHJhbnNwb3J0LnJlcXVlc3RJZCxcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRpZiAocmV0cnkgPD0gMSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnJvcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXNEeW5hbWljQ29udGVudFRyYW5zcG9ydC5wb3N0UmVxdWVzdFdpdGhSZXRyeShyZXF1ZXN0VXJsLCBib2R5LCByZXRyeSAtIDEsIHRpbWVvdXQpXHJcblx0XHRcdFx0LnRoZW4ocmVzb2x2ZSlcclxuXHRcdFx0XHQuY2F0Y2gocmVqZWN0KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBjcmVhdGVIZWFkZXJzKHRva2VuPzogc3RyaW5nKTogSGVhZGVycyB7XHJcblx0XHRjb25zdCBoZWFkZXJzOiBIZWFkZXJzID0gdHlwZW9mIEhlYWRlcnMgIT09IFwidW5kZWZpbmVkXCIgJiYgbmV3IEhlYWRlcnMoKTtcclxuXHJcblx0XHRpZiAoaGVhZGVycykge1xyXG5cdFx0XHQvLyBDcmVhdGUgaGVhZGVyIGJhc2VkIG9uIHRoZSByZXF1ZXN0XHJcblx0XHRcdGlmICh0aGlzLnNpbXBsZVJlcXVlc3RFbmFibGVkKSB7XHJcblx0XHRcdFx0dGhpcy5jcmVhdGVTaW1wbGVIZWFkZXJzKGhlYWRlcnMpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuY3JlYXRlTm9ybWFsSGVhZGVycyhoZWFkZXJzKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gR292ZXJuYW5jZSBTZXJ2aWNlIGRvZXNuJ3QgbmVlZCB0byB1c2UgdG9rZW4gZm9yIG5vd1xyXG5cdFx0XHRpZiAoIWlzTk9VKHRva2VuKSkge1xyXG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGhlYWRlcnM7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNyZWF0ZU5vcm1hbEhlYWRlcnMoaGVhZGVyczogSGVhZGVycykge1xyXG5cdFx0dGhpcy5yZXF1ZXN0SWQgPSBndWlkKCk7XHJcblx0XHRoZWFkZXJzLmFwcGVuZChcIlgtUmVxdWVzdC1JRFwiLCB0aGlzLnJlcXVlc3RJZCk7XHJcblx0XHRoZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNyZWF0ZVNpbXBsZUhlYWRlcnMoaGVhZGVyczogSGVhZGVycykge1xyXG5cdFx0aGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/DynamicContent/DynamicContentTransport.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/AdaptiveSurveyLauncherFactory.ts":
/*!********************************************************************!*\
  !*** ./scripts/app/FloodgateCore/AdaptiveSurveyLauncherFactory.ts ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CoachingUXLauncherFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CoachingUXLauncherFactory */ \"./scripts/app/FloodgateCore/CoachingUXLauncherFactory.ts\");\n/* harmony import */ var _RudeSurveyLauncherFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RudeSurveyLauncherFactory */ \"./scripts/app/FloodgateCore/RudeSurveyLauncherFactory.ts\");\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/**\r\n * Survey launcher factory for Web SDK\r\n */\r\n\r\n\r\n\r\n\r\nvar isNOU = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isNOU;\r\nvar AdaptiveSurveyLauncherFactory = /** @class */ (function () {\r\n    function AdaptiveSurveyLauncherFactory(rudeSurveyLauncherFactory, coachingUXLauncherFactory) {\r\n        this.rudeSurveyLauncherFactory = rudeSurveyLauncherFactory;\r\n        this.coachingUXLauncherFactory = coachingUXLauncherFactory;\r\n    }\r\n    AdaptiveSurveyLauncherFactory.make = function () {\r\n        return new AdaptiveSurveyLauncherFactory(new _RudeSurveyLauncherFactory__WEBPACK_IMPORTED_MODULE_2__[\"default\"](), new _CoachingUXLauncherFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"]());\r\n    };\r\n    AdaptiveSurveyLauncherFactory.prototype.makeSurveyLauncher = function (survey) {\r\n        if (isNOU(survey)) {\r\n            return null;\r\n        }\r\n        switch (survey.getLauncherType().toLocaleLowerCase()) {\r\n            case _CoachingUXLauncherFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LAUNCHER_TYPE:\r\n                return this.makeGenericMessagingSurfaceLauncher(survey);\r\n            case _RudeSurveyLauncherFactory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LAUNCHER_TYPE:\r\n            default:\r\n                return this.makeRudeSurveyLauncher(survey);\r\n        }\r\n    };\r\n    AdaptiveSurveyLauncherFactory.prototype.AcceptsSurvey = function (survey) {\r\n        if (isNOU(survey)) {\r\n            return false;\r\n        }\r\n        switch (survey.getType()) {\r\n            case _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Api\"].ISurvey.Type.GenericMessagingSurface:\r\n                return (!isNOU(this.coachingUXLauncherFactory)\r\n                    && this.coachingUXLauncherFactory.AcceptsSurvey(survey));\r\n            default:\r\n                return _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().checkIfSurveysEnabled() &&\r\n                    !isNOU(this.rudeSurveyLauncherFactory) &&\r\n                    this.rudeSurveyLauncherFactory.AcceptsSurvey(survey);\r\n        }\r\n    };\r\n    AdaptiveSurveyLauncherFactory.prototype.makeGenericMessagingSurfaceLauncher = function (survey) {\r\n        if (!isNOU(this.coachingUXLauncherFactory)) {\r\n            return this.coachingUXLauncherFactory.makeSurveyLauncher(survey);\r\n        }\r\n        return null;\r\n    };\r\n    AdaptiveSurveyLauncherFactory.prototype.makeRudeSurveyLauncher = function (survey) {\r\n        if (!isNOU(this.rudeSurveyLauncherFactory)) {\r\n            return this.rudeSurveyLauncherFactory.makeSurveyLauncher(survey);\r\n        }\r\n        return null;\r\n    };\r\n    return AdaptiveSurveyLauncherFactory;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (AdaptiveSurveyLauncherFactory);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9GbG9vZGdhdGVDb3JlL0FkYXB0aXZlU3VydmV5TGF1bmNoZXJGYWN0b3J5LnRzPzg4ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0dBRUc7QUFFc0Q7QUFDVztBQUNBO0FBQ0o7QUFFeEQsU0FBSyxHQUFLLGlFQUFLLE1BQVYsQ0FBVztBQUV4QjtJQVVDLHVDQUFvQix5QkFBb0QsRUFDdkUseUJBQW9EO1FBQ3BELElBQUksQ0FBQyx5QkFBeUIsR0FBRyx5QkFBeUIsQ0FBQztRQUMzRCxJQUFJLENBQUMseUJBQXlCLEdBQUcseUJBQXlCLENBQUM7SUFDNUQsQ0FBQztJQWJhLGtDQUFJLEdBQWxCO1FBQ0MsT0FBTyxJQUFJLDZCQUE2QixDQUN2QyxJQUFJLGtFQUF5QixFQUFFLEVBQy9CLElBQUksa0VBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFXTSwwREFBa0IsR0FBekIsVUFBMEIsTUFBbUI7UUFDNUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELFFBQVEsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7WUFDckQsS0FBSyxrRUFBeUIsQ0FBQyxhQUFhO2dCQUMzQyxPQUFPLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxLQUFLLGtFQUF5QixDQUFDLGFBQWEsQ0FBQztZQUM3QztnQkFDQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QztJQUNGLENBQUM7SUFFTSxxREFBYSxHQUFwQixVQUFxQixNQUFtQjtRQUN2QyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsQixPQUFPLEtBQUssQ0FBQztTQUNiO1FBRUQsUUFBUSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDekIsS0FBSywrREFBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCO2dCQUM1QyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO3VCQUN6QyxJQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUQ7Z0JBQ0MsT0FBTyxnRUFBaUIsRUFBRSxDQUFDLHFCQUFxQixFQUFFO29CQUNqRCxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7b0JBQ3RDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkQ7SUFDRixDQUFDO0lBRU8sMkVBQW1DLEdBQTNDLFVBQTRDLE1BQW1CO1FBQzlELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTyw4REFBc0IsR0FBOUIsVUFBK0IsTUFBbUI7UUFDakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqRTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUNGLG9DQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0Zsb29kZ2F0ZUNvcmUvQWRhcHRpdmVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU3VydmV5IGxhdW5jaGVyIGZhY3RvcnkgZm9yIFdlYiBTREtcclxuICovXHJcblxyXG5pbXBvcnQgeyBBcGksIFV0aWxzIH0gZnJvbSBcIkBtcy1vZmIvb2ZmaWNlZmxvb2RnYXRlY29yZVwiO1xyXG5pbXBvcnQgQ29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeSBmcm9tIFwiLi9Db2FjaGluZ1VYTGF1bmNoZXJGYWN0b3J5XCI7XHJcbmltcG9ydCBSdWRlU3VydmV5TGF1bmNoZXJGYWN0b3J5IGZyb20gXCIuL1J1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnlcIjtcclxuaW1wb3J0ICogYXMgQ29uZmlndXJhdGlvbiBmcm9tIFwiLi4vQ29uZmlndXJhdGlvbi9Db25maWd1cmF0aW9uXCI7XHJcblxyXG5jb25zdCB7IGlzTk9VIH0gPSBVdGlscztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkYXB0aXZlU3VydmV5TGF1bmNoZXJGYWN0b3J5IGltcGxlbWVudHMgQXBpLklTdXJ2ZXlMYXVuY2hlckZhY3Rvcnkge1xyXG5cdHB1YmxpYyBzdGF0aWMgbWFrZSgpOiBBcGkuSVN1cnZleUxhdW5jaGVyRmFjdG9yeSB7XHJcblx0XHRyZXR1cm4gbmV3IEFkYXB0aXZlU3VydmV5TGF1bmNoZXJGYWN0b3J5KFxyXG5cdFx0XHRuZXcgUnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeSgpLFxyXG5cdFx0XHRuZXcgQ29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeSgpKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeTogUnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeTtcclxuXHRwcml2YXRlIGNvYWNoaW5nVVhMYXVuY2hlckZhY3Rvcnk6IENvYWNoaW5nVVhMYXVuY2hlckZhY3Rvcnk7XHJcblxyXG5cdHByaXZhdGUgY29uc3RydWN0b3IocnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeTogUnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeSxcclxuXHRcdGNvYWNoaW5nVVhMYXVuY2hlckZhY3Rvcnk6IENvYWNoaW5nVVhMYXVuY2hlckZhY3RvcnkpIHtcclxuXHRcdHRoaXMucnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeSA9IHJ1ZGVTdXJ2ZXlMYXVuY2hlckZhY3Rvcnk7XHJcblx0XHR0aGlzLmNvYWNoaW5nVVhMYXVuY2hlckZhY3RvcnkgPSBjb2FjaGluZ1VYTGF1bmNoZXJGYWN0b3J5O1xyXG5cdH1cclxuXHJcblx0cHVibGljIG1ha2VTdXJ2ZXlMYXVuY2hlcihzdXJ2ZXk6IEFwaS5JU3VydmV5KTogQXBpLklTdXJ2ZXlMYXVuY2hlciB7XHJcblx0XHRpZiAoaXNOT1Uoc3VydmV5KSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzd2l0Y2ggKHN1cnZleS5nZXRMYXVuY2hlclR5cGUoKS50b0xvY2FsZUxvd2VyQ2FzZSgpKSB7XHJcblx0XHRcdGNhc2UgQ29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeS5MQVVOQ0hFUl9UWVBFOlxyXG5cdFx0XHRcdHJldHVybiB0aGlzLm1ha2VHZW5lcmljTWVzc2FnaW5nU3VyZmFjZUxhdW5jaGVyKHN1cnZleSk7XHJcblx0XHRcdGNhc2UgUnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeS5MQVVOQ0hFUl9UWVBFOlxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHJldHVybiB0aGlzLm1ha2VSdWRlU3VydmV5TGF1bmNoZXIoc3VydmV5KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBBY2NlcHRzU3VydmV5KHN1cnZleTogQXBpLklTdXJ2ZXkpOiBib29sZWFuIHtcclxuXHRcdGlmIChpc05PVShzdXJ2ZXkpKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRzd2l0Y2ggKHN1cnZleS5nZXRUeXBlKCkpIHtcclxuXHRcdFx0Y2FzZSBBcGkuSVN1cnZleS5UeXBlLkdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlOlxyXG5cdFx0XHRcdHJldHVybiAoIWlzTk9VKHRoaXMuY29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeSlcclxuXHRcdFx0XHRcdFx0JiYgdGhpcy5jb2FjaGluZ1VYTGF1bmNoZXJGYWN0b3J5LkFjY2VwdHNTdXJ2ZXkoc3VydmV5KSk7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIENvbmZpZ3VyYXRpb24uZ2V0KCkuY2hlY2tJZlN1cnZleXNFbmFibGVkKCkgJiZcclxuXHRcdFx0XHRcdCFpc05PVSh0aGlzLnJ1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkpICYmXHJcblx0XHRcdFx0XHR0aGlzLnJ1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkuQWNjZXB0c1N1cnZleShzdXJ2ZXkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBtYWtlR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2VMYXVuY2hlcihzdXJ2ZXk6IEFwaS5JU3VydmV5KTogQXBpLklTdXJ2ZXlMYXVuY2hlciB7XHJcblx0XHRpZiAoIWlzTk9VKHRoaXMuY29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeSkpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeS5tYWtlU3VydmV5TGF1bmNoZXIoc3VydmV5KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgbWFrZVJ1ZGVTdXJ2ZXlMYXVuY2hlcihzdXJ2ZXk6IEFwaS5JU3VydmV5KTogQXBpLklTdXJ2ZXlMYXVuY2hlciB7XHJcblx0XHRpZiAoIWlzTk9VKHRoaXMucnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeSkpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucnVkZVN1cnZleUxhdW5jaGVyRmFjdG9yeS5tYWtlU3VydmV5TGF1bmNoZXIoc3VydmV5KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/AdaptiveSurveyLauncherFactory.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/CoachingUXLauncherFactory.ts":
/*!****************************************************************!*\
  !*** ./scripts/app/FloodgateCore/CoachingUXLauncherFactory.ts ***!
  \****************************************************************/
/*! exports provided: getWebSurfacesLink, default, CoachingUXLauncher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getWebSurfacesLink\", function() { return getWebSurfacesLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CoachingUXLauncher\", function() { return CoachingUXLauncher; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Constants */ \"./scripts/app/Constants.ts\");\n/* harmony import */ var _Window_DomUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Window/DomUtils */ \"./scripts/app/Window/DomUtils.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _TargetedMessaging_AssetsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../TargetedMessaging/AssetsProvider */ \"./scripts/app/TargetedMessaging/AssetsProvider.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/**\r\n * CoachingUX launcher factory for Web SDK\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction getWebSurfacesLink() {\r\n    var _a, _b, _c, _d;\r\n    var internalEnvs = [\"dogfood\", \"edog\", \"int\", \"microsoft\"];\r\n    var commonInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCommonInitOptions();\r\n    var audience = ((_a = commonInitOptions.telemetryGroup) === null || _a === void 0 ? void 0 : _a.audienceGroup) || ((_b = commonInitOptions.telemetryGroup) === null || _b === void 0 ? void 0 : _b.audience);\r\n    var isInternalEnv = audience && internalEnvs.indexOf(audience.toLowerCase()) !== -1;\r\n    var webSurfacesConfigLink = isInternalEnv ? (_c = commonInitOptions.webSurfacesSettings) === null || _c === void 0 ? void 0 : _c.webSurfacesIntUrl : (_d = commonInitOptions.webSurfacesSettings) === null || _d === void 0 ? void 0 : _d.webSurfacesProdUrl;\r\n    var webSurfacesDefaultLink = isInternalEnv ?\r\n        _Constants__WEBPACK_IMPORTED_MODULE_4__[\"DynamicScriptUrls\"].WebSurfacesIntLink : _Constants__WEBPACK_IMPORTED_MODULE_4__[\"DynamicScriptUrls\"].WebSurfacesProdLink;\r\n    var settingKey = isInternalEnv ? \"WebSurfacesIntLink\" /* webSurfacesIntLink */ : \"WebSurfacesProdLink\" /* webSurfacesProdLink */;\r\n    var webSurfacesLink = webSurfacesConfigLink || Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_3__[\"getDynamicSetting\"])(settingKey, webSurfacesDefaultLink);\r\n    return webSurfacesLink;\r\n}\r\n// web surfaces script url load promise\r\nvar WebSurfacesScriptPromise;\r\nfunction createwebSurfacesScriptPromise() {\r\n    if (!WebSurfacesScriptPromise) {\r\n        WebSurfacesScriptPromise = _Window_DomUtils__WEBPACK_IMPORTED_MODULE_5__[\"loadScript\"](getWebSurfacesLink(), null);\r\n    }\r\n}\r\nvar CoachingUXLauncherFactory = /** @class */ (function () {\r\n    function CoachingUXLauncherFactory() {\r\n    }\r\n    CoachingUXLauncherFactory.prototype.makeSurveyLauncher = function (survey) {\r\n        if (this.AcceptsSurvey(survey)) {\r\n            return new CoachingUXLauncher(survey);\r\n        }\r\n        return null;\r\n    };\r\n    CoachingUXLauncherFactory.prototype.AcceptsSurvey = function (survey) {\r\n        if (!Object(_Utils__WEBPACK_IMPORTED_MODULE_9__[\"isNOU\"])(survey) && survey.getType() === _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__[\"ISurvey\"].Type.GenericMessagingSurface\r\n            && survey.getLauncherType().toLocaleLowerCase() === CoachingUXLauncherFactory.LAUNCHER_TYPE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    CoachingUXLauncherFactory.LAUNCHER_TYPE = \"coachingux\";\r\n    return CoachingUXLauncherFactory;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoachingUXLauncherFactory);\r\nvar CoachingUXLauncher = /** @class */ (function () {\r\n    function CoachingUXLauncher(survey) {\r\n        var _a;\r\n        this.survey = survey;\r\n        // pre-load web surface package if there are any critical campaigns\r\n        if (!WebSurfacesScriptPromise &&\r\n            survey && survey.getSurveyInfo &&\r\n            ((_a = survey.getSurveyInfo()) === null || _a === void 0 ? void 0 : _a.getBusinessLevel()) === _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__[\"ISurveyInfo\"].BusinessLevel.Critical) {\r\n            setTimeout(createwebSurfacesScriptPromise, 1000);\r\n        }\r\n    }\r\n    CoachingUXLauncher.prototype.launch = function (surveyParams) {\r\n        var _this = this;\r\n        var surveyInfo = this.survey && this.survey.getSurveyInfo();\r\n        var surveyMetadata = surveyInfo && surveyInfo.getMetadata();\r\n        var contentMetadata = surveyMetadata && surveyMetadata.getContentMetadata();\r\n        if (!contentMetadata) {\r\n            return;\r\n        }\r\n        var startTime = new Date();\r\n        var getWebSurfacesInstance = function () {\r\n            var windowInstance = _Window_Window__WEBPACK_IMPORTED_MODULE_6__[\"getGlobal\"]();\r\n            return windowInstance && windowInstance.OfficeWebSurfaces;\r\n        };\r\n        var renderWebSurface = function (uxInitOptions) {\r\n            var officeWebSurfaces = getWebSurfacesInstance();\r\n            if (uxInitOptions) {\r\n                officeWebSurfaces.Initialize(uxInitOptions);\r\n            }\r\n            officeWebSurfaces.RemoveSurface();\r\n            var surfaceParams = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, contentMetadata), { surfaceContext: {\r\n                    surveyForm: _this.survey,\r\n                    surveyParams: surveyParams,\r\n                } });\r\n            officeWebSurfaces.RenderSurface(surfaceParams, null /* targetElementId */, surveyInfo.getBackEndId());\r\n        };\r\n        var logErrorEvent = function (error) {\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_7__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_7__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 1 /* Critical */, {\r\n                ErrorMessage: \"Error loading websurfaces\" + (error && error.message ? \": \" + error.message : \"\"),\r\n                TimeMilliseconds: Date.now() - (+startTime),\r\n            });\r\n        };\r\n        try {\r\n            if (getWebSurfacesInstance()) {\r\n                renderWebSurface();\r\n                return;\r\n            }\r\n            createwebSurfacesScriptPromise();\r\n            // if UX package isn't already loaded, download package and render surface\r\n            WebSurfacesScriptPromise\r\n                .then(function () {\r\n                var initOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCommonInitOptions();\r\n                var floodgateInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getFloodgateInitOptions();\r\n                var surveyActivatedCallback = floodgateInitOptions && floodgateInitOptions.onSurveyActivatedCallback;\r\n                var beaconCallback = function (beaconParameters) {\r\n                    if (beaconParameters) {\r\n                        return _TargetedMessaging_AssetsProvider__WEBPACK_IMPORTED_MODULE_8__[\"get\"]().setCampaignAction(beaconParameters);\r\n                    }\r\n                };\r\n                var uxOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, initOptions), floodgateInitOptions), { beaconCallback: beaconCallback, surfaceInitTime: startTime, surfaceId: surveyInfo.getBackEndId(), logSessionId: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getSdkSessionId(), logSettings: Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_3__[\"getDynamicSetting\"])(\"LogLevelSettings\" /* logLevelSettings */, undefined), renderer: surveyActivatedCallback, renderCallback: surveyActivatedCallback && surveyActivatedCallback.onTeachingCampaignRender });\r\n                renderWebSurface(uxOptions);\r\n            }).catch(function (error) {\r\n                logErrorEvent(error);\r\n            });\r\n        }\r\n        catch (error) {\r\n            logErrorEvent(error);\r\n        }\r\n    };\r\n    return CoachingUXLauncher;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/CoachingUXLauncherFactory.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/FloodgateEnvironmentProvider.ts":
/*!*******************************************************************!*\
  !*** ./scripts/app/FloodgateCore/FloodgateEnvironmentProvider.ts ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/**\r\n * Implementation for IFloodgateEnvironmentProvider for web SDK.\r\n * We pass the SDK's internal locale here and not the one which the host app specifies.\r\n */\r\n\r\nvar FloodgateEnvironmentProvider = /** @class */ (function () {\r\n    function FloodgateEnvironmentProvider() {\r\n    }\r\n    FloodgateEnvironmentProvider.prototype.getLanguage = function () {\r\n        return _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getCommonInitOptions().originalLocale;\r\n    };\r\n    return FloodgateEnvironmentProvider;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (FloodgateEnvironmentProvider);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9GbG9vZGdhdGVDb3JlL0Zsb29kZ2F0ZUVudmlyb25tZW50UHJvdmlkZXIudHM/NGY0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7OztHQUdHO0FBRytEO0FBRWxFO0lBQUE7SUFJQSxDQUFDO0lBSE8sa0RBQVcsR0FBbEI7UUFDQyxPQUFPLGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDbEUsQ0FBQztJQUNGLG1DQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0Zsb29kZ2F0ZUNvcmUvRmxvb2RnYXRlRW52aXJvbm1lbnRQcm92aWRlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBmb3IgSUZsb29kZ2F0ZUVudmlyb25tZW50UHJvdmlkZXIgZm9yIHdlYiBTREsuXHJcbiAqIFdlIHBhc3MgdGhlIFNESydzIGludGVybmFsIGxvY2FsZSBoZXJlIGFuZCBub3QgdGhlIG9uZSB3aGljaCB0aGUgaG9zdCBhcHAgc3BlY2lmaWVzLlxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIEFwaSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlL2Rpc3Qvc3JjL0FwaS9BcGlcIjtcclxuaW1wb3J0ICogYXMgQ29uZmlndXJhdGlvbiBmcm9tIFwiLi8uLi9Db25maWd1cmF0aW9uL0NvbmZpZ3VyYXRpb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsb29kZ2F0ZUVudmlyb25tZW50UHJvdmlkZXIgaW1wbGVtZW50cyBBcGkuSUZsb29kZ2F0ZUVudmlyb25tZW50UHJvdmlkZXIge1xyXG5cdHB1YmxpYyBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIENvbmZpZ3VyYXRpb24uZ2V0KCkuZ2V0Q29tbW9uSW5pdE9wdGlvbnMoKS5vcmlnaW5hbExvY2FsZTtcclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/FloodgateEnvironmentProvider.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/FloodgateStorageProvider.ts":
/*!***************************************************************!*\
  !*** ./scripts/app/FloodgateCore/FloodgateStorageProvider.ts ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/**\r\n * Implementation of IFloodgateStorageProvider for Web SDK\r\n */\r\nvar _a;\r\n\r\n\r\n\r\nvar FileType = _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__[\"IFloodgateStorageProvider\"].FileType;\r\nvar fileTypeToKeyMap = (_a = {},\r\n    _a[FileType.CampaignDefinitions] = \"obf-CampaignDefinitions\",\r\n    _a[FileType.CampaignStates] = \"obf-CampaignStates\",\r\n    _a[FileType.FloodgateSettings] = \"obf-FloodgateSettings\",\r\n    _a[FileType.GovernedChannelStates] = \"obf-GovernedChannelStates\",\r\n    _a[FileType.SurveyActivationStats] = \"obf-SurveyActivationStats\",\r\n    _a[FileType.SurveyEventActivityStats] = \"obf-SurveyEventActivityStats\",\r\n    _a[FileType.TmsCache_CampaignContent] = \"obf-TmsCampaignContent\",\r\n    _a[FileType.TmsCache_MessageMetadata] = \"obf-TmsMessageMetadata\",\r\n    _a[FileType.TmsCache_UserGovernance] = \"obf-TmsUserGovernance\",\r\n    _a[FileType.Tms_DynamicSettings] = \"obf-TmsDynamicSettings\",\r\n    _a[FileType.LogLevelSettings] = \"obf-LogLevelSettings\",\r\n    _a[FileType.UserFacts] = \"obf-UserFacts\",\r\n    _a[FileType.DebugOverrides] = \"obf-DebugOverrides\",\r\n    _a);\r\nvar FloodgateStorageProvider = /** @class */ (function () {\r\n    function FloodgateStorageProvider() {\r\n    }\r\n    /**\r\n     * Code to detect localStorage presence.\r\n     * Copied from MDN: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n     */\r\n    FloodgateStorageProvider.isStorageAvailable = function () {\r\n        try {\r\n            var x = \"__storage_test__\";\r\n            _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.setItem(x, x);\r\n            _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n                // Firefox\r\n                e.code === 1014 ||\r\n                // test name field too, because code might not be present\r\n                // everything except Firefox\r\n                e.name === \"QuotaExceededError\" ||\r\n                // Firefox\r\n                e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\r\n                // acknowledge QuotaExceededError only if there's something already stored\r\n                _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.length !== 0;\r\n        }\r\n    };\r\n    /**\r\n     * Safely read an object\r\n     */\r\n    FloodgateStorageProvider.safeReadObject = function (fileType, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = undefined; }\r\n        if (!(fileType in FileType)) {\r\n            return defaultValue;\r\n        }\r\n        try {\r\n            var storageKey = fileTypeToKeyMap[fileType];\r\n            var result = _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.getItem(storageKey);\r\n            var parsedObject = result && (result[0] === \"{\" || result[0] === \"[\") ? JSON.parse(result) : result;\r\n            return parsedObject !== null && parsedObject !== void 0 ? parsedObject : defaultValue;\r\n        }\r\n        catch (e) {\r\n            // ignore\r\n        }\r\n        return defaultValue;\r\n    };\r\n    /**\r\n     * Lock the file to prevent access from another process.\r\n     */\r\n    FloodgateStorageProvider.prototype.fileLock = function (fileType) {\r\n        // JS runs on a single thread in the browser.\r\n        return;\r\n    };\r\n    /**\r\n     * Unlock the file.\r\n     */\r\n    FloodgateStorageProvider.prototype.fileUnlock = function (fileType) {\r\n        // JS runs on a single thread in the browser.\r\n        return;\r\n    };\r\n    /**\r\n     * Read the file\r\n     */\r\n    FloodgateStorageProvider.prototype.read = function (fileType) {\r\n        if (!(fileType in FileType)) {\r\n            return \"\";\r\n        }\r\n        var storageKey = fileTypeToKeyMap[fileType];\r\n        var result;\r\n        try {\r\n            result = _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.getItem(storageKey);\r\n        }\r\n        catch (e) {\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].SURVEY_FLOODGATE_FILEREAD_FAILED, 2 /* Error */, {\r\n                ErrorMessage: e.toString(),\r\n                FileName: storageKey,\r\n            });\r\n            return \"\";\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Write to the file\r\n     */\r\n    FloodgateStorageProvider.prototype.write = function (fileType, content) {\r\n        if (!(fileType in FileType)) {\r\n            return;\r\n        }\r\n        var storageKey = fileTypeToKeyMap[fileType];\r\n        try {\r\n            _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"getGlobal\"]().localStorage.setItem(storageKey, content);\r\n        }\r\n        catch (e) {\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].SURVEY_FLOODGATE_FILEWRITE_FAILED, 2 /* Error */, {\r\n                ErrorMessage: e.toString(),\r\n                FileName: storageKey,\r\n            });\r\n            return;\r\n        }\r\n    };\r\n    return FloodgateStorageProvider;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (FloodgateStorageProvider);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/FloodgateStringProvider.ts":
/*!**************************************************************!*\
  !*** ./scripts/app/FloodgateCore/FloodgateStringProvider.ts ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _UIStrings_UIStrings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../UIStrings/UIStrings */ \"./scripts/app/UIStrings/UIStrings.ts\");\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/**\r\n * Implementation of IFloodgateStringProvider for Web SDK\r\n */\r\n\r\n\r\n\r\n/* tslint:disable:max-line-length */\r\nvar FloodgateStringProvider = /** @class */ (function () {\r\n    function FloodgateStringProvider() {\r\n    }\r\n    FloodgateStringProvider.prototype.loadStringResource = function (stringId) {\r\n        var uiStrings = _UIStrings_UIStrings__WEBPACK_IMPORTED_MODULE_1__[\"getUIStrings\"]();\r\n        switch (stringId) {\r\n            case (5 /* Nps11RatingValue0 */): return uiStrings.Floodgate.Nps.Rating.Points11Value0;\r\n            case (6 /* Nps11RatingValue1 */): return uiStrings.Floodgate.Nps.Rating.Points11Value1;\r\n            case (7 /* Nps11RatingValue2 */): return uiStrings.Floodgate.Nps.Rating.Points11Value2;\r\n            case (8 /* Nps11RatingValue3 */): return uiStrings.Floodgate.Nps.Rating.Points11Value3;\r\n            case (9 /* Nps11RatingValue4 */): return uiStrings.Floodgate.Nps.Rating.Points11Value4;\r\n            case (10 /* Nps11RatingValue5 */): return uiStrings.Floodgate.Nps.Rating.Points11Value5;\r\n            case (11 /* Nps11RatingValue6 */): return uiStrings.Floodgate.Nps.Rating.Points11Value6;\r\n            case (12 /* Nps11RatingValue7 */): return uiStrings.Floodgate.Nps.Rating.Points11Value7;\r\n            case (13 /* Nps11RatingValue8 */): return uiStrings.Floodgate.Nps.Rating.Points11Value8;\r\n            case (14 /* Nps11RatingValue9 */): return uiStrings.Floodgate.Nps.Rating.Points11Value9;\r\n            case (15 /* Nps11RatingValue10 */): return uiStrings.Floodgate.Nps.Rating.Points11Value10;\r\n            case (16 /* Nps5RatingValue1 */): return uiStrings.Floodgate.Nps.Rating.Points5Value1;\r\n            case (17 /* Nps5RatingValue2 */): return uiStrings.Floodgate.Nps.Rating.Points5Value2;\r\n            case (18 /* Nps5RatingValue3 */): return uiStrings.Floodgate.Nps.Rating.Points5Value3;\r\n            case (19 /* Nps5RatingValue4 */): return uiStrings.Floodgate.Nps.Rating.Points5Value4;\r\n            case (20 /* Nps5RatingValue5 */): return uiStrings.Floodgate.Nps.Rating.Points5Value5;\r\n            case (4 /* NpsRatingQuestion */): return uiStrings.Floodgate.Nps.Rating.Question;\r\n            case (21 /* NpsCommentQuestion */): return uiStrings.Floodgate.Nps.Comment.Question;\r\n            case (3 /* NpsPromptNotNowLabel */): return uiStrings.Floodgate.Nps.Prompt.No;\r\n            case (1 /* NpsPromptQuestion */): return uiStrings.Floodgate.Nps.Prompt.Question;\r\n            case (0 /* NpsPromptTitle */): return uiStrings.Floodgate.Nps.Prompt.Title;\r\n            case (2 /* NpsPromptYesLabel */): return uiStrings.Floodgate.Nps.Prompt.Yes;\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n    FloodgateStringProvider.prototype.getCustomString = function (str) {\r\n        return _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getFloodgateInitOptions().uIStringGetter(str);\r\n    };\r\n    return FloodgateStringProvider;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (FloodgateStringProvider);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/FloodgateStringProvider.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/FloodgateTelemetryLogger.ts":
/*!***************************************************************!*\
  !*** ./scripts/app/FloodgateCore/FloodgateTelemetryLogger.ts ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/**\r\n * Implementation of IFloodgateTelemetryLogger for Web SDK\r\n */\r\n\r\nvar IFloodgateTelemetryLogger = /** @class */ (function () {\r\n    function IFloodgateTelemetryLogger() {\r\n    }\r\n    /**\r\n     * Log that a survey's trigger was met.\r\n     * @param campaignId Id of the campaign the survey belongs to.\r\n     * @param surveyId Id of the survey.\r\n     * @param surveyType Type of the survey.\r\n     * @param surveyActivityInfo The survey's activities' information such as names, counts, isAggregate and if the list is ordered.\r\n     * @param additionalSurveyInfo additional survey info in a stringified json object:\r\n     * \t\t- surveyLauncherType: LauncherType of the survey.\r\n     * \t\t- channelType: The channel type of the survey's campaign.\r\n     * \t\t- surveyPercentageNumerator: Percentage numerator of the survey's Campaign.\r\n     * \t\t- surveyPercentageDenominator: Percentage denominator of the survey's Campaign.\r\n     * \t\t- surveyNominationPeriodNumber: The Nomination Period of the survey's Campaign in seconds, -1 if not applicable.\r\n     * \t\t- surveyCooldownPeriodNumber: The Cooldown Period of the survey's Campaign in seconds, -1 if not applicable.\r\n     * \t\t- allCandidateCampaignDefinitionIDs: The list of campaign definition IDs that have corresponding surveys which are candidates.\r\n     * \t\t- allCampaignDefinitionIDs: The list of all campaign definition IDs.\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_TriggerMet = function (campaignId, surveyId, surveyType, surveyActivityInfo, additionalSurveyInfo) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"EventIds\"].SURVEY_FLOODGATE_TRIGGERMET, 1 /* Critical */, {\r\n            CampaignId: campaignId,\r\n            SurveyId: surveyId,\r\n            SurveyType: surveyType,\r\n            SurveyActivityInfo: surveyActivityInfo,\r\n            AdditionalSurveyInfo: additionalSurveyInfo,\r\n        });\r\n    };\r\n    /**\r\n     * Log that a user was selected(nominated) for a survey if it's not sampled\r\n     * @param campaignId Id of the campaign the survey belongs to.\r\n     * @param surveyId Id of the survey.\r\n     * @param surveyType Type of the survey.\r\n     * @param additionalSurveyInfo additional survey info in a stringified json object:\r\n     * \t\t- surveyLauncherType LauncherType of the survey.\r\n     * \t\t- channelType The channel type of the survey's campaign.\r\n     * \t\t- surveyPercentageNumerator Percentage numerator of the survey's Campaign.\r\n     * \t\t- surveyPercentageDenominator Percentage denominator of the survey's Campaign.\r\n     * \t\t- surveyNominationPeriodNumber The Nomination Period of the survey's Campaign in seconds, -1 if not applicable.\r\n     * \t\t- surveyCooldownPeriodNumber The Cooldown Period of the survey's Campaign in seconds, -1 if not applicable.\r\n     * \t\t- allCandidateCampaignDefinitionIDs: The list of campaign definition IDs that have corresponding surveys which are candidates.\r\n     * \t\t- allCampaignDefinitionIDs: The list of all campaign definition IDs.\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_UserSelected = function (campaignId, surveyId, surveyType, additionalSurveyInfo) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"EventIds\"].SURVEY_FLOODGATE_USERSELECTED, 1 /* Critical */, {\r\n            CampaignId: campaignId,\r\n            SurveyId: surveyId,\r\n            SurveyType: surveyType,\r\n            AdditionalSurveyInfo: additionalSurveyInfo,\r\n        });\r\n    };\r\n    /**\r\n     * Log that campaign definitions failed to load.\r\n     * @param errorMessage error message\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_CampaignLoad_Failed = function (errorMessage) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"EventIds\"].SURVEY_FLOODGATE_CAMPAIGNLOAD_FAILED, 2 /* Error */, {\r\n            ErrorMessage: errorMessage,\r\n        });\r\n    };\r\n    /**\r\n     * Log an event with error message\r\n     * @param eventId event id\r\n     * @param errorMessage error message\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_Error = function (eventId, errorMessage) {\r\n        var event = { name: eventId };\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(event, 2 /* Error */, {\r\n            ErrorMessage: errorMessage,\r\n        });\r\n    };\r\n    /**\r\n     * Log an event with properties\r\n     * @param eventId event id\r\n     * @param properties telemetry event properties\r\n     * @param internalSampleRate sample rate for this event in decimal (example: 0.05 for 5%). (Does not override host set sampleRate)\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_Event = function (eventId, properties, internalSampleRate) {\r\n        var event = { name: eventId };\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(event, 1 /* Critical */, properties, internalSampleRate);\r\n    };\r\n    /**\r\n     * Log message locally\r\n     * @param message message\r\n     * @param data message data\r\n     */\r\n    IFloodgateTelemetryLogger.prototype.log_LocalError = function (message) {\r\n        var data = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            data[_i - 1] = arguments[_i];\r\n        }\r\n        this.log_Local(2 /* Error */, message, data);\r\n    };\r\n    ;\r\n    IFloodgateTelemetryLogger.prototype.log_Local = function (logSeverity, message) {\r\n        var others = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            others[_i - 2] = arguments[_i];\r\n        }\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logLocal(logSeverity, others);\r\n    };\r\n    return IFloodgateTelemetryLogger;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (IFloodgateTelemetryLogger);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/FloodgateTelemetryLogger.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/RudeSurveyLauncherFactory.ts":
/*!****************************************************************!*\
  !*** ./scripts/app/FloodgateCore/RudeSurveyLauncherFactory.ts ***!
  \****************************************************************/
/*! exports provided: default, RudeSurveyLauncher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RudeSurveyLauncher\", function() { return RudeSurveyLauncher; });\n/* harmony import */ var _FloodgateCore_UISurvey_UISurvey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../FloodgateCore/UISurvey/UISurvey */ \"./scripts/app/FloodgateCore/UISurvey/UISurvey.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Window/Window */ \"./scripts/app/Window/Window.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2__);\n/**\r\n * Rude survey launcher factory for Web SDK\r\n */\r\n\r\n\r\n\r\nvar isNOU = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2__[\"Utils\"].isNOU;\r\nvar RudeSurveyLauncherFactory = /** @class */ (function () {\r\n    function RudeSurveyLauncherFactory() {\r\n    }\r\n    RudeSurveyLauncherFactory.prototype.makeSurveyLauncher = function (survey) {\r\n        if (this.AcceptsSurvey(survey)) {\r\n            return new RudeSurveyLauncher(survey);\r\n        }\r\n        return null;\r\n    };\r\n    RudeSurveyLauncherFactory.prototype.AcceptsSurvey = function (survey) {\r\n        // This factory should accept any type that is not of type GenericMessagingSurface\r\n        // This will ensure that a rude survey launcher is returned for any survey type old or new\r\n        // as a launcher is needed to invoke survey activated callback\r\n        if (!isNOU(survey) && survey.getType() !== _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2__[\"Api\"].ISurvey.Type.GenericMessagingSurface) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    RudeSurveyLauncherFactory.LAUNCHER_TYPE = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_2__[\"Api\"].ISurvey.LAUNCHER_TYPE_DEFAULT;\r\n    return RudeSurveyLauncherFactory;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (RudeSurveyLauncherFactory);\r\nvar RudeSurveyLauncher = /** @class */ (function () {\r\n    function RudeSurveyLauncher(survey) {\r\n        this.survey = survey;\r\n    }\r\n    RudeSurveyLauncher.prototype.launch = function () {\r\n        _Window_Window__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().OfficeBrowserFeedback.floodgate.showSurvey(new _FloodgateCore_UISurvey_UISurvey__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.survey));\r\n    };\r\n    return RudeSurveyLauncher;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9GbG9vZGdhdGVDb3JlL1J1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkudHM/NDQyMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7R0FFRztBQUV5RDtBQUNmO0FBQ1k7QUFFakQsU0FBSyxHQUFLLGlFQUFLLE1BQVYsQ0FBVztBQUV4QjtJQUFBO0lBcUJBLENBQUM7SUFsQk8sc0RBQWtCLEdBQXpCLFVBQTBCLE1BQW1CO1FBQzVDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixPQUFPLElBQUksa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTSxpREFBYSxHQUFwQixVQUFxQixNQUFtQjtRQUN2QyxrRkFBa0Y7UUFDbEYsMEZBQTBGO1FBQzFGLDhEQUE4RDtRQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFLLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSywrREFBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDckYsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQW5Cc0IsdUNBQWEsR0FBVywrREFBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQW9CbEYsZ0NBQUM7Q0FBQTtBQXJCb0Isd0ZBQXlCO0FBdUI5QztJQUdDLDRCQUFZLE1BQW1CO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxtQ0FBTSxHQUFiO1FBQ0Msa0RBQVUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSx3RUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFDRix5QkFBQztBQUFELENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9GbG9vZGdhdGVDb3JlL1J1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUnVkZSBzdXJ2ZXkgbGF1bmNoZXIgZmFjdG9yeSBmb3IgV2ViIFNES1xyXG4gKi9cclxuXHJcbmltcG9ydCBVSVN1cnZleSBmcm9tIFwiLi8uLi9GbG9vZGdhdGVDb3JlL1VJU3VydmV5L1VJU3VydmV5XCI7XHJcbmltcG9ydCAqIGFzIFdpbmRvdyBmcm9tIFwiLi8uLi9XaW5kb3cvV2luZG93XCI7XHJcbmltcG9ydCB7IEFwaSwgVXRpbHMgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlXCI7XHJcblxyXG5jb25zdCB7IGlzTk9VIH0gPSBVdGlscztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1ZGVTdXJ2ZXlMYXVuY2hlckZhY3RvcnkgaW1wbGVtZW50cyBBcGkuSVN1cnZleUxhdW5jaGVyRmFjdG9yeSB7XHJcblx0cHVibGljIHN0YXRpYyByZWFkb25seSBMQVVOQ0hFUl9UWVBFOiBzdHJpbmcgPSBBcGkuSVN1cnZleS5MQVVOQ0hFUl9UWVBFX0RFRkFVTFQ7XHJcblxyXG5cdHB1YmxpYyBtYWtlU3VydmV5TGF1bmNoZXIoc3VydmV5OiBBcGkuSVN1cnZleSk6IEFwaS5JU3VydmV5TGF1bmNoZXIge1xyXG5cdFx0aWYgKHRoaXMuQWNjZXB0c1N1cnZleShzdXJ2ZXkpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUnVkZVN1cnZleUxhdW5jaGVyKHN1cnZleSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgQWNjZXB0c1N1cnZleShzdXJ2ZXk6IEFwaS5JU3VydmV5KTogYm9vbGVhbiB7XHJcblx0XHQvLyBUaGlzIGZhY3Rvcnkgc2hvdWxkIGFjY2VwdCBhbnkgdHlwZSB0aGF0IGlzIG5vdCBvZiB0eXBlIEdlbmVyaWNNZXNzYWdpbmdTdXJmYWNlXHJcblx0XHQvLyBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYSBydWRlIHN1cnZleSBsYXVuY2hlciBpcyByZXR1cm5lZCBmb3IgYW55IHN1cnZleSB0eXBlIG9sZCBvciBuZXdcclxuXHRcdC8vIGFzIGEgbGF1bmNoZXIgaXMgbmVlZGVkIHRvIGludm9rZSBzdXJ2ZXkgYWN0aXZhdGVkIGNhbGxiYWNrXHJcblx0XHRpZiAoIWlzTk9VKHN1cnZleSkgICYmIHN1cnZleS5nZXRUeXBlKCkgIT09IEFwaS5JU3VydmV5LlR5cGUuR2VuZXJpY01lc3NhZ2luZ1N1cmZhY2UpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1ZGVTdXJ2ZXlMYXVuY2hlciBpbXBsZW1lbnRzIEFwaS5JU3VydmV5TGF1bmNoZXIge1xyXG5cdHByaXZhdGUgc3VydmV5OiBBcGkuSVN1cnZleTtcclxuXHJcblx0Y29uc3RydWN0b3Ioc3VydmV5OiBBcGkuSVN1cnZleSkge1xyXG5cdFx0dGhpcy5zdXJ2ZXkgPSBzdXJ2ZXk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgbGF1bmNoKCk6IHZvaWQge1xyXG5cdFx0V2luZG93LmdldCgpLk9mZmljZUJyb3dzZXJGZWVkYmFjay5mbG9vZGdhdGUuc2hvd1N1cnZleShuZXcgVUlTdXJ2ZXkodGhpcy5zdXJ2ZXkpKTtcclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/RudeSurveyLauncherFactory.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/TransporterFactory.ts":
/*!*********************************************************!*\
  !*** ./scripts/app/FloodgateCore/TransporterFactory.ts ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Transport_Transport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../Transport/Transport */ \"./scripts/app/Transport/Transport.ts\");\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/**\r\n * Implementation of Transporter Factory Interface for calling submit directly to petrol\r\n */\r\n\r\n\r\nvar TransporterFactory = /** @class */ (function () {\r\n    function TransporterFactory() {\r\n    }\r\n    TransporterFactory.prototype.makeTransporter = function (surveyType) {\r\n        return new _Transport_Transport__WEBPACK_IMPORTED_MODULE_0__[\"Transporter\"](_Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions().environment, surveyType, _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions().appId, \"Survey\", _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions().applicationGroup, _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions().telemetryGroup, _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions().webGroup);\r\n    };\r\n    return TransporterFactory;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (TransporterFactory);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9GbG9vZGdhdGVDb3JlL1RyYW5zcG9ydGVyRmFjdG9yeS50cz80NGVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOztHQUVHO0FBR29EO0FBQ1c7QUFFbEU7SUFBQTtJQVlBLENBQUM7SUFYTyw0Q0FBZSxHQUF0QixVQUF1QixVQUFrQjtRQUN4QyxPQUFPLElBQUksZ0VBQVcsQ0FDckIsZ0VBQWlCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLFdBQVcsRUFDdEQsVUFBVSxFQUNWLGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLEVBQ2hELFFBQVEsRUFDUixnRUFBaUIsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsZ0JBQWdCLEVBQzNELGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxjQUFjLEVBQ3pELGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxRQUFRLENBQ25ELENBQUM7SUFDSCxDQUFDO0lBQ0YseUJBQUM7QUFBRCxDQUFDIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvRmxvb2RnYXRlQ29yZS9UcmFuc3BvcnRlckZhY3RvcnkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSW1wbGVtZW50YXRpb24gb2YgVHJhbnNwb3J0ZXIgRmFjdG9yeSBJbnRlcmZhY2UgZm9yIGNhbGxpbmcgc3VibWl0IGRpcmVjdGx5IHRvIHBldHJvbFxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFwaSB9IGZyb20gXCJAbXMtb2ZiL29mZmljZWZsb29kZ2F0ZWNvcmVcIjtcclxuaW1wb3J0IHsgVHJhbnNwb3J0ZXIgfSBmcm9tIFwiLi8uLi9UcmFuc3BvcnQvVHJhbnNwb3J0XCI7XHJcbmltcG9ydCAqIGFzIENvbmZpZ3VyYXRpb24gZnJvbSBcIi4vLi4vQ29uZmlndXJhdGlvbi9Db25maWd1cmF0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc3BvcnRlckZhY3RvcnkgaW1wbGVtZW50cyBBcGkuSVRyYW5zcG9ydGVyRmFjdG9yeSB7XHJcblx0cHVibGljIG1ha2VUcmFuc3BvcnRlcihzdXJ2ZXlUeXBlOiBzdHJpbmcpOiBBcGkuSVRyYW5zcG9ydGVyIHtcclxuXHRcdHJldHVybiBuZXcgVHJhbnNwb3J0ZXIoXHJcblx0XHRcdENvbmZpZ3VyYXRpb24uZ2V0KCkuZ2V0Q29tbW9uSW5pdE9wdGlvbnMoKS5lbnZpcm9ubWVudCxcclxuXHRcdFx0c3VydmV5VHlwZSxcclxuXHRcdFx0Q29uZmlndXJhdGlvbi5nZXQoKS5nZXRDb21tb25Jbml0T3B0aW9ucygpLmFwcElkLFxyXG5cdFx0XHRcIlN1cnZleVwiLFxyXG5cdFx0XHRDb25maWd1cmF0aW9uLmdldCgpLmdldENvbW1vbkluaXRPcHRpb25zKCkuYXBwbGljYXRpb25Hcm91cCxcclxuXHRcdFx0Q29uZmlndXJhdGlvbi5nZXQoKS5nZXRDb21tb25Jbml0T3B0aW9ucygpLnRlbGVtZXRyeUdyb3VwLFxyXG5cdFx0XHRDb25maWd1cmF0aW9uLmdldCgpLmdldENvbW1vbkluaXRPcHRpb25zKCkud2ViR3JvdXAsXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/TransporterFactory.ts\n");

/***/ }),

/***/ "./scripts/app/FloodgateCore/UISurvey/UISurvey.ts":
/*!********************************************************!*\
  !*** ./scripts/app/FloodgateCore/UISurvey/UISurvey.ts ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Constants */ \"./scripts/app/Constants.ts\");\n/**\r\n * An implementation of IUISurvey based on floodgate.core INpsSurvey\r\n */\r\n\r\n\r\nvar UISurvey = /** @class */ (function () {\r\n    function UISurvey(survey) {\r\n        this.showPrompt = true;\r\n        this.showEmailRequest = false;\r\n        if (!survey) {\r\n            throw Error(\"survey must not be null\");\r\n        }\r\n        else {\r\n            this.survey = survey;\r\n        }\r\n        if (survey.getType() === _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_0__[\"ISurvey\"].Type.Intercept) {\r\n            this.isIntercept = true;\r\n            var interceptComponent = survey.getComponent(\"Intercept\" /* Intercept */);\r\n            if (interceptComponent) {\r\n                this.intercept = interceptComponent;\r\n            }\r\n            else {\r\n                throw Error(\"intercept component must not be null\");\r\n            }\r\n        }\r\n        else {\r\n            this.isIntercept = false;\r\n            var promptComponent = survey.getComponent(\"Prompt\" /* Prompt */);\r\n            var commentComponent = survey.getComponent(\"Comment\" /* Comment */);\r\n            var ratingComponent = survey.getComponent(\"Rating\" /* Rating */);\r\n            var cvSurveyComponent = survey.getComponent(\"CVSurvey\" /* CVSurvey */);\r\n            if (promptComponent) {\r\n                this.prompt = promptComponent;\r\n            }\r\n            else {\r\n                throw Error(\"prompt component must not be null\");\r\n            }\r\n            // Check for additonalDataRequested options\r\n            this.showEmailRequest = survey.getSurveyInfo().isAdditionalDataRequested(0 /* EmailAddress */);\r\n            if (commentComponent) {\r\n                this.comment = commentComponent;\r\n            }\r\n            else {\r\n                throw Error(\"comment component must not be null\");\r\n            }\r\n            if (ratingComponent) {\r\n                this.rating = ratingComponent;\r\n            }\r\n            else {\r\n                throw Error(\"rating component must not be null\");\r\n            }\r\n            if (cvSurveyComponent) {\r\n                this.cvSurvey = cvSurveyComponent;\r\n                if (this.getLauncherType() === _Constants__WEBPACK_IMPORTED_MODULE_1__[\"customerVoiceLauncherType\"] && !this.getCVSurveyFormId()) {\r\n                    throw Error(\"CvSurveyId should not be null\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    UISurvey.prototype.getLauncherType = function () {\r\n        return this.isIntercept ? undefined : this.survey.getLauncherType();\r\n    };\r\n    UISurvey.prototype.getCVSurveyFormId = function () {\r\n        return this.isIntercept ? undefined : this.cvSurvey.getFormId();\r\n    };\r\n    UISurvey.prototype.getPreGeneratedClientFeedbackId = function () {\r\n        return this.survey.getPreGeneratedClientFeedbackId();\r\n    };\r\n    UISurvey.prototype.getPromptQuestion = function () {\r\n        return this.isIntercept ? undefined : this.prompt.getQuestion();\r\n    };\r\n    UISurvey.prototype.getTitle = function () {\r\n        return this.isIntercept ? undefined : this.prompt.getTitle();\r\n    };\r\n    UISurvey.prototype.getPromptYesButtonText = function () {\r\n        return this.isIntercept ? undefined : this.prompt.getYesButtonText();\r\n    };\r\n    UISurvey.prototype.getPromptNoButtonText = function () {\r\n        return this.isIntercept ? undefined : this.prompt.getNoButtonText();\r\n    };\r\n    UISurvey.prototype.getRatingValuesAscending = function () {\r\n        return this.isIntercept ? undefined : this.rating.getRatingValuesAscending();\r\n    };\r\n    UISurvey.prototype.getRatingQuestion = function () {\r\n        return this.isIntercept ? undefined : this.rating.getQuestion();\r\n    };\r\n    UISurvey.prototype.getCommentQuestion = function () {\r\n        return this.isIntercept ? undefined : this.comment.getQuestion();\r\n    };\r\n    UISurvey.prototype.getInterceptTitle = function () {\r\n        return this.isIntercept ? this.intercept.getTitle() : undefined;\r\n    };\r\n    UISurvey.prototype.getInterceptQuestion = function () {\r\n        return this.isIntercept ? this.intercept.getQuestion() : undefined;\r\n    };\r\n    UISurvey.prototype.getInterceptUrl = function () {\r\n        return this.isIntercept ? this.intercept.getUrl() : undefined;\r\n    };\r\n    UISurvey.prototype.setValues = function (selectedIndex, comment) {\r\n        if (!this.isIntercept) {\r\n            this.rating.setSelectedRatingIndex(selectedIndex);\r\n            this.comment.setSubmittedText(comment);\r\n        }\r\n    };\r\n    UISurvey.prototype.getJsonElements = function () {\r\n        return this.survey.getJsonElements();\r\n    };\r\n    UISurvey.prototype.getSurveyType = function () {\r\n        return this.survey.getType();\r\n    };\r\n    UISurvey.prototype.getCampaignId = function () {\r\n        return this.survey.getSurveyInfo().getBackEndId();\r\n    };\r\n    UISurvey.prototype.getId = function () {\r\n        return this.survey.getSurveyInfo().getId();\r\n    };\r\n    UISurvey.prototype.getGoverenedChannelType = function () {\r\n        return this.survey.getSurveyInfo().getGovernedChannelType();\r\n    };\r\n    return UISurvey;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (UISurvey);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/FloodgateCore/UISurvey/UISurvey.ts\n");

/***/ }),

/***/ "./scripts/app/GovernanceService/GovernanceServiceClient.ts":
/*!******************************************************************!*\
  !*** ./scripts/app/GovernanceService/GovernanceServiceClient.ts ***!
  \******************************************************************/
/*! exports provided: GovernanceServiceClient, get */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GovernanceServiceClient\", function() { return GovernanceServiceClient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _DynamicContent_DynamicContentTransport__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DynamicContent/DynamicContentTransport */ \"./scripts/app/DynamicContent/DynamicContentTransport.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Utils */ \"../FloodgateCore/dist/src/Utils.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/IGovernanceServiceClient */ \"../FloodgateCore/dist/src/Api/IGovernanceServiceClient.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _Personalizer_PersonalizerClient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Personalizer/PersonalizerClient */ \"./scripts/app/Personalizer/PersonalizerClient.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar govServiceInt = \"https://onessppe.microsoft.com/api/v1.0/UserSurvey\";\r\nvar govServiceProd = \"https://oness.microsoft.com/api/v1.0/UserSurvey\";\r\nvar GovernanceServiceClient = /** @class */ (function () {\r\n    function GovernanceServiceClient() {\r\n        this.personalizerClient = _Personalizer_PersonalizerClient__WEBPACK_IMPORTED_MODULE_7__[\"get\"]();\r\n        this.governanceServiceEnabled = false;\r\n        this.forceServicelessSurveyDisplay = false;\r\n        this.lastSurveyFailedSync = undefined;\r\n        this.clientState = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].Disabled;\r\n    }\r\n    GovernanceServiceClient.prototype.setup = function (configuration) {\r\n        this.governanceServiceEnabled = configuration.getFloodgateInitOptions().governanceServiceEnabled;\r\n        if (this.governanceServiceEnabled) {\r\n            // setup config and client info\r\n            this.clientInfo = {\r\n                applicationId: configuration.getCommonInitOptions().appId.toString(),\r\n                sessionId: configuration.getCommonInitOptions().sessionId,\r\n                version: configuration.getCommonInitOptions().build,\r\n                surveyPlatform: 1 /* Floodgate */,\r\n                hostPlatform: 6 /* Web */,\r\n                tenantId: configuration.getCommonInitOptions().telemetryGroup.tenantId,\r\n                deviceId: configuration.getCommonInitOptions().telemetryGroup.deviceId,\r\n                audience: configuration.getCommonInitOptions().telemetryGroup.audience,\r\n            };\r\n            this.userId = configuration.getCommonInitOptions().telemetryGroup.loggableUserId;\r\n            // Ensure all the client info is needed\r\n            if (Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"isNOU\"])(this.clientInfo.sessionId)) {\r\n                this.clientState = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].InitializationFailed;\r\n                return;\r\n            }\r\n            if (Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"isNOU\"])(this.clientInfo.version)) {\r\n                this.clientState = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].InitializationFailed;\r\n                return;\r\n            }\r\n            if (!Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"isValidUserId\"])(this.userId)) {\r\n                this.clientState = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].InitializationFailed;\r\n                return;\r\n            }\r\n            // Setup governance service config parameters\r\n            this.forceServicelessSurveyDisplay = configuration.getFloodgateInitOptions().governanceServiceConfig.forceServicelessSurveyDisplay;\r\n            this.retryLimit = configuration.getFloodgateInitOptions().governanceServiceConfig.retry;\r\n            this.timeout = configuration.getFloodgateInitOptions().governanceServiceConfig.timeout;\r\n            this.simpleRequestEnabled = configuration.getFloodgateInitOptions().governanceServiceConfig.simpleRequestEnabled;\r\n            this.isProduction = configuration.getCommonInitOptions().environment === 0 /* Production */;\r\n            this.clientState = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].Enabled;\r\n            this.dynamicTransport = new _DynamicContent_DynamicContentTransport__WEBPACK_IMPORTED_MODULE_3__[\"DynamicContentTransport\"](this.simpleRequestEnabled);\r\n        }\r\n    };\r\n    GovernanceServiceClient.prototype.isEnabled = function (governedChannelType) {\r\n        return this.clientState === _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceClientState\"].Enabled &&\r\n            this.governanceServiceEnabled &&\r\n            governedChannelType === _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__[\"GovernedChannelType\"].Standard;\r\n    };\r\n    GovernanceServiceClient.prototype.shouldForceDisplay = function () {\r\n        return this.forceServicelessSurveyDisplay;\r\n    };\r\n    GovernanceServiceClient.prototype.getClientInfo = function () {\r\n        return this.clientInfo;\r\n    };\r\n    GovernanceServiceClient.prototype.getClientState = function () {\r\n        return this.clientState;\r\n    };\r\n    GovernanceServiceClient.prototype.getLastSurveyFailedSync = function () {\r\n        return this.lastSurveyFailedSync;\r\n    };\r\n    GovernanceServiceClient.prototype.checkGovernancePermitAsync = function (survey, surveyLevelCooldown, userLevelCooldown, channel) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var requestUrl, surveyInfo, body, serviceResult, response, serviceCallTime, timeBefore, responseText, jsonResponse, e_1;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestUrl = (this.isProduction ? govServiceProd : govServiceInt) + (this.simpleRequestEnabled ? \"/SimpleRequest\" : \"\");\r\n                        surveyInfo = this.buildSurveyInfo(survey, surveyLevelCooldown, channel);\r\n                        body = this.buildBodyRequest(surveyInfo, userLevelCooldown);\r\n                        serviceResult = {\r\n                            permission: false,\r\n                            error: false,\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 4, , 5]);\r\n                        timeBefore = performance.now();\r\n                        return [4 /*yield*/, this.dynamicTransport.postRequestWithRetry(requestUrl, body, this.retryLimit, this.timeout)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        serviceCallTime = performance.now() - timeBefore;\r\n                        responseText = void 0;\r\n                        if (!response.ok) {\r\n                            this.lastSurveyFailedSync = surveyInfo;\r\n                            serviceResult.errorMessage = \"Server Error, status: \" + response.status + \", status text: \" + response.statusText;\r\n                            serviceResult.error = true;\r\n                            // Log the successful post criteria with time\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].GOVERNANCE_SERVICERESULT, 1 /* Critical */, {\r\n                                TimeMilliseconds: serviceCallTime,\r\n                                HttpStatusCode: response.status,\r\n                                HttpStatusText: response.statusText,\r\n                                AdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n                                CorrelationId: this.dynamicTransport.requestId,\r\n                                GovernanceRequestBody: body,\r\n                                GovernanceResponseText: responseText,\r\n                                CampaignId: survey.getCampaignId(),\r\n                                SurveyId: survey.getSurveyInfo().getId(),\r\n                            });\r\n                            return [2 /*return*/, serviceResult];\r\n                        }\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 3:\r\n                        // Get the response text\r\n                        responseText = _a.sent();\r\n                        // Log the successful post criteria with time\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].GOVERNANCE_SERVICERESULT, 1 /* Critical */, {\r\n                            TimeMilliseconds: serviceCallTime,\r\n                            HttpStatusCode: response.status,\r\n                            HttpStatusText: response.statusText,\r\n                            AdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n                            CorrelationId: this.dynamicTransport.requestId,\r\n                            GovernanceRequestBody: body,\r\n                            GovernanceResponseText: responseText,\r\n                            CampaignId: survey.getCampaignId(),\r\n                            SurveyId: survey.getSurveyInfo().getId(),\r\n                        });\r\n                        jsonResponse = JSON.parse(responseText);\r\n                        // Reparsing the date to correct ISO format\r\n                        jsonResponse.lastTriggerSurveyTime = Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"stringToDate\"])(new Date(jsonResponse.lastTriggerSurveyTime).toISOString());\r\n                        // Check the response integrity\r\n                        if (!Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"isNumber\"])(jsonResponse.timeUntilNextSurveyAllowed) ||\r\n                            !Object(_ms_ofb_officefloodgatecore_dist_src_Utils__WEBPACK_IMPORTED_MODULE_4__[\"isDate\"])(jsonResponse.lastTriggerSurveyTime)) {\r\n                            // Throw error with the response\r\n                            serviceResult.errorMessage = \"Service Response is not formatted correctly: \" + responseText;\r\n                            serviceResult.error = true;\r\n                            this.lastSurveyFailedSync = surveyInfo;\r\n                        }\r\n                        else {\r\n                            // Check if this is permitted\r\n                            if (jsonResponse.timeUntilNextSurveyAllowed === 0) {\r\n                                serviceResult.permission = true;\r\n                                // Set the personalizer data for AutoDismiss recommendation override (if enabled)\r\n                                if (this.personalizerClient.isEnabled(survey.getType(), survey.getLauncherType(), survey.getSurveyInfo().getGovernedChannelType())) {\r\n                                    this.personalizerClient.setEventIdAndOverrideValueForSurveyId(this.dynamicTransport.requestId, 0 /* AutoDismissTime */, jsonResponse.actionId, survey.getSurveyInfo().getId(), survey.getCampaignId());\r\n                                }\r\n                            }\r\n                            // Save the response trigger time\r\n                            serviceResult.lastTriggerSurvey = jsonResponse;\r\n                            // Clear the last failure\r\n                            this.lastSurveyFailedSync = undefined;\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        e_1 = _a.sent();\r\n                        this.lastSurveyFailedSync = surveyInfo;\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].GOVERNANCE_SERVICEFAILURE, 2 /* Error */, {\r\n                            ErrorMessage: e_1.toString(),\r\n                            AdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n                            CorrelationId: this.dynamicTransport.requestId,\r\n                            HttpStatusCode: response === null || response === void 0 ? void 0 : response.status,\r\n                            HttpStatusText: response === null || response === void 0 ? void 0 : response.statusText,\r\n                            GovernanceRequestBody: body,\r\n                        });\r\n                        serviceResult.error = true;\r\n                        serviceResult.errorMessage = \"Error: \" + e_1.toString() + \", Error stack: \" + e_1.stack;\r\n                        return [3 /*break*/, 5];\r\n                    case 5: return [2 /*return*/, serviceResult];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    GovernanceServiceClient.prototype.buildSurveyInfo = function (survey, surveyLevelCooldown, channel) {\r\n        var stringType = _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__[\"ISurvey\"].Type[survey.getType()];\r\n        var surveyType = _ms_ofb_officefloodgatecore_dist_src_Api_IGovernanceServiceClient__WEBPACK_IMPORTED_MODULE_5__[\"GovernanceServiceSurveyType\"][stringType];\r\n        var newDate = new Date();\r\n        var isPersonalizerEnabled = this.personalizerClient.isEnabled(survey.getType(), survey.getLauncherType(), survey.getSurveyInfo().getGovernedChannelType());\r\n        return {\r\n            surveyId: survey.getCampaignId(),\r\n            surveyTriggerTime: newDate,\r\n            surveyType: surveyType,\r\n            surveyLevelCooldown: surveyLevelCooldown,\r\n            surveyChannel: channel,\r\n            localOffsetTime: newDate.getTimezoneOffset(),\r\n            personalizerEnabled: isPersonalizerEnabled,\r\n        };\r\n    };\r\n    GovernanceServiceClient.prototype.buildBodyRequest = function (surveyInfo, userLevelCooldown) {\r\n        var result = {\r\n            userId: this.userId,\r\n            userLevelCooldown: userLevelCooldown,\r\n            survey: surveyInfo,\r\n            client: this.clientInfo,\r\n        };\r\n        if (this.simpleRequestEnabled) {\r\n            this.dynamicTransport.requestId = Object(_Utils__WEBPACK_IMPORTED_MODULE_8__[\"guid\"])();\r\n            result.requestId = this.dynamicTransport.requestId;\r\n        }\r\n        return JSON.stringify(result);\r\n    };\r\n    GovernanceServiceClient.prototype.buildConfigTelemetryString = function () {\r\n        var objectTelemetry = {\r\n            retry: this.retryLimit,\r\n            timeout: this.timeout,\r\n            simpleRequestEnabled: this.simpleRequestEnabled,\r\n        };\r\n        return JSON.stringify(objectTelemetry);\r\n    };\r\n    return GovernanceServiceClient;\r\n}());\r\n\r\nvar governanceServiceClient = new GovernanceServiceClient();\r\n/**\r\n * Get the current Governance Service Client\r\n */\r\nfunction get() {\r\n    return governanceServiceClient;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/GovernanceService/GovernanceServiceClient.ts\n");

/***/ }),

/***/ "./scripts/app/Localization.ts":
/*!*************************************!*\
  !*** ./scripts/app/Localization.ts ***!
  \*************************************/
/*! exports provided: validate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validate\", function() { return validate; });\n/**\r\n * Localization.ts\r\n *\r\n * Module for Localization\r\n */\r\n/**\r\n * List of supported Locales\r\n * REMINDER: update readme to match the list below if change is made\r\n */\r\nvar supportedLocales = [\r\n    \"af\",\r\n    \"am\",\r\n    \"ar\",\r\n    \"as\",\r\n    \"az\",\r\n    \"be\",\r\n    \"bg\",\r\n    \"bn-BD\",\r\n    \"bn-IN\",\r\n    \"bs\",\r\n    \"ca\",\r\n    \"ca-Es-VALENCIA\",\r\n    \"chr-Cher\",\r\n    \"cs\",\r\n    \"cy\",\r\n    \"da\",\r\n    \"de\",\r\n    \"el\",\r\n    \"en-GB\",\r\n    \"es\",\r\n    \"es-MX\",\r\n    \"et\",\r\n    \"eu\",\r\n    \"fa\",\r\n    \"fi\",\r\n    \"fil\",\r\n    \"fr\",\r\n    \"fr-CA\",\r\n    \"ga\",\r\n    \"gd\",\r\n    \"gl\",\r\n    \"gu\",\r\n    \"ha-Latn-NG\",\r\n    \"he\",\r\n    \"hi\",\r\n    \"hr\",\r\n    \"hu\",\r\n    \"hy\",\r\n    \"id\",\r\n    \"is\",\r\n    \"it\",\r\n    \"ja\",\r\n    \"ka\",\r\n    \"kk\",\r\n    \"km-KH\",\r\n    \"kn\",\r\n    \"ko\",\r\n    \"kok\",\r\n    \"ky\",\r\n    \"lb\",\r\n    \"lo\",\r\n    \"lt\",\r\n    \"lv\",\r\n    \"mi\",\r\n    \"mk\",\r\n    \"ml\",\r\n    \"mn\",\r\n    \"mr\",\r\n    \"ms\",\r\n    \"mt\",\r\n    \"nb-NO\",\r\n    \"ne\",\r\n    \"nl\",\r\n    \"nn-NO\",\r\n    \"or\",\r\n    \"pa\",\r\n    \"pl\",\r\n    \"prs\",\r\n    \"pt-BR\",\r\n    \"pt-PT\",\r\n    \"quz\",\r\n    \"ro\",\r\n    \"ru\",\r\n    \"sd\",\r\n    \"si\",\r\n    \"sk\",\r\n    \"sl\",\r\n    \"sq\",\r\n    \"sr-Cyrl-BA\",\r\n    \"sr-Cyrl-RS\",\r\n    \"sr-Latn-RS\",\r\n    \"sv\",\r\n    \"sw\",\r\n    \"ta\",\r\n    \"te\",\r\n    \"th\",\r\n    \"tk\",\r\n    \"tr\",\r\n    \"tt\",\r\n    \"ug\",\r\n    \"uk\",\r\n    \"ur\",\r\n    \"uz-Latn-UZ\",\r\n    \"vi\",\r\n    \"zh-Hans\",\r\n    \"zh-Hant\",\r\n];\r\nvar localeVariantToSupportedlocaleMap = {\r\n    \"ZH-CN\": \"zh-Hans\",\r\n    \"ZH-HK\": \"zh-Hant\",\r\n    \"ZH-MO\": \"zh-Hant\",\r\n    \"ZH-SG\": \"zh-Hans\",\r\n    \"ZH-TW\": \"zh-Hant\",\r\n};\r\nfunction validate(locale) {\r\n    var localeUpperCase = locale.toLocaleUpperCase();\r\n    // support for Chinese ll-cc, VSO Bug 1583389\r\n    if (localeUpperCase in localeVariantToSupportedlocaleMap) {\r\n        return localeVariantToSupportedlocaleMap[localeUpperCase];\r\n    }\r\n    // return supported locale if exact match found\r\n    for (var _i = 0, supportedLocales_1 = supportedLocales; _i < supportedLocales_1.length; _i++) {\r\n        var supportedLocale = supportedLocales_1[_i];\r\n        if (supportedLocale.toUpperCase() === localeUpperCase) {\r\n            return supportedLocale;\r\n        }\r\n    }\r\n    var localePartOne = localeUpperCase.split(\"-\")[0];\r\n    // return supported \"ll\" if exact match not found, but \"ll\" matches\r\n    for (var _a = 0, supportedLocales_2 = supportedLocales; _a < supportedLocales_2.length; _a++) {\r\n        var supportedLocale = supportedLocales_2[_a];\r\n        if (supportedLocale.toUpperCase() === localePartOne) {\r\n            return supportedLocale;\r\n        }\r\n    }\r\n    // default everything else to en\r\n    return \"en\";\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Mb2NhbGl6YXRpb24udHM/MmNmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7Ozs7R0FJRztBQUVIOzs7R0FHRztBQUNILElBQUksZ0JBQWdCLEdBQWE7SUFDaEMsSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLE9BQU87SUFDUCxPQUFPO0lBQ1AsSUFBSTtJQUNKLElBQUk7SUFDSixnQkFBZ0I7SUFDaEIsVUFBVTtJQUNWLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osT0FBTztJQUNQLElBQUk7SUFDSixPQUFPO0lBQ1AsSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLEtBQUs7SUFDTCxJQUFJO0lBQ0osT0FBTztJQUNQLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixZQUFZO0lBQ1osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixPQUFPO0lBQ1AsSUFBSTtJQUNKLElBQUk7SUFDSixLQUFLO0lBQ0wsSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osT0FBTztJQUNQLElBQUk7SUFDSixJQUFJO0lBQ0osT0FBTztJQUNQLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLEtBQUs7SUFDTCxPQUFPO0lBQ1AsT0FBTztJQUNQLEtBQUs7SUFDTCxJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBQ1osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixZQUFZO0lBQ1osSUFBSTtJQUNKLFNBQVM7SUFDVCxTQUFTO0NBQ1QsQ0FBQztBQUVGLElBQU0saUNBQWlDLEdBQThCO0lBQ3BFLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxTQUFTO0NBQ2xCLENBQUM7QUFFSyxTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQ3RDLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBRWpELDZDQUE2QztJQUM3QyxJQUFJLGVBQWUsSUFBSSxpQ0FBaUMsRUFBRTtRQUN6RCxPQUFPLGlDQUFpQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsK0NBQStDO0lBQy9DLEtBQTRCLFVBQWdCLEVBQWhCLHFDQUFnQixFQUFoQiw4QkFBZ0IsRUFBaEIsSUFBZ0IsRUFBRTtRQUF6QyxJQUFJLGVBQWU7UUFDdkIsSUFBSSxlQUFlLENBQUMsV0FBVyxFQUFFLEtBQUssZUFBZSxFQUFFO1lBQ3RELE9BQU8sZUFBZSxDQUFDO1NBQ3ZCO0tBQ0Q7SUFFRCxJQUFJLGFBQWEsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELG1FQUFtRTtJQUNuRSxLQUE0QixVQUFnQixFQUFoQixxQ0FBZ0IsRUFBaEIsOEJBQWdCLEVBQWhCLElBQWdCLEVBQUU7UUFBekMsSUFBSSxlQUFlO1FBQ3ZCLElBQUksZUFBZSxDQUFDLFdBQVcsRUFBRSxLQUFLLGFBQWEsRUFBRTtZQUNwRCxPQUFPLGVBQWUsQ0FBQztTQUN2QjtLQUNEO0lBRUQsZ0NBQWdDO0lBQ2hDLE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0xvY2FsaXphdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMb2NhbGl6YXRpb24udHNcclxuICpcclxuICogTW9kdWxlIGZvciBMb2NhbGl6YXRpb25cclxuICovXHJcblxyXG4vKipcclxuICogTGlzdCBvZiBzdXBwb3J0ZWQgTG9jYWxlc1xyXG4gKiBSRU1JTkRFUjogdXBkYXRlIHJlYWRtZSB0byBtYXRjaCB0aGUgbGlzdCBiZWxvdyBpZiBjaGFuZ2UgaXMgbWFkZVxyXG4gKi9cclxubGV0IHN1cHBvcnRlZExvY2FsZXM6IHN0cmluZ1tdID0gW1xyXG5cdFwiYWZcIixcclxuXHRcImFtXCIsXHJcblx0XCJhclwiLFxyXG5cdFwiYXNcIixcclxuXHRcImF6XCIsXHJcblx0XCJiZVwiLFxyXG5cdFwiYmdcIixcclxuXHRcImJuLUJEXCIsXHJcblx0XCJibi1JTlwiLFxyXG5cdFwiYnNcIixcclxuXHRcImNhXCIsXHJcblx0XCJjYS1Fcy1WQUxFTkNJQVwiLFxyXG5cdFwiY2hyLUNoZXJcIixcclxuXHRcImNzXCIsXHJcblx0XCJjeVwiLFxyXG5cdFwiZGFcIixcclxuXHRcImRlXCIsXHJcblx0XCJlbFwiLFxyXG5cdFwiZW4tR0JcIixcclxuXHRcImVzXCIsXHJcblx0XCJlcy1NWFwiLFxyXG5cdFwiZXRcIixcclxuXHRcImV1XCIsXHJcblx0XCJmYVwiLFxyXG5cdFwiZmlcIixcclxuXHRcImZpbFwiLFxyXG5cdFwiZnJcIixcclxuXHRcImZyLUNBXCIsXHJcblx0XCJnYVwiLFxyXG5cdFwiZ2RcIixcclxuXHRcImdsXCIsXHJcblx0XCJndVwiLFxyXG5cdFwiaGEtTGF0bi1OR1wiLFxyXG5cdFwiaGVcIixcclxuXHRcImhpXCIsXHJcblx0XCJoclwiLFxyXG5cdFwiaHVcIixcclxuXHRcImh5XCIsXHJcblx0XCJpZFwiLFxyXG5cdFwiaXNcIixcclxuXHRcIml0XCIsXHJcblx0XCJqYVwiLFxyXG5cdFwia2FcIixcclxuXHRcImtrXCIsXHJcblx0XCJrbS1LSFwiLFxyXG5cdFwia25cIixcclxuXHRcImtvXCIsXHJcblx0XCJrb2tcIixcclxuXHRcImt5XCIsXHJcblx0XCJsYlwiLFxyXG5cdFwibG9cIixcclxuXHRcImx0XCIsXHJcblx0XCJsdlwiLFxyXG5cdFwibWlcIixcclxuXHRcIm1rXCIsXHJcblx0XCJtbFwiLFxyXG5cdFwibW5cIixcclxuXHRcIm1yXCIsXHJcblx0XCJtc1wiLFxyXG5cdFwibXRcIixcclxuXHRcIm5iLU5PXCIsXHJcblx0XCJuZVwiLFxyXG5cdFwibmxcIixcclxuXHRcIm5uLU5PXCIsXHJcblx0XCJvclwiLFxyXG5cdFwicGFcIixcclxuXHRcInBsXCIsXHJcblx0XCJwcnNcIixcclxuXHRcInB0LUJSXCIsXHJcblx0XCJwdC1QVFwiLFxyXG5cdFwicXV6XCIsXHJcblx0XCJyb1wiLFxyXG5cdFwicnVcIixcclxuXHRcInNkXCIsXHJcblx0XCJzaVwiLFxyXG5cdFwic2tcIixcclxuXHRcInNsXCIsXHJcblx0XCJzcVwiLFxyXG5cdFwic3ItQ3lybC1CQVwiLFxyXG5cdFwic3ItQ3lybC1SU1wiLFxyXG5cdFwic3ItTGF0bi1SU1wiLFxyXG5cdFwic3ZcIixcclxuXHRcInN3XCIsXHJcblx0XCJ0YVwiLFxyXG5cdFwidGVcIixcclxuXHRcInRoXCIsXHJcblx0XCJ0a1wiLFxyXG5cdFwidHJcIixcclxuXHRcInR0XCIsXHJcblx0XCJ1Z1wiLFxyXG5cdFwidWtcIixcclxuXHRcInVyXCIsXHJcblx0XCJ1ei1MYXRuLVVaXCIsXHJcblx0XCJ2aVwiLFxyXG5cdFwiemgtSGFuc1wiLFxyXG5cdFwiemgtSGFudFwiLFxyXG5dO1xyXG5cclxuY29uc3QgbG9jYWxlVmFyaWFudFRvU3VwcG9ydGVkbG9jYWxlTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG5cdFwiWkgtQ05cIjogXCJ6aC1IYW5zXCIsXHJcblx0XCJaSC1IS1wiOiBcInpoLUhhbnRcIixcclxuXHRcIlpILU1PXCI6IFwiemgtSGFudFwiLFxyXG5cdFwiWkgtU0dcIjogXCJ6aC1IYW5zXCIsXHJcblx0XCJaSC1UV1wiOiBcInpoLUhhbnRcIixcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZShsb2NhbGU6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0bGV0IGxvY2FsZVVwcGVyQ2FzZSA9IGxvY2FsZS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xyXG5cclxuXHQvLyBzdXBwb3J0IGZvciBDaGluZXNlIGxsLWNjLCBWU08gQnVnIDE1ODMzODlcclxuXHRpZiAobG9jYWxlVXBwZXJDYXNlIGluIGxvY2FsZVZhcmlhbnRUb1N1cHBvcnRlZGxvY2FsZU1hcCkge1xyXG5cdFx0cmV0dXJuIGxvY2FsZVZhcmlhbnRUb1N1cHBvcnRlZGxvY2FsZU1hcFtsb2NhbGVVcHBlckNhc2VdO1xyXG5cdH1cclxuXHJcblx0Ly8gcmV0dXJuIHN1cHBvcnRlZCBsb2NhbGUgaWYgZXhhY3QgbWF0Y2ggZm91bmRcclxuXHRmb3IgKGxldCBzdXBwb3J0ZWRMb2NhbGUgb2Ygc3VwcG9ydGVkTG9jYWxlcykge1xyXG5cdFx0aWYgKHN1cHBvcnRlZExvY2FsZS50b1VwcGVyQ2FzZSgpID09PSBsb2NhbGVVcHBlckNhc2UpIHtcclxuXHRcdFx0cmV0dXJuIHN1cHBvcnRlZExvY2FsZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxldCBsb2NhbGVQYXJ0T25lID0gbG9jYWxlVXBwZXJDYXNlLnNwbGl0KFwiLVwiKVswXTtcclxuXHQvLyByZXR1cm4gc3VwcG9ydGVkIFwibGxcIiBpZiBleGFjdCBtYXRjaCBub3QgZm91bmQsIGJ1dCBcImxsXCIgbWF0Y2hlc1xyXG5cdGZvciAobGV0IHN1cHBvcnRlZExvY2FsZSBvZiBzdXBwb3J0ZWRMb2NhbGVzKSB7XHJcblx0XHRpZiAoc3VwcG9ydGVkTG9jYWxlLnRvVXBwZXJDYXNlKCkgPT09IGxvY2FsZVBhcnRPbmUpIHtcclxuXHRcdFx0cmV0dXJuIHN1cHBvcnRlZExvY2FsZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIGRlZmF1bHQgZXZlcnl0aGluZyBlbHNlIHRvIGVuXHJcblx0cmV0dXJuIFwiZW5cIjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Localization.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Constants.ts":
/*!******************************************!*\
  !*** ./scripts/app/Logging/Constants.ts ***!
  \******************************************/
/*! exports provided: EventIds */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventIds\", function() { return EventIds; });\n/**\r\n * Constants.ts\r\n *\r\n * Module to hold logging-related constants\r\n */\r\nvar EventIds = /** @class */ (function () {\r\n    function EventIds() {\r\n    }\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\r\n    EventIds.InApp = (_a = /** @class */ (function () {\r\n            function class_1() {\r\n            }\r\n            return class_1;\r\n        }()),\r\n        _a.UI = (_b = /** @class */ (function () {\r\n                function class_2() {\r\n                }\r\n                return class_2;\r\n            }()),\r\n            _b.Picker = (_c = /** @class */ (function () {\r\n                    function class_3() {\r\n                    }\r\n                    return class_3;\r\n                }()),\r\n                _c.Shown = (_d = /** @class */ (function () {\r\n                        function class_4() {\r\n                        }\r\n                        return class_4;\r\n                    }()),\r\n                    _d.VALUE = { name: \"InApp_UI_Picker_Shown\" },\r\n                    _d),\r\n                _c),\r\n            _b.Form = (_e = /** @class */ (function () {\r\n                    function class_5() {\r\n                    }\r\n                    return class_5;\r\n                }()),\r\n                _e.Shown = (_f = /** @class */ (function () {\r\n                        function class_6() {\r\n                        }\r\n                        return class_6;\r\n                    }()),\r\n                    _f.VALUE = { name: \"InApp_UI_Form_Shown\" },\r\n                    _f),\r\n                _e.Submit = (_g = /** @class */ (function () {\r\n                        function class_7() {\r\n                        }\r\n                        return class_7;\r\n                    }()),\r\n                    _g.VALUE = { name: \"InApp_UI_Form_Submit\" },\r\n                    _g),\r\n                _e),\r\n            _b),\r\n        _a);\r\n    // This saves ~400 bytes (minified) vs nested classes\r\n    EventIds.SURVEY_FLOODGATE_CAMPAIGNLOAD_FAILED = { name: \"Survey_Floodgate_CampaignLoad_Failed\" };\r\n    EventIds.SURVEY_FLOODGATE_FILEREAD_FAILED = { name: \"Survey_Floodgate_FileRead_Failed\" };\r\n    EventIds.SURVEY_FLOODGATE_FILEWRITE_FAILED = { name: \"Survey_Floodgate_FileWrite_Failed\" };\r\n    EventIds.SURVEY_FLOODGATE_TRIGGERMET = { name: \"Survey_Floodgate_TriggerMet\" };\r\n    EventIds.SURVEY_FLOODGATE_USERSELECTED = { name: \"Survey_Floodgate_UserSelected\" };\r\n    EventIds.SURVEY_UI_FORM_SHOWN = { name: \"Survey_UI_Form_Shown\" };\r\n    EventIds.SURVEY_UI_FORM_SUBMIT = { name: \"Survey_UI_Form_Submit\" };\r\n    EventIds.SURVEY_UI_FORM_SECONDARY_SUBMIT = { name: \"Survey_UI_Form_Secondary_Submit\" };\r\n    EventIds.SURVEY_UI_FORM_SUBMIT_ERROR = { name: \"Survey_UI_Form_Submit_Error\" };\r\n    EventIds.SURVEY_UI_FORM_USERCLOSED = { name: \"Survey_UI_Form_UserClosed\" };\r\n    EventIds.SURVEY_UI_FORM_NO_RETURN_TYPE = { name: \"Survey_UI_Form_No_Return_Type\" };\r\n    EventIds.SURVEY_UI_PROMPT_AUTODISMISSED = { name: \"Survey_UI_Prompt_AutoDismissed\" };\r\n    EventIds.SURVEY_UI_PROMPT_SHOWN = { name: \"Survey_UI_Prompt_Shown\" };\r\n    EventIds.SURVEY_UI_PROMPT_USERCLOSED = { name: \"Survey_UI_Prompt_UserClosed\" };\r\n    EventIds.SURVEY_UI_PROMPT_CLICKED = { name: \"Survey_UI_Prompt_Clicked\" };\r\n    EventIds.SURVEY_UI_REDIRECTIONFAILURE = { name: \"Survey_UI_RedirectionFailure\" };\r\n    EventIds.GOVERNANCE_SERVICEFAILURE = { name: \"Gorvenance_ServiceFailure\" };\r\n    EventIds.GOVERNANCE_SERVICERESULT = { name: \"Gorvenance_ServiceResult\" };\r\n    EventIds.DYNAMICTRANSPORT_POST_ERROR = { name: \"DynamicTransport_Post_Error\" };\r\n    EventIds.FEEDBACK_SURVEYSDISABLED_AADC = { name: \"Feedback_SurveysDisabled_AADC\" };\r\n    EventIds.SURVEY_UI_DISABLED_AADC = { name: \"Survey_UI_Prevented_AADC\" };\r\n    EventIds.PERSONALIZER_SERVICEREWARDRESULT = { name: \"Personalizer_ServiceRewardResult\" };\r\n    EventIds.PERSONALIZER_CLIENTFAILURE = { name: \"Personalizer_ClientFailure\" };\r\n    EventIds.Shared = (_h = /** @class */ (function () {\r\n            function class_8() {\r\n            }\r\n            return class_8;\r\n        }()),\r\n        _h.Upload = (_j = /** @class */ (function () {\r\n                function class_9() {\r\n                }\r\n                return class_9;\r\n            }()),\r\n            _j.Failed = (_k = /** @class */ (function () {\r\n                    function class_10() {\r\n                    }\r\n                    return class_10;\r\n                }()),\r\n                _k.VALUE = { name: \"Shared_Upload_Failed\" },\r\n                _k),\r\n            _j.Prevented = (_l = /** @class */ (function () {\r\n                    function class_11() {\r\n                    }\r\n                    return class_11;\r\n                }()),\r\n                _l.VALUE = { name: \"Shared_Upload_Prevented_AADC\" },\r\n                _l),\r\n            _j),\r\n        _h.Screenshot = (_m = /** @class */ (function () {\r\n                function class_12() {\r\n                }\r\n                return class_12;\r\n            }()),\r\n            _m.Render = (_o = /** @class */ (function () {\r\n                    function class_13() {\r\n                    }\r\n                    return class_13;\r\n                }()),\r\n                _o.Failed = (_p = /** @class */ (function () {\r\n                        function class_14() {\r\n                        }\r\n                        return class_14;\r\n                    }()),\r\n                    _p.VALUE = { name: \"Shared_Screenshot_Render_Failed\" },\r\n                    _p),\r\n                _o.Success = (_q = /** @class */ (function () {\r\n                        function class_15() {\r\n                        }\r\n                        return class_15;\r\n                    }()),\r\n                    _q.VALUE = { name: \"Shared_Screenshot_Render_Success\" },\r\n                    _q),\r\n                _o),\r\n            _m.GetContent = (_r = /** @class */ (function () {\r\n                    function class_16() {\r\n                    }\r\n                    return class_16;\r\n                }()),\r\n                _r.Failed = (_s = /** @class */ (function () {\r\n                        function class_17() {\r\n                        }\r\n                        return class_17;\r\n                    }()),\r\n                    _s.DefaultImage = (_t = /** @class */ (function () {\r\n                            function class_18() {\r\n                            }\r\n                            return class_18;\r\n                        }()),\r\n                        _t.Returned = (_u = /** @class */ (function () {\r\n                                function class_19() {\r\n                                }\r\n                                return class_19;\r\n                            }()),\r\n                            _u.VALUE = { name: \"Shared_Screenshot_GetContent_Failed_DefaultImage_Returned\" },\r\n                            _u),\r\n                        _t),\r\n                    _s),\r\n                _r),\r\n            _m),\r\n        _h);\r\n    EventIds.WebSurfaces = (_v = /** @class */ (function () {\r\n            function class_20() {\r\n            }\r\n            return class_20;\r\n        }()),\r\n        _v.Common = (_w = /** @class */ (function () {\r\n                function class_21() {\r\n                }\r\n                return class_21;\r\n            }()),\r\n            _w.Error = (_x = /** @class */ (function () {\r\n                    function class_22() {\r\n                    }\r\n                    return class_22;\r\n                }()),\r\n                _x.VALUE = { name: \"WebSurfaces_Common_Error\" },\r\n                _x),\r\n            _w.Info = (_y = /** @class */ (function () {\r\n                    function class_23() {\r\n                    }\r\n                    return class_23;\r\n                }()),\r\n                _y.VALUE = { name: \"WebSurfaces_Common_Info\" },\r\n                _y),\r\n            _w),\r\n        _v.Messaging = (_z = /** @class */ (function () {\r\n                function class_24() {\r\n                }\r\n                return class_24;\r\n            }()),\r\n            _z.Requests = (_0 = /** @class */ (function () {\r\n                    function class_25() {\r\n                    }\r\n                    return class_25;\r\n                }()),\r\n                _0.VALUE = { name: \"WebSurfaces_Messaging_Requests\" },\r\n                _0),\r\n            _z),\r\n        _v);\r\n    EventIds.UserFacts = (_1 = /** @class */ (function () {\r\n            function class_26() {\r\n            }\r\n            return class_26;\r\n        }()),\r\n        _1.Common = (_2 = /** @class */ (function () {\r\n                function class_27() {\r\n                }\r\n                return class_27;\r\n            }()),\r\n            _2.Error = (_3 = /** @class */ (function () {\r\n                    function class_28() {\r\n                    }\r\n                    return class_28;\r\n                }()),\r\n                _3.VALUE = { name: \"UserFacts_Common_Error\" },\r\n                _3),\r\n            _2.Info = (_4 = /** @class */ (function () {\r\n                    function class_29() {\r\n                    }\r\n                    return class_29;\r\n                }()),\r\n                _4.VALUE = { name: \"UserFacts_Common_Info\" },\r\n                _4),\r\n            _2),\r\n        _1.LocalFact = (_5 = /** @class */ (function () {\r\n                function class_30() {\r\n                }\r\n                return class_30;\r\n            }()),\r\n            _5.Error = (_6 = /** @class */ (function () {\r\n                    function class_31() {\r\n                    }\r\n                    return class_31;\r\n                }()),\r\n                _6.VALUE = { name: \"UserFacts_LocalFact_Error\" },\r\n                _6),\r\n            _5),\r\n        _1.Messaging = (_7 = /** @class */ (function () {\r\n                function class_32() {\r\n                }\r\n                return class_32;\r\n            }()),\r\n            _7.Requests = (_8 = /** @class */ (function () {\r\n                    function class_33() {\r\n                    }\r\n                    return class_33;\r\n                }()),\r\n                _8.VALUE = { name: \"UserFacts_Messaging_Requests\" },\r\n                _8),\r\n            _7),\r\n        _1.AugLoop = (_9 = /** @class */ (function () {\r\n                function class_34() {\r\n                }\r\n                return class_34;\r\n            }()),\r\n            _9.Requests = (_10 = /** @class */ (function () {\r\n                    function class_35() {\r\n                    }\r\n                    return class_35;\r\n                }()),\r\n                _10.VALUE = { name: \"UserFacts_AugLoop_Requests\" },\r\n                _10),\r\n            _9.Error = (_11 = /** @class */ (function () {\r\n                    function class_36() {\r\n                    }\r\n                    return class_36;\r\n                }()),\r\n                _11.VALUE = { name: \"UserFacts_AugLoop_Error\" },\r\n                _11),\r\n            _9),\r\n        _1.Provider = (_12 = /** @class */ (function () {\r\n                function class_37() {\r\n                }\r\n                return class_37;\r\n            }()),\r\n            _12.Info = (_13 = /** @class */ (function () {\r\n                    function class_38() {\r\n                    }\r\n                    return class_38;\r\n                }()),\r\n                _13.VALUE = { name: \"UserFacts_Provider_Summary\" },\r\n                _13),\r\n            _12),\r\n        _1);\r\n    EventIds.Common = (_14 = /** @class */ (function () {\r\n            function class_39() {\r\n            }\r\n            return class_39;\r\n        }()),\r\n        _14.Error = (_15 = /** @class */ (function () {\r\n                function class_40() {\r\n                }\r\n                return class_40;\r\n            }()),\r\n            _15.VALUE = { name: \"Common_Error\" },\r\n            _15),\r\n        _14.Info = (_16 = /** @class */ (function () {\r\n                function class_41() {\r\n                }\r\n                return class_41;\r\n            }()),\r\n            _16.VALUE = { name: \"Common_Info\" },\r\n            _16),\r\n        _14);\r\n    return EventIds;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Constants.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Logging.ts":
/*!****************************************!*\
  !*** ./scripts/app/Logging/Logging.ts ***!
  \****************************************/
/*! exports provided: EventIds, initialize, getLogger, Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize\", function() { return initialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLogger\", function() { return getLogger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Logger\", function() { return Logger; });\n/* harmony import */ var _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Telemetry/Contracts */ \"./scripts/app/Logging/Telemetry/Contracts.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _Telemetry_TelemetryLoggerFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Telemetry/TelemetryLoggerFactory */ \"./scripts/app/Logging/Telemetry/TelemetryLoggerFactory.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../FloodgateCore/FloodgateStorageProvider */ \"./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Constants */ \"./scripts/app/Logging/Constants.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EventIds\", function() { return _Constants__WEBPACK_IMPORTED_MODULE_5__[\"EventIds\"]; });\n\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar isNOU = _Utils__WEBPACK_IMPORTED_MODULE_1__[\"isNOU\"];\r\nvar NAMESPACE = \"Office_Feedback\";\r\nvar logger;\r\nvar env;\r\n/**\r\n * Initialize the logging module\r\n * @param initOptionsCommon object contains common init options\r\n * @param appName app name\r\n * @param appVersion app version\r\n * @param logSessionId local SDK session id\r\n */\r\nfunction initialize(initOptionsCommon, appName, appVersion, logSessionId, samplingOption) {\r\n    var telemetryGroup = initOptionsCommon.telemetryGroup ? initOptionsCommon.telemetryGroup : {};\r\n    var webGroup = initOptionsCommon.webGroup ? initOptionsCommon.webGroup : {};\r\n    logger = new Logger(_Telemetry_TelemetryLoggerFactory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create(TokenManager.getTenantToken(initOptionsCommon.environment), NAMESPACE, new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"App\"](appName, appVersion), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"Session\"](logSessionId), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"Host\"](initOptionsCommon.appId.toString(), initOptionsCommon.originalLocale, initOptionsCommon.sessionId, initOptionsCommon.build), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"Release\"](telemetryGroup.audienceGroup), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"](webGroup.browser, webGroup.browserVersion), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"Device\"](telemetryGroup.deviceId), new _Telemetry_Contracts__WEBPACK_IMPORTED_MODULE_0__[\"User\"](telemetryGroup.loggableUserId ? telemetryGroup.loggableUserId : initOptionsCommon.cid, telemetryGroup.tenantId)), samplingOption, initOptionsCommon);\r\n    env = initOptionsCommon.environment;\r\n}\r\n/**\r\n * Get the logger object\r\n */\r\nfunction getLogger() {\r\n    return logger;\r\n}\r\n;\r\n;\r\n/**\r\n * Class representing a logger for the feedback SDK\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(telemetryLogger, samplingOptions, initOptionsCommon) {\r\n        this.SAMPLING_RESULT = Math.random();\r\n        if (!telemetryLogger) {\r\n            throw new Error(\"telemetryLogger must not be null\");\r\n        }\r\n        this.telemetryLogger = telemetryLogger;\r\n        this.eventSampling = samplingOptions;\r\n        this.initOptionsCommon = initOptionsCommon;\r\n    }\r\n    /**\r\n     * Log an event\r\n     * @param eventId event Id\r\n     * @param logSeverity the log level severity for the message\r\n     * @param customProperties custom properties to add to the log\r\n     * @param internalSampleRate sample rate for this event in decimal (example: 0.05 for 5%). (Does not override host set sampleRate)\r\n     */\r\n    Logger.prototype.logEvent = function (eventId, logSeverity, customProperties, internalSampleRate) {\r\n        if (!eventId) {\r\n            throw new Error(\"eventId must not be null\");\r\n        }\r\n        var sampleRate = Logger.DEFAULT_SAMPLE_RATE;\r\n        // Host set sample rate has precedence over internalSampleRate.\r\n        if (this.isEventSampled(eventId.name)) {\r\n            sampleRate = this.getEventSamplingRate(eventId.name);\r\n        }\r\n        else if (internalSampleRate !== undefined) {\r\n            sampleRate = internalSampleRate;\r\n        }\r\n        if (isNOU(logSeverity) || logSeverity === 0 /* None */) {\r\n            if (env === 0 /* Production */) {\r\n                var errorMessage = \"logSeverity must not be null or none\";\r\n                if (this.isConsoleLogEnabled && console) {\r\n                    // tslint:disable:no-console\r\n                    console.log(\"Floodgate event: \", Logger.EVENT_NAME, errorMessage);\r\n                }\r\n                this.telemetryLogger.logEvent(Logger.EVENT_NAME, { ErrorMessage: errorMessage }, sampleRate);\r\n            }\r\n            return false;\r\n        }\r\n        customProperties = customProperties || {};\r\n        customProperties[Logger.EVENT_ID] = eventId.name;\r\n        if (this.isLoggingEnabled(logSeverity, sampleRate) || this.isEventTelemetryEnabled(eventId.name)) {\r\n            this.telemetryLogger.logEvent(Logger.EVENT_NAME, customProperties, sampleRate);\r\n        }\r\n        if (this.isConsoleLogEnabled && console) {\r\n            // tslint:disable:no-console\r\n            console.log(\"Floodgate event: \", Logger.EVENT_NAME, logSeverity, customProperties);\r\n        }\r\n        return true;\r\n    };\r\n    Logger.prototype.logLocal = function (logSeverity) {\r\n        var others = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            others[_i - 1] = arguments[_i];\r\n        }\r\n        if (this.isLoggingEnabled(logSeverity) && this.isConsoleLogEnabled && console) {\r\n            // tslint:disable:no-console\r\n            console.log(\"LPP FG: \", logSeverity, others);\r\n        }\r\n    };\r\n    Logger.prototype.getUserSamplingRate = function () {\r\n        return this.SAMPLING_RESULT;\r\n    };\r\n    Logger.prototype.isEventTelemetryEnabled = function (eventName) {\r\n        var _a, _b, _c, _d;\r\n        try {\r\n            if (!this.dynamicLogSettings) {\r\n                return false;\r\n            }\r\n            var appId = (_b = (_a = this.initOptionsCommon) === null || _a === void 0 ? void 0 : _a.appId) === null || _b === void 0 ? void 0 : _b.toString();\r\n            var locale = (_d = (_c = this.initOptionsCommon) === null || _c === void 0 ? void 0 : _c.originalLocale) === null || _d === void 0 ? void 0 : _d.toLowerCase();\r\n            var settingName = \"content_\" + eventName;\r\n            // try settings from more specific to generic order\r\n            var overrideSettings = this.dynamicLogSettings[settingName + \"_\" + appId + \"_\" + locale] ||\r\n                this.dynamicLogSettings[settingName + \"_\" + appId] ||\r\n                this.dynamicLogSettings[settingName + \"_\" + locale] ||\r\n                this.dynamicLogSettings[settingName];\r\n            return overrideSettings === null || overrideSettings === void 0 ? void 0 : overrideSettings.isEnabled;\r\n        }\r\n        catch (e) {\r\n            if (this.isConsoleLogEnabled) {\r\n                // tslint:disable:no-console\r\n                console.log(\"FG: Error checking for dynamic log settings: \", e);\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * This method enables logging only if the log severity of the event is less than or equal to the\r\n     * current log level set and within the sample rate. For example, if the log severity of the event is\r\n     * LogLevel.Error and the current log level is set as LogLevel.Critical, then isLoggingEnabled will\r\n     * return false since the condition LogLevel.Error <= LogLevel.Critical is false. Because, the log severity\r\n     * follows the order defined in the LogLevel enum (None < Critical < Error < Info). The sample rate is the\r\n     * percentage of users allow to send the event back. If the random genarated number is less than the sample rate\r\n     * and the sample rate is not full blocking (0 value)\r\n     * If no current log level is set, then the default log level is set as LogLevel.Error so that all events\r\n     * marked with critical and error log severity get logged.\r\n     * @param inputLogLevel the log severity of the event\r\n     */\r\n    Logger.prototype.isLoggingEnabled = function (inputLogLevel, sampleRate) {\r\n        if (sampleRate === void 0) { sampleRate = 1; }\r\n        if (isNOU(this.logLevel)) {\r\n            var currentLogLevel = this.getCurrentLogLevel();\r\n            this.logLevel = isNOU(currentLogLevel) ? 2 /* Error */ : currentLogLevel;\r\n        }\r\n        return (inputLogLevel <= this.logLevel && this.SAMPLING_RESULT <= sampleRate && sampleRate !== 0);\r\n    };\r\n    /**\r\n     * This method returns the current log level if it is set in either url query parameters or floodgate local storage.\r\n     * Following table summarizes whether the log event calls with a log severity will log the events or not according\r\n     * to the current log level set. For example, the first row in the table demonstrates that when the current log level\r\n     * enabled is critical, then the log event will log the events only if the log severity is critical.\r\n     *\r\n     * Current Log Level Enabled | LogSeverity: Critical\t| LogSeverity: Error\t| LogSeverity: Info\r\n     * --------------------------------------------------------------------------------------------\r\n     * Critical Enabled\t\t\t | yes      \t\t\t\t| no    \t\t\t \t| no\r\n     * Error Enabled       \t\t | yes      \t\t\t\t| yes   \t\t\t \t| no\r\n     * Info Enabled        \t\t | yes      \t\t\t\t| yes   \t\t\t \t| yes\r\n     * None Enabled        \t\t | no       \t\t\t\t| no    \t\t\t \t| no\r\n     *\r\n     * Console logging will be enabled when the current log level is set through the url query parameters or\r\n     * when the url query parameter \"obfconsolelog\" is explicitly set to true.\r\n     */\r\n    Logger.prototype.getCurrentLogLevel = function () {\r\n        try {\r\n            // Check if console log is enabled in local browser session with query parameter overrides\r\n            var urlParams = typeof URLSearchParams !== \"undefined\" && new URLSearchParams(window.location.search) || undefined;\r\n            var consoleLogParam = urlParams && urlParams.get(\"obfconsolelog\");\r\n            if (!consoleLogParam) {\r\n                // for getting iframe host url - eg: WAC\r\n                var documentReferrer = typeof document !== \"undefined\" && document.referrer;\r\n                consoleLogParam = documentReferrer && documentReferrer.indexOf(\"obfconsolelog\") !== -1;\r\n            }\r\n            if (consoleLogParam) {\r\n                this.isConsoleLogEnabled = true;\r\n            }\r\n            // Check if log level is set in local browser session with query parameter overrides\r\n            var logLevelParam = urlParams && urlParams.get(\"obfloglevel\");\r\n            if (!isNOU(logLevelParam)) {\r\n                this.isConsoleLogEnabled = true;\r\n                return parseInt(logLevelParam, 10);\r\n            }\r\n            // Check if log level is set in floodgate local storage (manually or with remotely fetched settings)\r\n            if (_FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isStorageAvailable()) {\r\n                var floodgateStorageProvider = new _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\r\n                var tempStorageItem = floodgateStorageProvider.read(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_4__[\"FileType\"].LogLevelSettings);\r\n                if (!tempStorageItem) {\r\n                    tempStorageItem = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_6__[\"getDynamicSetting\"])(\"LogLevelSettings\" /* logLevelSettings */, \"\");\r\n                }\r\n                var settingsObj = tempStorageItem && this.parseObject(tempStorageItem);\r\n                if (settingsObj) {\r\n                    this.dynamicLogSettings = settingsObj;\r\n                    var logSettings = settingsObj.content;\r\n                    if (this.initOptionsCommon) {\r\n                        var appId = this.initOptionsCommon.appId && this.initOptionsCommon.appId.toString();\r\n                        var locale = this.initOptionsCommon.originalLocale && this.initOptionsCommon.originalLocale.toLowerCase();\r\n                        // log settings from more specific to generic order\r\n                        logSettings = settingsObj[\"content_\" + appId + \"_\" + locale] ||\r\n                            settingsObj[\"content_\" + appId] ||\r\n                            settingsObj[\"content_\" + locale] ||\r\n                            settingsObj[\"content\"];\r\n                    }\r\n                    if (logSettings) {\r\n                        if (logSettings.consoleLog) {\r\n                            this.isConsoleLogEnabled = true;\r\n                        }\r\n                        return logSettings.logLevel;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (this.isConsoleLogEnabled) {\r\n                // tslint:disable:no-console\r\n                console.log(\"Error while getting the current log level: \", e);\r\n            }\r\n            return undefined;\r\n        }\r\n        return null;\r\n    };\r\n    Logger.prototype.parseObject = function (tempItem) {\r\n        try {\r\n            return JSON.parse(tempItem);\r\n        }\r\n        catch (e) {\r\n            if (this.isConsoleLogEnabled) {\r\n                // tslint:disable:no-console\r\n                console.log(\"Error while parsing the json string for log level: \", e);\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    Logger.prototype.getEventSamplingRate = function (eventId) {\r\n        var sampleRate = 1;\r\n        if (this.eventSampling.event) {\r\n            // If the event is init with sample rate\r\n            // check the sampling result against the sample rate\r\n            if (eventId in this.eventSampling.event) {\r\n                sampleRate = this.eventSampling.event[eventId];\r\n            }\r\n        }\r\n        return sampleRate;\r\n    };\r\n    Logger.prototype.isEventSampled = function (eventId) {\r\n        if (this.eventSampling.event) {\r\n            if (eventId in this.eventSampling.event) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Logger.EVENT_NAME = \"SDK\";\r\n    Logger.EVENT_ID = \"EventId\";\r\n    Logger.DEFAULT_SAMPLE_RATE = 1;\r\n    return Logger;\r\n}());\r\n\r\nvar TokenManager = /** @class */ (function () {\r\n    function TokenManager() {\r\n    }\r\n    TokenManager.getTenantToken = function (environment) {\r\n        if (environment === 0 /* Production */) {\r\n            return TokenManager.TENANT_TOKEN_PRODUCTION;\r\n        }\r\n        else {\r\n            return TokenManager.TENANT_TOKEN_PRE_PRODUCTION;\r\n        }\r\n    };\r\n    TokenManager.TENANT_TOKEN_PRODUCTION = \"d79e824386c4441cb8c1d4ae15690526-bd443309-5494-444a-aba9-0af9eef99f84-7360\"; // \"Office Feedback\" Prod Aria tenant\r\n    TokenManager.TENANT_TOKEN_PRE_PRODUCTION = \"2bf6a2ffddca4a80a892a0b182132961-625cb102-8b0c-480e-af53-92e48695d08d-7736\"; // \"Office Feedback\" Sandbox Aria tenant\r\n    return TokenManager;\r\n}());\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Logging.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Telemetry/Aria.ts":
/*!***********************************************!*\
  !*** ./scripts/app/Logging/Telemetry/Aria.ts ***!
  \***********************************************/
/*! exports provided: AWT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AWT\", function() { return AWT; });\n/**\r\n * Aria.ts\r\n *\r\n * Module for wrapper around Aria\r\n */\r\nvar aria = __webpack_require__(/*! ./../../thirdparty/aria-webjs-compact-sdk-1.2.2 */ \"./scripts/app/thirdparty/aria-webjs-compact-sdk-1.2.2.js\");\r\nfunction AWT() { return aria.AWT; }\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Mb2dnaW5nL1RlbGVtZXRyeS9BcmlhLnRzP2NhOWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOzs7O0dBSUc7QUFFSCxJQUFJLElBQUksR0FBUSxtQkFBTyxDQUFDLGlIQUFpRCxDQUFDLENBQUM7QUFFcEUsU0FBUyxHQUFHLEtBQUssT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUFBLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9Mb2dnaW5nL1RlbGVtZXRyeS9BcmlhLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFyaWEudHNcclxuICpcclxuICogTW9kdWxlIGZvciB3cmFwcGVyIGFyb3VuZCBBcmlhXHJcbiAqL1xyXG5cclxubGV0IGFyaWE6IGFueSA9IHJlcXVpcmUoXCIuLy4uLy4uL3RoaXJkcGFydHkvYXJpYS13ZWJqcy1jb21wYWN0LXNkay0xLjIuMlwiKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBBV1QoKSB7IHJldHVybiBhcmlhLkFXVDsgfTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Telemetry/Aria.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Telemetry/AriaTelemetryLogger.ts":
/*!**************************************************************!*\
  !*** ./scripts/app/Logging/Telemetry/AriaTelemetryLogger.ts ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Aria__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Aria */ \"./scripts/app/Logging/Telemetry/Aria.ts\");\n/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ \"./scripts/app/Logging/Telemetry/Contracts.ts\");\n/**\r\n * An Aria-based logger\r\n */\r\n\r\n\r\nvar AriaTelemetryLogger = /** @class */ (function () {\r\n    function AriaTelemetryLogger(tenantToken, namespace, app, session, host, release, browser, device, user) {\r\n        if (!tenantToken) {\r\n            throw new Error(\"tenantToken must not be null\");\r\n        }\r\n        if (!namespace) {\r\n            throw new Error(\"namespace must not be null\");\r\n        }\r\n        if (!app) {\r\n            throw new Error(\"app must not be null\");\r\n        }\r\n        if (!session) {\r\n            throw new Error(\"session must not be null\");\r\n        }\r\n        _Aria__WEBPACK_IMPORTED_MODULE_0__[\"AWT\"]().initialize(tenantToken);\r\n        this.namespace = namespace;\r\n        this.oesApp = app;\r\n        this.oesSession = session;\r\n        this.oesHost = host;\r\n        this.oesRelease = release;\r\n        this.oesBrowser = browser;\r\n        this.oesDevice = device;\r\n        this.oesUser = user;\r\n        this.sequence = 1; // Sequence starts at 1 not 0\r\n    }\r\n    AriaTelemetryLogger.setApp = function (properties, app) {\r\n        properties[\"App.Name\"] = app.getName();\r\n        properties[\"App.Platform\"] = app.getPlatform();\r\n        properties[\"App.Version\"] = app.getVersion();\r\n    };\r\n    AriaTelemetryLogger.setSession = function (properties, session) {\r\n        properties[\"Session.Id\"] = session.getId();\r\n    };\r\n    AriaTelemetryLogger.setHost = function (properties, host) {\r\n        if (host) {\r\n            properties[\"Host.Id\"] = host.getId();\r\n            properties[\"Host.SessionId2\"] = host.getSessionId();\r\n            properties[\"Host.Version\"] = host.getVersion();\r\n            properties[\"Host.Locale\"] = host.getLocale();\r\n        }\r\n    };\r\n    AriaTelemetryLogger.setEvent = function (properties, event) {\r\n        properties[\"Event.Name\"] = event.getName();\r\n        properties[\"Event.Id\"] = event.getId();\r\n        properties[\"Event.Source\"] = event.getSource();\r\n        properties[\"Event.SchemaVersion\"] = event.getSchemaVersion();\r\n        properties[\"Event.Sequence\"] = event.getSequence();\r\n        properties[\"Event.SampleRate\"] = event.getSampleRate();\r\n    };\r\n    AriaTelemetryLogger.setRelease = function (properties, release) {\r\n        if (release) {\r\n            properties[\"Release.AudienceGroup\"] = release.getAudienceGroup();\r\n        }\r\n    };\r\n    AriaTelemetryLogger.setBrowser = function (properties, browser) {\r\n        if (browser) {\r\n            properties[\"Browser.Name\"] = browser.getName();\r\n            properties[\"Browser.Version\"] = browser.getVersion();\r\n        }\r\n    };\r\n    AriaTelemetryLogger.setDevice = function (properties, device) {\r\n        if (device) {\r\n            properties[\"Device.Id\"] = device.getId();\r\n        }\r\n    };\r\n    AriaTelemetryLogger.setUser = function (properties, user) {\r\n        if (user) {\r\n            properties[\"User.PrimaryIdentityHash\"] = user.getPrimaryIdentityHash();\r\n            properties[\"User.PrimaryIdentitySpace\"] = user.getPrimaryIdentitySpace();\r\n            properties[\"User.TenantId\"] = user.getTenantId();\r\n        }\r\n    };\r\n    AriaTelemetryLogger.prototype.logEvent = function (eventName, customProperties, sampleRate) {\r\n        if (sampleRate === void 0) { sampleRate = 1; }\r\n        if (!eventName) {\r\n            throw new Error(\"eventName must not be null\");\r\n        }\r\n        var oesEvent = new _Contracts__WEBPACK_IMPORTED_MODULE_1__[\"Event\"](this.namespace + AriaTelemetryLogger.EVENT_NAME_DELIMITER + eventName, this.oesSession.getId(), this.sequence, sampleRate);\r\n        var ariaProperties = {};\r\n        if (customProperties != null) {\r\n            for (var key in customProperties) {\r\n                if (customProperties.hasOwnProperty(key)) {\r\n                    ariaProperties[AriaTelemetryLogger.CUSTOM_PROPERTIES_FIELD_PREFIX + key] = customProperties[key];\r\n                }\r\n            }\r\n        }\r\n        AriaTelemetryLogger.setApp(ariaProperties, this.oesApp);\r\n        AriaTelemetryLogger.setSession(ariaProperties, this.oesSession);\r\n        AriaTelemetryLogger.setHost(ariaProperties, this.oesHost);\r\n        AriaTelemetryLogger.setRelease(ariaProperties, this.oesRelease);\r\n        AriaTelemetryLogger.setEvent(ariaProperties, oesEvent);\r\n        AriaTelemetryLogger.setBrowser(ariaProperties, this.oesBrowser);\r\n        AriaTelemetryLogger.setDevice(ariaProperties, this.oesDevice);\r\n        AriaTelemetryLogger.setUser(ariaProperties, this.oesUser);\r\n        _Aria__WEBPACK_IMPORTED_MODULE_0__[\"AWT\"]().logEvent({\r\n            name: oesEvent.getName(),\r\n            properties: ariaProperties,\r\n        });\r\n        this.sequence++;\r\n    };\r\n    // Event.name is set as namespace<DELIMITER>eventName\r\n    AriaTelemetryLogger.EVENT_NAME_DELIMITER = \"_\";\r\n    AriaTelemetryLogger.CUSTOM_PROPERTIES_FIELD_PREFIX = \"Data.\";\r\n    return AriaTelemetryLogger;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (AriaTelemetryLogger);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Telemetry/AriaTelemetryLogger.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Telemetry/Contracts.ts":
/*!****************************************************!*\
  !*** ./scripts/app/Logging/Telemetry/Contracts.ts ***!
  \****************************************************/
/*! exports provided: App, Session, Host, Event, Release, Browser, Device, User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"App\", function() { return App; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Session\", function() { return Session; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Host\", function() { return Host; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Release\", function() { return Release; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Browser\", function() { return Browser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Device\", function() { return Device; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"User\", function() { return User; });\n/**\r\n * Contracts enforced by OfficeEventSchema (OES)\r\n */\r\nvar App = /** @class */ (function () {\r\n    function App(name, version) {\r\n        if (!name) {\r\n            throw new Error(\"name must not be null\");\r\n        }\r\n        if (!version) {\r\n            throw new Error(\"version must not be null\");\r\n        }\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n    App.prototype.getName = function () {\r\n        return this.name;\r\n    };\r\n    App.prototype.getPlatform = function () {\r\n        return App.PLATFORM;\r\n    };\r\n    App.prototype.getVersion = function () {\r\n        return this.version;\r\n    };\r\n    App.PLATFORM = \"Web\";\r\n    return App;\r\n}());\r\n\r\nvar Session = /** @class */ (function () {\r\n    function Session(id) {\r\n        if (!id) {\r\n            throw new Error(\"id must not be null\");\r\n        }\r\n        this.id = id;\r\n    }\r\n    Session.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    return Session;\r\n}());\r\n\r\nvar Host = /** @class */ (function () {\r\n    function Host(id, locale, sessionId, version) {\r\n        this.id = id;\r\n        this.locale = locale;\r\n        this.sessionId = sessionId;\r\n        this.version = version;\r\n    }\r\n    Host.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    Host.prototype.getLocale = function () {\r\n        return this.locale;\r\n    };\r\n    Host.prototype.getSessionId = function () {\r\n        return this.sessionId;\r\n    };\r\n    Host.prototype.getVersion = function () {\r\n        return this.version;\r\n    };\r\n    return Host;\r\n}());\r\n\r\nvar Event = /** @class */ (function () {\r\n    function Event(name, sessionId, sequence, sampleRate) {\r\n        if (!name) {\r\n            throw new Error(\"name must not be null\");\r\n        }\r\n        if (!sessionId) {\r\n            throw new Error(\"sessionId must not be null\");\r\n        }\r\n        if ((!sequence && sequence !== 0) || sequence < 0) {\r\n            throw new Error(\"sequence must not be negative\");\r\n        }\r\n        this.name = name;\r\n        this.id = sessionId + Event.ID_DELIMITER + sequence;\r\n        this.sequence = sequence;\r\n        this.sampleRate = sampleRate;\r\n    }\r\n    Event.prototype.getName = function () {\r\n        return this.name;\r\n    };\r\n    Event.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    Event.prototype.getSource = function () {\r\n        return Event.SOURCE;\r\n    };\r\n    Event.prototype.getSchemaVersion = function () {\r\n        return Event.SCHEMA_VERSION;\r\n    };\r\n    Event.prototype.getSequence = function () {\r\n        return this.sequence;\r\n    };\r\n    Event.prototype.getSampleRate = function () {\r\n        return this.sampleRate;\r\n    };\r\n    // Id is set to sessionId<DELIMITER>sequence\r\n    Event.ID_DELIMITER = \".\";\r\n    Event.SOURCE = \"MsoThin\";\r\n    Event.SCHEMA_VERSION = 1;\r\n    return Event;\r\n}());\r\n\r\nvar Release = /** @class */ (function () {\r\n    function Release(audienceGroup) {\r\n        this.audienceGroup = audienceGroup;\r\n    }\r\n    Release.prototype.getAudienceGroup = function () {\r\n        return this.audienceGroup;\r\n    };\r\n    return Release;\r\n}());\r\n\r\nvar Browser = /** @class */ (function () {\r\n    function Browser(name, version) {\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n    Browser.prototype.getName = function () {\r\n        return this.name;\r\n    };\r\n    Browser.prototype.getVersion = function () {\r\n        return this.version;\r\n    };\r\n    return Browser;\r\n}());\r\n\r\nvar Device = /** @class */ (function () {\r\n    function Device(id) {\r\n        this.id = id;\r\n    }\r\n    Device.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    return Device;\r\n}());\r\n\r\nvar User = /** @class */ (function () {\r\n    function User(primaryIdentityHash, tenantId) {\r\n        this.tenantId = tenantId;\r\n        this.primaryIdentityHash = primaryIdentityHash ? primaryIdentityHash.trim() : primaryIdentityHash;\r\n        this.primaryIdentitySpace = this.generatePrimaryIdentitySpace();\r\n    }\r\n    User.prototype.getTenantId = function () {\r\n        return this.tenantId;\r\n    };\r\n    User.prototype.getPrimaryIdentityHash = function () {\r\n        return this.primaryIdentityHash;\r\n    };\r\n    User.prototype.getPrimaryIdentitySpace = function () {\r\n        return this.primaryIdentitySpace;\r\n    };\r\n    User.prototype.generatePrimaryIdentitySpace = function () {\r\n        if (this.primaryIdentityHash) {\r\n            if (this.primaryIdentityHash.startsWith(\"a:\")) {\r\n                return \"UserObjectId\";\r\n            }\r\n            if (this.primaryIdentityHash.startsWith(\"p:\")) {\r\n                return \"MsaPuid\";\r\n            }\r\n            if (this.primaryIdentityHash.startsWith(\"ap:\")) {\r\n                return \"OrgIdPuid\";\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return User;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Mb2dnaW5nL1RlbGVtZXRyeS9Db250cmFjdHMudHM/Mzc0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7R0FFRztBQUVIO0lBTUMsYUFBbUIsSUFBWSxFQUFFLE9BQWU7UUFDL0MsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRU0scUJBQU8sR0FBZDtRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRU0seUJBQVcsR0FBbEI7UUFDQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDckIsQ0FBQztJQUVNLHdCQUFVLEdBQWpCO1FBQ0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUEzQmMsWUFBUSxHQUFXLEtBQUssQ0FBQztJQTRCekMsVUFBQztDQUFBO0FBN0JlO0FBK0JoQjtJQUdDLGlCQUFtQixFQUFVO1FBQzVCLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDdkM7UUFFRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSx1QkFBSyxHQUFaO1FBQ0MsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFDRixjQUFDO0FBQUQsQ0FBQzs7QUFFRDtJQU1DLGNBQVksRUFBVSxFQUFFLE1BQWMsRUFBRSxTQUFpQixFQUFFLE9BQWU7UUFDekUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRU0sb0JBQUssR0FBWjtRQUNDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU0sd0JBQVMsR0FBaEI7UUFDQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQUVNLDJCQUFZLEdBQW5CO1FBQ0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSx5QkFBVSxHQUFqQjtRQUNDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBQ0YsV0FBQztBQUFELENBQUM7O0FBRUQ7SUFXQyxlQUFtQixJQUFZLEVBQUUsU0FBaUIsRUFBRSxRQUFnQixFQUFFLFVBQWtCO1FBQ3ZGLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNqRDtRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxHQUFHLEtBQUssQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQzlCLENBQUM7SUFFTSx1QkFBTyxHQUFkO1FBQ0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxxQkFBSyxHQUFaO1FBQ0MsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSx5QkFBUyxHQUFoQjtRQUNDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU0sZ0NBQWdCLEdBQXZCO1FBQ0MsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFTSwyQkFBVyxHQUFsQjtRQUNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBRU0sNkJBQWEsR0FBcEI7UUFDQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDeEIsQ0FBQztJQWpERCw0Q0FBNEM7SUFDN0Isa0JBQVksR0FBRyxHQUFHLENBQUM7SUFDbkIsWUFBTSxHQUFXLFNBQVMsQ0FBQztJQUMzQixvQkFBYyxHQUFXLENBQUMsQ0FBQztJQStDM0MsWUFBQztDQUFBO0FBbkRpQjtBQXFEbEI7SUFHQyxpQkFBbUIsYUFBcUI7UUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDcEMsQ0FBQztJQUVNLGtDQUFnQixHQUF2QjtRQUNDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMzQixDQUFDO0lBQ0YsY0FBQztBQUFELENBQUM7O0FBRUQ7SUFJQyxpQkFBbUIsSUFBWSxFQUFFLE9BQWU7UUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVNLHlCQUFPLEdBQWQ7UUFDQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVNLDRCQUFVLEdBQWpCO1FBQ0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUFDRixjQUFDO0FBQUQsQ0FBQzs7QUFFRDtJQUdDLGdCQUFtQixFQUFVO1FBQzVCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVNLHNCQUFLLEdBQVo7UUFDQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNGLGFBQUM7QUFBRCxDQUFDOztBQUVEO0lBS0MsY0FBbUIsbUJBQTJCLEVBQUUsUUFBZ0I7UUFDL0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7UUFDbEcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFTSwwQkFBVyxHQUFsQjtRQUNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBRU0scUNBQXNCLEdBQTdCO1FBQ0MsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDakMsQ0FBQztJQUVNLHNDQUF1QixHQUE5QjtRQUNDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ2xDLENBQUM7SUFFTywyQ0FBNEIsR0FBcEM7UUFDQyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM3QixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzlDLE9BQU8sY0FBYyxDQUFDO2FBQ3RCO1lBQ0QsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM5QyxPQUFPLFNBQVMsQ0FBQzthQUNqQjtZQUNELElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDL0MsT0FBTyxXQUFXLENBQUM7YUFDbkI7U0FDRDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7SUFDRixXQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL0xvZ2dpbmcvVGVsZW1ldHJ5L0NvbnRyYWN0cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb250cmFjdHMgZW5mb3JjZWQgYnkgT2ZmaWNlRXZlbnRTY2hlbWEgKE9FUylcclxuICovXHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIHtcclxuXHRwcml2YXRlIHN0YXRpYyBQTEFURk9STTogc3RyaW5nID0gXCJXZWJcIjtcclxuXHJcblx0cHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSB2ZXJzaW9uOiBzdHJpbmc7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykge1xyXG5cdFx0aWYgKCFuYW1lKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIm5hbWUgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghdmVyc2lvbikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ2ZXJzaW9uIG11c3Qgbm90IGJlIG51bGxcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMubmFtZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRQbGF0Zm9ybSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIEFwcC5QTEFURk9STTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRWZXJzaW9uKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy52ZXJzaW9uO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlc3Npb24ge1xyXG5cdHByaXZhdGUgaWQ6IHN0cmluZztcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcpIHtcclxuXHRcdGlmICghaWQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaWQgbXVzdCBub3QgYmUgbnVsbFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmlkID0gaWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0SWQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmlkO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhvc3Qge1xyXG5cdHByaXZhdGUgaWQ6IHN0cmluZztcclxuXHRwcml2YXRlIGxvY2FsZTogc3RyaW5nO1xyXG5cdHByaXZhdGUgc2Vzc2lvbklkOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSB2ZXJzaW9uOiBzdHJpbmc7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGxvY2FsZTogc3RyaW5nLCBzZXNzaW9uSWQ6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmlkID0gaWQ7XHJcblx0XHR0aGlzLmxvY2FsZSA9IGxvY2FsZTtcclxuXHRcdHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRJZCgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuaWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0TG9jYWxlKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5sb2NhbGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0U2Vzc2lvbklkKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5zZXNzaW9uSWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VmVyc2lvbigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMudmVyc2lvbjtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudCB7XHJcblx0Ly8gSWQgaXMgc2V0IHRvIHNlc3Npb25JZDxERUxJTUlURVI+c2VxdWVuY2VcclxuXHRwcml2YXRlIHN0YXRpYyBJRF9ERUxJTUlURVIgPSBcIi5cIjtcclxuXHRwcml2YXRlIHN0YXRpYyBTT1VSQ0U6IHN0cmluZyA9IFwiTXNvVGhpblwiO1xyXG5cdHByaXZhdGUgc3RhdGljIFNDSEVNQV9WRVJTSU9OOiBudW1iZXIgPSAxO1xyXG5cclxuXHRwcml2YXRlIG5hbWU6IHN0cmluZztcclxuXHRwcml2YXRlIGlkOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBzZXF1ZW5jZTogbnVtYmVyO1xyXG5cdHByaXZhdGUgc2FtcGxlUmF0ZTogbnVtYmVyO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBzZXNzaW9uSWQ6IHN0cmluZywgc2VxdWVuY2U6IG51bWJlciwgc2FtcGxlUmF0ZTogbnVtYmVyKSB7XHJcblx0XHRpZiAoIW5hbWUpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwibmFtZSBtdXN0IG5vdCBiZSBudWxsXCIpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFzZXNzaW9uSWQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwic2Vzc2lvbklkIG11c3Qgbm90IGJlIG51bGxcIik7XHJcblx0XHR9XHJcblx0XHRpZiAoKCFzZXF1ZW5jZSAmJiBzZXF1ZW5jZSAhPT0gMCkgfHwgc2VxdWVuY2UgPCAwKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcInNlcXVlbmNlIG11c3Qgbm90IGJlIG5lZ2F0aXZlXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmlkID0gc2Vzc2lvbklkICsgRXZlbnQuSURfREVMSU1JVEVSICsgc2VxdWVuY2U7XHJcblx0XHR0aGlzLnNlcXVlbmNlID0gc2VxdWVuY2U7XHJcblx0XHR0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLm5hbWU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0SWQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmlkO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFNvdXJjZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIEV2ZW50LlNPVVJDRTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRTY2hlbWFWZXJzaW9uKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gRXZlbnQuU0NIRU1BX1ZFUlNJT047XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0U2VxdWVuY2UoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLnNlcXVlbmNlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFNhbXBsZVJhdGUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLnNhbXBsZVJhdGU7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVsZWFzZSB7XHJcblx0cHJpdmF0ZSBhdWRpZW5jZUdyb3VwOiBzdHJpbmc7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihhdWRpZW5jZUdyb3VwOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMuYXVkaWVuY2VHcm91cCA9IGF1ZGllbmNlR3JvdXA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0QXVkaWVuY2VHcm91cCgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXVkaWVuY2VHcm91cDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VyIHtcclxuXHRwcml2YXRlIG5hbWU6IHN0cmluZztcclxuXHRwcml2YXRlIHZlcnNpb246IHN0cmluZztcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nKSB7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFZlcnNpb24oKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLnZlcnNpb247XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGV2aWNlIHtcclxuXHRwcml2YXRlIGlkOiBzdHJpbmc7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmlkID0gaWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0SWQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmlkO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXIge1xyXG5cdHByaXZhdGUgcHJpbWFyeUlkZW50aXR5SGFzaDogc3RyaW5nO1xyXG5cdHByaXZhdGUgcHJpbWFyeUlkZW50aXR5U3BhY2U6IHN0cmluZztcclxuXHRwcml2YXRlIHRlbmFudElkOiBzdHJpbmc7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihwcmltYXJ5SWRlbnRpdHlIYXNoOiBzdHJpbmcsIHRlbmFudElkOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMudGVuYW50SWQgPSB0ZW5hbnRJZDtcclxuXHRcdHRoaXMucHJpbWFyeUlkZW50aXR5SGFzaCA9IHByaW1hcnlJZGVudGl0eUhhc2ggPyBwcmltYXJ5SWRlbnRpdHlIYXNoLnRyaW0oKSA6IHByaW1hcnlJZGVudGl0eUhhc2g7XHJcblx0XHR0aGlzLnByaW1hcnlJZGVudGl0eVNwYWNlID0gdGhpcy5nZW5lcmF0ZVByaW1hcnlJZGVudGl0eVNwYWNlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VGVuYW50SWQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLnRlbmFudElkO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFByaW1hcnlJZGVudGl0eUhhc2goKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLnByaW1hcnlJZGVudGl0eUhhc2g7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0UHJpbWFyeUlkZW50aXR5U3BhY2UoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLnByaW1hcnlJZGVudGl0eVNwYWNlO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBnZW5lcmF0ZVByaW1hcnlJZGVudGl0eVNwYWNlKCk6IHN0cmluZyB7XHJcblx0XHRpZiAodGhpcy5wcmltYXJ5SWRlbnRpdHlIYXNoKSB7XHJcblx0XHRcdGlmICh0aGlzLnByaW1hcnlJZGVudGl0eUhhc2guc3RhcnRzV2l0aChcImE6XCIpKSB7XHJcblx0XHRcdFx0cmV0dXJuIFwiVXNlck9iamVjdElkXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMucHJpbWFyeUlkZW50aXR5SGFzaC5zdGFydHNXaXRoKFwicDpcIikpIHtcclxuXHRcdFx0XHRyZXR1cm4gXCJNc2FQdWlkXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMucHJpbWFyeUlkZW50aXR5SGFzaC5zdGFydHNXaXRoKFwiYXA6XCIpKSB7XHJcblx0XHRcdFx0cmV0dXJuIFwiT3JnSWRQdWlkXCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Telemetry/Contracts.ts\n");

/***/ }),

/***/ "./scripts/app/Logging/Telemetry/TelemetryLoggerFactory.ts":
/*!*****************************************************************!*\
  !*** ./scripts/app/Logging/Telemetry/TelemetryLoggerFactory.ts ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _AriaTelemetryLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AriaTelemetryLogger */ \"./scripts/app/Logging/Telemetry/AriaTelemetryLogger.ts\");\n/**\r\n * Factory to return ITelemetryLogger objects\r\n */\r\n\r\nvar TelemetryLoggerFactory = /** @class */ (function () {\r\n    function TelemetryLoggerFactory() {\r\n    }\r\n    TelemetryLoggerFactory.create = function (tenantToken, namespace, app, session, host, release, browser, device, user) {\r\n        return new _AriaTelemetryLogger__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tenantToken, namespace, app, session, host, release, browser, device, user);\r\n    };\r\n    return TelemetryLoggerFactory;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (TelemetryLoggerFactory);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Mb2dnaW5nL1RlbGVtZXRyeS9UZWxlbWV0cnlMb2dnZXJGYWN0b3J5LnRzPzA4YmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztHQUVHO0FBSXFEO0FBRXhEO0lBQUE7SUFLQSxDQUFDO0lBSmMsNkJBQU0sR0FBcEIsVUFBcUIsV0FBbUIsRUFBRSxTQUFpQixFQUFFLEdBQVEsRUFBRSxPQUFnQixFQUN0RixJQUFVLEVBQUUsT0FBZ0IsRUFBRSxPQUFnQixFQUFFLE1BQWMsRUFBRSxJQUFVO1FBQ3pFLE9BQU8sSUFBSSw0REFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9Mb2dnaW5nL1RlbGVtZXRyeS9UZWxlbWV0cnlMb2dnZXJGYWN0b3J5LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEZhY3RvcnkgdG8gcmV0dXJuIElUZWxlbWV0cnlMb2dnZXIgb2JqZWN0c1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFwcCwgQnJvd3NlciwgRGV2aWNlLCBIb3N0LCBSZWxlYXNlLCBTZXNzaW9uLCBVc2VyIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XHJcbmltcG9ydCBJVGVsZW1ldHJ5TG9nZ2VyIGZyb20gXCIuL0lUZWxlbWV0cnlMb2dnZXJcIjtcclxuaW1wb3J0IEFyaWFUZWxlbWV0cnlMb2dnZXIgZnJvbSBcIi4vQXJpYVRlbGVtZXRyeUxvZ2dlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVsZW1ldHJ5TG9nZ2VyRmFjdG9yeSB7XHJcblx0cHVibGljIHN0YXRpYyBjcmVhdGUodGVuYW50VG9rZW46IHN0cmluZywgbmFtZXNwYWNlOiBzdHJpbmcsIGFwcDogQXBwLCBzZXNzaW9uOiBTZXNzaW9uLFxyXG5cdFx0aG9zdDogSG9zdCwgcmVsZWFzZTogUmVsZWFzZSwgYnJvd3NlcjogQnJvd3NlciwgZGV2aWNlOiBEZXZpY2UsIHVzZXI6IFVzZXIpOiBJVGVsZW1ldHJ5TG9nZ2VyIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBBcmlhVGVsZW1ldHJ5TG9nZ2VyKHRlbmFudFRva2VuLCBuYW1lc3BhY2UsIGFwcCwgc2Vzc2lvbiwgaG9zdCwgcmVsZWFzZSwgYnJvd3NlciwgZGV2aWNlLCB1c2VyKTtcclxuXHRcdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Logging/Telemetry/TelemetryLoggerFactory.ts\n");

/***/ }),

/***/ "./scripts/app/Personalizer/PersonalizerClient.ts":
/*!********************************************************!*\
  !*** ./scripts/app/Personalizer/PersonalizerClient.ts ***!
  \********************************************************/
/*! exports provided: PersonalizerClient, get */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PersonalizerClient\", function() { return PersonalizerClient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/Api */ \"../FloodgateCore/dist/src/Api/Api.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants */ \"./scripts/app/Constants.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _DynamicContent_DynamicContentTransport__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DynamicContent/DynamicContentTransport */ \"./scripts/app/DynamicContent/DynamicContentTransport.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/GovernedChannel */ \"../FloodgateCore/dist/src/GovernedChannel.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar govServiceIntReward = \"https://onessppe.microsoft.com/api/v1.0/Reward\";\r\nvar govServiceProdReward = \"https://oness.microsoft.com/api/v1.0/Reward\";\r\nvar PersonalizerClient = /** @class */ (function () {\r\n    function PersonalizerClient() {\r\n        // Check if personalizer is enabled, otherwise set personalizerEnabled to false and do nothing (log?)\r\n        // set enabled to false, this we will check in setup.\r\n        this.personalizerEnabled = false;\r\n        this.dynamicTransport = new _DynamicContent_DynamicContentTransport__WEBPACK_IMPORTED_MODULE_5__[\"DynamicContentTransport\"]();\r\n        this.personalizerSurveyInformationMap = {};\r\n    }\r\n    PersonalizerClient.prototype.setup = function (configuration) {\r\n        this.personalizerEnabled = configuration.getFloodgateInitOptions().governanceServiceEnabled &&\r\n            configuration.getFloodgateInitOptions().personalizerEnabled;\r\n        if (this.personalizerEnabled) {\r\n            this.isProduction = configuration.getCommonInitOptions().environment === 0 /* Production */;\r\n            this.retryLimit = configuration.getFloodgateInitOptions().governanceServiceConfig.retry;\r\n            this.timeout = configuration.getFloodgateInitOptions().governanceServiceConfig.timeout;\r\n            this.requestUrl = this.isProduction ? govServiceProdReward : govServiceIntReward;\r\n        }\r\n    };\r\n    PersonalizerClient.prototype.setEventIdAndOverrideValueForSurveyId = function (eventId, configType, configValue, surveyId, campaignId) {\r\n        if (!this.personalizerEnabled || _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(eventId) || _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(surveyId)) {\r\n            return false;\r\n        }\r\n        if (configType !== 0 /* AutoDismissTime */) {\r\n            return false;\r\n        }\r\n        var newRecommendedAutoDismissValue = this.validateAndGetAutoDismissTime(configValue);\r\n        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(newRecommendedAutoDismissValue)) {\r\n            return false;\r\n        }\r\n        this.personalizerSurveyInformationMap[surveyId] = {\r\n            eventId: eventId,\r\n            recommendedAutoDismissValue: newRecommendedAutoDismissValue,\r\n            userAction: undefined,\r\n        };\r\n        return true;\r\n    };\r\n    PersonalizerClient.prototype.getOverrideValueForSurveyId = function (configType, surveyId) {\r\n        if (!this.personalizerEnabled || _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(surveyId) ||\r\n            !this.infoExistsForSurveyId(surveyId) || configType !== 0 /* AutoDismissTime */) {\r\n            return undefined;\r\n        }\r\n        return this.personalizerSurveyInformationMap[surveyId].recommendedAutoDismissValue;\r\n    };\r\n    PersonalizerClient.prototype.logUserActionForSurveyAsync = function (userAction, surveyId, campaignId) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var responseResult, actionPayload, response, timeBefore, timeAfter, error_1;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(userAction) && this.infoExistsForSurveyId(surveyId)) {\r\n                            this.personalizerSurveyInformationMap[surveyId].userAction = userAction;\r\n                        }\r\n                        responseResult = {\r\n                            error: false,\r\n                        };\r\n                        actionPayload = this.getValidatedActionPayloadForSurveyId(surveyId);\r\n                        // validate the actionPayload. Log and early return with error if it fails.\r\n                        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(actionPayload)) {\r\n                            responseResult.error = true;\r\n                            responseResult.errorMessage = \"Action Payload validation failed.\";\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"EventIds\"].PERSONALIZER_CLIENTFAILURE, 1 /* Critical */, {\r\n                                Message: \"(PersonalizerClient.logUserActionForSurveyAsync) Error logging personalizer user action: \" + responseResult.errorMessage,\r\n                                CampaignId: campaignId,\r\n                                SurveyId: surveyId,\r\n                            });\r\n                            return [2 /*return*/, responseResult];\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        timeBefore = performance.now();\r\n                        return [4 /*yield*/, this.dynamicTransport.postRequestWithRetry(this.requestUrl, JSON.stringify(actionPayload), this.retryLimit, this.timeout)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        timeAfter = performance.now();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"EventIds\"].PERSONALIZER_SERVICEREWARDRESULT, 1 /* Critical */, {\r\n                            TimeMilliseconds: timeAfter - timeBefore,\r\n                            HttpStatusCode: response.status,\r\n                            HttpStatusText: response.statusText,\r\n                            AdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n                            CorrelationId: this.dynamicTransport.requestId,\r\n                            CampaignId: campaignId,\r\n                            PersonalizerUserAction: actionPayload.UserAction,\r\n                            PersonalizerEventId: actionPayload.EventId,\r\n                            SurveyId: surveyId,\r\n                        });\r\n                        if (!response.ok) {\r\n                            // Error on service side.\r\n                            responseResult.error = true;\r\n                            responseResult.errorMessage = \"Server Error, status: \" + response.status + \", status text: \" + response.statusText;\r\n                        }\r\n                        return [2 /*return*/, responseResult];\r\n                    case 3:\r\n                        error_1 = _a.sent();\r\n                        responseResult.error = true;\r\n                        responseResult.errorMessage = \"Error: \" + error_1.toString() + \", Error stack: \" + error_1.stack;\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_4__[\"EventIds\"].PERSONALIZER_CLIENTFAILURE, 1 /* Critical */, {\r\n                            Message: \"(PersonalizerClient.logUserActionForSurveyAsync) Error logging personalizer user action: \" + responseResult.errorMessage,\r\n                            CampaignId: campaignId,\r\n                            SurveyId: surveyId,\r\n                            PersonalizerUserAction: actionPayload.UserAction,\r\n                            PersonalizerEventId: actionPayload.EventId,\r\n                        });\r\n                        return [2 /*return*/, responseResult];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PersonalizerClient.prototype.getEventIdForSurveyId = function (surveyId) {\r\n        if (!this.infoExistsForSurveyId(surveyId)) {\r\n            return undefined;\r\n        }\r\n        return this.personalizerSurveyInformationMap[surveyId].eventId;\r\n    };\r\n    PersonalizerClient.prototype.isEnabled = function (surveyType, launcherType, governedChannelType) {\r\n        // Only enabled for:\r\n        // - FPS surveys \r\n        // - No 'customervoice' launcher type.\r\n        // - GovernedChannelType: Standard channel\r\n        if (surveyType !== _ms_ofb_officefloodgatecore_dist_src_Api_Api__WEBPACK_IMPORTED_MODULE_1__[\"ISurvey\"].Type.Fps\r\n            || launcherType === _Constants__WEBPACK_IMPORTED_MODULE_2__[\"customerVoiceLauncherType\"]\r\n            || launcherType === \"customux\"\r\n            || governedChannelType !== _ms_ofb_officefloodgatecore_dist_src_GovernedChannel__WEBPACK_IMPORTED_MODULE_6__[\"GovernedChannelType\"].Standard) {\r\n            return false;\r\n        }\r\n        return this.personalizerEnabled;\r\n    };\r\n    PersonalizerClient.prototype.getValidatedActionPayloadForSurveyId = function (surveyId) {\r\n        if (!this.infoExistsForSurveyId(surveyId)) {\r\n            return undefined;\r\n        }\r\n        var surveyPersonalizerInfo = this.personalizerSurveyInformationMap[surveyId];\r\n        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(surveyPersonalizerInfo.eventId)) {\r\n            return undefined;\r\n        }\r\n        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(surveyPersonalizerInfo.userAction)\r\n            || (surveyPersonalizerInfo.userAction !== 2 /* Accept */\r\n                && surveyPersonalizerInfo.userAction !== 0 /* Cancel */\r\n                && surveyPersonalizerInfo.userAction !== 1 /* Ignore */)) {\r\n            return undefined;\r\n        }\r\n        return {\r\n            UserAction: surveyPersonalizerInfo.userAction,\r\n            EventId: surveyPersonalizerInfo.eventId,\r\n        };\r\n    };\r\n    PersonalizerClient.prototype.validateAndGetAutoDismissTime = function (configValue) {\r\n        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(configValue) || typeof (configValue) !== \"string\") {\r\n            return undefined;\r\n        }\r\n        // value should be not null, not undefined; a string that parses to an int; \r\n        // an int that is in the AutoDismissTimes enum and can be mapped to the AutoDismissValues enum.\r\n        var parsedConfigValue = parseInt(configValue, 10);\r\n        switch (parsedConfigValue) {\r\n            case 0 /* NoAutoDismiss */:\r\n                return 0 /* NoAutoDismiss */;\r\n            case 7 /* SevenSeconds */:\r\n                return 1 /* SevenSeconds */;\r\n            case 14 /* FourteenSeconds */:\r\n                return 2 /* FourteenSeconds */;\r\n            case 21 /* TwentyOneSeconds */:\r\n                return 3 /* TwentyOneSeconds */;\r\n            case 28 /* TwentyEightSeconds */:\r\n                return 4 /* TwentyEightSeconds */;\r\n            case 60 /* SixtySeconds */:\r\n                return 5 /* SixtySeconds */;\r\n            case 90 /* NinetySeconds */:\r\n                return 6 /* NinetySeconds */;\r\n            case 120 /* OneHundredAndTwentySeconds */:\r\n                return 7 /* OneHundredAndTwentySeconds */;\r\n            case 150 /* OneHundredAndFiftySeconds */:\r\n                return 8 /* OneHundredAndFiftySeconds */;\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n    PersonalizerClient.prototype.infoExistsForSurveyId = function (surveyId) {\r\n        if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(surveyId)) {\r\n            return false;\r\n        }\r\n        return !_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].isNOU(this.personalizerSurveyInformationMap[surveyId]);\r\n    };\r\n    PersonalizerClient.prototype.buildConfigTelemetryString = function () {\r\n        var objectTelemetry = {\r\n            retry: this.retryLimit,\r\n            timeout: this.timeout,\r\n        };\r\n        return JSON.stringify(objectTelemetry);\r\n    };\r\n    return PersonalizerClient;\r\n}());\r\n\r\nvar personalizerClient = new PersonalizerClient();\r\n/**\r\n * Get the current Personalizer Client\r\n */\r\nfunction get() {\r\n    return personalizerClient;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Personalizer/PersonalizerClient.ts\n");

/***/ }),

/***/ "./scripts/app/Polyfills/Fetch.ts":
/*!****************************************!*\
  !*** ./scripts/app/Polyfills/Fetch.ts ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Qb2x5ZmlsbHMvRmV0Y2gudHM/Y2M3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQXNCIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvUG9seWZpbGxzL0ZldGNoLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwid2hhdHdnLWZldGNoXCI7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./scripts/app/Polyfills/Fetch.ts\n");

/***/ }),

/***/ "./scripts/app/Polyfills/Promise.ts":
/*!******************************************!*\
  !*** ./scripts/app/Polyfills/Promise.ts ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var es6_promise_auto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! es6-promise/auto */ \"./node_modules/es6-promise/auto.js\");\n/* harmony import */ var es6_promise_auto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(es6_promise_auto__WEBPACK_IMPORTED_MODULE_0__);\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9Qb2x5ZmlsbHMvUHJvbWlzZS50cz85Zjg4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUEwQiIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL1BvbHlmaWxscy9Qcm9taXNlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiZXM2LXByb21pc2UvYXV0b1wiO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Polyfills/Promise.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/AssetsProvider.ts":
/*!*********************************************************!*\
  !*** ./scripts/app/TargetedMessaging/AssetsProvider.ts ***!
  \*********************************************************/
/*! exports provided: AssetsProvider, get */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AssetsProvider\", function() { return AssetsProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/* harmony import */ var _TargetedMessagingClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TargetedMessagingClient */ \"./scripts/app/TargetedMessaging/TargetedMessagingClient.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/**\r\n * Module that provides campaign definitions,\r\n * governance rules & message metadata from\r\n * targeted messaging service.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nvar AssetsProvider = /** @class */ (function () {\r\n    function AssetsProvider() {\r\n        var _a, _b;\r\n        this.configuration = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]();\r\n        // Enable TargetedMessaging client only if authCallback is provided\r\n        // This is for cases where existing Floodgate hosts are not yet on-boarded into web surfaces flow\r\n        var floodgateInitOptions = this.configuration && this.configuration.getFloodgateInitOptions();\r\n        var commonInitOptions = this.configuration && this.configuration.getCommonInitOptions();\r\n        var authTokenCallback = floodgateInitOptions && floodgateInitOptions.authTokenCallback;\r\n        if ((authTokenCallback && (authTokenCallback.getAuthToken || authTokenCallback.getUserPuid)) ||\r\n            this.isAugLoopEnabled()) {\r\n            var initOptions = this.configuration.getCommonInitOptions();\r\n            this.tmsgClient = new _TargetedMessagingClient__WEBPACK_IMPORTED_MODULE_3__[\"TargetedMessagingClient\"](initOptions.appId.toString(), \"Web\" /*platform*/, initOptions.build, initOptions.originalLocale, this.extractCountryFromLocale(initOptions.originalLocale), this.configuration.getSdkSessionId(), floodgateInitOptions.authTokenCallback, floodgateInitOptions.augLoopCallback, floodgateInitOptions.campaignFlights, floodgateInitOptions.campaignQueryParameters, commonInitOptions.ageGroup, commonInitOptions.authenticationType, ((_a = commonInitOptions.telemetryGroup) === null || _a === void 0 ? void 0 : _a.audienceGroup) || ((_b = commonInitOptions.telemetryGroup) === null || _b === void 0 ? void 0 : _b.audience), floodgateInitOptions.messagingServiceSettings);\r\n        }\r\n    }\r\n    /**\r\n     * Get campaign definitions from TMS\r\n     */\r\n    AssetsProvider.prototype.getCampaignDefinitions = function () {\r\n        var debugResponse = Object(_TargetedMessagingClient__WEBPACK_IMPORTED_MODULE_3__[\"getDebugCampaignDefinitions\"])();\r\n        if (debugResponse && debugResponse.content) {\r\n            return Promise.resolve(debugResponse.content);\r\n        }\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tmsgClient.getContent(\"CampaignContent\" /* campaignContent */)\r\n            .then(function (_a) {\r\n            var content = _a.content;\r\n            return content;\r\n        });\r\n    };\r\n    AssetsProvider.prototype.getCachedCampaignDefinitions = function () {\r\n        var _a;\r\n        return (_a = this.tmsgClient) === null || _a === void 0 ? void 0 : _a.getCachedContent(\"CampaignContent\" /* campaignContent */);\r\n    };\r\n    AssetsProvider.prototype.getUserGovernanceRules = function () {\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tmsgClient.getContent(\"UserGovernance\" /* userGovernanceRules */)\r\n            .then(function (_a) {\r\n            var content = _a.content;\r\n            return content;\r\n        });\r\n    };\r\n    AssetsProvider.prototype.getMessageMetadata = function () {\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tmsgClient.getContent(\"MessageMetadata\" /* messageMetadata */)\r\n            .then(function (_a) {\r\n            var content = _a.content;\r\n            return content;\r\n        });\r\n    };\r\n    /**\r\n     * Get TULIPS user facts from AugLoop or GWS endpoint\r\n     */\r\n    AssetsProvider.prototype.getUserFacts = function () {\r\n        var _this = this;\r\n        var debugResponse = Object(_TargetedMessagingClient__WEBPACK_IMPORTED_MODULE_3__[\"getDebugUserFacts\"])();\r\n        if (debugResponse && debugResponse.content) {\r\n            return Promise.resolve(debugResponse.content);\r\n        }\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        // Try to get facts from AL first\r\n        if (this.isAugLoopEnabled()) {\r\n            var timeoutMilliseconds = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_1__[\"getDynamicSetting\"])(\"TulipsLoadTimeout\" /* tulipsLoadTimeout */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__[\"TULIPS_LOAD_TIMEOUT\"]);\r\n            var timeoutPromise = Object(_Utils__WEBPACK_IMPORTED_MODULE_4__[\"createTimeoutPromise\"])(timeoutMilliseconds, this.getAugLoopUserFacts());\r\n            return timeoutPromise\r\n                .then(function (userFacts) { return userFacts; })\r\n                .catch(function () { return _this.getSubstrateUserFacts(); });\r\n        }\r\n        return this.getSubstrateUserFacts();\r\n    };\r\n    AssetsProvider.prototype.getCachedUserFacts = function () {\r\n        var _a;\r\n        return (_a = this.tmsgClient) === null || _a === void 0 ? void 0 : _a.getCachedContent(\"UserFacts\" /* userFacts */);\r\n    };\r\n    AssetsProvider.prototype.setCampaignAction = function (beaconParameters) {\r\n        if (!this.tmsgClient) {\r\n            return;\r\n        }\r\n        var initOptions = this.configuration.getCommonInitOptions();\r\n        var floodgateInitOptions = this.configuration.getFloodgateInitOptions();\r\n        return this.tmsgClient.sendBeaconRequestToService(initOptions.appId.toString(), beaconParameters, \"Web\" /*platform*/, initOptions.build, initOptions.originalLocale, this.extractCountryFromLocale(initOptions.originalLocale), this.configuration.getSdkSessionId(), floodgateInitOptions.authTokenCallback);\r\n    };\r\n    // Floodgate doesn't have country, so we have to use locale as a proxy and extract the country code\r\n    AssetsProvider.prototype.extractCountryFromLocale = function (locale) {\r\n        if (!locale) {\r\n            return undefined;\r\n        }\r\n        var splitLocale = locale.split(\"-\");\r\n        if (splitLocale.length === 2) {\r\n            return splitLocale[1];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    AssetsProvider.prototype.getSubstrateUserFacts = function () {\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tmsgClient.getUserFactsContent(\"UserFacts\" /* userFacts */)\r\n            .then(function (_a) {\r\n            var content = _a.content;\r\n            return content;\r\n        });\r\n    };\r\n    AssetsProvider.prototype.getAugLoopUserFacts = function () {\r\n        if (!this.tmsgClient) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tmsgClient.getAugLoopUserFactsContent(\"UserFacts\" /* userFacts */)\r\n            .then(function (_a) {\r\n            var content = _a.content;\r\n            return content;\r\n        });\r\n    };\r\n    AssetsProvider.prototype.isAugLoopEnabled = function () {\r\n        var _a, _b, _c;\r\n        return (_c = (_b = (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.getFloodgateInitOptions()) === null || _b === void 0 ? void 0 : _b.augLoopCallback) === null || _c === void 0 ? void 0 : _c.isEnabled;\r\n    };\r\n    return AssetsProvider;\r\n}());\r\n\r\nvar assetsProvider;\r\nfunction get() {\r\n    if (!assetsProvider) {\r\n        assetsProvider = new AssetsProvider();\r\n    }\r\n    return assetsProvider;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9Bc3NldHNQcm92aWRlci50cz83MTY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztHQUlHO0FBTzZEO0FBQ3NCO0FBQ25CO0FBRWtFO0FBRXJGO0FBR2hEO0lBSUM7O1FBQ0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxnRUFBaUIsRUFBRSxDQUFDO1FBRXpDLG1FQUFtRTtRQUNuRSxpR0FBaUc7UUFDakcsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNoRyxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzFGLElBQU0saUJBQWlCLEdBQUcsb0JBQW9CLElBQUksb0JBQW9CLENBQUMsaUJBQWlCLENBQUM7UUFDekYsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxJQUFJLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3pCLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZ0ZBQXVCLENBQzVDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQzVCLEtBQUssQ0FBQyxZQUFZLEVBQ2xCLFdBQVcsQ0FBQyxLQUFLLEVBQ2pCLFdBQVcsQ0FBQyxjQUFjLEVBQzFCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEVBQ3pELElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLEVBQ3BDLG9CQUFvQixDQUFDLGlCQUFpQixFQUN0QyxvQkFBb0IsQ0FBQyxlQUFlLEVBQ3BDLG9CQUFvQixDQUFDLGVBQWUsRUFDcEMsb0JBQW9CLENBQUMsdUJBQXVCLEVBQzVDLGlCQUFpQixDQUFDLFFBQVEsRUFDMUIsaUJBQWlCLENBQUMsa0JBQWtCLEVBQ3BDLHdCQUFpQixDQUFDLGNBQWMsMENBQUUsYUFBYSxZQUFJLGlCQUFpQixDQUFDLGNBQWMsMENBQUUsUUFBUSxHQUM3RixvQkFBb0IsQ0FBQyx3QkFBd0IsQ0FDN0MsQ0FBQztTQUNGO0lBQ0YsQ0FBQztJQUVEOztPQUVHO0lBQ0ksK0NBQXNCLEdBQTdCO1FBQ0MsSUFBTSxhQUFhLEdBQUcsNEZBQTJCLEVBQUUsQ0FBQztRQUNwRCxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFO1lBQzNDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSx5Q0FBNkI7YUFDNUQsSUFBSSxDQUFDLFVBQUMsRUFBNEI7Z0JBQTFCLE9BQU87WUFBd0IsY0FBTztRQUFQLENBQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxxREFBNEIsR0FBbkM7O1FBQ0MsYUFBTyxJQUFJLENBQUMsVUFBVSwwQ0FBRSxnQkFBZ0IsMENBQThCO0lBQ3ZFLENBQUM7SUFFTSwrQ0FBc0IsR0FBN0I7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSw0Q0FBaUM7YUFDaEUsSUFBSSxDQUFDLFVBQUMsRUFBNEI7Z0JBQTFCLE9BQU87WUFBd0IsY0FBTztRQUFQLENBQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSwyQ0FBa0IsR0FBekI7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSx5Q0FBNkI7YUFDNUQsSUFBSSxDQUFDLFVBQUMsRUFBNEI7Z0JBQTFCLE9BQU87WUFBd0IsY0FBTztRQUFQLENBQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNJLHFDQUFZLEdBQW5CO1FBQUEsaUJBb0JDO1FBbkJBLElBQU0sYUFBYSxHQUFHLGtGQUFpQixFQUFFLENBQUM7UUFDMUMsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE9BQU8sRUFBRTtZQUMzQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO1FBRUQsaUNBQWlDO1FBQ2pDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDNUIsSUFBTSxtQkFBbUIsR0FBRyw2RkFBaUIsOENBQStCLCtFQUFtQixDQUFDLENBQUM7WUFDakcsSUFBTSxjQUFjLEdBQUcsbUVBQW9CLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztZQUM3RixPQUFPLGNBQWM7aUJBQ25CLElBQUksQ0FBQyxtQkFBUyxJQUFJLGdCQUFTLEVBQVQsQ0FBUyxDQUFDO2lCQUM1QixLQUFLLENBQUMsY0FBTSxZQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsT0FBTyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU0sMkNBQWtCLEdBQXpCOztRQUNDLGFBQU8sSUFBSSxDQUFDLFVBQVUsMENBQUUsZ0JBQWdCLDhCQUF3QjtJQUNqRSxDQUFDO0lBRU0sMENBQWlCLEdBQXhCLFVBQXlCLGdCQUFtQztRQUMzRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixPQUFPO1NBQ1A7UUFFRCxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDOUQsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDMUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUNoRCxXQUFXLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUM1QixnQkFBZ0IsRUFDaEIsS0FBSyxDQUFDLFlBQVksRUFDbEIsV0FBVyxDQUFDLEtBQUssRUFDakIsV0FBVyxDQUFDLGNBQWMsRUFDMUIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsRUFDekQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsRUFDcEMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsbUdBQW1HO0lBQzNGLGlEQUF3QixHQUFoQyxVQUFpQyxNQUFlO1FBQy9DLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUVELElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjthQUFNO1lBQ04sT0FBTyxTQUFTLENBQUM7U0FDakI7SUFDRixDQUFDO0lBRU8sOENBQXFCLEdBQTdCO1FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQiw2QkFBdUI7YUFDL0QsSUFBSSxDQUFDLFVBQUMsRUFBNEI7Z0JBQTFCLE9BQU87WUFBd0IsY0FBTztRQUFQLENBQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyw0Q0FBbUIsR0FBM0I7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsMEJBQTBCLDZCQUF1QjthQUN0RSxJQUFJLENBQUMsVUFBQyxFQUE0QjtnQkFBMUIsT0FBTztZQUF3QixjQUFPO1FBQVAsQ0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLHlDQUFnQixHQUF4Qjs7UUFDQyx5QkFBTyxJQUFJLENBQUMsYUFBYSwwQ0FBRSx1QkFBdUIsNENBQUksZUFBZSwwQ0FBRSxTQUFTLENBQUM7SUFDbEYsQ0FBQztJQUNGLHFCQUFDO0FBQUQsQ0FBQzs7QUFFRCxJQUFJLGNBQThCLENBQUM7QUFFNUIsU0FBUyxHQUFHO0lBQ2xCLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDcEIsY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7S0FDdEM7SUFFRCxPQUFPLGNBQWMsQ0FBQztBQUN2QixDQUFDIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvVGFyZ2V0ZWRNZXNzYWdpbmcvQXNzZXRzUHJvdmlkZXIudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTW9kdWxlIHRoYXQgcHJvdmlkZXMgY2FtcGFpZ24gZGVmaW5pdGlvbnMsXHJcbiAqIGdvdmVybmFuY2UgcnVsZXMgJiBtZXNzYWdlIG1ldGFkYXRhIGZyb21cclxuICogdGFyZ2V0ZWQgbWVzc2FnaW5nIHNlcnZpY2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXBpIH0gZnJvbSBcIkBtcy1vZmIvb2ZmaWNlZmxvb2RnYXRlY29yZVwiO1xyXG5pbXBvcnQgeyBDYW1wYWlnbkRlZmluaXRpb25zIH0gZnJvbSBcIkBtcy1vZmIvb2ZmaWNlZmxvb2RnYXRlY29yZS9kaXN0L3NyYy9Hb3Zlcm5hbmNlL0NhbXBhaWduRGVmaW5pdGlvbnNcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVNwZWMgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlL2Rpc3Qvc3JjL0dvdmVybmFuY2UvTWVzc2FnZU1ldGFkYXRhXCI7XHJcbmltcG9ydCB7IFVzZXJHb3Zlcm5hbmNlUnVsZXMgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlL2Rpc3Qvc3JjL0dvdmVybmFuY2UvVXNlckdvdmVybmFuY2VSdWxlc1wiO1xyXG5cclxuaW1wb3J0ICogYXMgQ29uZmlndXJhdGlvbiBmcm9tIFwiLi4vQ29uZmlndXJhdGlvbi9Db25maWd1cmF0aW9uXCI7XHJcbmltcG9ydCB7IGdldER5bmFtaWNTZXR0aW5nLCBTZXR0aW5nS2V5IH0gZnJvbSBcIi4uL0NvbmZpZ3VyYXRpb24vRHluYW1pY0NvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgVFVMSVBTX0xPQURfVElNRU9VVCB9IGZyb20gXCIuL1RhcmdldGVkTWVzc2FnaW5nQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IENvbnRlbnRUeXBlIH0gZnJvbSBcIi4vVGFyZ2V0ZWRNZXNzYWdpbmdDb250ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBUYXJnZXRlZE1lc3NhZ2luZ0NsaWVudCwgQ29udGVudFJlc3BvbnNlLCBnZXREZWJ1Z0NhbXBhaWduRGVmaW5pdGlvbnMsIGdldERlYnVnVXNlckZhY3RzIH0gZnJvbSBcIi4vVGFyZ2V0ZWRNZXNzYWdpbmdDbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IGNyZWF0ZVRpbWVvdXRQcm9taXNlIH0gZnJvbSBcIi4uL1V0aWxzXCI7XHJcbmltcG9ydCB7IElCZWFjb25QYXJhbWV0ZXJzIH0gZnJvbSBcIi4uL0Zsb29kZ2F0ZUNvcmUvQ29hY2hpbmdVWExhdW5jaGVyRmFjdG9yeVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFzc2V0c1Byb3ZpZGVyIGltcGxlbWVudHMgQXBpLklBc3NldHNQcm92aWRlciB7XHJcblx0cHJpdmF0ZSBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uLkNvbmZpZ3VyYXRpb247XHJcblx0cHJpdmF0ZSB0bXNnQ2xpZW50OiBUYXJnZXRlZE1lc3NhZ2luZ0NsaWVudDtcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5jb25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbi5nZXQoKTtcclxuXHJcblx0XHQvLyBFbmFibGUgVGFyZ2V0ZWRNZXNzYWdpbmcgY2xpZW50IG9ubHkgaWYgYXV0aENhbGxiYWNrIGlzIHByb3ZpZGVkXHJcblx0XHQvLyBUaGlzIGlzIGZvciBjYXNlcyB3aGVyZSBleGlzdGluZyBGbG9vZGdhdGUgaG9zdHMgYXJlIG5vdCB5ZXQgb24tYm9hcmRlZCBpbnRvIHdlYiBzdXJmYWNlcyBmbG93XHJcblx0XHRjb25zdCBmbG9vZGdhdGVJbml0T3B0aW9ucyA9IHRoaXMuY29uZmlndXJhdGlvbiAmJiB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0Rmxvb2RnYXRlSW5pdE9wdGlvbnMoKTtcclxuXHRcdGNvbnN0IGNvbW1vbkluaXRPcHRpb25zID0gdGhpcy5jb25maWd1cmF0aW9uICYmIHRoaXMuY29uZmlndXJhdGlvbi5nZXRDb21tb25Jbml0T3B0aW9ucygpO1xyXG5cdFx0Y29uc3QgYXV0aFRva2VuQ2FsbGJhY2sgPSBmbG9vZGdhdGVJbml0T3B0aW9ucyAmJiBmbG9vZGdhdGVJbml0T3B0aW9ucy5hdXRoVG9rZW5DYWxsYmFjaztcclxuXHRcdGlmICgoYXV0aFRva2VuQ2FsbGJhY2sgJiYgKGF1dGhUb2tlbkNhbGxiYWNrLmdldEF1dGhUb2tlbiB8fCBhdXRoVG9rZW5DYWxsYmFjay5nZXRVc2VyUHVpZCkpIHx8XHJcblx0XHRcdHRoaXMuaXNBdWdMb29wRW5hYmxlZCgpKSB7XHJcblx0XHRcdGNvbnN0IGluaXRPcHRpb25zID0gdGhpcy5jb25maWd1cmF0aW9uLmdldENvbW1vbkluaXRPcHRpb25zKCk7XHJcblx0XHRcdHRoaXMudG1zZ0NsaWVudCA9IG5ldyBUYXJnZXRlZE1lc3NhZ2luZ0NsaWVudChcclxuXHRcdFx0XHRpbml0T3B0aW9ucy5hcHBJZC50b1N0cmluZygpLFxyXG5cdFx0XHRcdFwiV2ViXCIgLypwbGF0Zm9ybSovLFxyXG5cdFx0XHRcdGluaXRPcHRpb25zLmJ1aWxkLFxyXG5cdFx0XHRcdGluaXRPcHRpb25zLm9yaWdpbmFsTG9jYWxlLFxyXG5cdFx0XHRcdHRoaXMuZXh0cmFjdENvdW50cnlGcm9tTG9jYWxlKGluaXRPcHRpb25zLm9yaWdpbmFsTG9jYWxlKSxcclxuXHRcdFx0XHR0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0U2RrU2Vzc2lvbklkKCksXHJcblx0XHRcdFx0Zmxvb2RnYXRlSW5pdE9wdGlvbnMuYXV0aFRva2VuQ2FsbGJhY2ssXHJcblx0XHRcdFx0Zmxvb2RnYXRlSW5pdE9wdGlvbnMuYXVnTG9vcENhbGxiYWNrLFxyXG5cdFx0XHRcdGZsb29kZ2F0ZUluaXRPcHRpb25zLmNhbXBhaWduRmxpZ2h0cyxcclxuXHRcdFx0XHRmbG9vZGdhdGVJbml0T3B0aW9ucy5jYW1wYWlnblF1ZXJ5UGFyYW1ldGVycyxcclxuXHRcdFx0XHRjb21tb25Jbml0T3B0aW9ucy5hZ2VHcm91cCxcclxuXHRcdFx0XHRjb21tb25Jbml0T3B0aW9ucy5hdXRoZW50aWNhdGlvblR5cGUsXHJcblx0XHRcdFx0Y29tbW9uSW5pdE9wdGlvbnMudGVsZW1ldHJ5R3JvdXA/LmF1ZGllbmNlR3JvdXAgfHwgY29tbW9uSW5pdE9wdGlvbnMudGVsZW1ldHJ5R3JvdXA/LmF1ZGllbmNlLFxyXG5cdFx0XHRcdGZsb29kZ2F0ZUluaXRPcHRpb25zLm1lc3NhZ2luZ1NlcnZpY2VTZXR0aW5nc1xyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGNhbXBhaWduIGRlZmluaXRpb25zIGZyb20gVE1TXHJcblx0ICovXHJcblx0cHVibGljIGdldENhbXBhaWduRGVmaW5pdGlvbnMoKTogUHJvbWlzZTxDYW1wYWlnbkRlZmluaXRpb25zPiB7XHJcblx0XHRjb25zdCBkZWJ1Z1Jlc3BvbnNlID0gZ2V0RGVidWdDYW1wYWlnbkRlZmluaXRpb25zKCk7XHJcblx0XHRpZiAoZGVidWdSZXNwb25zZSAmJiBkZWJ1Z1Jlc3BvbnNlLmNvbnRlbnQpIHtcclxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShkZWJ1Z1Jlc3BvbnNlLmNvbnRlbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdGhpcy50bXNnQ2xpZW50KSB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudG1zZ0NsaWVudC5nZXRDb250ZW50KENvbnRlbnRUeXBlLmNhbXBhaWduQ29udGVudClcclxuXHRcdFx0LnRoZW4oKHsgY29udGVudCB9OiBDb250ZW50UmVzcG9uc2UpID0+IGNvbnRlbnQpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENhY2hlZENhbXBhaWduRGVmaW5pdGlvbnMoKTogQ2FtcGFpZ25EZWZpbml0aW9ucyB7XHJcblx0XHRyZXR1cm4gdGhpcy50bXNnQ2xpZW50Py5nZXRDYWNoZWRDb250ZW50KENvbnRlbnRUeXBlLmNhbXBhaWduQ29udGVudCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VXNlckdvdmVybmFuY2VSdWxlcygpOiBQcm9taXNlPFVzZXJHb3Zlcm5hbmNlUnVsZXM+IHtcclxuXHRcdGlmICghdGhpcy50bXNnQ2xpZW50KSB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudG1zZ0NsaWVudC5nZXRDb250ZW50KENvbnRlbnRUeXBlLnVzZXJHb3Zlcm5hbmNlUnVsZXMpXHJcblx0XHRcdC50aGVuKCh7IGNvbnRlbnQgfTogQ29udGVudFJlc3BvbnNlKSA9PiBjb250ZW50KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRNZXNzYWdlTWV0YWRhdGEoKTogUHJvbWlzZTxNZXNzYWdlU3BlYz4ge1xyXG5cdFx0aWYgKCF0aGlzLnRtc2dDbGllbnQpIHtcclxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy50bXNnQ2xpZW50LmdldENvbnRlbnQoQ29udGVudFR5cGUubWVzc2FnZU1ldGFkYXRhKVxyXG5cdFx0XHQudGhlbigoeyBjb250ZW50IH06IENvbnRlbnRSZXNwb25zZSkgPT4gY29udGVudCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgVFVMSVBTIHVzZXIgZmFjdHMgZnJvbSBBdWdMb29wIG9yIEdXUyBlbmRwb2ludFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXRVc2VyRmFjdHMoKTogUHJvbWlzZTxBcGkuSVVzZXJGYWN0W10+IHtcclxuXHRcdGNvbnN0IGRlYnVnUmVzcG9uc2UgPSBnZXREZWJ1Z1VzZXJGYWN0cygpO1xyXG5cdFx0aWYgKGRlYnVnUmVzcG9uc2UgJiYgZGVidWdSZXNwb25zZS5jb250ZW50KSB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVidWdSZXNwb25zZS5jb250ZW50KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMudG1zZ0NsaWVudCkge1xyXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRyeSB0byBnZXQgZmFjdHMgZnJvbSBBTCBmaXJzdFxyXG5cdFx0aWYgKHRoaXMuaXNBdWdMb29wRW5hYmxlZCgpKSB7XHJcblx0XHRcdGNvbnN0IHRpbWVvdXRNaWxsaXNlY29uZHMgPSBnZXREeW5hbWljU2V0dGluZyhTZXR0aW5nS2V5LnR1bGlwc0xvYWRUaW1lb3V0LCBUVUxJUFNfTE9BRF9USU1FT1VUKTtcclxuXHRcdFx0Y29uc3QgdGltZW91dFByb21pc2UgPSBjcmVhdGVUaW1lb3V0UHJvbWlzZSh0aW1lb3V0TWlsbGlzZWNvbmRzLCB0aGlzLmdldEF1Z0xvb3BVc2VyRmFjdHMoKSk7XHJcblx0XHRcdHJldHVybiB0aW1lb3V0UHJvbWlzZVxyXG5cdFx0XHRcdC50aGVuKHVzZXJGYWN0cyA9PiB1c2VyRmFjdHMpXHJcblx0XHRcdFx0LmNhdGNoKCgpID0+IHRoaXMuZ2V0U3Vic3RyYXRlVXNlckZhY3RzKCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldFN1YnN0cmF0ZVVzZXJGYWN0cygpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENhY2hlZFVzZXJGYWN0cygpOiBBcGkuSVVzZXJGYWN0W10ge1xyXG5cdFx0cmV0dXJuIHRoaXMudG1zZ0NsaWVudD8uZ2V0Q2FjaGVkQ29udGVudChDb250ZW50VHlwZS51c2VyRmFjdHMpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldENhbXBhaWduQWN0aW9uKGJlYWNvblBhcmFtZXRlcnM6IElCZWFjb25QYXJhbWV0ZXJzKTogUHJvbWlzZTxib29sZWFuPiB7XHJcblx0XHRpZiAoIXRoaXMudG1zZ0NsaWVudCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgaW5pdE9wdGlvbnMgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0Q29tbW9uSW5pdE9wdGlvbnMoKTtcclxuXHRcdGNvbnN0IGZsb29kZ2F0ZUluaXRPcHRpb25zID0gdGhpcy5jb25maWd1cmF0aW9uLmdldEZsb29kZ2F0ZUluaXRPcHRpb25zKCk7XHJcblx0XHRyZXR1cm4gdGhpcy50bXNnQ2xpZW50LnNlbmRCZWFjb25SZXF1ZXN0VG9TZXJ2aWNlKFxyXG5cdFx0XHRpbml0T3B0aW9ucy5hcHBJZC50b1N0cmluZygpLFxyXG5cdFx0XHRiZWFjb25QYXJhbWV0ZXJzLFxyXG5cdFx0XHRcIldlYlwiIC8qcGxhdGZvcm0qLyxcclxuXHRcdFx0aW5pdE9wdGlvbnMuYnVpbGQsXHJcblx0XHRcdGluaXRPcHRpb25zLm9yaWdpbmFsTG9jYWxlLFxyXG5cdFx0XHR0aGlzLmV4dHJhY3RDb3VudHJ5RnJvbUxvY2FsZShpbml0T3B0aW9ucy5vcmlnaW5hbExvY2FsZSksXHJcblx0XHRcdHRoaXMuY29uZmlndXJhdGlvbi5nZXRTZGtTZXNzaW9uSWQoKSxcclxuXHRcdFx0Zmxvb2RnYXRlSW5pdE9wdGlvbnMuYXV0aFRva2VuQ2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblx0Ly8gRmxvb2RnYXRlIGRvZXNuJ3QgaGF2ZSBjb3VudHJ5LCBzbyB3ZSBoYXZlIHRvIHVzZSBsb2NhbGUgYXMgYSBwcm94eSBhbmQgZXh0cmFjdCB0aGUgY291bnRyeSBjb2RlXHJcblx0cHJpdmF0ZSBleHRyYWN0Q291bnRyeUZyb21Mb2NhbGUobG9jYWxlPzogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRcdGlmICghbG9jYWxlKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc3BsaXRMb2NhbGUgPSBsb2NhbGUuc3BsaXQoXCItXCIpO1xyXG5cdFx0aWYgKHNwbGl0TG9jYWxlLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHRyZXR1cm4gc3BsaXRMb2NhbGVbMV07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBnZXRTdWJzdHJhdGVVc2VyRmFjdHMoKTogUHJvbWlzZTxBcGkuSVVzZXJGYWN0W10+IHtcclxuXHRcdGlmICghdGhpcy50bXNnQ2xpZW50KSB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudG1zZ0NsaWVudC5nZXRVc2VyRmFjdHNDb250ZW50KENvbnRlbnRUeXBlLnVzZXJGYWN0cylcclxuXHRcdFx0LnRoZW4oKHsgY29udGVudCB9OiBDb250ZW50UmVzcG9uc2UpID0+IGNvbnRlbnQpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBnZXRBdWdMb29wVXNlckZhY3RzKCk6IFByb21pc2U8QXBpLklVc2VyRmFjdFtdPiB7XHJcblx0XHRpZiAoIXRoaXMudG1zZ0NsaWVudCkge1xyXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnRtc2dDbGllbnQuZ2V0QXVnTG9vcFVzZXJGYWN0c0NvbnRlbnQoQ29udGVudFR5cGUudXNlckZhY3RzKVxyXG5cdFx0XHQudGhlbigoeyBjb250ZW50IH06IENvbnRlbnRSZXNwb25zZSkgPT4gY29udGVudCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGlzQXVnTG9vcEVuYWJsZWQoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uPy5nZXRGbG9vZGdhdGVJbml0T3B0aW9ucygpPy5hdWdMb29wQ2FsbGJhY2s/LmlzRW5hYmxlZDtcclxuXHR9XHJcbn1cclxuXHJcbmxldCBhc3NldHNQcm92aWRlcjogQXNzZXRzUHJvdmlkZXI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0KCkge1xyXG5cdGlmICghYXNzZXRzUHJvdmlkZXIpIHtcclxuXHRcdGFzc2V0c1Byb3ZpZGVyID0gbmV3IEFzc2V0c1Byb3ZpZGVyKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYXNzZXRzUHJvdmlkZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/AssetsProvider.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/AugLoopHelper.ts":
/*!********************************************************!*\
  !*** ./scripts/app/TargetedMessaging/AugLoopHelper.ts ***!
  \********************************************************/
/*! exports provided: getAugLoopAnnotationData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAugLoopAnnotationData\", function() { return getAugLoopAnnotationData; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _augloop_types_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @augloop/types-core */ \"./node_modules/@augloop/types-core/dist/src/index.js\");\n/* harmony import */ var _augloop_types_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_augloop_types_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/*\r\n * AugLoopHelper.ts\r\n */\r\n\r\n\r\n\r\n\r\nfunction sleep(milliseconds) {\r\n    return new Promise(function (resolve) {\r\n        setTimeout(resolve, milliseconds);\r\n    });\r\n}\r\nfunction getObjectProperty(targetObject, propertyName) {\r\n    var propertyValue = targetObject && targetObject[propertyName];\r\n    return (propertyValue || Object.getOwnPropertyDescriptor(targetObject, propertyName)) ? propertyValue : undefined;\r\n}\r\n// listen to property change on targetObject and return the value when it is set\r\nfunction getDelayDefinedObjectValue(targetObject, propertyName) {\r\n    if (!targetObject) {\r\n        return Promise.resolve(null);\r\n    }\r\n    var currentPropertyValue = getObjectProperty(targetObject, propertyName);\r\n    if (currentPropertyValue) {\r\n        return Promise.resolve(currentPropertyValue);\r\n    }\r\n    return new Promise(function (resolve, reject) {\r\n        var propertyValue;\r\n        Object.defineProperty(targetObject, propertyName, {\r\n            configurable: true,\r\n            enumerable: true,\r\n            get: function () { return propertyValue; },\r\n            set: function (newValue) {\r\n                propertyValue = newValue;\r\n                resolve(propertyValue);\r\n            },\r\n        });\r\n    });\r\n}\r\nfunction getDelayDefinedValueWithWait(targetObject, propertyName, retryTimes, delay) {\r\n    if (delay === void 0) { delay = 100; }\r\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n        var definedProperty;\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    definedProperty = getObjectProperty(targetObject, propertyName);\r\n                    if (definedProperty || retryTimes === 0) {\r\n                        return [2 /*return*/, definedProperty];\r\n                    }\r\n                    return [4 /*yield*/, sleep(delay)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/, getDelayDefinedValueWithWait(targetObject, propertyName, retryTimes - 1, delay)];\r\n            }\r\n        });\r\n    });\r\n}\r\n// Invoke AL calls and get the data\r\nfunction getAnnotationData(augLoopSession, annotationName) {\r\n    return new Promise(function (resolve, reject) {\r\n        augLoopSession.activateAnnotation(annotationName, {\r\n            callback: function (operation) {\r\n                try {\r\n                    var operationItems = operation && operation.items ? operation.items : [];\r\n                    var schemaObjects = operationItems.filter(function (item) { return annotationName === _augloop_types_core__WEBPACK_IMPORTED_MODULE_1__[\"SchemaObject\"].getTypeNameFor(item.body); });\r\n                    resolve(schemaObjects && schemaObjects[0] && schemaObjects[0].body);\r\n                }\r\n                catch (error) {\r\n                    resolve({ error: error });\r\n                }\r\n            },\r\n        });\r\n    });\r\n}\r\n// Get the Augloop global object - window.augLoop\r\nfunction getGlobalAugLoopRuntime(loadDelay) {\r\n    if (loadDelay === void 0) { loadDelay = 100; }\r\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n        var augLoopRuntime, delayLoadTime, retryTimes;\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    augLoopRuntime = getObjectProperty(window, \"augLoop\");\r\n                    if (!!augLoopRuntime) return [3 /*break*/, 7];\r\n                    delayLoadTime = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_2__[\"getDynamicSetting\"])(\"TulipsAugLoopPackageDelayLoad\" /* tulipsAugLoopPackageDelayLoad */, -1);\r\n                    if (!(delayLoadTime > 0)) return [3 /*break*/, 2];\r\n                    // wait for augloop to load after sometime\r\n                    return [4 /*yield*/, sleep(delayLoadTime)];\r\n                case 1:\r\n                    // wait for augloop to load after sometime\r\n                    _a.sent();\r\n                    augLoopRuntime = getObjectProperty(window, \"augLoop\");\r\n                    return [3 /*break*/, 7];\r\n                case 2:\r\n                    retryTimes = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_2__[\"getDynamicSetting\"])(\"TulipsAugLoopLoadRetryTimes\" /* tulipsAugLoopLoadRetryTimes */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_3__[\"AUGLOOP_INIT_CHECK_RETRY_TIMES\"]);\r\n                    return [4 /*yield*/, getDelayDefinedValueWithWait(window, \"augLoop\", retryTimes, loadDelay)];\r\n                case 3:\r\n                    augLoopRuntime = _a.sent();\r\n                    if (!!augLoopRuntime) return [3 /*break*/, 5];\r\n                    return [4 /*yield*/, getDelayDefinedObjectValue(window, \"augLoop\")];\r\n                case 4:\r\n                    // Wait for augloop to mount on window\r\n                    augLoopRuntime = _a.sent();\r\n                    _a.label = 5;\r\n                case 5:\r\n                    if (!(loadDelay > 0)) return [3 /*break*/, 7];\r\n                    return [4 /*yield*/, sleep(loadDelay)];\r\n                case 6:\r\n                    _a.sent();\r\n                    _a.label = 7;\r\n                case 7: return [2 /*return*/, augLoopRuntime];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getAugLoopAnnotationData(annotationName, getRuntimeSession, loadDelay) {\r\n    if (loadDelay === void 0) { loadDelay = 100; }\r\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n        var augLoopSession, _a, augLoopRuntime, augLoopSessionPromise;\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    _a = getRuntimeSession;\r\n                    if (!_a) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, getRuntimeSession()];\r\n                case 1:\r\n                    _a = (_b.sent());\r\n                    _b.label = 2;\r\n                case 2:\r\n                    augLoopSession = _a;\r\n                    if (!!augLoopSession) return [3 /*break*/, 5];\r\n                    return [4 /*yield*/, getGlobalAugLoopRuntime(loadDelay)];\r\n                case 3:\r\n                    augLoopRuntime = _b.sent();\r\n                    if (!augLoopRuntime) {\r\n                        throw new Error(\"Unable to get AL runtime\");\r\n                    }\r\n                    augLoopSessionPromise = window.augLoop.ALFactoryGlobal.getAugLoopRuntimeManager().getSession();\r\n                    if (!augLoopSessionPromise) {\r\n                        throw new Error(\"Unable to get AL session promise\");\r\n                    }\r\n                    return [4 /*yield*/, augLoopSessionPromise];\r\n                case 4:\r\n                    augLoopSession = _b.sent();\r\n                    if (!augLoopSession) {\r\n                        throw new Error(\"Unable to get AL session\");\r\n                    }\r\n                    _b.label = 5;\r\n                case 5: return [2 /*return*/, getAnnotationData(augLoopSession, annotationName)];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/AugLoopHelper.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/LocalUserFactHelper.ts":
/*!**************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/LocalUserFactHelper.ts ***!
  \**************************************************************/
/*! exports provided: createUserFact, getLocalUserFact */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createUserFact\", function() { return createUserFact; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLocalUserFact\", function() { return getLocalUserFact; });\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/*\r\n * LocalUserFactHelper.ts\r\n */\r\n\r\n\r\n\r\nfunction getBrowserSettings() {\r\n    try {\r\n        // Screen dimensions\r\n        var documentElement = document && (document.documentElement || document.getElementsByTagName(\"body\")[0]);\r\n        var browserSettings = {\r\n            pageWidth: (window === null || window === void 0 ? void 0 : window.innerWidth) || (documentElement === null || documentElement === void 0 ? void 0 : documentElement.clientWidth),\r\n            pageHeight: (window === null || window === void 0 ? void 0 : window.innerHeight) || (documentElement === null || documentElement === void 0 ? void 0 : documentElement.clientHeight),\r\n            pageTop: (window === null || window === void 0 ? void 0 : window.pageYOffset) || (documentElement === null || documentElement === void 0 ? void 0 : documentElement.scrollTop),\r\n            pageLeft: (window === null || window === void 0 ? void 0 : window.pageXOffset) || (documentElement === null || documentElement === void 0 ? void 0 : documentElement.scrollLeft),\r\n            screenWidth: screen ? screen.width : 0,\r\n            screenHeight: screen ? screen.height : 0,\r\n            colorDepth: screen ? screen.colorDepth : 0,\r\n            userAgent: navigator === null || navigator === void 0 ? void 0 : navigator.userAgent,\r\n        };\r\n        return browserSettings;\r\n    }\r\n    catch (error) {\r\n        // ignore\r\n        return null;\r\n    }\r\n}\r\n// Currently used for AADC but can be extended to any other settings\r\nfunction getCustomSettings() {\r\n    // Custom settings\r\n    var customSettings = {\r\n        // AADC related values\r\n        userConsentGroup: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getUserConsentGroup(),\r\n        feedbackEnabledByAADC: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().isFeedbackSurveyEnabledByAADC(),\r\n    };\r\n    return customSettings;\r\n}\r\n// input userFactName is expected to be of form window__obj1___obj2\r\nfunction getBrowserLocalFact(userFactName) {\r\n    var factNameValues = userFactName && userFactName.split(\"__\");\r\n    if (!factNameValues || factNameValues.length <= 1) {\r\n        return null;\r\n    }\r\n    var userFact = null;\r\n    var objectName = factNameValues[0];\r\n    var propertyName = factNameValues.pop();\r\n    // common top level objects eg: window__status\r\n    if (propertyName && factNameValues.length === 1) {\r\n        userFact = createUserFact(window[objectName] || window, propertyName);\r\n    }\r\n    // handle names like window__navigator__userAgent__length\r\n    if (!userFact && propertyName && factNameValues.length > 1) {\r\n        if (objectName === \"window\") {\r\n            // remove the window object.. it will be used as first/default\r\n            factNameValues.shift();\r\n        }\r\n        // try getting target as object path eg: window['navigator']['userAgent']\r\n        var globalObject = factNameValues.reduce(function (prev, curr) { return prev && prev[curr]; }, window);\r\n        if (globalObject) {\r\n            // get the fact value eg: 'length'\r\n            userFact = createUserFact(globalObject, propertyName);\r\n        }\r\n    }\r\n    if (userFact) {\r\n        userFact.userFactName = userFactName;\r\n    }\r\n    return userFact;\r\n}\r\n// For consistency, fact names should match %SRCROOT%\\personalization\\common\\LocalUserFactsDataProvider.cpp\r\nfunction createUserFact(targetObject, factName) {\r\n    if (!targetObject) {\r\n        return null;\r\n    }\r\n    // get fact value\r\n    var factValue = targetObject[factName];\r\n    if (!factValue) {\r\n        // try looking up with case insensitive key\r\n        var loweCaseFactName_1 = factName.toLowerCase();\r\n        var caseInsensitiveKey = Object.keys(targetObject).find(function (key) { return key.toLowerCase() === loweCaseFactName_1; });\r\n        factValue = targetObject[caseInsensitiveKey];\r\n    }\r\n    if (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isNOU(factValue)) {\r\n        return null;\r\n    }\r\n    // ignore object and function type values\r\n    if (!_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isArray(factValue) && (_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isObject(factValue) || _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isFunction(factValue))) {\r\n        return null;\r\n    }\r\n    // Handle serialized values\r\n    var currentDateTime = new Date().toISOString();\r\n    return {\r\n        userFactType: \"Local\",\r\n        userFactName: factName,\r\n        userFactValue: factValue.toString(),\r\n        sourceDateTime: currentDateTime,\r\n        storageDateTime: currentDateTime,\r\n        clientIngestionDateTime: currentDateTime,\r\n    };\r\n}\r\nvar localFactTargetObjects;\r\nfunction getLocalUserFact(userFactName) {\r\n    try {\r\n        if (!localFactTargetObjects) {\r\n            var commonInitOptions = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getCommonInitOptions();\r\n            localFactTargetObjects = [\r\n                commonInitOptions,\r\n                commonInitOptions === null || commonInitOptions === void 0 ? void 0 : commonInitOptions.applicationSettings,\r\n                commonInitOptions === null || commonInitOptions === void 0 ? void 0 : commonInitOptions.telemetryGroup,\r\n                commonInitOptions === null || commonInitOptions === void 0 ? void 0 : commonInitOptions.applicationGroup,\r\n                commonInitOptions === null || commonInitOptions === void 0 ? void 0 : commonInitOptions.webGroup,\r\n                _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"]().getFloodgateInitOptions(),\r\n                _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_1__[\"get\"](),\r\n                getBrowserSettings(),\r\n                getCustomSettings(),\r\n            ];\r\n        }\r\n        // lookup in target objects and create fact\r\n        var userFact = localFactTargetObjects.reduce(function (generatedFact, targetObject) { return generatedFact || createUserFact(targetObject, userFactName); }, null);\r\n        // lookup global browser objects for names like navigator__userAgent or location__href\r\n        if (!userFact) {\r\n            userFact = getBrowserLocalFact(userFactName);\r\n        }\r\n        return userFact;\r\n    }\r\n    catch (error) {\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].UserFacts.LocalFact.Error.VALUE, 2 /* Error */, {\r\n            ErrorMessage: \"Error getting local fact - \" + userFactName + \" \" + (error && error.message ? \": \" + error.message : \"\") + \" \",\r\n        });\r\n        return null;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9Mb2NhbFVzZXJGYWN0SGVscGVyLnRzPzFlMzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7R0FFRztBQUVzRDtBQUVPO0FBQ2xCO0FBRTlDLFNBQVMsa0JBQWtCO0lBQzFCLElBQUk7UUFDSCxvQkFBb0I7UUFDcEIsSUFBTSxlQUFlLEdBQUcsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsSUFBSSxRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRyxJQUFNLGVBQWUsR0FBRztZQUN2QixTQUFTLEVBQUUsT0FBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFVBQVUsTUFBSSxlQUFlLGFBQWYsZUFBZSx1QkFBZixlQUFlLENBQUUsV0FBVztZQUM3RCxVQUFVLEVBQUUsT0FBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFdBQVcsTUFBSSxlQUFlLGFBQWYsZUFBZSx1QkFBZixlQUFlLENBQUUsWUFBWTtZQUNoRSxPQUFPLEVBQUUsT0FBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFdBQVcsTUFBSSxlQUFlLGFBQWYsZUFBZSx1QkFBZixlQUFlLENBQUUsU0FBUztZQUMxRCxRQUFRLEVBQUUsT0FBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFdBQVcsTUFBSSxlQUFlLGFBQWYsZUFBZSx1QkFBZixlQUFlLENBQUUsVUFBVTtZQUM1RCxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxTQUFTLEVBQUUsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLFNBQVM7U0FDL0IsQ0FBQztRQUVGLE9BQU8sZUFBZSxDQUFDO0tBQ3ZCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZixTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUM7S0FDWjtBQUNGLENBQUM7QUFFRCxvRUFBb0U7QUFDcEUsU0FBUyxpQkFBaUI7SUFDekIsa0JBQWtCO0lBQ2xCLElBQU0sY0FBYyxHQUFHO1FBQ3RCLHNCQUFzQjtRQUN0QixnQkFBZ0IsRUFBRSxnRUFBaUIsRUFBRSxDQUFDLG1CQUFtQixFQUFFO1FBQzNELHFCQUFxQixFQUFFLGdFQUFpQixFQUFFLENBQUMsNkJBQTZCLEVBQUU7S0FHMUUsQ0FBQztJQUVGLE9BQU8sY0FBYyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxtRUFBbUU7QUFDbkUsU0FBUyxtQkFBbUIsQ0FBQyxZQUFvQjtJQUNoRCxJQUFNLGNBQWMsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxJQUFJLENBQUMsY0FBYyxJQUFJLGNBQWMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFFRCxJQUFJLFFBQVEsR0FBa0IsSUFBSSxDQUFDO0lBQ25DLElBQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQyxJQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFMUMsOENBQThDO0lBQzlDLElBQUksWUFBWSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2hELFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFPLFVBQVUsQ0FBQyxJQUFJLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztLQUM1RTtJQUVELHlEQUF5RDtJQUN6RCxJQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzRCxJQUFJLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDNUIsOERBQThEO1lBQzlELGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN2QjtRQUVELHlFQUF5RTtRQUN6RSxJQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLElBQUksSUFBSyxXQUFJLElBQUksSUFBSSxDQUFPLElBQUksQ0FBQyxFQUF4QixDQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdGLElBQUksWUFBWSxFQUFFO1lBQ2pCLGtDQUFrQztZQUNsQyxRQUFRLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztTQUN0RDtLQUNEO0lBRUQsSUFBSSxRQUFRLEVBQUU7UUFDYixRQUFRLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztLQUNyQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUM7QUFFRCwyR0FBMkc7QUFDcEcsU0FBUyxjQUFjLENBQUMsWUFBaUMsRUFBRSxRQUFnQjtJQUNqRixJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFFRCxpQkFBaUI7SUFDakIsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZiwyQ0FBMkM7UUFDM0MsSUFBTSxrQkFBZ0IsR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFHLElBQUksVUFBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLGtCQUFnQixFQUF0QyxDQUFzQyxDQUFDLENBQUM7UUFDekcsU0FBUyxHQUFHLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsSUFBSSxpRUFBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUMzQixPQUFPLElBQUksQ0FBQztLQUNaO0lBRUQseUNBQXlDO0lBQ3pDLElBQUksQ0FBQyxpRUFBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlFQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGlFQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7UUFDNUYsT0FBTyxJQUFJLENBQUM7S0FDWjtJQUVELDJCQUEyQjtJQUMzQixJQUFNLGVBQWUsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pELE9BQU87UUFDTixZQUFZLEVBQUUsT0FBTztRQUNyQixZQUFZLEVBQUUsUUFBUTtRQUN0QixhQUFhLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUNuQyxjQUFjLEVBQUUsZUFBZTtRQUMvQixlQUFlLEVBQUUsZUFBZTtRQUNoQyx1QkFBdUIsRUFBRSxlQUFlO0tBQ3hDLENBQUM7QUFDSCxDQUFDO0FBRUQsSUFBSSxzQkFBNkMsQ0FBQztBQUMzQyxTQUFTLGdCQUFnQixDQUFDLFlBQW9CO0lBQ3BELElBQUk7UUFDSCxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDNUIsSUFBTSxpQkFBaUIsR0FBRyxnRUFBaUIsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDckUsc0JBQXNCLEdBQUc7Z0JBQ3hCLGlCQUFpQjtnQkFDakIsaUJBQWlCLGFBQWpCLGlCQUFpQix1QkFBakIsaUJBQWlCLENBQUUsbUJBQW1CO2dCQUN0QyxpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxjQUFjO2dCQUNqQyxpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxnQkFBZ0I7Z0JBQ25DLGlCQUFpQixhQUFqQixpQkFBaUIsdUJBQWpCLGlCQUFpQixDQUFFLFFBQVE7Z0JBQzNCLGdFQUFpQixFQUFFLENBQUMsdUJBQXVCLEVBQUU7Z0JBQzdDLGdFQUFpQixFQUFFO2dCQUNuQixrQkFBa0IsRUFBRTtnQkFDcEIsaUJBQWlCLEVBQUU7YUFDbkIsQ0FBQztTQUNGO1FBRUQsMkNBQTJDO1FBQzNDLElBQUksUUFBUSxHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FDM0MsVUFBQyxhQUFhLEVBQUUsWUFBWSxJQUFLLG9CQUFhLElBQUksY0FBYyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsRUFBM0QsQ0FBMkQsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVyRyxzRkFBc0Y7UUFDdEYsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNkLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUM3QztRQUVELE9BQU8sUUFBUSxDQUFDO0tBQ2hCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZiwwREFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FDM0IseURBQWdCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFFaEQ7WUFDQyxZQUFZLEVBQUUsZ0NBQThCLFlBQVksVUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBRztTQUNqSCxDQUFDLENBQUM7UUFFSixPQUFPLElBQUksQ0FBQztLQUNaO0FBQ0YsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL1RhcmdldGVkTWVzc2FnaW5nL0xvY2FsVXNlckZhY3RIZWxwZXIudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBMb2NhbFVzZXJGYWN0SGVscGVyLnRzXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXBpLCBVdGlscyB9IGZyb20gXCJAbXMtb2ZiL29mZmljZWZsb29kZ2F0ZWNvcmVcIjtcclxuXHJcbmltcG9ydCAqIGFzIENvbmZpZ3VyYXRpb24gZnJvbSBcIi4uL0NvbmZpZ3VyYXRpb24vQ29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuLi9Mb2dnaW5nL0xvZ2dpbmdcIjtcclxuXHJcbmZ1bmN0aW9uIGdldEJyb3dzZXJTZXR0aW5ncygpIHtcclxuXHR0cnkge1xyXG5cdFx0Ly8gU2NyZWVuIGRpbWVuc2lvbnNcclxuXHRcdGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50ICYmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdKTtcclxuXHRcdGNvbnN0IGJyb3dzZXJTZXR0aW5ncyA9IHtcclxuXHRcdFx0cGFnZVdpZHRoOiB3aW5kb3c/LmlubmVyV2lkdGggfHwgZG9jdW1lbnRFbGVtZW50Py5jbGllbnRXaWR0aCxcclxuXHRcdFx0cGFnZUhlaWdodDogd2luZG93Py5pbm5lckhlaWdodCB8fCBkb2N1bWVudEVsZW1lbnQ/LmNsaWVudEhlaWdodCxcclxuXHRcdFx0cGFnZVRvcDogd2luZG93Py5wYWdlWU9mZnNldCB8fCBkb2N1bWVudEVsZW1lbnQ/LnNjcm9sbFRvcCxcclxuXHRcdFx0cGFnZUxlZnQ6IHdpbmRvdz8ucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnRFbGVtZW50Py5zY3JvbGxMZWZ0LFxyXG5cdFx0XHRzY3JlZW5XaWR0aDogc2NyZWVuID8gc2NyZWVuLndpZHRoIDogMCxcclxuXHRcdFx0c2NyZWVuSGVpZ2h0OiBzY3JlZW4gPyBzY3JlZW4uaGVpZ2h0IDogMCxcclxuXHRcdFx0Y29sb3JEZXB0aDogc2NyZWVuID8gc2NyZWVuLmNvbG9yRGVwdGggOiAwLFxyXG5cdFx0XHR1c2VyQWdlbnQ6IG5hdmlnYXRvcj8udXNlckFnZW50LFxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gYnJvd3NlclNldHRpbmdzO1xyXG5cdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHQvLyBpZ25vcmVcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxufVxyXG5cclxuLy8gQ3VycmVudGx5IHVzZWQgZm9yIEFBREMgYnV0IGNhbiBiZSBleHRlbmRlZCB0byBhbnkgb3RoZXIgc2V0dGluZ3NcclxuZnVuY3Rpb24gZ2V0Q3VzdG9tU2V0dGluZ3MoKTogUmVjb3JkPHN0cmluZywgYW55PiAge1xyXG5cdC8vIEN1c3RvbSBzZXR0aW5nc1xyXG5cdGNvbnN0IGN1c3RvbVNldHRpbmdzID0ge1xyXG5cdFx0Ly8gQUFEQyByZWxhdGVkIHZhbHVlc1xyXG5cdFx0dXNlckNvbnNlbnRHcm91cDogQ29uZmlndXJhdGlvbi5nZXQoKS5nZXRVc2VyQ29uc2VudEdyb3VwKCksXHJcblx0XHRmZWVkYmFja0VuYWJsZWRCeUFBREM6IENvbmZpZ3VyYXRpb24uZ2V0KCkuaXNGZWVkYmFja1N1cnZleUVuYWJsZWRCeUFBREMoKSxcclxuXHJcblx0XHQvLyBPdGhlciB2YWx1ZXNcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gY3VzdG9tU2V0dGluZ3M7XHJcbn1cclxuXHJcbi8vIGlucHV0IHVzZXJGYWN0TmFtZSBpcyBleHBlY3RlZCB0byBiZSBvZiBmb3JtIHdpbmRvd19fb2JqMV9fX29iajJcclxuZnVuY3Rpb24gZ2V0QnJvd3NlckxvY2FsRmFjdCh1c2VyRmFjdE5hbWU6IHN0cmluZyk6IEFwaS5JVXNlckZhY3Qge1xyXG5cdGNvbnN0IGZhY3ROYW1lVmFsdWVzID0gdXNlckZhY3ROYW1lICYmIHVzZXJGYWN0TmFtZS5zcGxpdChcIl9fXCIpO1xyXG5cdGlmICghZmFjdE5hbWVWYWx1ZXMgfHwgZmFjdE5hbWVWYWx1ZXMubGVuZ3RoIDw9IDEpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0bGV0IHVzZXJGYWN0OiBBcGkuSVVzZXJGYWN0ID0gbnVsbDtcclxuXHRjb25zdCBvYmplY3ROYW1lID0gZmFjdE5hbWVWYWx1ZXNbMF07XHJcblx0Y29uc3QgcHJvcGVydHlOYW1lID0gZmFjdE5hbWVWYWx1ZXMucG9wKCk7XHJcblxyXG5cdC8vIGNvbW1vbiB0b3AgbGV2ZWwgb2JqZWN0cyBlZzogd2luZG93X19zdGF0dXNcclxuXHRpZiAocHJvcGVydHlOYW1lICYmIGZhY3ROYW1lVmFsdWVzLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0dXNlckZhY3QgPSBjcmVhdGVVc2VyRmFjdCh3aW5kb3dbPGFueT4gb2JqZWN0TmFtZV0gfHwgd2luZG93LCBwcm9wZXJ0eU5hbWUpO1xyXG5cdH1cclxuXHJcblx0Ly8gaGFuZGxlIG5hbWVzIGxpa2Ugd2luZG93X19uYXZpZ2F0b3JfX3VzZXJBZ2VudF9fbGVuZ3RoXHJcblx0aWYgKCF1c2VyRmFjdCAmJiBwcm9wZXJ0eU5hbWUgJiYgZmFjdE5hbWVWYWx1ZXMubGVuZ3RoID4gMSkge1xyXG5cdFx0aWYgKG9iamVjdE5hbWUgPT09IFwid2luZG93XCIpIHtcclxuXHRcdFx0Ly8gcmVtb3ZlIHRoZSB3aW5kb3cgb2JqZWN0Li4gaXQgd2lsbCBiZSB1c2VkIGFzIGZpcnN0L2RlZmF1bHRcclxuXHRcdFx0ZmFjdE5hbWVWYWx1ZXMuc2hpZnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyB0cnkgZ2V0dGluZyB0YXJnZXQgYXMgb2JqZWN0IHBhdGggZWc6IHdpbmRvd1snbmF2aWdhdG9yJ11bJ3VzZXJBZ2VudCddXHJcblx0XHRjb25zdCBnbG9iYWxPYmplY3QgPSBmYWN0TmFtZVZhbHVlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYgJiYgcHJldls8YW55PiBjdXJyXSwgd2luZG93KTtcclxuXHRcdGlmIChnbG9iYWxPYmplY3QpIHtcclxuXHRcdFx0Ly8gZ2V0IHRoZSBmYWN0IHZhbHVlIGVnOiAnbGVuZ3RoJ1xyXG5cdFx0XHR1c2VyRmFjdCA9IGNyZWF0ZVVzZXJGYWN0KGdsb2JhbE9iamVjdCwgcHJvcGVydHlOYW1lKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICh1c2VyRmFjdCkge1xyXG5cdFx0dXNlckZhY3QudXNlckZhY3ROYW1lID0gdXNlckZhY3ROYW1lO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHVzZXJGYWN0O1xyXG59XHJcblxyXG4vLyBGb3IgY29uc2lzdGVuY3ksIGZhY3QgbmFtZXMgc2hvdWxkIG1hdGNoICVTUkNST09UJVxccGVyc29uYWxpemF0aW9uXFxjb21tb25cXExvY2FsVXNlckZhY3RzRGF0YVByb3ZpZGVyLmNwcFxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVXNlckZhY3QodGFyZ2V0T2JqZWN0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBmYWN0TmFtZTogc3RyaW5nKTogQXBpLklVc2VyRmFjdCB7XHJcblx0aWYgKCF0YXJnZXRPYmplY3QpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gZ2V0IGZhY3QgdmFsdWVcclxuXHRsZXQgZmFjdFZhbHVlID0gdGFyZ2V0T2JqZWN0W2ZhY3ROYW1lXTtcclxuXHRpZiAoIWZhY3RWYWx1ZSkge1xyXG5cdFx0Ly8gdHJ5IGxvb2tpbmcgdXAgd2l0aCBjYXNlIGluc2Vuc2l0aXZlIGtleVxyXG5cdFx0Y29uc3QgbG93ZUNhc2VGYWN0TmFtZSA9IGZhY3ROYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRjb25zdCBjYXNlSW5zZW5zaXRpdmVLZXkgPSBPYmplY3Qua2V5cyh0YXJnZXRPYmplY3QpLmZpbmQoa2V5ID0+IGtleS50b0xvd2VyQ2FzZSgpID09PSBsb3dlQ2FzZUZhY3ROYW1lKTtcclxuXHRcdGZhY3RWYWx1ZSA9IHRhcmdldE9iamVjdFtjYXNlSW5zZW5zaXRpdmVLZXldO1xyXG5cdH1cclxuXHJcblx0aWYgKFV0aWxzLmlzTk9VKGZhY3RWYWx1ZSkpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gaWdub3JlIG9iamVjdCBhbmQgZnVuY3Rpb24gdHlwZSB2YWx1ZXNcclxuXHRpZiAoIVV0aWxzLmlzQXJyYXkoZmFjdFZhbHVlKSAmJiAoVXRpbHMuaXNPYmplY3QoZmFjdFZhbHVlKSB8fCBVdGlscy5pc0Z1bmN0aW9uKGZhY3RWYWx1ZSkpKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdC8vIEhhbmRsZSBzZXJpYWxpemVkIHZhbHVlc1xyXG5cdGNvbnN0IGN1cnJlbnREYXRlVGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dXNlckZhY3RUeXBlOiBcIkxvY2FsXCIsXHJcblx0XHR1c2VyRmFjdE5hbWU6IGZhY3ROYW1lLFxyXG5cdFx0dXNlckZhY3RWYWx1ZTogZmFjdFZhbHVlLnRvU3RyaW5nKCksXHJcblx0XHRzb3VyY2VEYXRlVGltZTogY3VycmVudERhdGVUaW1lLFxyXG5cdFx0c3RvcmFnZURhdGVUaW1lOiBjdXJyZW50RGF0ZVRpbWUsXHJcblx0XHRjbGllbnRJbmdlc3Rpb25EYXRlVGltZTogY3VycmVudERhdGVUaW1lLFxyXG5cdH07XHJcbn1cclxuXHJcbmxldCBsb2NhbEZhY3RUYXJnZXRPYmplY3RzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+W107XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbFVzZXJGYWN0KHVzZXJGYWN0TmFtZTogc3RyaW5nKTogQXBpLklVc2VyRmFjdCB7XHJcblx0dHJ5IHtcclxuXHRcdGlmICghbG9jYWxGYWN0VGFyZ2V0T2JqZWN0cykge1xyXG5cdFx0XHRjb25zdCBjb21tb25Jbml0T3B0aW9ucyA9IENvbmZpZ3VyYXRpb24uZ2V0KCkuZ2V0Q29tbW9uSW5pdE9wdGlvbnMoKTtcclxuXHRcdFx0bG9jYWxGYWN0VGFyZ2V0T2JqZWN0cyA9IFtcclxuXHRcdFx0XHRjb21tb25Jbml0T3B0aW9ucyxcclxuXHRcdFx0XHRjb21tb25Jbml0T3B0aW9ucz8uYXBwbGljYXRpb25TZXR0aW5ncyxcclxuXHRcdFx0XHRjb21tb25Jbml0T3B0aW9ucz8udGVsZW1ldHJ5R3JvdXAsXHJcblx0XHRcdFx0Y29tbW9uSW5pdE9wdGlvbnM/LmFwcGxpY2F0aW9uR3JvdXAsXHJcblx0XHRcdFx0Y29tbW9uSW5pdE9wdGlvbnM/LndlYkdyb3VwLFxyXG5cdFx0XHRcdENvbmZpZ3VyYXRpb24uZ2V0KCkuZ2V0Rmxvb2RnYXRlSW5pdE9wdGlvbnMoKSxcclxuXHRcdFx0XHRDb25maWd1cmF0aW9uLmdldCgpLFxyXG5cdFx0XHRcdGdldEJyb3dzZXJTZXR0aW5ncygpLFxyXG5cdFx0XHRcdGdldEN1c3RvbVNldHRpbmdzKCksXHJcblx0XHRcdF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gbG9va3VwIGluIHRhcmdldCBvYmplY3RzIGFuZCBjcmVhdGUgZmFjdFxyXG5cdFx0bGV0IHVzZXJGYWN0ID0gbG9jYWxGYWN0VGFyZ2V0T2JqZWN0cy5yZWR1Y2U8QXBpLklVc2VyRmFjdD4oXHJcblx0XHRcdChnZW5lcmF0ZWRGYWN0LCB0YXJnZXRPYmplY3QpID0+IGdlbmVyYXRlZEZhY3QgfHwgY3JlYXRlVXNlckZhY3QodGFyZ2V0T2JqZWN0LCB1c2VyRmFjdE5hbWUpLCBudWxsKTtcclxuXHJcblx0XHQvLyBsb29rdXAgZ2xvYmFsIGJyb3dzZXIgb2JqZWN0cyBmb3IgbmFtZXMgbGlrZSBuYXZpZ2F0b3JfX3VzZXJBZ2VudCBvciBsb2NhdGlvbl9faHJlZlxyXG5cdFx0aWYgKCF1c2VyRmFjdCkge1xyXG5cdFx0XHR1c2VyRmFjdCA9IGdldEJyb3dzZXJMb2NhbEZhY3QodXNlckZhY3ROYW1lKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdXNlckZhY3Q7XHJcblx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdExvZ2dpbmcuZ2V0TG9nZ2VyKCkubG9nRXZlbnQoXHJcblx0XHRcdExvZ2dpbmcuRXZlbnRJZHMuVXNlckZhY3RzLkxvY2FsRmFjdC5FcnJvci5WQUxVRSxcclxuXHRcdFx0TG9nZ2luZy5Mb2dMZXZlbC5FcnJvcixcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEVycm9yTWVzc2FnZTogYEVycm9yIGdldHRpbmcgbG9jYWwgZmFjdCAtICR7dXNlckZhY3ROYW1lfSAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2UgPyBcIjogXCIgKyBlcnJvci5tZXNzYWdlIDogXCJcIn0gYCxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/LocalUserFactHelper.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/TargetedMessagingCache.ts":
/*!*****************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/TargetedMessagingCache.ts ***!
  \*****************************************************************/
/*! exports provided: TargetedMessagingCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TargetedMessagingCache\", function() { return TargetedMessagingCache; });\n/* harmony import */ var _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FloodgateCore/FloodgateStorageProvider */ \"./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\nvar isNOU = _Utils__WEBPACK_IMPORTED_MODULE_1__[\"isNOU\"];\r\nvar TargetedMessagingCache = /** @class */ (function () {\r\n    function TargetedMessagingCache(items) {\r\n        this.useLocalStorage = false;\r\n        this.cachedItems = {};\r\n        this.initialize(items);\r\n    }\r\n    TargetedMessagingCache.prototype.setContentItem = function (contentType, content, expiryTime) {\r\n        var cacheItem = this.createItem(contentType, content, expiryTime);\r\n        this.setItem(cacheItem);\r\n        return cacheItem;\r\n    };\r\n    TargetedMessagingCache.prototype.getItemContent = function (contentType) {\r\n        var cacheItem = this.getItem(contentType);\r\n        return cacheItem && cacheItem.content;\r\n    };\r\n    TargetedMessagingCache.prototype.has = function (contentType) {\r\n        return contentType in this.cachedItems;\r\n    };\r\n    TargetedMessagingCache.prototype.isItemExpired = function (contentType) {\r\n        var cacheItem = this.getItem(contentType);\r\n        return !cacheItem\r\n            || !cacheItem.expiryDate\r\n            || cacheItem.expiryDate < new Date();\r\n    };\r\n    TargetedMessagingCache.prototype.createItem = function (contentType, content, expiryTime) {\r\n        var cacheItem = {\r\n            contentType: contentType,\r\n            content: content,\r\n            expiryDate: new Date(Date.now() + expiryTime),\r\n            lastRetrievedDate: new Date(),\r\n        };\r\n        return cacheItem;\r\n    };\r\n    TargetedMessagingCache.prototype.setItem = function (cacheItem) {\r\n        this.cachedItems[cacheItem.contentType] = cacheItem;\r\n        this.updateItemInLocalStorage(cacheItem);\r\n    };\r\n    TargetedMessagingCache.prototype.getItem = function (contentType) {\r\n        return this.cachedItems[contentType];\r\n    };\r\n    TargetedMessagingCache.prototype.initialize = function (items) {\r\n        this.cachedItems = {};\r\n        if (_FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isStorageAvailable()) {\r\n            this.floodgateStorage = new _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n            this.useLocalStorage = true;\r\n            // try to fetch items from local storage if available from prior sessions\r\n            this.initCachedItemsFromLocalStorage(items);\r\n        }\r\n        else {\r\n            // no LocalStorage support, only active object cache only\r\n        }\r\n    };\r\n    TargetedMessagingCache.prototype.initCachedItemsFromLocalStorage = function (items) {\r\n        if (this.useLocalStorage) {\r\n            if (!isNOU(items)) {\r\n                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\r\n                    var contentKey = items_1[_i];\r\n                    var tempStorageItem = this.floodgateStorage.read(this.mapContentTypeToFloodgateProviderKey(contentKey));\r\n                    if (!isNOU(tempStorageItem)) {\r\n                        var tempCacheItem = this.parseObjectFromCache(tempStorageItem);\r\n                        if (!isNOU(tempCacheItem)) {\r\n                            tempCacheItem.expiryDate = typeof tempCacheItem.expiryDate === \"string\" ?\r\n                                new Date(tempCacheItem.expiryDate) : tempCacheItem.expiryDate;\r\n                            this.cachedItems[tempCacheItem.contentType] = tempCacheItem;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TargetedMessagingCache.prototype.updateItemInLocalStorage = function (cacheItem) {\r\n        if (this.useLocalStorage) {\r\n            this.floodgateStorage.write(this.mapContentTypeToFloodgateProviderKey(cacheItem.contentType), JSON.stringify(cacheItem));\r\n        }\r\n    };\r\n    TargetedMessagingCache.prototype.parseObjectFromCache = function (tempItem) {\r\n        try {\r\n            var tempCacheItem = JSON.parse(tempItem);\r\n            return tempCacheItem;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    TargetedMessagingCache.prototype.mapContentTypeToFloodgateProviderKey = function (contentType) {\r\n        switch (contentType) {\r\n            case \"CampaignContent\" /* campaignContent */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].TmsCache_CampaignContent;\r\n            case \"MessageMetadata\" /* messageMetadata */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].TmsCache_MessageMetadata;\r\n            case \"UserGovernance\" /* userGovernanceRules */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].TmsCache_UserGovernance;\r\n            case \"DynamicSettings\" /* dynamicSettings */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].Tms_DynamicSettings;\r\n            case \"LogLevelSettings\" /* logLevelSettings */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].LogLevelSettings;\r\n            case \"UserFacts\" /* userFacts */:\r\n                return _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_2__[\"FileType\"].UserFacts;\r\n            default:\r\n                throw new Error(\"Unmapped ContentType in TmsCache\");\r\n        }\r\n    };\r\n    return TargetedMessagingCache;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/TargetedMessagingCache.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/TargetedMessagingCampaignDefinitionProvider.ts":
/*!**************************************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/TargetedMessagingCampaignDefinitionProvider.ts ***!
  \**************************************************************************************/
/*! exports provided: TargetedMessagingCampaignDefinitionProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TargetedMessagingCampaignDefinitionProvider\", function() { return TargetedMessagingCampaignDefinitionProvider; });\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Campaign/CampaignDefinitionProvider */ \"../FloodgateCore/dist/src/Campaign/CampaignDefinitionProvider.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _AssetsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AssetsProvider */ \"./scripts/app/TargetedMessaging/AssetsProvider.ts\");\n/**\r\n * TargetedMessagingProvider.ts\r\n *\r\n * Module for targeted messaging campaign definition provider.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nvar TargetedMessagingCampaignDefinitionProvider = /** @class */ (function () {\r\n    function TargetedMessagingCampaignDefinitionProvider() {\r\n        this.loadAsyncTriggered = false;\r\n        this.campaignDefinitions = [];\r\n    }\r\n    TargetedMessagingCampaignDefinitionProvider.prototype.load = function () {\r\n        if (!this.loadAsyncTriggered) {\r\n            this.loadAsync();\r\n            this.loadAsyncTriggered = true;\r\n        }\r\n        return this.campaignDefinitions || [];\r\n    };\r\n    TargetedMessagingCampaignDefinitionProvider.prototype.loadAsync = function () {\r\n        var thisObj = this;\r\n        var campaignDefinitionsPromise = _AssetsProvider__WEBPACK_IMPORTED_MODULE_4__[\"get\"]().getCampaignDefinitions();\r\n        campaignDefinitionsPromise.then(function (response) {\r\n            thisObj.loadCampaignDefinitions(response);\r\n            thisObj.loadAsyncTriggered = true;\r\n        });\r\n        var timeoutMilliseconds = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_1__[\"getDynamicSetting\"])(\"TmsLoadTimeout\" /* tmsLoadTimeout */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__[\"TMS_CAMPAIGN_LOAD_TIMEOUT\"]);\r\n        var timeoutPromise = Object(_Utils__WEBPACK_IMPORTED_MODULE_3__[\"createTimeoutPromise\"])(timeoutMilliseconds, campaignDefinitionsPromise);\r\n        return new Promise(function (resolve, reject) {\r\n            timeoutPromise.then(function onFulfilled(response) {\r\n                thisObj.loadCampaignDefinitions(response);\r\n                thisObj.loadAsyncTriggered = true;\r\n                resolve(thisObj.campaignDefinitions);\r\n            }).catch(\r\n            // might have timed out or getCampaignDefinitions might have failed\r\n            // In either case we resolve with cached content\r\n            function onRejected(error) {\r\n                if (thisObj.campaignDefinitions.length <= 0) {\r\n                    thisObj.loadCampaignDefinitions(_AssetsProvider__WEBPACK_IMPORTED_MODULE_4__[\"get\"]().getCachedCampaignDefinitions());\r\n                }\r\n                resolve(thisObj.campaignDefinitions);\r\n            }).catch(\r\n            // handle any errors from catch block\r\n            function onRejected(error) {\r\n                resolve(thisObj.campaignDefinitions);\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingCampaignDefinitionProvider.prototype.loadCampaignDefinitions = function (response) {\r\n        var definitions = response && response.campaigns;\r\n        if (definitions) {\r\n            this.campaignDefinitions = Object(_ms_ofb_officefloodgatecore_dist_src_Campaign_CampaignDefinitionProvider__WEBPACK_IMPORTED_MODULE_0__[\"FilterValidCampaignDefinitions\"])(definitions).result;\r\n        }\r\n    };\r\n    return TargetedMessagingCampaignDefinitionProvider;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ0NhbXBhaWduRGVmaW5pdGlvblByb3ZpZGVyLnRzPzVmNmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0dBSUc7QUFLeUU7QUFDVTtBQUNiO0FBQ3pCO0FBRUc7QUFFbkQ7SUFBQTtRQUNTLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUNwQyx3QkFBbUIsR0FBNkIsRUFBRSxDQUFDO0lBcUQ1RCxDQUFDO0lBbkRPLDBEQUFJLEdBQVg7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzdCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1NBQy9CO1FBRUQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSwrREFBUyxHQUFoQjtRQUNDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFNLDBCQUEwQixHQUFHLG1EQUFrQixFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNqRiwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUFRO1lBQ3hDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxtQkFBbUIsR0FBRyw2RkFBaUIsd0NBQTRCLHFGQUF5QixDQUFDLENBQUM7UUFDcEcsSUFBTSxjQUFjLEdBQUcsbUVBQW9CLENBQUMsbUJBQW1CLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUM3RixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDbEMsY0FBYyxDQUFDLElBQUksQ0FDbEIsU0FBUyxXQUFXLENBQUMsUUFBUTtnQkFDNUIsT0FBTyxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO2dCQUNsQyxPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUNELENBQUMsS0FBSztZQUNOLG1FQUFtRTtZQUNuRSxnREFBZ0Q7WUFDaEQsU0FBUyxVQUFVLENBQUMsS0FBSztnQkFDeEIsSUFBSSxPQUFPLENBQUMsbUJBQW1CLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtvQkFDNUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLG1EQUFrQixFQUFFLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDO2lCQUNyRjtnQkFFRCxPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUNELENBQUMsS0FBSztZQUNOLHFDQUFxQztZQUNyQyxTQUFTLFVBQVUsQ0FBQyxLQUFLO2dCQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUNELENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyw2RUFBdUIsR0FBL0IsVUFBZ0MsUUFBNkI7UUFDNUQsSUFBTSxXQUFXLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDbkQsSUFBSSxXQUFXLEVBQUU7WUFDaEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLCtJQUE4QixDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUM5RTtJQUNGLENBQUM7SUFDRixrREFBQztBQUFELENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ0NhbXBhaWduRGVmaW5pdGlvblByb3ZpZGVyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRhcmdldGVkTWVzc2FnaW5nUHJvdmlkZXIudHNcclxuICpcclxuICogTW9kdWxlIGZvciB0YXJnZXRlZCBtZXNzYWdpbmcgY2FtcGFpZ24gZGVmaW5pdGlvbiBwcm92aWRlci5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBcGkgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlXCI7XHJcbmltcG9ydCB7IENhbXBhaWduRGVmaW5pdGlvbnMgfSBmcm9tIFwiQG1zLW9mYi9vZmZpY2VmbG9vZGdhdGVjb3JlL2Rpc3Qvc3JjL0dvdmVybmFuY2UvQ2FtcGFpZ25EZWZpbml0aW9uc1wiO1xyXG5pbXBvcnQgeyBGaWx0ZXJWYWxpZENhbXBhaWduRGVmaW5pdGlvbnMgfSBmcm9tXHJcblx0XCJAbXMtb2ZiL29mZmljZWZsb29kZ2F0ZWNvcmUvZGlzdC9zcmMvQ2FtcGFpZ24vQ2FtcGFpZ25EZWZpbml0aW9uUHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgZ2V0RHluYW1pY1NldHRpbmcsIFNldHRpbmdLZXkgfSBmcm9tIFwiLi4vQ29uZmlndXJhdGlvbi9EeW5hbWljQ29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBUTVNfQ0FNUEFJR05fTE9BRF9USU1FT1VUIH0gZnJvbSBcIi4vVGFyZ2V0ZWRNZXNzYWdpbmdDb25zdGFudHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlVGltZW91dFByb21pc2UgfSBmcm9tIFwiLi4vVXRpbHNcIjtcclxuXHJcbmltcG9ydCAqIGFzIEFzc2V0c1Byb3ZpZGVyIGZyb20gXCIuL0Fzc2V0c1Byb3ZpZGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFyZ2V0ZWRNZXNzYWdpbmdDYW1wYWlnbkRlZmluaXRpb25Qcm92aWRlciBpbXBsZW1lbnRzIEFwaS5JQ2FtcGFpZ25EZWZpbml0aW9uUHJvdmlkZXIge1xyXG5cdHByaXZhdGUgbG9hZEFzeW5jVHJpZ2dlcmVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0cHJpdmF0ZSBjYW1wYWlnbkRlZmluaXRpb25zOiBBcGkuQ2FtcGFpZ25EZWZpbml0aW9uW10gPSBbXTtcclxuXHJcblx0cHVibGljIGxvYWQoKTogQXBpLkNhbXBhaWduRGVmaW5pdGlvbltdIHtcclxuXHRcdGlmICghdGhpcy5sb2FkQXN5bmNUcmlnZ2VyZWQpIHtcclxuXHRcdFx0dGhpcy5sb2FkQXN5bmMoKTtcclxuXHRcdFx0dGhpcy5sb2FkQXN5bmNUcmlnZ2VyZWQgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmNhbXBhaWduRGVmaW5pdGlvbnMgfHwgW107XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgbG9hZEFzeW5jKCk6IFByb21pc2U8QXBpLkNhbXBhaWduRGVmaW5pdGlvbltdPiB7XHJcblx0XHRjb25zdCB0aGlzT2JqID0gdGhpcztcclxuXHRcdGNvbnN0IGNhbXBhaWduRGVmaW5pdGlvbnNQcm9taXNlID0gQXNzZXRzUHJvdmlkZXIuZ2V0KCkuZ2V0Q2FtcGFpZ25EZWZpbml0aW9ucygpO1xyXG5cdFx0Y2FtcGFpZ25EZWZpbml0aW9uc1Byb21pc2UudGhlbigocmVzcG9uc2UpID0+IHtcclxuXHRcdFx0dGhpc09iai5sb2FkQ2FtcGFpZ25EZWZpbml0aW9ucyhyZXNwb25zZSk7XHJcblx0XHRcdHRoaXNPYmoubG9hZEFzeW5jVHJpZ2dlcmVkID0gdHJ1ZTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbnN0IHRpbWVvdXRNaWxsaXNlY29uZHMgPSBnZXREeW5hbWljU2V0dGluZyhTZXR0aW5nS2V5LnRtc0xvYWRUaW1lb3V0LCBUTVNfQ0FNUEFJR05fTE9BRF9USU1FT1VUKTtcclxuXHRcdGNvbnN0IHRpbWVvdXRQcm9taXNlID0gY3JlYXRlVGltZW91dFByb21pc2UodGltZW91dE1pbGxpc2Vjb25kcywgY2FtcGFpZ25EZWZpbml0aW9uc1Byb21pc2UpO1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0dGltZW91dFByb21pc2UudGhlbihcclxuXHRcdFx0XHRmdW5jdGlvbiBvbkZ1bGZpbGxlZChyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dGhpc09iai5sb2FkQ2FtcGFpZ25EZWZpbml0aW9ucyhyZXNwb25zZSk7XHJcblx0XHRcdFx0XHR0aGlzT2JqLmxvYWRBc3luY1RyaWdnZXJlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRyZXNvbHZlKHRoaXNPYmouY2FtcGFpZ25EZWZpbml0aW9ucyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpLmNhdGNoKFxyXG5cdFx0XHRcdC8vIG1pZ2h0IGhhdmUgdGltZWQgb3V0IG9yIGdldENhbXBhaWduRGVmaW5pdGlvbnMgbWlnaHQgaGF2ZSBmYWlsZWRcclxuXHRcdFx0XHQvLyBJbiBlaXRoZXIgY2FzZSB3ZSByZXNvbHZlIHdpdGggY2FjaGVkIGNvbnRlbnRcclxuXHRcdFx0XHRmdW5jdGlvbiBvblJlamVjdGVkKGVycm9yKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpc09iai5jYW1wYWlnbkRlZmluaXRpb25zLmxlbmd0aCA8PSAwKSB7XHJcblx0XHRcdFx0XHRcdHRoaXNPYmoubG9hZENhbXBhaWduRGVmaW5pdGlvbnMoQXNzZXRzUHJvdmlkZXIuZ2V0KCkuZ2V0Q2FjaGVkQ2FtcGFpZ25EZWZpbml0aW9ucygpKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXNvbHZlKHRoaXNPYmouY2FtcGFpZ25EZWZpbml0aW9ucyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpLmNhdGNoKFxyXG5cdFx0XHRcdC8vIGhhbmRsZSBhbnkgZXJyb3JzIGZyb20gY2F0Y2ggYmxvY2tcclxuXHRcdFx0XHRmdW5jdGlvbiBvblJlamVjdGVkKGVycm9yKSB7XHJcblx0XHRcdFx0XHRyZXNvbHZlKHRoaXNPYmouY2FtcGFpZ25EZWZpbml0aW9ucyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGxvYWRDYW1wYWlnbkRlZmluaXRpb25zKHJlc3BvbnNlOiBDYW1wYWlnbkRlZmluaXRpb25zKSB7XHJcblx0XHRjb25zdCBkZWZpbml0aW9ucyA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLmNhbXBhaWducztcclxuXHRcdGlmIChkZWZpbml0aW9ucykge1xyXG5cdFx0XHR0aGlzLmNhbXBhaWduRGVmaW5pdGlvbnMgPSBGaWx0ZXJWYWxpZENhbXBhaWduRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpLnJlc3VsdDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/TargetedMessagingCampaignDefinitionProvider.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/TargetedMessagingClient.ts":
/*!******************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/TargetedMessagingClient.ts ***!
  \******************************************************************/
/*! exports provided: ContentResponse, getDebugCampaignDefinitions, getDebugUserFacts, TargetedMessagingClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContentResponse\", function() { return ContentResponse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDebugCampaignDefinitions\", function() { return getDebugCampaignDefinitions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDebugUserFacts\", function() { return getDebugUserFacts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TargetedMessagingClient\", function() { return TargetedMessagingClient; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider */ \"../FloodgateCore/dist/src/Api/IFloodgateStorageProvider.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _TargetedMessagingTransport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TargetedMessagingTransport */ \"./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts\");\n/* harmony import */ var _Common_UrlUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Common/UrlUtils */ \"./scripts/app/Common/UrlUtils.ts\");\n/* harmony import */ var _TargetedMessagingCache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TargetedMessagingCache */ \"./scripts/app/TargetedMessaging/TargetedMessagingCache.ts\");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Constants */ \"./scripts/app/Constants.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../FloodgateCore/FloodgateStorageProvider */ \"./scripts/app/FloodgateCore/FloodgateStorageProvider.ts\");\n/* harmony import */ var _AugLoopHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./AugLoopHelper */ \"./scripts/app/TargetedMessaging/AugLoopHelper.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar ContentResponse = /** @class */ (function () {\r\n    function ContentResponse() {\r\n    }\r\n    return ContentResponse;\r\n}());\r\n\r\nfunction getDebugCampaignDefinitions() {\r\n    var debugOverrides = _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_9__[\"default\"].safeReadObject(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__[\"FileType\"].DebugOverrides, {});\r\n    return debugOverrides && debugOverrides.tmsResponse && debugOverrides.tmsResponse.CampaignContent && {\r\n        contentType: \"CampaignContent\" /* campaignContent */,\r\n        content: debugOverrides.tmsResponse.CampaignContent,\r\n    };\r\n}\r\nfunction getDebugUserFacts() {\r\n    var debugOverrides = _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_9__[\"default\"].safeReadObject(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__[\"FileType\"].DebugOverrides, {});\r\n    return debugOverrides && debugOverrides.userFactsResponse && {\r\n        contentType: \"UserFacts\" /* userFacts */,\r\n        content: debugOverrides.userFactsResponse,\r\n    };\r\n}\r\nvar TargetedMessagingClient = /** @class */ (function () {\r\n    function TargetedMessagingClient(app, platform, version, locale, country, sessionId, authTokenCallback, augLoopCallback, campaignFlights, campaignParameters, ageGroup, authenticationType, audience, messagingServiceSettings, tmsgCacheIn) {\r\n        var _a, _b;\r\n        this.locale = \"en-us\";\r\n        this.country = \"US\";\r\n        this.locale = locale;\r\n        this.country = country;\r\n        this.authTokenCallback = authTokenCallback;\r\n        this.augLoopCallback = augLoopCallback;\r\n        this.app = app;\r\n        this.platform = platform;\r\n        this.version = version;\r\n        this.sessionId = sessionId;\r\n        this.campaignFlights = campaignFlights;\r\n        this.campaignParameters = campaignParameters;\r\n        this.ageGroup = ageGroup;\r\n        this.authenticationType = authenticationType;\r\n        this.messagingServiceSettings = messagingServiceSettings;\r\n        var internalEnvs = [\"dogfood\", \"edog\", \"int\", \"microsoft\"];\r\n        var isInternalEnv = audience && internalEnvs.indexOf(audience.toLowerCase()) !== -1;\r\n        var tmsConfigBaseUrlPrefix = isInternalEnv ? (_a = this.messagingServiceSettings) === null || _a === void 0 ? void 0 : _a.messagingServiceIntUrl : (_b = this.messagingServiceSettings) === null || _b === void 0 ? void 0 : _b.messagingServiceProdUrl;\r\n        var tmsDefaultBaseUrlPrefix = isInternalEnv ? _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"TMS_BASEURL_PREFIX_EDOG\"] : _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"TMS_BASEURL_PREFIX_PROD\"];\r\n        this.tmsBaseUrlPrefix = tmsConfigBaseUrlPrefix || tmsDefaultBaseUrlPrefix;\r\n        this.tmsgCache = this.tmsgCache || tmsgCacheIn || new _TargetedMessagingCache__WEBPACK_IMPORTED_MODULE_4__[\"TargetedMessagingCache\"]([\r\n            \"MessageMetadata\" /* messageMetadata */,\r\n            \"UserGovernance\" /* userGovernanceRules */,\r\n            \"CampaignContent\" /* campaignContent */,\r\n            \"DynamicSettings\" /* dynamicSettings */,\r\n            \"LogLevelSettings\" /* logLevelSettings */,\r\n            \"UserFacts\" /* userFacts */,\r\n        ]);\r\n    }\r\n    TargetedMessagingClient.prototype.getContent = function (requestedContent) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var response;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.tmsgCache.isItemExpired(requestedContent)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.refreshItemsInCacheFromTmsService([requestedContent])];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        response = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.getMultipleContents = function (requestedContent) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var contentResponses, bulkRefreshList, _i, requestedContent_1, contentType, responseItem;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.refreshItemsInCacheFromTmsService(requestedContent)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        contentResponses = new Array();\r\n                        bulkRefreshList = new Array();\r\n                        for (_i = 0, requestedContent_1 = requestedContent; _i < requestedContent_1.length; _i++) {\r\n                            contentType = requestedContent_1[_i];\r\n                            responseItem = this.createCachedContentResponse(contentType);\r\n                            contentResponses.push(responseItem);\r\n                        }\r\n                        this.refreshItemsInCacheFromTmsService(bulkRefreshList);\r\n                        return [2 /*return*/, contentResponses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.getUserFactsContent = function (requestedContent) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var response;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.refreshItemsInCacheFromTulipsService(requestedContent)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        response = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.sendBeaconRequestToService = function (app, beaconParameters, platform, version, locale, country, sessionId, authTokenCallback) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var tmsAppId, authToken, puid, _a, requestStartTime, tmsQueryParams, requestBody, response, error_1;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.sessionId = sessionId;\r\n                        this.authTokenCallback = authTokenCallback;\r\n                        tmsAppId = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsAppId\" /* tmsAppId */, _Constants__WEBPACK_IMPORTED_MODULE_5__[\"GUIDs\"].TMSAppID);\r\n                        return [4 /*yield*/, this.getAuthToken(tmsAppId)];\r\n                    case 1:\r\n                        authToken = _b.sent();\r\n                        puid = undefined;\r\n                        if (!!authToken) return [3 /*break*/, 4];\r\n                        _a = this.authTokenCallback.getUserPuid;\r\n                        if (!_a) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.authTokenCallback.getUserPuid()];\r\n                    case 2:\r\n                        _a = (_b.sent());\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        puid = _a;\r\n                        _b.label = 4;\r\n                    case 4:\r\n                        requestStartTime = +new Date();\r\n                        _b.label = 5;\r\n                    case 5:\r\n                        _b.trys.push([5, 7, , 8]);\r\n                        tmsQueryParams = {\r\n                            app: app,\r\n                            country: country,\r\n                            locale: locale,\r\n                            platform: platform,\r\n                            puid: puid,\r\n                            version: version,\r\n                        };\r\n                        requestBody = JSON.stringify({\r\n                            actionName: beaconParameters.actionName,\r\n                            actionUrl: beaconParameters.actionUrl,\r\n                        });\r\n                        return [4 /*yield*/, this.sendRequest(tmsQueryParams, authToken, \"TmsActionUrl\" /* tmsActionUrl */, this.tmsBaseUrlPrefix + _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"TMS_SETCAMPAIGNACTION_ENDPOINT\"] + \"?\", requestBody, \"POST\")];\r\n                    case 6:\r\n                        response = _b.sent();\r\n                        if (!response || response.status !== 200) {\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 2 /* Error */, this.createTelemetryData(requestStartTime, response, \"Beacon\" + beaconParameters.actionName));\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        return [2 /*return*/, true];\r\n                    case 7:\r\n                        error_1 = _b.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 2 /* Error */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ ErrorMessage: \"Error fetching from TMS SetCampaignAction endpoint\" + (error_1 && error_1.message ? \": \" + error_1.message : \"\") }, this.createTelemetryData(requestStartTime, null, \"Beacon\" + beaconParameters.actionName)));\r\n                        return [2 /*return*/, false];\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.getCachedContent = function (requestedContent) {\r\n        return this.tmsgCache.getItemContent(requestedContent);\r\n    };\r\n    TargetedMessagingClient.prototype.getAugLoopUserFactsContent = function (requestedContent) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var response;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.tmsgCache.isItemExpired(\"UserFacts\" /* userFacts */)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.refreshUserFactsInCacheFromAugLoop()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        response = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.refreshUserFactsInCacheFromAugLoop = function () {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var cachedUserFacts, requestStartTime, userFacts, annotationName, augLoopSessionPromise, response, augLoopError, error_2;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.tmsgCache.isItemExpired(\"UserFacts\" /* userFacts */)) {\r\n                            cachedUserFacts = this.tmsgCache.getItemContent(\"UserFacts\" /* userFacts */);\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.AugLoop.Requests.VALUE, 3 /* Info */, {\r\n                                Count: cachedUserFacts ? cachedUserFacts.length : -1,\r\n                                Type: \"AugLoopUserFactsCached\",\r\n                                Flights: this.campaignFlights,\r\n                            });\r\n                            return [2 /*return*/, cachedUserFacts];\r\n                        }\r\n                        requestStartTime = +new Date();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        annotationName = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TulipsAugLoopAnnotationName\" /* tulipsAugLoopAnnotationName */, \"AugLoop_User_UserLifecycleFactsAnnotation\");\r\n                        augLoopSessionPromise = this.augLoopCallback.getRuntimeSession;\r\n                        return [4 /*yield*/, Object(_AugLoopHelper__WEBPACK_IMPORTED_MODULE_10__[\"getAugLoopAnnotationData\"])(annotationName, augLoopSessionPromise)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (response && response.userFacts) {\r\n                            userFacts = this.addClientIngestionTimeAndNormalizeKeysInArray(response.userFacts);\r\n                            this.tmsgCache.setContentItem(\"UserFacts\" /* userFacts */, userFacts, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_USERFACTS\"]);\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.AugLoop.Requests.VALUE, 3 /* Info */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ Count: userFacts ? userFacts.length : -1 }, this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\")));\r\n                        }\r\n                        else {\r\n                            augLoopError = response && response.error;\r\n                            _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.AugLoop.Error.VALUE, 2 /* Error */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ ErrorMessage: \"Error getting augloop facts \" + (augLoopError && augLoopError.toString()) }, this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\")));\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_2 = _a.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.AugLoop.Error.VALUE, 2 /* Error */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ ErrorMessage: \"Error getting facts \" + (error_2 && error_2.message) }, this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\")));\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/, userFacts];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.createTelemetryData = function (requestStartTimestamp, response, type) {\r\n        var _a = response || {}, headers = _a.headers, status = _a.status, statusText = _a.statusText;\r\n        var serverSessionId = headers && headers.get(\"X-UserSessionId\");\r\n        var serverCorrelationId = headers && headers.get(\"X-CorrelationId\");\r\n        return {\r\n            Type: type,\r\n            TimeMilliseconds: +new Date() - requestStartTimestamp,\r\n            SessionId: serverSessionId || this.sessionId,\r\n            CorrelationId: serverCorrelationId || undefined,\r\n            HttpStatusCode: status || undefined,\r\n            HttpStatusText: statusText || undefined,\r\n            Flights: this.campaignFlights,\r\n        };\r\n    };\r\n    TargetedMessagingClient.prototype.sendRequest = function (tmsgQueryParams, authToken, key, defaultBaseUrl, requestBody, verb) {\r\n        this.tmsgTransport = this.tmsgTransport || new _TargetedMessagingTransport__WEBPACK_IMPORTED_MODULE_2__[\"TargetedMessagingTransport\"](this.sessionId);\r\n        var queryParamStr = Object(_Common_UrlUtils__WEBPACK_IMPORTED_MODULE_3__[\"buildQueryParameters\"])(tmsgQueryParams);\r\n        var tmsgBaseUrl = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(key, defaultBaseUrl);\r\n        var requestPromise = verb === \"POST\" ?\r\n            this.tmsgTransport.sendPostRequest(tmsgBaseUrl + queryParamStr, requestBody, authToken) :\r\n            this.tmsgTransport.sendGetRequest(tmsgBaseUrl + queryParamStr, authToken);\r\n        return requestPromise;\r\n    };\r\n    TargetedMessagingClient.prototype.retrieveCacheItemAndCreateContentResponse = function (contentType) {\r\n        var responseItem = this.createCachedContentResponse(contentType);\r\n        if (this.tmsgCache.isItemExpired(contentType)) {\r\n            if (contentType === \"UserFacts\" /* userFacts */) {\r\n                this.refreshItemsInCacheFromTulipsService(contentType);\r\n            }\r\n            else {\r\n                this.refreshItemsInCacheFromTmsService([contentType]);\r\n            }\r\n        }\r\n        return responseItem;\r\n    };\r\n    TargetedMessagingClient.prototype.createCachedContentResponse = function (requestedContent) {\r\n        var contentResponse = new ContentResponse();\r\n        contentResponse.content = this.tmsgCache.getItemContent(requestedContent);\r\n        contentResponse.contentType = requestedContent;\r\n        return contentResponse;\r\n    };\r\n    TargetedMessagingClient.prototype.getAuthToken = function (appIdOrUri) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var startTime, getDuration, createAuthTelemetryData, retVal, error_3;\r\n            var _this = this;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.authTokenCallback || !this.authTokenCallback.getAuthToken) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        startTime = +new Date();\r\n                        getDuration = function () { return +new Date() - startTime; };\r\n                        createAuthTelemetryData = function (errorMessage) {\r\n                            if (errorMessage === void 0) { errorMessage = undefined; }\r\n                            return {\r\n                                ErrorMessage: errorMessage,\r\n                                SessionId: _this.sessionId,\r\n                                TimeMilliseconds: getDuration(),\r\n                                Type: appIdOrUri,\r\n                            };\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.authTokenCallback.getAuthToken(appIdOrUri)];\r\n                    case 2:\r\n                        retVal = _a.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Info.VALUE, 3 /* Info */, createAuthTelemetryData());\r\n                        return [2 /*return*/, retVal];\r\n                    case 3:\r\n                        error_3 = _a.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 2 /* Error */, createAuthTelemetryData(\"Error getting token \" + (error_3 && error_3.message ? \": \" + error_3.message : \"\")));\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/, null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.refreshItemsInCacheFromTmsService = function (contentTypes) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var bulkRefreshList, _i, contentTypes_1, contentType, tmsAppId, authToken, userPuid, _a, requestStartTime, documentElement, browserParams, debugOverrides, tmsQueryParams, response, tmsServiceResponse, error_4;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (contentTypes.length === 0) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        bulkRefreshList = new Array();\r\n                        for (_i = 0, contentTypes_1 = contentTypes; _i < contentTypes_1.length; _i++) {\r\n                            contentType = contentTypes_1[_i];\r\n                            if (this.tmsgCache.isItemExpired(contentType)) {\r\n                                bulkRefreshList.push(contentType);\r\n                            }\r\n                        }\r\n                        if (bulkRefreshList.length === 0) {\r\n                            // exit out if all items in cache are still valid to avoid unnecessary service roundtrips \r\n                            return [2 /*return*/];\r\n                        }\r\n                        // always request for dynamic settings\r\n                        if (contentTypes.indexOf(\"DynamicSettings\" /* dynamicSettings */) === -1) {\r\n                            contentTypes.push(\"DynamicSettings\" /* dynamicSettings */);\r\n                        }\r\n                        tmsAppId = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsAppId\" /* tmsAppId */, _Constants__WEBPACK_IMPORTED_MODULE_5__[\"GUIDs\"].TMSAppID);\r\n                        return [4 /*yield*/, this.getAuthToken(tmsAppId)];\r\n                    case 1:\r\n                        authToken = _b.sent();\r\n                        userPuid = undefined;\r\n                        if (!!authToken) return [3 /*break*/, 4];\r\n                        _a = this.authTokenCallback.getUserPuid;\r\n                        if (!_a) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.authTokenCallback.getUserPuid()];\r\n                    case 2:\r\n                        _a = (_b.sent());\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        userPuid = _a;\r\n                        _b.label = 4;\r\n                    case 4:\r\n                        requestStartTime = +new Date();\r\n                        _b.label = 5;\r\n                    case 5:\r\n                        _b.trys.push([5, 10, , 11]);\r\n                        documentElement = document && (document.documentElement || document.getElementsByTagName(\"body\")[0]);\r\n                        browserParams = {\r\n                            pageWidth: window.innerWidth || documentElement.clientWidth,\r\n                            pageHeight: window.innerHeight || documentElement.clientHeight,\r\n                            screenWidth: screen ? screen.width : undefined,\r\n                            screenHeight: screen ? screen.height : undefined,\r\n                            colorDepth: screen ? screen.colorDepth : undefined,\r\n                        };\r\n                        debugOverrides = _FloodgateCore_FloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_9__[\"default\"].safeReadObject(_ms_ofb_officefloodgatecore_dist_src_Api_IFloodgateStorageProvider__WEBPACK_IMPORTED_MODULE_1__[\"FileType\"].DebugOverrides, {});\r\n                        tmsQueryParams = debugOverrides.replaceTmsQueryParams || Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ country: this.country, locale: this.locale, app: this.app, platform: this.platform, version: this.version, campaignParams: Object(_Common_UrlUtils__WEBPACK_IMPORTED_MODULE_3__[\"buildQueryParameters\"])(browserParams) + \"&more=true&\" + (this.campaignParameters || \"\"), contentType: contentTypes.join(\";\"), puid: userPuid, OFC_FLIGHTS: this.campaignFlights }, (debugOverrides.addTmsQueryParams || {})), { ageGroup: this.ageGroup, authenticationType: this.authenticationType });\r\n                        return [4 /*yield*/, this.sendRequest(tmsQueryParams, authToken, \"TmsServiceUrl\" /* tmsServiceUrl */, this.tmsBaseUrlPrefix + _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT\"] + \"?\")];\r\n                    case 6:\r\n                        response = _b.sent();\r\n                        if (!(response.status === 200)) return [3 /*break*/, 8];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 7:\r\n                        tmsServiceResponse = _b.sent();\r\n                        if (contentTypes.indexOf(\"MessageMetadata\" /* messageMetadata */) !== -1\r\n                            && tmsServiceResponse.MessageMetadata !== undefined) {\r\n                            this.tmsgCache.setContentItem(\"MessageMetadata\" /* messageMetadata */, tmsServiceResponse.MessageMetadata, Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsMessageMetadataExpiry\" /* tmsMessageMetadataExpiry */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_MESSAGEMETADATA\"]));\r\n                        }\r\n                        if (contentTypes.indexOf(\"UserGovernance\" /* userGovernanceRules */) !== -1\r\n                            && tmsServiceResponse.UserGovernanceRules !== undefined) {\r\n                            this.tmsgCache.setContentItem(\"UserGovernance\" /* userGovernanceRules */, tmsServiceResponse.UserGovernanceRules, Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsUserGovernanceRulesExpiry\" /* tmsUserGovernanceRulesExpiry */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_USERGOVERNANCERULES\"]));\r\n                        }\r\n                        if (contentTypes.indexOf(\"CampaignContent\" /* campaignContent */) !== -1\r\n                            && tmsServiceResponse.CampaignContent !== undefined) {\r\n                            this.tmsgCache.setContentItem(\"CampaignContent\" /* campaignContent */, tmsServiceResponse.CampaignContent, Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsCampaignContentExpiry\" /* tmsCampaignContentExpiry */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_CAMPAIGNCONTENT\"]));\r\n                        }\r\n                        // There is no explicit request for the next set of ContentTypes in the code\r\n                        // If the server responds with these types save and use them later\r\n                        if (tmsServiceResponse.DynamicSettings !== undefined) {\r\n                            this.tmsgCache.setContentItem(\"DynamicSettings\" /* dynamicSettings */, tmsServiceResponse.DynamicSettings, Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsDynamicSettingsExpiry\" /* tmsDynamicSettingsExpiry */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_DYNAMICSETTINGS\"]));\r\n                        }\r\n                        if (tmsServiceResponse.LogLevelSettings !== undefined) {\r\n                            this.tmsgCache.setContentItem(\"LogLevelSettings\" /* logLevelSettings */, tmsServiceResponse.LogLevelSettings, Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TmsLogLevelSettingsExpiry\" /* tmsLogLevelSettingsExpiry */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_LOGLEVELSETTINGS\"]));\r\n                        }\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Messaging.Requests.VALUE, 3 /* Info */, this.createTelemetryData(requestStartTime, response, contentTypes.join(\";\")));\r\n                        return [3 /*break*/, 9];\r\n                    case 8:\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 2 /* Error */, this.createTelemetryData(requestStartTime, response, contentTypes.join(\";\")));\r\n                        _b.label = 9;\r\n                    case 9: return [3 /*break*/, 11];\r\n                    case 10:\r\n                        error_4 = _b.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].WebSurfaces.Common.Error.VALUE, 2 /* Error */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ ErrorMessage: \"Error fetching from TMS\" + (error_4 && error_4.message ? \": \" + error_4.message : \"\") }, this.createTelemetryData(requestStartTime, null, contentTypes.join(\";\"))));\r\n                        return [3 /*break*/, 11];\r\n                    case 11: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.refreshItemsInCacheFromTulipsService = function (contentType) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var tulipsAppId, authToken, requestStartTime, response, tulipsServiceResponse, normalizedUserFacts, error_5;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        // check if touched item is actually due for refresh or is still valid\r\n                        if (!this.tmsgCache.isItemExpired(contentType)) {\r\n                            // exit out if the cache is still valid to avoid unnecessary service roundtrips\r\n                            return [2 /*return*/];\r\n                        }\r\n                        tulipsAppId = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_8__[\"getDynamicSetting\"])(\"TulipsAppId\" /* tulipsAppId */, _Constants__WEBPACK_IMPORTED_MODULE_5__[\"GUIDs\"].TULIPSAppID);\r\n                        return [4 /*yield*/, this.getAuthToken(tulipsAppId)];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        if (!authToken) {\r\n                            // if authToken is null then exit out since service call cannot be made without authToken\r\n                            return [2 /*return*/];\r\n                        }\r\n                        requestStartTime = +new Date();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 7, , 8]);\r\n                        return [4 /*yield*/, this.sendRequest({}, authToken, \"TulipsServiceUrl\" /* tulipsServiceUrl */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"TULIPS_SERVICEURL\"])];\r\n                    case 3:\r\n                        response = _a.sent();\r\n                        if (!(response.status === 200 || response.status === 204)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 4:\r\n                        tulipsServiceResponse = _a.sent();\r\n                        if (contentType.indexOf(\"UserFacts\" /* userFacts */) !== -1\r\n                            && tulipsServiceResponse !== undefined) {\r\n                            normalizedUserFacts = this.addClientIngestionTimeAndNormalizeKeys(tulipsServiceResponse);\r\n                            this.tmsgCache.setContentItem(\"UserFacts\" /* userFacts */, normalizedUserFacts, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_7__[\"CACHE_EXPIRY_USERFACTS\"]);\r\n                        }\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.Messaging.Requests.VALUE, 3 /* Info */, this.createTelemetryData(requestStartTime, response, contentType));\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.Common.Error.VALUE, 2 /* Error */, this.createTelemetryData(requestStartTime, response, contentType));\r\n                        _a.label = 6;\r\n                    case 6: return [3 /*break*/, 8];\r\n                    case 7:\r\n                        error_5 = _a.sent();\r\n                        _Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_6__[\"EventIds\"].UserFacts.Common.Error.VALUE, 2 /* Error */, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({ ErrorMessage: \"Error fetching from TULIPS\" + (error_5 && error_5.message ? \": \" + error_5.message : \"\") }, this.createTelemetryData(requestStartTime, null, contentType)));\r\n                        return [3 /*break*/, 8];\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.addClientIngestionTimeAndNormalizeKeys = function (tulipsServiceResponse) {\r\n        var _this = this;\r\n        var currentDateTime = new Date(Date.now()).toISOString();\r\n        return tulipsServiceResponse.map(function (responseFact) {\r\n            var fact = _this.normalizeKeys(responseFact);\r\n            fact.clientIngestionDateTime = currentDateTime;\r\n            return fact;\r\n        });\r\n    };\r\n    TargetedMessagingClient.prototype.addClientIngestionTimeAndNormalizeKeysInArray = function (userFacts) {\r\n        var _this = this;\r\n        var currentDateTime = new Date(Date.now()).toISOString();\r\n        return userFacts.map(function (userFact) {\r\n            var fact = _this.normalizeKeys(userFact);\r\n            fact.clientIngestionDateTime = currentDateTime;\r\n            return fact;\r\n        });\r\n    };\r\n    /**\r\n     * This method normalizes the keys of the user fact object retrieved from the TULIPS service.\r\n     * Specifically it converts the first letter of each key in the object to lower case.\r\n     * For example the key \"UserFactType\" returned from the service will be converted to \"userFactType\".\r\n     * @param userFact the user fact object\r\n     */\r\n    TargetedMessagingClient.prototype.normalizeKeys = function (userFact) {\r\n        var normalizedUserFact = {};\r\n        for (var _i = 0, _a = Object.keys(userFact); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            var normalizedKey = (key.charAt(0).toLowerCase() + key.substring(1));\r\n            normalizedUserFact[normalizedKey] = userFact[key];\r\n        }\r\n        return normalizedUserFact;\r\n    };\r\n    return TargetedMessagingClient;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/TargetedMessagingClient.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts":
/*!*********************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts ***!
  \*********************************************************************/
/*! exports provided: CACHE_EXPIRY_MESSAGEMETADATA, CACHE_EXPIRY_USERGOVERNANCERULES, CACHE_EXPIRY_CAMPAIGNCONTENT, CACHE_EXPIRY_DYNAMICSETTINGS, CACHE_EXPIRY_LOGLEVELSETTINGS, CACHE_EXPIRY_USERFACTS, TMS_BASEURL_PREFIX_EDOG, TMS_BASEURL_PREFIX_PROD, TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT, TMS_SETCAMPAIGNACTION_ENDPOINT, TMS_CAMPAIGN_LOAD_TIMEOUT, TMS_FETCH_TIMEOUT, TULIPS_SERVICEURL, TULIPS_LOAD_TIMEOUT, TULIPS_FETCH_TIMEOUT, TULIPS_INGESTION_TIME, AUGLOOP_INIT_CHECK_RETRY_TIMES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_MESSAGEMETADATA\", function() { return CACHE_EXPIRY_MESSAGEMETADATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_USERGOVERNANCERULES\", function() { return CACHE_EXPIRY_USERGOVERNANCERULES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_CAMPAIGNCONTENT\", function() { return CACHE_EXPIRY_CAMPAIGNCONTENT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_DYNAMICSETTINGS\", function() { return CACHE_EXPIRY_DYNAMICSETTINGS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_LOGLEVELSETTINGS\", function() { return CACHE_EXPIRY_LOGLEVELSETTINGS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CACHE_EXPIRY_USERFACTS\", function() { return CACHE_EXPIRY_USERFACTS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_BASEURL_PREFIX_EDOG\", function() { return TMS_BASEURL_PREFIX_EDOG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_BASEURL_PREFIX_PROD\", function() { return TMS_BASEURL_PREFIX_PROD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT\", function() { return TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_SETCAMPAIGNACTION_ENDPOINT\", function() { return TMS_SETCAMPAIGNACTION_ENDPOINT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_CAMPAIGN_LOAD_TIMEOUT\", function() { return TMS_CAMPAIGN_LOAD_TIMEOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TMS_FETCH_TIMEOUT\", function() { return TMS_FETCH_TIMEOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TULIPS_SERVICEURL\", function() { return TULIPS_SERVICEURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TULIPS_LOAD_TIMEOUT\", function() { return TULIPS_LOAD_TIMEOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TULIPS_FETCH_TIMEOUT\", function() { return TULIPS_FETCH_TIMEOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TULIPS_INGESTION_TIME\", function() { return TULIPS_INGESTION_TIME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AUGLOOP_INIT_CHECK_RETRY_TIMES\", function() { return AUGLOOP_INIT_CHECK_RETRY_TIMES; });\nvar CACHE_EXPIRY_MESSAGEMETADATA = 14400000; // expiry in ms - 4hrs\r\nvar CACHE_EXPIRY_USERGOVERNANCERULES = 14400000; // expiry in ms - 4hrs\r\nvar CACHE_EXPIRY_CAMPAIGNCONTENT = 14400000; // expiry in ms - 4hrs\r\nvar CACHE_EXPIRY_DYNAMICSETTINGS = 14400000; // expiry in ms - 4hrs\r\nvar CACHE_EXPIRY_LOGLEVELSETTINGS = 14400000; // expiry in ms - 4hrs\r\nvar CACHE_EXPIRY_USERFACTS = 86400000; // expiry in ms - 24hrs\r\nvar TMS_BASEURL_PREFIX_EDOG = \"https://messaging.officeppe.com/lifecycle/\";\r\nvar TMS_BASEURL_PREFIX_PROD = \"https://messaging.office.com/lifecycle/\";\r\nvar TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT = \"CampaignMetadataAggregator\";\r\nvar TMS_SETCAMPAIGNACTION_ENDPOINT = \"SetCampaignAction\";\r\nvar TMS_CAMPAIGN_LOAD_TIMEOUT = 1000;\r\nvar TMS_FETCH_TIMEOUT = 5000; // timeout for fetching tms service requests\r\nvar TULIPS_SERVICEURL = \"https://substrate.office.com/OfficePersonalizationUserLifecycle/api/facts\";\r\nvar TULIPS_LOAD_TIMEOUT = 1000;\r\nvar TULIPS_FETCH_TIMEOUT = 5000; // timeout for fetching tulips service requests\r\nvar TULIPS_INGESTION_TIME = 24 * 60 * 60 * 1000; // Tulips ingestion time\r\nvar AUGLOOP_INIT_CHECK_RETRY_TIMES = 5;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ0NvbnN0YW50cy50cz9hOTQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFPLElBQU0sNEJBQTRCLEdBQUcsUUFBUSxDQUFDLENBQUMsc0JBQXNCO0FBQ3JFLElBQU0sZ0NBQWdDLEdBQUcsUUFBUSxDQUFDLENBQUMsc0JBQXNCO0FBQ3pFLElBQU0sNEJBQTRCLEdBQUcsUUFBUSxDQUFDLENBQUMsc0JBQXNCO0FBQ3JFLElBQU0sNEJBQTRCLEdBQUcsUUFBUSxDQUFDLENBQUMsc0JBQXNCO0FBQ3JFLElBQU0sNkJBQTZCLEdBQUcsUUFBUSxDQUFDLENBQUMsc0JBQXNCO0FBQ3RFLElBQU0sc0JBQXNCLEdBQUcsUUFBUSxDQUFDLENBQUMsdUJBQXVCO0FBRWhFLElBQU0sdUJBQXVCLEdBQUcsNENBQTRDLENBQUM7QUFDN0UsSUFBTSx1QkFBdUIsR0FBRyx5Q0FBeUMsQ0FBQztBQUMxRSxJQUFNLHVDQUF1QyxHQUFHLDRCQUE0QixDQUFDO0FBQzdFLElBQU0sOEJBQThCLEdBQUcsbUJBQW1CLENBQUM7QUFDM0QsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUM7QUFFdkMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsQ0FBQyw0Q0FBNEM7QUFFNUUsSUFBTSxpQkFBaUIsR0FDN0IsMkVBQTJFLENBQUM7QUFFdEUsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUM7QUFFakMsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQ0FBQywrQ0FBK0M7QUFFbEYsSUFBTSxxQkFBcUIsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyx3QkFBd0I7QUFFM0UsSUFBTSw4QkFBOEIsR0FBRyxDQUFDLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ0NvbnN0YW50cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDQUNIRV9FWFBJUllfTUVTU0FHRU1FVEFEQVRBID0gMTQ0MDAwMDA7IC8vIGV4cGlyeSBpbiBtcyAtIDRocnNcclxuZXhwb3J0IGNvbnN0IENBQ0hFX0VYUElSWV9VU0VSR09WRVJOQU5DRVJVTEVTID0gMTQ0MDAwMDA7IC8vIGV4cGlyeSBpbiBtcyAtIDRocnNcclxuZXhwb3J0IGNvbnN0IENBQ0hFX0VYUElSWV9DQU1QQUlHTkNPTlRFTlQgPSAxNDQwMDAwMDsgLy8gZXhwaXJ5IGluIG1zIC0gNGhyc1xyXG5leHBvcnQgY29uc3QgQ0FDSEVfRVhQSVJZX0RZTkFNSUNTRVRUSU5HUyA9IDE0NDAwMDAwOyAvLyBleHBpcnkgaW4gbXMgLSA0aHJzXHJcbmV4cG9ydCBjb25zdCBDQUNIRV9FWFBJUllfTE9HTEVWRUxTRVRUSU5HUyA9IDE0NDAwMDAwOyAvLyBleHBpcnkgaW4gbXMgLSA0aHJzXHJcbmV4cG9ydCBjb25zdCBDQUNIRV9FWFBJUllfVVNFUkZBQ1RTID0gODY0MDAwMDA7IC8vIGV4cGlyeSBpbiBtcyAtIDI0aHJzXHJcblxyXG5leHBvcnQgY29uc3QgVE1TX0JBU0VVUkxfUFJFRklYX0VET0cgPSBcImh0dHBzOi8vbWVzc2FnaW5nLm9mZmljZXBwZS5jb20vbGlmZWN5Y2xlL1wiO1xyXG5leHBvcnQgY29uc3QgVE1TX0JBU0VVUkxfUFJFRklYX1BST0QgPSBcImh0dHBzOi8vbWVzc2FnaW5nLm9mZmljZS5jb20vbGlmZWN5Y2xlL1wiO1xyXG5leHBvcnQgY29uc3QgVE1TX0NBTVBBSUdOTUVUQURBVEFBR0dSRUdBVE9SX0VORFBPSU5UID0gXCJDYW1wYWlnbk1ldGFkYXRhQWdncmVnYXRvclwiO1xyXG5leHBvcnQgY29uc3QgVE1TX1NFVENBTVBBSUdOQUNUSU9OX0VORFBPSU5UID0gXCJTZXRDYW1wYWlnbkFjdGlvblwiO1xyXG5leHBvcnQgY29uc3QgVE1TX0NBTVBBSUdOX0xPQURfVElNRU9VVCA9IDEwMDA7XHJcblxyXG5leHBvcnQgY29uc3QgVE1TX0ZFVENIX1RJTUVPVVQgPSA1MDAwOyAvLyB0aW1lb3V0IGZvciBmZXRjaGluZyB0bXMgc2VydmljZSByZXF1ZXN0c1xyXG5cclxuZXhwb3J0IGNvbnN0IFRVTElQU19TRVJWSUNFVVJMID1cclxuXHRcImh0dHBzOi8vc3Vic3RyYXRlLm9mZmljZS5jb20vT2ZmaWNlUGVyc29uYWxpemF0aW9uVXNlckxpZmVjeWNsZS9hcGkvZmFjdHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBUVUxJUFNfTE9BRF9USU1FT1VUID0gMTAwMDtcclxuXHJcbmV4cG9ydCBjb25zdCBUVUxJUFNfRkVUQ0hfVElNRU9VVCA9IDUwMDA7IC8vIHRpbWVvdXQgZm9yIGZldGNoaW5nIHR1bGlwcyBzZXJ2aWNlIHJlcXVlc3RzXHJcblxyXG5leHBvcnQgY29uc3QgVFVMSVBTX0lOR0VTVElPTl9USU1FID0gMjQgKiA2MCAqIDYwICogMTAwMDsgLy8gVHVsaXBzIGluZ2VzdGlvbiB0aW1lXHJcblxyXG5leHBvcnQgY29uc3QgQVVHTE9PUF9JTklUX0NIRUNLX1JFVFJZX1RJTUVTID0gNTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts":
/*!*********************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts ***!
  \*********************************************************************/
/*! exports provided: TargetedMessagingTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TargetedMessagingTransport\", function() { return TargetedMessagingTransport; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _Polyfills_Fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Polyfills/Fetch */ \"./scripts/app/Polyfills/Fetch.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n\r\n\r\n\r\n\r\nvar isNOU = _Utils__WEBPACK_IMPORTED_MODULE_3__[\"isNOU\"];\r\nvar TargetedMessagingTransport = /** @class */ (function () {\r\n    function TargetedMessagingTransport(sessionId) {\r\n        this.sessionId = sessionId;\r\n    }\r\n    TargetedMessagingTransport.prototype.sendGetRequest = function (requestUrl, token, useTimeout, timeout) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var requestInit;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                requestInit = {\r\n                    method: \"GET\",\r\n                    headers: this.createHeaders(token),\r\n                };\r\n                return [2 /*return*/, useTimeout ?\r\n                        this.timeoutFetch(requestUrl, requestInit, timeout !== null && timeout !== void 0 ? timeout : _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__[\"TMS_FETCH_TIMEOUT\"]) :\r\n                        fetch(requestUrl, requestInit)];\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingTransport.prototype.sendPostRequest = function (requestUrl, requestBody, token, useTimeout, timeout) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var requestInit;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\r\n                requestInit = {\r\n                    method: \"POST\",\r\n                    headers: this.createHeaders(token),\r\n                    body: requestBody,\r\n                };\r\n                return [2 /*return*/, useTimeout ?\r\n                        this.timeoutFetch(requestUrl, requestInit, timeout !== null && timeout !== void 0 ? timeout : _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_2__[\"TMS_FETCH_TIMEOUT\"]) :\r\n                        fetch(requestUrl, requestInit)];\r\n            });\r\n        });\r\n    };\r\n    TargetedMessagingTransport.prototype.createHeaders = function (token) {\r\n        var headers = typeof Headers !== \"undefined\" && new Headers();\r\n        if (headers) {\r\n            if (!isNOU(token)) {\r\n                headers.append(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n            headers.append(\"X-CorrelationId\", _Utils__WEBPACK_IMPORTED_MODULE_3__[\"guid\"]());\r\n            if (this.sessionId) {\r\n                headers.append(\"X-UserSessionId\", this.sessionId);\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    TargetedMessagingTransport.prototype.timeoutFetch = function (input, init, timeout) {\r\n        if (init === void 0) { init = {}; }\r\n        return new Promise(function (resolve, reject) {\r\n            fetch(input, init).then(resolve, reject);\r\n            setTimeout(function () { return reject(new Error(\"Service request timed out\")); }, timeout);\r\n        });\r\n    };\r\n    return TargetedMessagingTransport;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ1RyYW5zcG9ydC50cz8xMmE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEI7QUFDaUM7QUFDM0I7QUFFMUIsU0FBSyxHQUFLLDRDQUFMLENBQVc7QUFFeEI7SUFDQyxvQ0FBb0IsU0FBa0I7UUFBbEIsY0FBUyxHQUFULFNBQVMsQ0FBUztJQUN0QyxDQUFDO0lBRVksbURBQWMsR0FBM0IsVUFBNEIsVUFBa0IsRUFBRSxLQUFjLEVBQUUsVUFBb0IsRUFBRSxPQUFnQjs7OztnQkFDL0YsV0FBVyxHQUFHO29CQUNuQixNQUFNLEVBQUUsS0FBSztvQkFDYixPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7aUJBQ2xDLENBQUM7Z0JBRUYsc0JBQU8sVUFBVSxDQUFDLENBQUM7d0JBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSw2RUFBOEIsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZGLEtBQUssQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQUM7OztLQUNoQztJQUVZLG9EQUFlLEdBQTVCLFVBQ0MsVUFBa0IsRUFBRSxXQUFtQixFQUFFLEtBQWMsRUFBRSxVQUFvQixFQUFFLE9BQWdCOzs7O2dCQUN6RixXQUFXLEdBQUc7b0JBQ25CLE1BQU0sRUFBRSxNQUFNO29CQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztvQkFDbEMsSUFBSSxFQUFFLFdBQVc7aUJBQ2pCLENBQUM7Z0JBRUYsc0JBQU8sVUFBVSxDQUFDLENBQUM7d0JBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSw2RUFBOEIsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZGLEtBQUssQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQUM7OztLQUNoQztJQUVTLGtEQUFhLEdBQXZCLFVBQXdCLEtBQWM7UUFDckMsSUFBTSxPQUFPLEdBQVksT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekUsSUFBSSxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNsQixPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUM7YUFDbkQ7WUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLDJDQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDbEQ7U0FDRDtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2hCLENBQUM7SUFFTyxpREFBWSxHQUFwQixVQUFxQixLQUFrQixFQUFFLElBQXNCLEVBQUUsT0FBZTtRQUF2QyxnQ0FBc0I7UUFDOUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2xDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6QyxVQUFVLENBQUMsY0FBTSxhQUFNLENBQ3RCLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUMsRUFEdkIsQ0FDdUIsRUFDdkMsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRixpQ0FBQztBQUFELENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9UYXJnZXRlZE1lc3NhZ2luZy9UYXJnZXRlZE1lc3NhZ2luZ1RyYW5zcG9ydC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL1BvbHlmaWxscy9GZXRjaFwiO1xyXG5pbXBvcnQgKiBhcyBUbXNDb25zdGFudHMgZnJvbSBcIi4vVGFyZ2V0ZWRNZXNzYWdpbmdDb25zdGFudHNcIjtcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uL1V0aWxzXCI7XHJcblxyXG5jb25zdCB7IGlzTk9VIH0gPSBVdGlscztcclxuXHJcbmV4cG9ydCBjbGFzcyBUYXJnZXRlZE1lc3NhZ2luZ1RyYW5zcG9ydCB7XHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBzZXNzaW9uSWQ/OiBzdHJpbmcpIHtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBhc3luYyBzZW5kR2V0UmVxdWVzdChyZXF1ZXN0VXJsOiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VUaW1lb3V0PzogYm9vbGVhbiwgdGltZW91dD86IG51bWJlcik6IFByb21pc2U8UmVzcG9uc2U+IHtcclxuXHRcdGNvbnN0IHJlcXVlc3RJbml0ID0ge1xyXG5cdFx0XHRtZXRob2Q6IFwiR0VUXCIsXHJcblx0XHRcdGhlYWRlcnM6IHRoaXMuY3JlYXRlSGVhZGVycyh0b2tlbiksXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiB1c2VUaW1lb3V0ID9cclxuXHRcdFx0dGhpcy50aW1lb3V0RmV0Y2gocmVxdWVzdFVybCwgcmVxdWVzdEluaXQsIHRpbWVvdXQgPz8gVG1zQ29uc3RhbnRzLlRNU19GRVRDSF9USU1FT1VUKSA6XHJcblx0XHRcdGZldGNoKHJlcXVlc3RVcmwsIHJlcXVlc3RJbml0KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBhc3luYyBzZW5kUG9zdFJlcXVlc3QoXHJcblx0XHRyZXF1ZXN0VXJsOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VUaW1lb3V0PzogYm9vbGVhbiwgdGltZW91dD86IG51bWJlcik6IFByb21pc2U8UmVzcG9uc2U+IHtcclxuXHRcdGNvbnN0IHJlcXVlc3RJbml0ID0ge1xyXG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxyXG5cdFx0XHRoZWFkZXJzOiB0aGlzLmNyZWF0ZUhlYWRlcnModG9rZW4pLFxyXG5cdFx0XHRib2R5OiByZXF1ZXN0Qm9keSxcclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHVzZVRpbWVvdXQgP1xyXG5cdFx0XHR0aGlzLnRpbWVvdXRGZXRjaChyZXF1ZXN0VXJsLCByZXF1ZXN0SW5pdCwgdGltZW91dCA/PyBUbXNDb25zdGFudHMuVE1TX0ZFVENIX1RJTUVPVVQpIDpcclxuXHRcdFx0ZmV0Y2gocmVxdWVzdFVybCwgcmVxdWVzdEluaXQpO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIGNyZWF0ZUhlYWRlcnModG9rZW4/OiBzdHJpbmcpOiBIZWFkZXJzIHtcclxuXHRcdGNvbnN0IGhlYWRlcnM6IEhlYWRlcnMgPSB0eXBlb2YgSGVhZGVycyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuZXcgSGVhZGVycygpO1xyXG5cdFx0aWYgKGhlYWRlcnMpIHtcclxuXHRcdFx0aWYgKCFpc05PVSh0b2tlbikpIHtcclxuXHRcdFx0XHRoZWFkZXJzLmFwcGVuZChcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhlYWRlcnMuYXBwZW5kKFwiWC1Db3JyZWxhdGlvbklkXCIsIFV0aWxzLmd1aWQoKSk7XHJcblx0XHRcdGlmICh0aGlzLnNlc3Npb25JZCkge1xyXG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKFwiWC1Vc2VyU2Vzc2lvbklkXCIsIHRoaXMuc2Vzc2lvbklkKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBoZWFkZXJzO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSB0aW1lb3V0RmV0Y2goaW5wdXQ6IFJlcXVlc3RJbmZvLCBpbml0OiBSZXF1ZXN0SW5pdCA9IHt9LCB0aW1lb3V0OiBudW1iZXIpOiBQcm9taXNlPFJlc3BvbnNlPiB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHJlamVjdChcclxuXHRcdFx0XHRuZXcgRXJyb3IoXCJTZXJ2aWNlIHJlcXVlc3QgdGltZWQgb3V0XCIpKSxcclxuXHRcdFx0XHR0aW1lb3V0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts\n");

/***/ }),

/***/ "./scripts/app/TargetedMessaging/UserFactsProvider.ts":
/*!************************************************************!*\
  !*** ./scripts/app/TargetedMessaging/UserFactsProvider.ts ***!
  \************************************************************/
/*! exports provided: UserFactsProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UserFactsProvider\", function() { return UserFactsProvider; });\n/* harmony import */ var _Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Configuration/DynamicConfiguration */ \"./scripts/app/Configuration/DynamicConfiguration.ts\");\n/* harmony import */ var _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TargetedMessagingConstants */ \"./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts\");\n/* harmony import */ var _AssetsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AssetsProvider */ \"./scripts/app/TargetedMessaging/AssetsProvider.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _LocalUserFactHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LocalUserFactHelper */ \"./scripts/app/TargetedMessaging/LocalUserFactHelper.ts\");\n/**\r\n * UserFactsProvider.ts\r\n *\r\n * Module for user facts provider.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar UserFactsProvider = /** @class */ (function () {\r\n    function UserFactsProvider() {\r\n        this.loadAsyncTriggered = false;\r\n        this.userFacts = [];\r\n        this.nameAndUserFactMap = {};\r\n    }\r\n    UserFactsProvider.prototype.load = function () {\r\n        if (!this.loadAsyncTriggered) {\r\n            this.loadAsync();\r\n            this.loadAsyncTriggered = true;\r\n        }\r\n        return this.userFacts || [];\r\n    };\r\n    UserFactsProvider.prototype.loadAsync = function () {\r\n        var _this = this;\r\n        var userFactsPromise = _AssetsProvider__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getUserFacts().then(function (userFacts) {\r\n            _this.loadUserFacts(userFacts);\r\n        });\r\n        var timeoutMilliseconds = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_0__[\"getDynamicSetting\"])(\"TulipsLoadTimeout\" /* tulipsLoadTimeout */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_1__[\"TULIPS_LOAD_TIMEOUT\"]);\r\n        var timeoutPromise = Object(_Utils__WEBPACK_IMPORTED_MODULE_4__[\"createTimeoutPromise\"])(timeoutMilliseconds, userFactsPromise);\r\n        return timeoutPromise.then(function () { return _this.userFacts; }).catch(function () {\r\n            if (!_this.userFacts || _this.userFacts.length <= 0) {\r\n                _this.loadUserFacts(_AssetsProvider__WEBPACK_IMPORTED_MODULE_2__[\"get\"]().getCachedUserFacts());\r\n            }\r\n            return _this.userFacts;\r\n        }).catch(function () { return _this.userFacts; });\r\n    };\r\n    UserFactsProvider.prototype.getUserFact = function (userFactName) {\r\n        var userFact = this.nameAndUserFactMap[userFactName];\r\n        if (userFact || this.nameAndUserFactMap.hasOwnProperty(userFactName)) {\r\n            return userFact;\r\n        }\r\n        userFact = this.nameAndUserFactMap[userFactName] = Object(_LocalUserFactHelper__WEBPACK_IMPORTED_MODULE_5__[\"getLocalUserFact\"])(userFactName);\r\n        return userFact;\r\n    };\r\n    UserFactsProvider.prototype.loadUserFacts = function (response) {\r\n        var _this = this;\r\n        if (response) {\r\n            this.userFacts = response || [];\r\n            this.userFacts.map(function (userFact) {\r\n                _this.nameAndUserFactMap[userFact.userFactName] = userFact;\r\n            });\r\n            this.loadAsyncTriggered = true;\r\n            this.logUserFactInfo(this.userFacts);\r\n        }\r\n    };\r\n    UserFactsProvider.prototype.logUserFactInfo = function (userFacts) {\r\n        if (!userFacts || userFacts.length <= 0) {\r\n            return;\r\n        }\r\n        var tulipsIngestionTimeInterval = Object(_Configuration_DynamicConfiguration__WEBPACK_IMPORTED_MODULE_0__[\"getDynamicSetting\"])(\"TulipsIngestionTimeInterval\" /* tulipsIngestionTimeInterval */, _TargetedMessagingConstants__WEBPACK_IMPORTED_MODULE_1__[\"TULIPS_INGESTION_TIME\"]);\r\n        if (tulipsIngestionTimeInterval <= 0) {\r\n            return;\r\n        }\r\n        var userFactProperties;\r\n        try {\r\n            var nowDate_1 = Date.now();\r\n            var isExpired_1 = function (rawItemDate) {\r\n                var itemDate = Date.parse(rawItemDate);\r\n                return !isNaN(itemDate) ? nowDate_1 - itemDate > tulipsIngestionTimeInterval : true;\r\n            };\r\n            var factInfo = {\r\n                Count: userFacts.length,\r\n                RefreshTime: tulipsIngestionTimeInterval,\r\n                IngestionTime: userFacts[0].clientIngestionDateTime,\r\n                SourcesExpired: userFacts.filter(function (userFact) { return userFact && isExpired_1(userFact.sourceDateTime); }).length || undefined,\r\n                StoragesExpired: userFacts.filter(function (userFact) { return userFact && isExpired_1(userFact.storageDateTime); }).length || undefined,\r\n                IngestionsExpired: userFacts.filter(function (userFact) { return userFact && isExpired_1(userFact.clientIngestionDateTime); }).length || undefined,\r\n            };\r\n            userFactProperties = {\r\n                Message: \"UserFacts\",\r\n                Data: JSON.stringify(factInfo),\r\n            };\r\n        }\r\n        catch (error) {\r\n            userFactProperties = {\r\n                ErrorMessage: \"Error getting UserFact info\",\r\n            };\r\n        }\r\n        _Logging_Logging__WEBPACK_IMPORTED_MODULE_3__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_3__[\"EventIds\"].UserFacts.Provider.Info.VALUE, 3 /* Info */, userFactProperties);\r\n    };\r\n    return UserFactsProvider;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/TargetedMessaging/UserFactsProvider.ts\n");

/***/ }),

/***/ "./scripts/app/Transport/Files/Manifest.ts":
/*!*************************************************!*\
  !*** ./scripts/app/Transport/Files/Manifest.ts ***!
  \*************************************************/
/*! exports provided: Manifest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Manifest\", function() { return Manifest; });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Constants */ \"./scripts/app/Constants.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../Version */ \"./scripts/app/Version.ts\");\n/* harmony import */ var _Window_Window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../Window/Window */ \"./scripts/app/Window/Window.ts\");\n/**\r\n * Manifest.ts\r\n * Module for managing the manifest file\r\n */\r\n\r\n\r\n\r\n\r\nvar Manifest = /** @class */ (function () {\r\n    function Manifest(manifestType, appId, submitTime, type, clientFeedbackId, applicationGroup, telemetryGroup, webGroup) {\r\n        this.manifestData = {\r\n            appId: appId,\r\n            application: applicationGroup,\r\n            clientFeedbackId: clientFeedbackId,\r\n            manifestType: manifestType,\r\n            source: \"Client\",\r\n            submitTime: submitTime,\r\n            telemetry: telemetryGroup,\r\n            type: sanitizeType(type),\r\n            web: webGroup,\r\n            sdkVersion: _Constants__WEBPACK_IMPORTED_MODULE_0__[\"SDK_VERSION_PREFIX\"]\r\n                + (_Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().OfficeBrowserFeedback.sdkVersion !== undefined ?\r\n                    _Window_Window__WEBPACK_IMPORTED_MODULE_3__[\"get\"]().OfficeBrowserFeedback.sdkVersion : _Version__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\r\n        };\r\n    }\r\n    Manifest.prototype.getExtendedManifestData = function () {\r\n        return this.manifestData.application.extendedManifestData;\r\n    };\r\n    Manifest.prototype.setComment = function (comment) {\r\n        this.manifestData.comment = comment;\r\n    };\r\n    Manifest.prototype.setEmail = function (email) {\r\n        this.manifestData.email = email;\r\n    };\r\n    Manifest.prototype.setCategory = function (category) {\r\n        this.manifestData.telemetry = this.manifestData.telemetry || {};\r\n        this.manifestData.telemetry.featureArea = category;\r\n    };\r\n    Manifest.prototype.setAppData = function (appData) {\r\n        this.manifestData.application = this.manifestData.application || {};\r\n        this.manifestData.application.appData = appData;\r\n    };\r\n    Manifest.prototype.setExtendedManifestData = function (extendedManifestData) {\r\n        this.manifestData.application = this.manifestData.application || {};\r\n        this.manifestData.application.extendedManifestData = extendedManifestData;\r\n    };\r\n    Manifest.prototype.setClientFeedbackId = function (clientFeedbackId) {\r\n        this.manifestData.clientFeedbackId = clientFeedbackId;\r\n    };\r\n    Manifest.prototype.getClientFeedbackId = function () {\r\n        return this.manifestData.clientFeedbackId;\r\n    };\r\n    Manifest.prototype.setComplianceInformation = function (authenticationType, ageGroup, sendFeedbackPolicyValue, sendSurveyPolicyValue, screenshotPolicyValue, emailPolicyValue) {\r\n        this.manifestData.complianceChecks = {\r\n            authenticationType: authenticationType,\r\n            ageGroup: ageGroup,\r\n            policyAllowFeedback: sendFeedbackPolicyValue,\r\n            policyAllowSurvey: sendSurveyPolicyValue,\r\n            policyAllowScreenshot: screenshotPolicyValue,\r\n            policyAllowContact: emailPolicyValue,\r\n        };\r\n    };\r\n    /**\r\n     * Set freeform custom values in manifest. Throws if values are already set.\r\n     * @param values the values as a JS object\r\n     */\r\n    Manifest.prototype.setValues = function (values) {\r\n        if (values) {\r\n            for (var field in values) {\r\n                if (values.hasOwnProperty(field)) {\r\n                    if (this.manifestData.hasOwnProperty(field)) {\r\n                        this.manifestData[field] = _Utils__WEBPACK_IMPORTED_MODULE_1__[\"overrideValues\"](values[field], this.manifestData[field]);\r\n                    }\r\n                    else {\r\n                        this.manifestData[field] = values[field];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Manifest.prototype.getContent = function () {\r\n        return new Blob([JSON.stringify(this.manifestData)], { type: \"application/json\" });\r\n    };\r\n    return Manifest;\r\n}());\r\n\r\nfunction sanitizeType(type) {\r\n    if (type === \"Survey\") {\r\n        return type;\r\n    }\r\n    else {\r\n        return _Constants__WEBPACK_IMPORTED_MODULE_0__[\"FeedbackType\"][type];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UcmFuc3BvcnQvRmlsZXMvTWFuaWZlc3QudHM/Y2NmZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0dBR0c7QUFHa0U7QUFDOUI7QUFDRDtBQUNVO0FBRWhEO0lBR0Msa0JBQW1CLFlBQW9CLEVBQUUsS0FBYSxFQUFFLFVBQWtCLEVBQUUsSUFBMEIsRUFDckcsZ0JBQXdCLEVBQUUsZ0JBQTBDLEVBQUUsY0FBc0MsRUFDNUcsUUFBMEI7UUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNuQixLQUFLLEVBQUUsS0FBSztZQUNaLFdBQVcsRUFBRSxnQkFBZ0I7WUFDN0IsZ0JBQWdCLEVBQUUsZ0JBQWdCO1lBQ2xDLFlBQVksRUFBRSxZQUFZO1lBQzFCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLFNBQVMsRUFBRSxjQUFjO1lBQ3pCLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3hCLEdBQUcsRUFBRSxRQUFRO1lBQ2IsVUFBVSxFQUFFLDZEQUFrQjtrQkFDM0IsQ0FBQyxrREFBVSxFQUFFLENBQUMscUJBQXFCLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxDQUFDO29CQUMvRCxrREFBVSxFQUFFLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnREFBTyxDQUFDO1NBQzFELENBQUM7SUFDSCxDQUFDO0lBRU0sMENBQXVCLEdBQTlCO1FBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztJQUMzRCxDQUFDO0lBRU0sNkJBQVUsR0FBakIsVUFBa0IsT0FBZTtRQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDckMsQ0FBQztJQUVNLDJCQUFRLEdBQWYsVUFBZ0IsS0FBYTtRQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVNLDhCQUFXLEdBQWxCLFVBQW1CLFFBQWdCO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO0lBQ3BELENBQUM7SUFFTSw2QkFBVSxHQUFqQixVQUFrQixPQUFlO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ2pELENBQUM7SUFFTSwwQ0FBdUIsR0FBOUIsVUFBK0Isb0JBQTRCO1FBQzFELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztJQUMzRSxDQUFDO0lBRU0sc0NBQW1CLEdBQTFCLFVBQTJCLGdCQUF3QjtRQUNsRCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0lBQ3ZELENBQUM7SUFFTSxzQ0FBbUIsR0FBMUI7UUFDQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQztJQUVNLDJDQUF3QixHQUEvQixVQUFnQyxrQkFBMEIsRUFBRSxRQUFnQixFQUFFLHVCQUErQixFQUM1RyxxQkFBNkIsRUFBRSxxQkFBNkIsRUFBRSxnQkFBd0I7UUFDdEYsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRztZQUNwQyxrQkFBa0IsRUFBRSxrQkFBa0I7WUFDdEMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsbUJBQW1CLEVBQUUsdUJBQXVCO1lBQzVDLGlCQUFpQixFQUFFLHFCQUFxQjtZQUN4QyxxQkFBcUIsRUFBRSxxQkFBcUI7WUFDNUMsa0JBQWtCLEVBQUUsZ0JBQWdCO1NBQ3BDLENBQUM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksNEJBQVMsR0FBaEIsVUFBaUIsTUFBYztRQUM5QixJQUFJLE1BQU0sRUFBRTtZQUNYLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFO2dCQUN6QixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2pDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ3JDLElBQUksQ0FBQyxZQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcscURBQW9CLENBQVEsTUFBTyxDQUFDLEtBQUssQ0FBQyxFQUFTLElBQUksQ0FBQyxZQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztxQkFDakg7eUJBQU07d0JBQ0MsSUFBSSxDQUFDLFlBQWEsQ0FBQyxLQUFLLENBQUMsR0FBVSxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3pEO2lCQUNEO2FBQ0Q7U0FDRDtJQUNGLENBQUM7SUFFTSw2QkFBVSxHQUFqQjtRQUNDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBQ0YsZUFBQztBQUFELENBQUM7O0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBMEI7SUFDL0MsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDO0tBQ1o7U0FBTTtRQUNOLE9BQU8sdURBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQjtBQUNGLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9UcmFuc3BvcnQvRmlsZXMvTWFuaWZlc3QudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTWFuaWZlc3QudHNcclxuICogTW9kdWxlIGZvciBtYW5hZ2luZyB0aGUgbWFuaWZlc3QgZmlsZVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IElGaWxlIH0gZnJvbSBcIi4vSUZpbGVcIjtcclxuaW1wb3J0IHsgRmVlZGJhY2tUeXBlLCBTREtfVkVSU0lPTl9QUkVGSVggfSBmcm9tIFwiLi8uLi8uLi9Db25zdGFudHNcIjtcclxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vLi4vVXRpbHNcIjtcclxuaW1wb3J0IFZlcnNpb24gZnJvbSBcIi4vLi4vLi4vVmVyc2lvblwiO1xyXG5pbXBvcnQgKiBhcyBXaW5kb3cgZnJvbSBcIi4vLi4vLi4vV2luZG93L1dpbmRvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hbmlmZXN0IGltcGxlbWVudHMgSUZpbGUge1xyXG5cdHByaXZhdGUgbWFuaWZlc3REYXRhOiBJTWFuaWZlc3REYXRhO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IobWFuaWZlc3RUeXBlOiBzdHJpbmcsIGFwcElkOiBudW1iZXIsIHN1Ym1pdFRpbWU6IHN0cmluZywgdHlwZTogTWFuaWZlc3RGZWVkYmFja1R5cGUsXHJcblx0XHRjbGllbnRGZWVkYmFja0lkOiBzdHJpbmcsIGFwcGxpY2F0aW9uR3JvdXA6IElNYW5pZmVzdERhdGFBcHBsaWNhdGlvbiwgdGVsZW1ldHJ5R3JvdXA6IElNYW5pZmVzdERhdGFUZWxlbWV0cnksXHJcblx0XHR3ZWJHcm91cDogSU1hbmlmZXN0RGF0YVdlYikge1xyXG5cdFx0dGhpcy5tYW5pZmVzdERhdGEgPSB7XHJcblx0XHRcdGFwcElkOiBhcHBJZCxcclxuXHRcdFx0YXBwbGljYXRpb246IGFwcGxpY2F0aW9uR3JvdXAsXHJcblx0XHRcdGNsaWVudEZlZWRiYWNrSWQ6IGNsaWVudEZlZWRiYWNrSWQsXHJcblx0XHRcdG1hbmlmZXN0VHlwZTogbWFuaWZlc3RUeXBlLFxyXG5cdFx0XHRzb3VyY2U6IFwiQ2xpZW50XCIsXHJcblx0XHRcdHN1Ym1pdFRpbWU6IHN1Ym1pdFRpbWUsXHJcblx0XHRcdHRlbGVtZXRyeTogdGVsZW1ldHJ5R3JvdXAsXHJcblx0XHRcdHR5cGU6IHNhbml0aXplVHlwZSh0eXBlKSxcclxuXHRcdFx0d2ViOiB3ZWJHcm91cCxcclxuXHRcdFx0c2RrVmVyc2lvbjogU0RLX1ZFUlNJT05fUFJFRklYXHJcblx0XHRcdFx0KyAoV2luZG93LmdldCgpLk9mZmljZUJyb3dzZXJGZWVkYmFjay5zZGtWZXJzaW9uICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0V2luZG93LmdldCgpLk9mZmljZUJyb3dzZXJGZWVkYmFjay5zZGtWZXJzaW9uIDogVmVyc2lvbiksXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEV4dGVuZGVkTWFuaWZlc3REYXRhKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYW5pZmVzdERhdGEuYXBwbGljYXRpb24uZXh0ZW5kZWRNYW5pZmVzdERhdGE7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0Q29tbWVudChjb21tZW50OiBzdHJpbmcpIHtcclxuXHRcdHRoaXMubWFuaWZlc3REYXRhLmNvbW1lbnQgPSBjb21tZW50O1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldEVtYWlsKGVtYWlsOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMubWFuaWZlc3REYXRhLmVtYWlsID0gZW1haWw7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0Q2F0ZWdvcnkoY2F0ZWdvcnk6IHN0cmluZykge1xyXG5cdFx0dGhpcy5tYW5pZmVzdERhdGEudGVsZW1ldHJ5ID0gdGhpcy5tYW5pZmVzdERhdGEudGVsZW1ldHJ5IHx8IHt9O1xyXG5cdFx0dGhpcy5tYW5pZmVzdERhdGEudGVsZW1ldHJ5LmZlYXR1cmVBcmVhID0gY2F0ZWdvcnk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0QXBwRGF0YShhcHBEYXRhOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMubWFuaWZlc3REYXRhLmFwcGxpY2F0aW9uID0gdGhpcy5tYW5pZmVzdERhdGEuYXBwbGljYXRpb24gfHwge307XHJcblx0XHR0aGlzLm1hbmlmZXN0RGF0YS5hcHBsaWNhdGlvbi5hcHBEYXRhID0gYXBwRGF0YTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRFeHRlbmRlZE1hbmlmZXN0RGF0YShleHRlbmRlZE1hbmlmZXN0RGF0YTogc3RyaW5nKSB7XHJcblx0XHR0aGlzLm1hbmlmZXN0RGF0YS5hcHBsaWNhdGlvbiA9IHRoaXMubWFuaWZlc3REYXRhLmFwcGxpY2F0aW9uIHx8IHt9O1xyXG5cdFx0dGhpcy5tYW5pZmVzdERhdGEuYXBwbGljYXRpb24uZXh0ZW5kZWRNYW5pZmVzdERhdGEgPSBleHRlbmRlZE1hbmlmZXN0RGF0YTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRDbGllbnRGZWVkYmFja0lkKGNsaWVudEZlZWRiYWNrSWQ6IHN0cmluZykge1xyXG5cdFx0dGhpcy5tYW5pZmVzdERhdGEuY2xpZW50RmVlZGJhY2tJZCA9IGNsaWVudEZlZWRiYWNrSWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0Q2xpZW50RmVlZGJhY2tJZCgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFuaWZlc3REYXRhLmNsaWVudEZlZWRiYWNrSWQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0Q29tcGxpYW5jZUluZm9ybWF0aW9uKGF1dGhlbnRpY2F0aW9uVHlwZTogc3RyaW5nLCBhZ2VHcm91cDogc3RyaW5nLCBzZW5kRmVlZGJhY2tQb2xpY3lWYWx1ZTogc3RyaW5nLFxyXG5cdFx0c2VuZFN1cnZleVBvbGljeVZhbHVlOiBzdHJpbmcsIHNjcmVlbnNob3RQb2xpY3lWYWx1ZTogc3RyaW5nLCBlbWFpbFBvbGljeVZhbHVlOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMubWFuaWZlc3REYXRhLmNvbXBsaWFuY2VDaGVja3MgPSB7XHJcblx0XHRcdGF1dGhlbnRpY2F0aW9uVHlwZTogYXV0aGVudGljYXRpb25UeXBlLFxyXG5cdFx0XHRhZ2VHcm91cDogYWdlR3JvdXAsXHJcblx0XHRcdHBvbGljeUFsbG93RmVlZGJhY2s6IHNlbmRGZWVkYmFja1BvbGljeVZhbHVlLFxyXG5cdFx0XHRwb2xpY3lBbGxvd1N1cnZleTogc2VuZFN1cnZleVBvbGljeVZhbHVlLFxyXG5cdFx0XHRwb2xpY3lBbGxvd1NjcmVlbnNob3Q6IHNjcmVlbnNob3RQb2xpY3lWYWx1ZSxcclxuXHRcdFx0cG9saWN5QWxsb3dDb250YWN0OiBlbWFpbFBvbGljeVZhbHVlLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldCBmcmVlZm9ybSBjdXN0b20gdmFsdWVzIGluIG1hbmlmZXN0LiBUaHJvd3MgaWYgdmFsdWVzIGFyZSBhbHJlYWR5IHNldC5cclxuXHQgKiBAcGFyYW0gdmFsdWVzIHRoZSB2YWx1ZXMgYXMgYSBKUyBvYmplY3RcclxuXHQgKi9cclxuXHRwdWJsaWMgc2V0VmFsdWVzKHZhbHVlczogb2JqZWN0KSB7XHJcblx0XHRpZiAodmFsdWVzKSB7XHJcblx0XHRcdGZvciAobGV0IGZpZWxkIGluIHZhbHVlcykge1xyXG5cdFx0XHRcdGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5tYW5pZmVzdERhdGEuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XHJcblx0XHRcdFx0XHRcdCg8YW55PiB0aGlzLm1hbmlmZXN0RGF0YSlbZmllbGRdID0gVXRpbHMub3ZlcnJpZGVWYWx1ZXMoKDxhbnk+IHZhbHVlcylbZmllbGRdLCAoPGFueT4gdGhpcy5tYW5pZmVzdERhdGEpW2ZpZWxkXSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQoPGFueT4gdGhpcy5tYW5pZmVzdERhdGEpW2ZpZWxkXSA9ICg8YW55PiB2YWx1ZXMpW2ZpZWxkXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRDb250ZW50KCk6IEJsb2Ige1xyXG5cdFx0cmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeSh0aGlzLm1hbmlmZXN0RGF0YSldLCB7IHR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiIH0pO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2FuaXRpemVUeXBlKHR5cGU6IE1hbmlmZXN0RmVlZGJhY2tUeXBlKTogc3RyaW5nIHtcclxuXHRpZiAodHlwZSA9PT0gXCJTdXJ2ZXlcIikge1xyXG5cdFx0cmV0dXJuIHR5cGU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiBGZWVkYmFja1R5cGVbdHlwZV07XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNYW5pZmVzdEZlZWRiYWNrVHlwZSA9IEZlZWRiYWNrVHlwZSB8IFwiU3VydmV5XCI7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciB0aGUgbWFuaWZlc3QgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWFuaWZlc3REYXRhIHtcclxuXHQvLyAjcmVnaW9uIFwiUmVxdWlyZWQgcHJvcGVydGllc1wiXHJcblx0bWFuaWZlc3RUeXBlOiBzdHJpbmc7XHJcblx0YXBwSWQ6IG51bWJlcjtcclxuXHRzdWJtaXRUaW1lOiBzdHJpbmc7XHJcblx0c291cmNlOiBzdHJpbmc7XHJcblx0dHlwZTogc3RyaW5nO1xyXG5cdGNsaWVudEZlZWRiYWNrSWQ6IHN0cmluZztcclxuXHRzZGtWZXJzaW9uOiBzdHJpbmc7XHJcblx0Ly8gI2VuZHJlZ2lvbiBcIlJlcXVpcmVkIHByb3BlcnRpZXNcIlxyXG5cdGNvbW1lbnQ/OiBzdHJpbmc7XHJcblx0ZW1haWw/OiBzdHJpbmc7XHJcblx0cmF0aW5nPzogbnVtYmVyO1xyXG5cdHN1cnZleT86IElNYW5pZmVzdERhdGFTdXJ2ZXk7XHJcblx0d2ViPzogSU1hbmlmZXN0RGF0YVdlYjtcclxuXHRhcHBsaWNhdGlvbj86IElNYW5pZmVzdERhdGFBcHBsaWNhdGlvbjtcclxuXHR0ZWxlbWV0cnk/OiBJTWFuaWZlc3REYXRhVGVsZW1ldHJ5O1xyXG5cdGNvbXBsaWFuY2VDaGVja3M/OiBJTWFuaWZlc3RDb21wbGlhbmNlQ2hlY2tzO1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBzdXJ2ZXkgcmVsYXRlZCBwcm9wZXJ0aWVzIGluIG1hbmlmZXN0XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNYW5pZmVzdERhdGFTdXJ2ZXkge1xyXG5cdHN1cnZleUlkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIGFwcGxpY2F0aW9uIHJlbGF0ZWQgcHJvcGVydGllcyBpbiBtYW5pZmVzdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWFuaWZlc3REYXRhQXBwbGljYXRpb24ge1xyXG5cdGFwcERhdGE/OiBzdHJpbmc7XHJcblx0ZXh0ZW5kZWRNYW5pZmVzdERhdGE/OiBzdHJpbmc7XHJcblx0ZmVlZGJhY2tUZW5hbnQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIHRlbGVtZXRyeSByZWxhdGVkIHByb3BlcnRpZXMgaW4gbWFuaWZlc3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1hbmlmZXN0RGF0YVRlbGVtZXRyeSB7XHJcblx0YXVkaWVuY2U/OiBzdHJpbmc7XHJcblx0YXVkaWVuY2VHcm91cD86IHN0cmluZztcclxuXHRjaGFubmVsPzogc3RyaW5nO1xyXG5cdGRldmljZUlkPzogc3RyaW5nO1xyXG5cdGRldmljZVR5cGU/OiBzdHJpbmc7XHJcblx0ZXJyb3JDbGFzc2lmaWNhdGlvbj86IHN0cmluZztcclxuXHRlcnJvckNvZGU/OiBzdHJpbmc7XHJcblx0ZXJyb3JOYW1lPzogc3RyaW5nO1xyXG5cdGZlYXR1cmVBcmVhPzogc3RyaW5nO1xyXG5cdGZsaWdodHM/OiBzdHJpbmc7XHJcblx0ZmxpZ2h0U291cmNlPzogc3RyaW5nO1xyXG5cdGZ1bmRhbWVudGFsQXJlYT86IHN0cmluZztcclxuXHRpbnN0YWxsYXRpb25UeXBlPzogc3RyaW5nO1xyXG5cdGlzTG9nSW5jbHVkZWQ/OiBib29sZWFuO1xyXG5cdGlzVXNlclN1YnNjcmliZXI/OiBib29sZWFuO1xyXG5cdGxvZ2dhYmxlVXNlcklkPzogc3RyaW5nO1xyXG5cdG9mZmljZUFyY2hpdGVjdHVyZT86IHN0cmluZztcclxuXHRvZmZpY2VCdWlsZD86IHN0cmluZztcclxuXHRvZmZpY2VFZGl0aW5nTGFuZz86IG51bWJlcjtcclxuXHRvZmZpY2VVSUxhbmc/OiBudW1iZXI7XHJcblx0b3NCaXRuZXNzPzogbnVtYmVyO1xyXG5cdG9zQnVpbGQ/OiBzdHJpbmc7XHJcblx0b3NVc2VyTGFuZz86IG51bWJlcjtcclxuXHRwbGF0Zm9ybT86IHN0cmluZztcclxuXHRwcm9jZXNzU2Vzc2lvbklkPzogc3RyaW5nO1xyXG5cdHJpbmdJZD86IG51bWJlcjtcclxuXHRza3U/OiBzdHJpbmc7XHJcblx0c291cmNlQ29udGV4dD86IHN0cmluZztcclxuXHRzeXN0ZW1Qcm9kdWN0TmFtZT86IHN0cmluZztcclxuXHRzeXN0ZW1NYW51ZmFjdHVyZXI/OiBzdHJpbmc7XHJcblx0dGVuYW50SWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIHdlYiByZWxhdGVkIHByb3BlcnRpZXMgaW4gbWFuaWZlc3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1hbmlmZXN0RGF0YVdlYiB7XHJcblx0YnJvd3Nlcj86IHN0cmluZztcclxuXHRicm93c2VyVmVyc2lvbj86IHN0cmluZztcclxuXHRkYXRhQ2VudGVyPzogc3RyaW5nO1xyXG5cdHNvdXJjZVBhZ2VOYW1lPzogc3RyaW5nO1xyXG5cdHNvdXJjZVBhZ2VVUkk/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIGNvbXBsaWFuY2UgY2hlY2tzIHJlbGF0ZWQgcHJvcGVydGllcyBpbiBtYW5pZmVzdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWFuaWZlc3RDb21wbGlhbmNlQ2hlY2tzIHtcclxuXHRhdXRoZW50aWNhdGlvblR5cGU/OiBzdHJpbmc7XHJcblx0YWdlR3JvdXA/OiBzdHJpbmc7XHJcblx0cG9saWN5QWxsb3dGZWVkYmFjaz86IHN0cmluZztcclxuXHRwb2xpY3lBbGxvd1N1cnZleT86IHN0cmluZztcclxuXHRwb2xpY3lBbGxvd1NjcmVlbnNob3Q/OiBzdHJpbmc7XHJcblx0cG9saWN5QWxsb3dDb250YWN0Pzogc3RyaW5nO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./scripts/app/Transport/Files/Manifest.ts\n");

/***/ }),

/***/ "./scripts/app/Transport/Files/Screenshot.ts":
/*!***************************************************!*\
  !*** ./scripts/app/Transport/Files/Screenshot.ts ***!
  \***************************************************/
/*! exports provided: Screenshot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Screenshot\", function() { return Screenshot; });\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/**\r\n * Screenshot.ts\r\n * Module for managing the screenshot file\r\n */\r\n\r\nvar Screenshot = /** @class */ (function () {\r\n    function Screenshot(screenshot) {\r\n        this.screenshot = screenshot;\r\n    }\r\n    Screenshot.prototype.getContent = function () {\r\n        var imgString;\r\n        try {\r\n            imgString = this.screenshot.toDataURL(\"image/jpeg\").split(\",\")[1];\r\n        }\r\n        catch (e) {\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_0__[\"EventIds\"].Shared.Screenshot.GetContent.Failed.DefaultImage.Returned.VALUE, 2 /* Error */, { ErrorMessage: e.toString() });\r\n            // return an image with \"Screenshot cannot be captured\" message\r\n            imgString = \"iVBORw0KGgoAAAANSUhEUgAAAN0AAAA+AQMAAACV2ox1AAAABGdBTUEAALGPC/xhBQAAAAZQTFRFAAAA////pdmf3QAAAAlwSFlzAAAOwgAADsIBFShKgAAAAjtJREFUSMfV1M1rE0EUAHDBa5r8A9vkL6giFiI0JH+Ih9KLx8TaukkJugShHgrJzYvkVPQkUqgwSePLEELaU+zBg8JKVvSQQNydlsadwCQzziRZ82ETxYMfc3gD8+MxjzcfV8T80f0vkQ8i68tAPSMSQ0PkI6QDpEPkZBHy1Wp1/zjni2lrZq2T2uikDG17A54Hr0vsvwXIl3WXt02zeIHQBSq3DxHk7VO55zIFgLLrcmaaQBGiqCwQArBVQTbNZODNBB5Ee2EEr5eGiDG4k5mcqcy+Ksh+N8K2+bRI1Z68fRMVoV+XmcFwpQJZGohpkds1WtjppGLaq51a2b8yp310UW9/H8VfRj68CIKRsWCFPCCEM419S4bSAOmPmdb3TBrQ4lmnt9n4/Hiv5fTunsOzXbJfLR2rU3Fd5ugOe9mw0lvNOCNxyDdIHkpHCv0S3a+MS0yT+4wkAKx1gBJeVxeMRhSeNZpXJfY+zqAVl+g0mCFRJMgs6oy9+MCMrWZaJJwiWFjuWcIShf+Wk2W9e59OHu21WPdsswZNLKs9wV77mJiaMVbBQ+/1jGZDofFLuOBU/jzG6OQKnkLOZ5EvwolMX2Q19TAX9MWyy/aNarewfZptechdLn8B3TatB/YXB2j4MKw3jTHKX4AO0CbqaSddMokHUbr0PpSXmFG4O4WIu86asCVihfoM6nUmse5gGkbJOyThVesX4UI0d00LBYMr55VuIZl8MkY1uOiTy9v3c+ShuXj5+NdQdL8B+5gmw8WZuREAAAAASUVORK5CYII=\";\r\n        }\r\n        var blobBin = atob(imgString);\r\n        var array = [];\r\n        for (var i = 0; i < blobBin.length; i++) {\r\n            array.push(blobBin.charCodeAt(i));\r\n        }\r\n        var file = new Blob([new Uint8Array(array)], { type: \"image/jpeg\" });\r\n        return file;\r\n    };\r\n    return Screenshot;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UcmFuc3BvcnQvRmlsZXMvU2NyZWVuc2hvdC50cz83OTlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7R0FHRztBQUlnRDtBQUVuRDtJQUdDLG9CQUFhLFVBQTZCO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQzlCLENBQUM7SUFFTSwrQkFBVSxHQUFqQjtRQUNDLElBQUksU0FBaUIsQ0FBQztRQUN0QixJQUFJO1lBQ0gsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsMERBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMseURBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxpQkFDcEYsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUV6RCwrREFBK0Q7WUFDL0QsU0FBUyxHQUFHLGs1QkFBazVCLENBQUM7U0FDLzVCO1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsSUFBSSxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBQyxDQUFDLENBQUM7UUFFekUsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBQ0YsaUJBQUM7QUFBRCxDQUFDIiwiZmlsZSI6Ii4vc2NyaXB0cy9hcHAvVHJhbnNwb3J0L0ZpbGVzL1NjcmVlbnNob3QudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU2NyZWVuc2hvdC50c1xyXG4gKiBNb2R1bGUgZm9yIG1hbmFnaW5nIHRoZSBzY3JlZW5zaG90IGZpbGVcclxuICovXHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZSBtYXgtbGluZS1sZW5ndGggKi9cclxuaW1wb3J0IHtJRmlsZX0gZnJvbSBcIi4vSUZpbGVcIjtcclxuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi8uLi8uLi9Mb2dnaW5nL0xvZ2dpbmdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTY3JlZW5zaG90IGltcGxlbWVudHMgSUZpbGUge1xyXG5cdHByaXZhdGUgc2NyZWVuc2hvdDogSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yIChzY3JlZW5zaG90OiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG5cdFx0dGhpcy5zY3JlZW5zaG90ID0gc2NyZWVuc2hvdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRDb250ZW50KCk6IEJsb2Ige1xyXG5cdFx0bGV0IGltZ1N0cmluZzogc3RyaW5nO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0aW1nU3RyaW5nID0gdGhpcy5zY3JlZW5zaG90LnRvRGF0YVVSTChcImltYWdlL2pwZWdcIikuc3BsaXQoXCIsXCIpWzFdO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRMb2dnaW5nLmdldExvZ2dlcigpLmxvZ0V2ZW50KExvZ2dpbmcuRXZlbnRJZHMuU2hhcmVkLlNjcmVlbnNob3QuR2V0Q29udGVudC5GYWlsZWQuRGVmYXVsdEltYWdlLlJldHVybmVkLlZBTFVFLFxyXG5cdFx0XHRcdExvZ2dpbmcuTG9nTGV2ZWwuRXJyb3IsIHsgRXJyb3JNZXNzYWdlOiBlLnRvU3RyaW5nKCkgfSk7XHJcblxyXG5cdFx0XHQvLyByZXR1cm4gYW4gaW1hZ2Ugd2l0aCBcIlNjcmVlbnNob3QgY2Fubm90IGJlIGNhcHR1cmVkXCIgbWVzc2FnZVxyXG5cdFx0XHRpbWdTdHJpbmcgPSBcImlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFOMEFBQUErQVFNQUFBQ1Yyb3gxQUFBQUJHZEJUVUVBQUxHUEMveGhCUUFBQUFaUVRGUkZBQUFBLy8vL3BkbWYzUUFBQUFsd1NGbHpBQUFPd2dBQURzSUJGU2hLZ0FBQUFqdEpSRUZVU01mVjFNMXJFMEVVQUhEQmE1cjhBOXZrTDZnaUZpSTBKSCtJaDlLTHg4VGF1a2tKdWdTaEhnckp6WXZrVlBRa1VxZ3dTZVBMRUVMYVUrekJnOEpLVnZTUVFOeWRsc2Fkd0NRenppUlo4MkVUeFlNZmMzZ0Q4K014anpjZlY4VDgwZjB2a1E4aTY4dEFQU01TUTBQa0k2UURwRVBrWkJIeTFXcDEvempuaTJsclpxMlQydWlrREcxN0E1NEhyMHZzdndYSWwzV1h0MDJ6ZUlIUUJTcTNEeEhrN1ZPNTV6SUZnTExyY21hYVFCR2lxQ3dRQXJCVlFUYk5aT0ROQkI1RWUyRUVyNWVHaURHNGs1bWNxY3krS3NoK044SzIrYlJJMVo2OGZSTVZvVitYbWNGd3BRSlpHb2hwa2RzMVd0anBwR0xhcTUxYTJiOHlwMzEwVVc5L0g4VmZSajY4Q0lLUnNXQ0ZQQ0NFTTQxOVM0YlNBT21QbWRiM1RCclE0bG1udDluNC9IaXY1ZlR1bnNPelhiSmZMUjJyVTNGZDV1Z09lOW13MGx2Tk9DTnh5RGRJSGtwSEN2MFMzYStNUzB5VCs0d2tBS3gxZ0JKZVZ4ZU1SaFNlTlpwWEpmWSt6cUFWbCtnMG1DRlJKTWdzNm95OStNQ01yV1phSkp3aVdGanVXY0lTaGYrV2syVzllNTlPSHUyMVdQZHNzd1pOTEtzOXdWNzdtSmlhTVZiQlErLzFqR1pEb2ZGTHVPQlUvanpHNk9RS25rTE9aNUV2d29sTVgyUTE5VEFYOU1XeXkvYU5hcmV3ZlpwdGVjaGRMbjhCM1RhdEIvWVhCMmo0TUt3M2pUSEtYNEFPMENicWFTZGRNb2tIVWJyMFBwU1htRkc0TzRXSXU4NmFzQ1ZpaGZvTTZuVW1zZTVnR2tiSk95VGhWZXNYNFVJMGQwMExCWU1yNTVWdUlabDhNa1kxdU9pVHk5djNjK1NodVhqNStOZFFkTDhCKzVnbXc4V1p1UkVBQUFBQVNVVk9SSzVDWUlJPVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBibG9iQmluID0gYXRvYihpbWdTdHJpbmcpO1xyXG5cdFx0bGV0IGFycmF5ID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJsb2JCaW4ubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0YXJyYXkucHVzaChibG9iQmluLmNoYXJDb2RlQXQoaSkpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IGZpbGU6IEJsb2IgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXSwge3R5cGU6IFwiaW1hZ2UvanBlZ1wifSk7XHJcblxyXG5cdFx0cmV0dXJuIGZpbGU7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./scripts/app/Transport/Files/Screenshot.ts\n");

/***/ }),

/***/ "./scripts/app/Transport/Petrol.ts":
/*!*****************************************!*\
  !*** ./scripts/app/Transport/Petrol.ts ***!
  \*****************************************/
/*! exports provided: send */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"send\", function() { return send; });\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n\r\nvar HTTP_TIMEOUT = 8000; // timeout in milliseconds\r\n/**\r\n * Make an http request with retries\r\n * @param method the http method \"GET\", \"POST\" etc\r\n * @param url the url\r\n * @param requestBody the request body\r\n * @param maxRetries the maximum number of retries\r\n * @param onLoad the onload handler\r\n */\r\nfunction makeHttpRequest(method, url, requestBody, maxRetries, onLoad) {\r\n    var makeRequest = function (retries, timeout) {\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, true);\r\n            xhr.timeout = timeout;\r\n            xhr.onload = function () { onLoad(xhr, resolve, reject); };\r\n            xhr.ontimeout = function () {\r\n                if (retries > 0) {\r\n                    // double the timeout and retry it\r\n                    makeRequest(retries - 1, timeout * 2).then(resolve, reject);\r\n                }\r\n                else {\r\n                    reject(new Error(\"Request to '\" + url + \"' timed out. timeout: \" + xhr.timeout));\r\n                }\r\n            };\r\n            xhr.onerror = function () {\r\n                if (retries > 0) {\r\n                    makeRequest(retries - 1, timeout).then(resolve, reject);\r\n                }\r\n                else {\r\n                    reject(new Error(\"Request to '\" + url + \"' errored. \" + xhr.status + \" - \" + xhr.statusText + \" : \" + xhr.responseText));\r\n                }\r\n            };\r\n            xhr.send(requestBody);\r\n        });\r\n    };\r\n    // get the input timeout or using the default value if timeout is not defined\r\n    var httpTimeout = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getCommonInitOptions().petrolTimeout\r\n        ? _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_0__[\"get\"]().getCommonInitOptions().petrolTimeout\r\n        : HTTP_TIMEOUT;\r\n    return makeRequest(maxRetries, httpTimeout);\r\n}\r\nvar uploadEndpointInt = \"https://petrol-int.office.microsoft.com/v1/feedback\";\r\nvar uploadEndpointProd = \"https://petrol.office.microsoft.com/v1/feedback\";\r\n/**\r\n * Send a payload to Petrol\r\n * @param isProduction is production?\r\n * @param manifest manifest content\r\n * @param screenshot screenshot content\r\n * @param diagnostics diagnostics content\r\n */\r\nfunction send(isProduction, manifest, screenshot, diagnostics) {\r\n    if (manifest === undefined) {\r\n        return Promise.reject(new Error(\"Manifest cannot be undefined\"));\r\n    }\r\n    var formData = new FormData();\r\n    formData.append(\"Manifest\", manifest);\r\n    if (screenshot) {\r\n        formData.append(\"Screenshot\", screenshot);\r\n    }\r\n    if (diagnostics) {\r\n        formData.append(\"Diagnostics\", diagnostics);\r\n    }\r\n    return makeHttpRequest(\"POST\", isProduction ? uploadEndpointProd : uploadEndpointInt, formData, 2, function (xhr, resolve, reject) {\r\n        if (xhr.status !== 200) {\r\n            reject(new Error(\"Non-200 response with status code: \" + xhr.status + \", response: \" + xhr.responseText));\r\n        }\r\n        resolve();\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9UcmFuc3BvcnQvUGV0cm9sLnRzPzU4NjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQWdFO0FBRWhFLElBQU0sWUFBWSxHQUFXLElBQUksQ0FBQyxDQUFDLDBCQUEwQjtBQUM3RDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxlQUFlLENBQUksTUFBYyxFQUFFLEdBQVcsRUFBRSxXQUFnQixFQUFFLFVBQWtCLEVBQzVGLE1BQWtHO0lBRWxHLElBQUksV0FBVyxHQUNkLFVBQUMsT0FBZSxFQUFFLE9BQWU7UUFDaEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2xDLElBQUksR0FBRyxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFDO1lBQy9DLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1QixHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN0QixHQUFHLENBQUMsTUFBTSxHQUFHLGNBQVEsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckQsR0FBRyxDQUFDLFNBQVMsR0FBRztnQkFDZixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7b0JBQ2hCLGtDQUFrQztvQkFDbEMsV0FBVyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQzVEO3FCQUFNO29CQUNOLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQkFBZSxHQUFHLDhCQUF5QixHQUFHLENBQUMsT0FBUyxDQUFDLENBQUMsQ0FBQztpQkFDNUU7WUFDRixDQUFDLENBQUM7WUFDRixHQUFHLENBQUMsT0FBTyxHQUFHO2dCQUNiLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtvQkFDaEIsV0FBVyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU07b0JBQ04sTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFlLEdBQUcsbUJBQWMsR0FBRyxDQUFDLE1BQU0sV0FBTSxHQUFHLENBQUMsVUFBVSxXQUFNLEdBQUcsQ0FBQyxZQUFjLENBQUMsQ0FBQyxDQUFDO2lCQUMxRztZQUNGLENBQUMsQ0FBQztZQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFSCw2RUFBNkU7SUFDN0UsSUFBTSxXQUFXLEdBQUcsZ0VBQWlCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLGFBQWE7UUFDdkUsQ0FBQyxDQUFDLGdFQUFpQixFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxhQUFhO1FBQzFELENBQUMsQ0FBQyxZQUFZLENBQUM7SUFFcEIsT0FBTyxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxJQUFNLGlCQUFpQixHQUFXLHFEQUFxRCxDQUFDO0FBQ3hGLElBQU0sa0JBQWtCLEdBQVcsaURBQWlELENBQUM7QUFFckY7Ozs7OztHQU1HO0FBQ0ksU0FBUyxJQUFJLENBQUMsWUFBcUIsRUFBRSxRQUFjLEVBQUUsVUFBaUIsRUFBRSxXQUFrQjtJQUNoRyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDM0IsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztLQUNqRTtJQUVELElBQUksUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDOUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFdEMsSUFBSSxVQUFVLEVBQUU7UUFDZixRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztLQUMxQztJQUVELElBQUksV0FBVyxFQUFFO1FBQ2hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQzVDO0lBRUQsT0FBTyxlQUFlLENBQU0sTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQ3JHLFVBQ0MsR0FBbUIsRUFDbkIsT0FBOEIsRUFDOUIsTUFBNkI7UUFFN0IsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUN2QixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMscUNBQXFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxjQUFjLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDMUc7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL1RyYW5zcG9ydC9QZXRyb2wudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDb25maWd1cmF0aW9uIGZyb20gXCIuLi9Db25maWd1cmF0aW9uL0NvbmZpZ3VyYXRpb25cIjtcclxuXHJcbmNvbnN0IEhUVFBfVElNRU9VVDogbnVtYmVyID0gODAwMDsgLy8gdGltZW91dCBpbiBtaWxsaXNlY29uZHNcclxuLyoqXHJcbiAqIE1ha2UgYW4gaHR0cCByZXF1ZXN0IHdpdGggcmV0cmllc1xyXG4gKiBAcGFyYW0gbWV0aG9kIHRoZSBodHRwIG1ldGhvZCBcIkdFVFwiLCBcIlBPU1RcIiBldGNcclxuICogQHBhcmFtIHVybCB0aGUgdXJsXHJcbiAqIEBwYXJhbSByZXF1ZXN0Qm9keSB0aGUgcmVxdWVzdCBib2R5XHJcbiAqIEBwYXJhbSBtYXhSZXRyaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzXHJcbiAqIEBwYXJhbSBvbkxvYWQgdGhlIG9ubG9hZCBoYW5kbGVyXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlSHR0cFJlcXVlc3Q8VD4obWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCByZXF1ZXN0Qm9keTogYW55LCBtYXhSZXRyaWVzOiBudW1iZXIsXHJcblx0b25Mb2FkOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVzb2x2ZTogKHZhbHVlPzogVCkgPT4gdm9pZCwgcmVqZWN0OiAoZXJyb3I/OiBhbnkpID0+IHZvaWQpID0+IHZvaWRcclxuKTogUHJvbWlzZTxUPiB7XHJcblx0bGV0IG1ha2VSZXF1ZXN0OiAocmV0cmllczogbnVtYmVyLCB0aW1lb3V0OiBudW1iZXIpID0+IFByb21pc2U8VD4gPVxyXG5cdFx0KHJldHJpZXM6IG51bWJlciwgdGltZW91dDogbnVtYmVyKSA9PiB7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFx0bGV0IHhocjogWE1MSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdFx0XHR4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XHJcblx0XHRcdFx0eGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xyXG5cdFx0XHRcdHhoci5vbmxvYWQgPSAoKSA9PiB7IG9uTG9hZCh4aHIsIHJlc29sdmUsIHJlamVjdCk7IH07XHJcblx0XHRcdFx0eGhyLm9udGltZW91dCA9ICgpID0+IHtcclxuXHRcdFx0XHRcdGlmIChyZXRyaWVzID4gMCkge1xyXG5cdFx0XHRcdFx0XHQvLyBkb3VibGUgdGhlIHRpbWVvdXQgYW5kIHJldHJ5IGl0XHJcblx0XHRcdFx0XHRcdG1ha2VSZXF1ZXN0KHJldHJpZXMgLSAxLCB0aW1lb3V0ICogMikudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihgUmVxdWVzdCB0byAnJHt1cmx9JyB0aW1lZCBvdXQuIHRpbWVvdXQ6ICR7eGhyLnRpbWVvdXR9YCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAocmV0cmllcyA+IDApIHtcclxuXHRcdFx0XHRcdFx0bWFrZVJlcXVlc3QocmV0cmllcyAtIDEsIHRpbWVvdXQpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoYFJlcXVlc3QgdG8gJyR7dXJsfScgZXJyb3JlZC4gJHt4aHIuc3RhdHVzfSAtICR7eGhyLnN0YXR1c1RleHR9IDogJHt4aHIucmVzcG9uc2VUZXh0fWApKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHhoci5zZW5kKHJlcXVlc3RCb2R5KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBnZXQgdGhlIGlucHV0IHRpbWVvdXQgb3IgdXNpbmcgdGhlIGRlZmF1bHQgdmFsdWUgaWYgdGltZW91dCBpcyBub3QgZGVmaW5lZFxyXG5cdGNvbnN0IGh0dHBUaW1lb3V0ID0gQ29uZmlndXJhdGlvbi5nZXQoKS5nZXRDb21tb25Jbml0T3B0aW9ucygpLnBldHJvbFRpbWVvdXRcclxuXHRcdFx0XHRcdFx0PyBDb25maWd1cmF0aW9uLmdldCgpLmdldENvbW1vbkluaXRPcHRpb25zKCkucGV0cm9sVGltZW91dFxyXG5cdFx0XHRcdFx0XHQ6IEhUVFBfVElNRU9VVDtcclxuXHJcblx0cmV0dXJuIG1ha2VSZXF1ZXN0KG1heFJldHJpZXMsIGh0dHBUaW1lb3V0KTtcclxufVxyXG5cclxuY29uc3QgdXBsb2FkRW5kcG9pbnRJbnQ6IHN0cmluZyA9IFwiaHR0cHM6Ly9wZXRyb2wtaW50Lm9mZmljZS5taWNyb3NvZnQuY29tL3YxL2ZlZWRiYWNrXCI7XHJcbmNvbnN0IHVwbG9hZEVuZHBvaW50UHJvZDogc3RyaW5nID0gXCJodHRwczovL3BldHJvbC5vZmZpY2UubWljcm9zb2Z0LmNvbS92MS9mZWVkYmFja1wiO1xyXG5cclxuLyoqXHJcbiAqIFNlbmQgYSBwYXlsb2FkIHRvIFBldHJvbFxyXG4gKiBAcGFyYW0gaXNQcm9kdWN0aW9uIGlzIHByb2R1Y3Rpb24/XHJcbiAqIEBwYXJhbSBtYW5pZmVzdCBtYW5pZmVzdCBjb250ZW50XHJcbiAqIEBwYXJhbSBzY3JlZW5zaG90IHNjcmVlbnNob3QgY29udGVudFxyXG4gKiBAcGFyYW0gZGlhZ25vc3RpY3MgZGlhZ25vc3RpY3MgY29udGVudFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmQoaXNQcm9kdWN0aW9uOiBib29sZWFuLCBtYW5pZmVzdDogQmxvYiwgc2NyZWVuc2hvdD86IEJsb2IsIGRpYWdub3N0aWNzPzogQmxvYik6IFByb21pc2U8YW55PiB7XHJcblx0aWYgKG1hbmlmZXN0ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpKTtcclxuXHR9XHJcblxyXG5cdGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG5cdGZvcm1EYXRhLmFwcGVuZChcIk1hbmlmZXN0XCIsIG1hbmlmZXN0KTtcclxuXHJcblx0aWYgKHNjcmVlbnNob3QpIHtcclxuXHRcdGZvcm1EYXRhLmFwcGVuZChcIlNjcmVlbnNob3RcIiwgc2NyZWVuc2hvdCk7XHJcblx0fVxyXG5cclxuXHRpZiAoZGlhZ25vc3RpY3MpIHtcclxuXHRcdGZvcm1EYXRhLmFwcGVuZChcIkRpYWdub3N0aWNzXCIsIGRpYWdub3N0aWNzKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBtYWtlSHR0cFJlcXVlc3Q8YW55PihcIlBPU1RcIiwgaXNQcm9kdWN0aW9uID8gdXBsb2FkRW5kcG9pbnRQcm9kIDogdXBsb2FkRW5kcG9pbnRJbnQsIGZvcm1EYXRhLCAyLFxyXG5cdFx0ZnVuY3Rpb24gKFxyXG5cdFx0XHR4aHI6IFhNTEh0dHBSZXF1ZXN0LFxyXG5cdFx0XHRyZXNvbHZlOiAodmFsdWU/OiBhbnkpID0+IHZvaWQsXHJcblx0XHRcdHJlamVjdDogKGVycm9yPzogYW55KSA9PiB2b2lkXHJcblx0XHQpOiB2b2lkIHtcclxuXHRcdFx0aWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xyXG5cdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJOb24tMjAwIHJlc3BvbnNlIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgeGhyLnN0YXR1cyArIFwiLCByZXNwb25zZTogXCIgKyB4aHIucmVzcG9uc2VUZXh0KSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmVzb2x2ZSgpO1xyXG5cdFx0fSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/Transport/Petrol.ts\n");

/***/ }),

/***/ "./scripts/app/Transport/Transport.ts":
/*!********************************************!*\
  !*** ./scripts/app/Transport/Transport.ts ***!
  \********************************************/
/*! exports provided: Transporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Transporter\", function() { return Transporter; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Utils */ \"./scripts/app/Utils.ts\");\n/* harmony import */ var _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../Logging/Logging */ \"./scripts/app/Logging/Logging.ts\");\n/* harmony import */ var _Petrol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Petrol */ \"./scripts/app/Transport/Petrol.ts\");\n/* harmony import */ var _Files_Screenshot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Files/Screenshot */ \"./scripts/app/Transport/Files/Screenshot.ts\");\n/* harmony import */ var _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Configuration/Configuration */ \"./scripts/app/Configuration/Configuration.ts\");\n/* harmony import */ var _Files_Manifest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Files/Manifest */ \"./scripts/app/Transport/Files/Manifest.ts\");\n/**\r\n * Feedback.ts\r\n *\r\n * Module for payload transport.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar Transporter = /** @class */ (function () {\r\n    function Transporter(environment, manifestType, appId, type, applicationGroup, telemetryGroup, webGroup) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        this.clientFeedbackId = _Utils__WEBPACK_IMPORTED_MODULE_1__[\"guid\"]();\r\n        this.manifest = new _Files_Manifest__WEBPACK_IMPORTED_MODULE_6__[\"Manifest\"](manifestType, appId, new Date().toISOString(), type, this.clientFeedbackId, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, applicationGroup), Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, telemetryGroup), Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, webGroup));\r\n        this.environment = environment;\r\n        this.manifest.setComplianceInformation(_Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"AuthenticationType\"][(_b = ((_a = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions()) === null || _a === void 0 ? void 0 : _a.authenticationType)) !== null && _b !== void 0 ? _b : _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"AuthenticationType\"].Unauthenticated], _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"AgeGroup\"][(_d = ((_c = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions()) === null || _c === void 0 ? void 0 : _c.ageGroup)) !== null && _d !== void 0 ? _d : _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"AgeGroup\"].Undefined], this.ocpsEnumToString((_e = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getInAppFeedbackInitOptions()) === null || _e === void 0 ? void 0 : _e.sendFeedbackPolicyValue), this.ocpsBooleanToString((_f = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getFloodgateInitOptions()) === null || _f === void 0 ? void 0 : _f.surveyEnabled), this.ocpsEnumToString((_g = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions()) === null || _g === void 0 ? void 0 : _g.screenshotPolicyValue), this.ocpsEnumToString((_h = _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions()) === null || _h === void 0 ? void 0 : _h.emailPolicyValue));\r\n    }\r\n    Transporter.prototype.getClientFeedbackId = function () {\r\n        return this.clientFeedbackId;\r\n    };\r\n    Transporter.prototype.getExtendedManifestData = function () {\r\n        return this.manifest.getExtendedManifestData();\r\n    };\r\n    Transporter.prototype.setComment = function (comment) {\r\n        this.manifest.setComment(comment);\r\n    };\r\n    Transporter.prototype.setEmail = function (email) {\r\n        this.manifest.setEmail(email);\r\n    };\r\n    Transporter.prototype.setCategory = function (category) {\r\n        this.manifest.setCategory(category);\r\n    };\r\n    Transporter.prototype.setAppData = function (appData) {\r\n        this.manifest.setAppData(appData);\r\n    };\r\n    Transporter.prototype.setExtendedManifestData = function (extendedManifestData) {\r\n        this.manifest.setExtendedManifestData(extendedManifestData);\r\n    };\r\n    Transporter.prototype.setScreenshot = function (screenshot) {\r\n        this.screenshot = new _Files_Screenshot__WEBPACK_IMPORTED_MODULE_4__[\"Screenshot\"](screenshot);\r\n    };\r\n    Transporter.prototype.setClientFeedbackId = function (clientFeedbackId) {\r\n        this.manifest.setClientFeedbackId(clientFeedbackId);\r\n    };\r\n    Transporter.prototype.getManifest = function () {\r\n        return this.manifest;\r\n    };\r\n    /**\r\n     * Set freeform custom values in manifest. Throws if values are already set.\r\n     * @param values the values as a JS object\r\n     */\r\n    Transporter.prototype.setManifestValues = function (values) {\r\n        this.manifest.setValues(values);\r\n    };\r\n    /**\r\n     * Submit the payload\r\n     */\r\n    Transporter.prototype.submit = function () {\r\n        if (!_Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().isFeedbackSurveyEnabledByAADC()) {\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].Shared.Upload.Prevented.VALUE, 2 /* Error */, {\r\n                Data: JSON.stringify({\r\n                    ageGroup: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions().ageGroup,\r\n                    authenticationType: _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions().authenticationType,\r\n                }),\r\n            });\r\n            return Promise.resolve();\r\n        }\r\n        var manifestContent = this.manifest.getContent();\r\n        var screenshotContent = undefined;\r\n        var clientFeedbackId = this.clientFeedbackId;\r\n        if (this.screenshot) {\r\n            screenshotContent = this.screenshot.getContent();\r\n        }\r\n        return _Petrol__WEBPACK_IMPORTED_MODULE_3__[\"send\"](this.environment === 0 /* Production */, manifestContent, screenshotContent)\r\n            .catch(function onRejected(err) {\r\n            _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().setFeedbackSubmitted(false);\r\n            _Configuration_Configuration__WEBPACK_IMPORTED_MODULE_5__[\"get\"]().getCommonInitOptions().onError(\"Payload submission failed: \" + err.message +\r\n                \". ClientFeedbackId: \" + clientFeedbackId);\r\n            _Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"]().logEvent(_Logging_Logging__WEBPACK_IMPORTED_MODULE_2__[\"EventIds\"].Shared.Upload.Failed.VALUE, 2 /* Error */, { ErrorMessage: err.message, ClientFeedbackId: clientFeedbackId });\r\n        });\r\n    };\r\n    Transporter.prototype.ocpsBooleanToString = function (policyValue) {\r\n        if (policyValue === undefined) {\r\n            return \"Not Configured\";\r\n        }\r\n        if (policyValue) {\r\n            return \"Enabled\";\r\n        }\r\n        return \"Disabled\";\r\n    };\r\n    Transporter.prototype.ocpsEnumToString = function (policyValue) {\r\n        if (!policyValue) {\r\n            return \"Not Configured\";\r\n        }\r\n        switch (policyValue) {\r\n            case 2 /* Disabled */:\r\n                return \"Disabled\";\r\n            case 1 /* Enabled */:\r\n                return \"Enabled\";\r\n            default:\r\n                return \"Not Configured\";\r\n        }\r\n    };\r\n    return Transporter;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Transport/Transport.ts\n");

/***/ }),

/***/ "./scripts/app/UIStrings/UIStrings.ts":
/*!********************************************!*\
  !*** ./scripts/app/UIStrings/UIStrings.ts ***!
  \********************************************/
/*! exports provided: setUIStrings, getUIStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setUIStrings\", function() { return setUIStrings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUIStrings\", function() { return getUIStrings; });\n/**\r\n * UIStrings.ts\r\n *\r\n * Module for the strings to display\r\n */\r\n/**\r\n * Localized UI strings\r\n */\r\nvar uIStrings;\r\n/**\r\n * Set UI strings\r\n * @param {string} data List of localized UI strings\r\n */\r\nfunction setUIStrings(data) {\r\n    uIStrings = data;\r\n}\r\n/**\r\n * Get UI strings\r\n * @returns the UIStrings\r\n */\r\nfunction getUIStrings() {\r\n    return uIStrings;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9VSVN0cmluZ3MvVUlTdHJpbmdzLnRzPzlkY2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7R0FJRztBQTZGSDs7R0FFRztBQUNILElBQUksU0FBcUIsQ0FBQztBQUUxQjs7O0dBR0c7QUFDSSxTQUFTLFlBQVksQ0FBQyxJQUFnQjtJQUM1QyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLENBQUM7QUFFRDs7O0dBR0c7QUFDSSxTQUFTLFlBQVk7SUFDM0IsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL1VJU3RyaW5ncy9VSVN0cmluZ3MudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVUlTdHJpbmdzLnRzXHJcbiAqXHJcbiAqIE1vZHVsZSBmb3IgdGhlIHN0cmluZ3MgdG8gZGlzcGxheVxyXG4gKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVVJU3RyaW5ncyB7XHJcblx0RmVlZGJhY2tTdWJ0aXRsZTogc3RyaW5nO1xyXG5cdFByaXZhY3lTdGF0ZW1lbnQ6IHN0cmluZztcclxuXHJcblx0Rm9ybToge1xyXG5cdFx0Q29tbWVudFBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblx0XHRDYXRlZ29yeVBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblx0XHRFbWFpbFBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblx0XHRSYXRpbmdMYWJlbDogc3RyaW5nO1xyXG5cdFx0U2NyZWVuc2hvdExhYmVsOiBzdHJpbmc7XHJcblx0XHRFbWFpbENoZWNrQm94TGFiZWw6IHN0cmluZztcclxuXHRcdFN1Ym1pdDogc3RyaW5nO1xyXG5cdFx0QmFzaWNGb3JtVGl0bGU6IHN0cmluZztcclxuXHRcdENhbmNlbDogc3RyaW5nO1xyXG5cdFx0U2NyZWVuc2hvdEltZ0FsdFRleHQ6IHN0cmluZztcclxuXHRcdFByaXZhY3lMYWJlbDogc3RyaW5nO1xyXG5cdFx0UHJpdmFjeUNvbnNlbnQ6IHN0cmluZztcclxuXHR9O1xyXG5cclxuXHRTaW5nbGVGb3JtOiB7XHJcblx0XHRUaXRsZTogc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cdFNtaWxlRm9ybToge1xyXG5cdFx0QW5jaG9yOiBzdHJpbmc7XHJcblx0XHRUaXRsZTogc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cdEZyb3duRm9ybToge1xyXG5cdFx0QW5jaG9yOiBzdHJpbmc7XHJcblx0XHRUaXRsZTogc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cdElkZWFGb3JtOiB7XHJcblx0XHRBbmNob3I6IHN0cmluZztcclxuXHRcdFRpdGxlOiBzdHJpbmc7XHJcblx0fTtcclxuXHJcblx0QnVnRm9ybToge1xyXG5cdFx0QW5jaG9yOiBzdHJpbmc7XHJcblx0XHRUaXRsZTogc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cdFRoYW5rc1BhbmVsOiB7XHJcblx0XHRUaXRsZTogc3RyaW5nO1xyXG5cdFx0QXBwcmVjaWF0ZVRleHQ6IHN0cmluZztcclxuXHRcdE15RmVlZGJhY2tEZXNjcmlwdGlvbjogc3RyaW5nO1xyXG5cdFx0TXlGZWVkYmFja0xpbmtUZXh0OiBzdHJpbmc7XHJcblx0XHRGZWVkYmFja1BvcnRhbERlc2NyaXB0aW9uOiBzdHJpbmc7XHJcblx0XHRGZWVkYmFja1BvcnRhbExpbmtUZXh0OiBzdHJpbmc7XHJcblx0XHRDbG9zZTogc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cdEZsb29kZ2F0ZToge1xyXG5cdFx0TnBzOiB7XHJcblx0XHRcdFByb21wdDoge1xyXG5cdFx0XHRcdFRpdGxlOiBzdHJpbmc7XHJcblx0XHRcdFx0UXVlc3Rpb246IHN0cmluZztcclxuXHRcdFx0XHRZZXM6IHN0cmluZztcclxuXHRcdFx0XHRObzogc3RyaW5nO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Q29tbWVudDoge1xyXG5cdFx0XHRcdFF1ZXN0aW9uOiBzdHJpbmc7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRSYXRpbmc6IHtcclxuXHRcdFx0XHRRdWVzdGlvbjogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czExVmFsdWUwOiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzMTFWYWx1ZTE6IHN0cmluZztcclxuXHRcdFx0XHRQb2ludHMxMVZhbHVlMjogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czExVmFsdWUzOiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzMTFWYWx1ZTQ6IHN0cmluZztcclxuXHRcdFx0XHRQb2ludHMxMVZhbHVlNTogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czExVmFsdWU2OiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzMTFWYWx1ZTc6IHN0cmluZztcclxuXHRcdFx0XHRQb2ludHMxMVZhbHVlODogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czExVmFsdWU5OiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzMTFWYWx1ZTEwOiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzNVZhbHVlMTogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czVWYWx1ZTI6IHN0cmluZztcclxuXHRcdFx0XHRQb2ludHM1VmFsdWUzOiBzdHJpbmc7XHJcblx0XHRcdFx0UG9pbnRzNVZhbHVlNDogc3RyaW5nO1xyXG5cdFx0XHRcdFBvaW50czVWYWx1ZTU6IHN0cmluZztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdENsb3NlTGFiZWw6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIExvY2FsaXplZCBVSSBzdHJpbmdzXHJcbiAqL1xyXG5sZXQgdUlTdHJpbmdzOiBJVUlTdHJpbmdzO1xyXG5cclxuLyoqXHJcbiAqIFNldCBVSSBzdHJpbmdzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIExpc3Qgb2YgbG9jYWxpemVkIFVJIHN0cmluZ3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRVSVN0cmluZ3MoZGF0YTogSVVJU3RyaW5ncykge1xyXG5cdHVJU3RyaW5ncyA9IGRhdGE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgVUkgc3RyaW5nc1xyXG4gKiBAcmV0dXJucyB0aGUgVUlTdHJpbmdzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VUlTdHJpbmdzKCk6IElVSVN0cmluZ3Mge1xyXG5cdHJldHVybiB1SVN0cmluZ3M7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/app/UIStrings/UIStrings.ts\n");

/***/ }),

/***/ "./scripts/app/Utils.ts":
/*!******************************!*\
  !*** ./scripts/app/Utils.ts ***!
  \******************************/
/*! exports provided: guid, overrideValues, isNOU, isBoolean, isInteger, expectObject, expectNumber, expectString, expectBoolean, expectGuid, expectArray, expectEnum, createTimeoutPromise, checkCssSelectorToBeSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"guid\", function() { return guid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"overrideValues\", function() { return overrideValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNOU\", function() { return isNOU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBoolean\", function() { return isBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isInteger\", function() { return isInteger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectObject\", function() { return expectObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectNumber\", function() { return expectNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectString\", function() { return expectString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectBoolean\", function() { return expectBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectGuid\", function() { return expectGuid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectArray\", function() { return expectArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expectEnum\", function() { return expectEnum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTimeoutPromise\", function() { return createTimeoutPromise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkCssSelectorToBeSet\", function() { return checkCssSelectorToBeSet; });\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ms-ofb/officefloodgatecore */ \"../FloodgateCore/dist/index.js\");\n/* harmony import */ var _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__);\n/*\r\n * Utils.ts\r\n *\r\n * Module for utility functions\r\n */\r\n\r\nvar guid = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].guid, overrideValues = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].overrideValues, isNOU = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isNOU, isBoolean = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isBoolean, isString = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isString, isObject = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isObject, isEnumValue = _ms_ofb_officefloodgatecore__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].isEnumValue;\r\n\r\n/**\r\n * Check if given value is a number\r\n * @param {any} value value\r\n */\r\nfunction isNumber(value) {\r\n    return (typeof value === \"number\");\r\n}\r\n/**\r\n * Check if given value is an integer\r\n * @param {any} value value\r\n */\r\nfunction isInteger(value) {\r\n    return typeof value === \"number\" &&\r\n        isFinite(value) &&\r\n        Math.floor(value) === value;\r\n}\r\n/**\r\n * Check if value is a valid guid\r\n * @param {any} value value\r\n */\r\nfunction isGuid(value) {\r\n    return (isString(value) &&\r\n        /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(value));\r\n}\r\n/**\r\n * Throw if not object\r\n */\r\nfunction expectObject(value, name) {\r\n    if (!isObject(value)) {\r\n        throw name + \" is not an object: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not number\r\n */\r\nfunction expectNumber(value, name) {\r\n    if (!isNumber(value)) {\r\n        throw name + \" is not a number: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not string\r\n */\r\nfunction expectString(value, name) {\r\n    if (!isString(value)) {\r\n        throw name + \" is not a string: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not boolean\r\n */\r\nfunction expectBoolean(value, name) {\r\n    if (!isBoolean(value)) {\r\n        throw name + \" is not a boolean: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not guid\r\n */\r\nfunction expectGuid(value, name) {\r\n    if (!isGuid(value)) {\r\n        throw name + \" is not a guid: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not array\r\n */\r\nfunction expectArray(value, name) {\r\n    if (!Array.isArray(value)) {\r\n        throw name + \" is not an array: \" + value;\r\n    }\r\n}\r\n/**\r\n * Throw if not valid enum\r\n * Note: this won't work with const enum\r\n */\r\nfunction expectEnum(value, enumType, name) {\r\n    if (!isNumber(value) || !isEnumValue(value, enumType)) {\r\n        throw name + \" is not an enum: \" + value;\r\n    }\r\n}\r\n// Creates a promise that rejects in <ms> milliseconds and\r\n// returns the race between the created timeout promise and the passed in promise\r\nfunction createTimeoutPromise(ms, promise) {\r\n    // Create a promise that rejects in <ms> milliseconds\r\n    var timeout = new Promise(function (resolve, reject) {\r\n        var id = setTimeout(function () {\r\n            clearTimeout(id);\r\n            reject(\"Timed out in \" + ms + \"ms.\");\r\n        }, ms);\r\n    });\r\n    // Returns a race between our timeout and the passed in promise\r\n    return Promise.race([promise, timeout]);\r\n}\r\n/**\r\n * Checks to see if a passed CSS selector is set as a rule in one of the document's stylesheets.\r\n *\r\n * @param cssSelector : a Css selector string such as '#obf-TPromptTitle'\r\n */\r\nfunction checkCssSelectorToBeSet(cssSelector) {\r\n    try {\r\n        for (var sheetIndex = 0; sheetIndex < document.styleSheets.length; sheetIndex++) {\r\n            var currentStyleSheet = document.styleSheets[sheetIndex];\r\n            for (var rulesIndex = 0; rulesIndex < currentStyleSheet.rules.length; rulesIndex++) {\r\n                var currentRule = currentStyleSheet.rules[rulesIndex];\r\n                if (!isNOU(currentRule.selectorText) && currentRule.selectorText.includes(cssSelector)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // tslint:disable-next-line: no-empty\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Utils.ts\n");

/***/ }),

/***/ "./scripts/app/Version.ts":
/*!********************************!*\
  !*** ./scripts/app/Version.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * Version.ts\r\n *\r\n * Module for package version\r\n */\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"0.0.0\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9WZXJzaW9uLnRzPzA3OTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7OztHQUlHO0FBQ1ksc0VBQU8sRUFBQyIsImZpbGUiOiIuL3NjcmlwdHMvYXBwL1ZlcnNpb24udHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVmVyc2lvbi50c1xyXG4gKlxyXG4gKiBNb2R1bGUgZm9yIHBhY2thZ2UgdmVyc2lvblxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgXCIwLjAuMFwiO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Version.ts\n");

/***/ }),

/***/ "./scripts/app/Window/DomUtils.ts":
/*!****************************************!*\
  !*** ./scripts/app/Window/DomUtils.ts ***!
  \****************************************/
/*! exports provided: loadStylesheet, loadScript */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadStylesheet\", function() { return loadStylesheet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadScript\", function() { return loadScript; });\n/*\r\n * DomUtils.ts\r\n *\r\n * Module for page document utility functions\r\n */\r\n/**\r\n * Load the style sheet\r\n * @param url The url of the stylesheet\r\n */\r\nfunction loadStylesheet(url) {\r\n    var link = document.createElement(\"link\");\r\n    link.rel = \"stylesheet\";\r\n    link.type = \"text/css\";\r\n    link.href = url;\r\n    var entry = document.getElementsByTagName(\"script\")[0];\r\n    entry.parentNode.insertBefore(link, entry);\r\n}\r\n/**\r\n * Load the script and callback after it is loaded\r\n * @param url The url of the script\r\n * @param pageOrigin Optional - Origin of the page\r\n */\r\nfunction loadScript(url, pageOrigin) {\r\n    if (pageOrigin === void 0) { pageOrigin = window.origin; }\r\n    return new Promise(function (resolve, reject) {\r\n        var script = document.createElement(\"script\");\r\n        script.async = true;\r\n        if (script.readyState) { // IE\r\n            script.onreadystatechange = function () {\r\n                if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\r\n                    script.onreadystatechange = null;\r\n                    resolve();\r\n                }\r\n            };\r\n        }\r\n        else { // Others\r\n            script.onload = function () {\r\n                resolve();\r\n            };\r\n        }\r\n        script.onerror = function () {\r\n            reject();\r\n        };\r\n        script.src = url;\r\n        // don't add if origin is not available or when containing \"null\". This is to mitigate possible\r\n        // unexpected behavior with Chrome when a page hosting this SDK is being tested as a local file.\r\n        // The behavior depends on Chrome.exe's --allow-file-access-from-files setting.\r\n        if (pageOrigin && pageOrigin !== \"null\") {\r\n            script.crossOrigin = \"anonymous\";\r\n        }\r\n        var entry = document.getElementsByTagName(\"script\")[0];\r\n        entry.parentNode.insertBefore(script, entry);\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2FwcC9XaW5kb3cvRG9tVXRpbHMudHM/ZWViMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7OztHQUlHO0FBRUg7OztHQUdHO0FBQ0ksU0FBUyxjQUFjLENBQUMsR0FBVztJQUN6QyxJQUFNLElBQUksR0FBb0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3RCxJQUFJLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztJQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUVoQixJQUFNLEtBQUssR0FBc0IsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNJLFNBQVMsVUFBVSxDQUFDLEdBQVcsRUFBRSxVQUEyQztJQUEzQywwQ0FBc0IsTUFBYyxDQUFDLE1BQU07SUFDbEYsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2xDLElBQU0sTUFBTSxHQUFRLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFcEIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsS0FBSztZQUM3QixNQUFNLENBQUMsa0JBQWtCLEdBQUc7Z0JBQzNCLElBQUksTUFBTSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7b0JBQ3ZFLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7b0JBQ2pDLE9BQU8sRUFBRSxDQUFDO2lCQUNWO1lBQ0YsQ0FBQyxDQUFDO1NBQ0Y7YUFBTSxFQUFHLFNBQVM7WUFDbEIsTUFBTSxDQUFDLE1BQU0sR0FBRztnQkFDZixPQUFPLEVBQUUsQ0FBQztZQUNYLENBQUMsQ0FBQztTQUNGO1FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztZQUNoQixNQUFNLEVBQUUsQ0FBQztRQUNWLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWpCLCtGQUErRjtRQUMvRixnR0FBZ0c7UUFDaEcsK0VBQStFO1FBQy9FLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7WUFDeEMsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFFRCxJQUFNLEtBQUssR0FBc0IsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJmaWxlIjoiLi9zY3JpcHRzL2FwcC9XaW5kb3cvRG9tVXRpbHMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBEb21VdGlscy50c1xyXG4gKlxyXG4gKiBNb2R1bGUgZm9yIHBhZ2UgZG9jdW1lbnQgdXRpbGl0eSBmdW5jdGlvbnNcclxuICovXHJcblxyXG4vKipcclxuICogTG9hZCB0aGUgc3R5bGUgc2hlZXRcclxuICogQHBhcmFtIHVybCBUaGUgdXJsIG9mIHRoZSBzdHlsZXNoZWV0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFN0eWxlc2hlZXQodXJsOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRjb25zdCBsaW5rOiBIVE1MTGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcclxuXHRsaW5rLnJlbCA9IFwic3R5bGVzaGVldFwiO1xyXG5cdGxpbmsudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRsaW5rLmhyZWYgPSB1cmw7XHJcblxyXG5cdGNvbnN0IGVudHJ5OiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xyXG5cdGVudHJ5LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpbmssIGVudHJ5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExvYWQgdGhlIHNjcmlwdCBhbmQgY2FsbGJhY2sgYWZ0ZXIgaXQgaXMgbG9hZGVkXHJcbiAqIEBwYXJhbSB1cmwgVGhlIHVybCBvZiB0aGUgc2NyaXB0XHJcbiAqIEBwYXJhbSBwYWdlT3JpZ2luIE9wdGlvbmFsIC0gT3JpZ2luIG9mIHRoZSBwYWdlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmw6IHN0cmluZywgcGFnZU9yaWdpbjogc3RyaW5nID0gKHdpbmRvdyBhcyBhbnkpLm9yaWdpbik6IFByb21pc2U8dm9pZD4ge1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRjb25zdCBzY3JpcHQ6IGFueSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcblx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG5cclxuXHRcdGlmIChzY3JpcHQucmVhZHlTdGF0ZSkgeyAvLyBJRVxyXG5cdFx0XHRzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHNjcmlwdC5yZWFkeVN0YXRlID09PSBcImxvYWRlZFwiIHx8IHNjcmlwdC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcclxuXHRcdFx0XHRcdHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xyXG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7ICAvLyBPdGhlcnNcclxuXHRcdFx0c2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJlc29sdmUoKTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZWplY3QoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcclxuXHJcblx0XHQvLyBkb24ndCBhZGQgaWYgb3JpZ2luIGlzIG5vdCBhdmFpbGFibGUgb3Igd2hlbiBjb250YWluaW5nIFwibnVsbFwiLiBUaGlzIGlzIHRvIG1pdGlnYXRlIHBvc3NpYmxlXHJcblx0XHQvLyB1bmV4cGVjdGVkIGJlaGF2aW9yIHdpdGggQ2hyb21lIHdoZW4gYSBwYWdlIGhvc3RpbmcgdGhpcyBTREsgaXMgYmVpbmcgdGVzdGVkIGFzIGEgbG9jYWwgZmlsZS5cclxuXHRcdC8vIFRoZSBiZWhhdmlvciBkZXBlbmRzIG9uIENocm9tZS5leGUncyAtLWFsbG93LWZpbGUtYWNjZXNzLWZyb20tZmlsZXMgc2V0dGluZy5cclxuXHRcdGlmIChwYWdlT3JpZ2luICYmIHBhZ2VPcmlnaW4gIT09IFwibnVsbFwiKSB7XHJcblx0XHRcdHNjcmlwdC5jcm9zc09yaWdpbiA9IFwiYW5vbnltb3VzXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZW50cnk6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XHJcblx0XHRlbnRyeS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGVudHJ5KTtcclxuXHR9KTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/app/Window/DomUtils.ts\n");

/***/ }),

/***/ "./scripts/app/Window/Window.ts":
/*!**************************************!*\
  !*** ./scripts/app/Window/Window.ts ***!
  \**************************************/
/*! exports provided: get, getGlobal, setSetUiStrings, setSingleFeedback, setMultiFeedback, setFeedbackStatus, setCreateScreenshot, setIsFeedbackSurveyEnabledByAADC, setFloodgateShowSurvey, setFloodgateShowCustomSurvey, setFloodgateInitialize, setFloodgateStart, setFloodgateStop, setFloodgateGetEngine, getSettingIdMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getGlobal\", function() { return getGlobal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSetUiStrings\", function() { return setSetUiStrings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSingleFeedback\", function() { return setSingleFeedback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setMultiFeedback\", function() { return setMultiFeedback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFeedbackStatus\", function() { return setFeedbackStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setCreateScreenshot\", function() { return setCreateScreenshot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setIsFeedbackSurveyEnabledByAADC\", function() { return setIsFeedbackSurveyEnabledByAADC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateShowSurvey\", function() { return setFloodgateShowSurvey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateShowCustomSurvey\", function() { return setFloodgateShowCustomSurvey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateInitialize\", function() { return setFloodgateInitialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateStart\", function() { return setFloodgateStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateStop\", function() { return setFloodgateStop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFloodgateGetEngine\", function() { return setFloodgateGetEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSettingIdMap\", function() { return getSettingIdMap; });\n/**\r\n * Window.ts\r\n *\r\n * Module wrapping around the global window object\r\n */\r\nvar w = window;\r\nvar officeBrowserFeedback = w.OfficeBrowserFeedback = w.OfficeBrowserFeedback || {};\r\nvar floodgate = officeBrowserFeedback.floodgate = officeBrowserFeedback.floodgate || {};\r\n/**\r\n * Get the IWindow object\r\n */\r\nfunction get() { return w; }\r\n/**\r\n * Get the IWindow object\r\n */\r\nfunction getGlobal() { return w; }\r\n/**\r\n * Set the setUiStrings() method\r\n * @param setUiStrings the method\r\n */\r\nfunction setSetUiStrings(setUiStrings) {\r\n    officeBrowserFeedback.setUiStrings = setUiStrings;\r\n}\r\n/**\r\n * Set the singleFeedback() method\r\n * @param singleFeedback the method\r\n */\r\nfunction setSingleFeedback(singleFeedback) {\r\n    officeBrowserFeedback.singleFeedback = singleFeedback;\r\n}\r\n/**\r\n * Set the multiFeedback() method\r\n * @param multiFeedback the method\r\n */\r\nfunction setMultiFeedback(multiFeedback) {\r\n    officeBrowserFeedback.multiFeedback = multiFeedback;\r\n}\r\n/**\r\n * Set the getFeedbackStatus() method\r\n * @param getFeedbackStatus the method\r\n */\r\nfunction setFeedbackStatus(getFeedbackStatus) {\r\n    officeBrowserFeedback.getFeedbackStatus = getFeedbackStatus;\r\n}\r\n/**\r\n * Set the createScreenshot() method\r\n * @param createScreenshot the method\r\n */\r\nfunction setCreateScreenshot(createScreenshot) {\r\n    officeBrowserFeedback.createScreenshot = createScreenshot;\r\n}\r\n/**\r\n * Set the isFeedbackSurveyEnabledByAADC() method\r\n * @param isFeedbackSurveyEnabledByAADC the method\r\n */\r\nfunction setIsFeedbackSurveyEnabledByAADC(isFeedbackSurveyEnabledByAADC) {\r\n    officeBrowserFeedback.isFeedbackSurveyEnabledByAADC = isFeedbackSurveyEnabledByAADC;\r\n}\r\n/**\r\n * Set the floodgate showSurvey() method\r\n * @param floodgateShowSurvey the method\r\n */\r\nfunction setFloodgateShowSurvey(floodgateShowSurvey) {\r\n    floodgate.showSurvey = floodgateShowSurvey;\r\n}\r\n/**\r\n * Set the floodgate showCustomSurvey() method\r\n * @param floodgateShowSurvey the method\r\n */\r\nfunction setFloodgateShowCustomSurvey(floodgateShowCustomSurvey) {\r\n    floodgate.showCustomSurvey = floodgateShowCustomSurvey;\r\n}\r\n/**\r\n * Set the floodgate initialize() method\r\n * @param floodgateInitialize the method\r\n */\r\nfunction setFloodgateInitialize(floodgateInitialize) {\r\n    floodgate.initialize = floodgateInitialize;\r\n}\r\n/**\r\n * Set the floodgate start() method\r\n * @param floodgateStart the method\r\n */\r\nfunction setFloodgateStart(floodgateStart) {\r\n    floodgate.start = floodgateStart;\r\n}\r\n/**\r\n * Set the floodgate stop() method\r\n * @param floodgateStop the method\r\n */\r\nfunction setFloodgateStop(floodgateStop) {\r\n    floodgate.stop = floodgateStop;\r\n}\r\n/**\r\n * Set the floodgate getEngine() method\r\n * @param floodgateGetEngine the method\r\n */\r\nfunction setFloodgateGetEngine(floodgateGetEngine) {\r\n    floodgate.getEngine = floodgateGetEngine;\r\n}\r\n/**\r\n * Set the floodgate getSettingIdMap() method\r\n * @param floodgateSettingIdMap the method\r\n */\r\nfunction getSettingIdMap(floodgateSettingIdMap) {\r\n    floodgate.getSettingIdMap = floodgateSettingIdMap;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/Window/Window.ts\n");

/***/ }),

/***/ "./scripts/app/thirdparty/aria-webjs-compact-sdk-1.2.2.js":
/*!****************************************************************!*\
  !*** ./scripts/app/thirdparty/aria-webjs-compact-sdk-1.2.2.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse { var i, a; }\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// identity function for calling harmony imports with the correct context\r\n/******/ \t__webpack_require__.i = function(value) { return value; };\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 15);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    // BUG!!: need implement, currently, just handle 32bits number\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype.Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    // BUG!!: need implement, currently, just handle 32bits number\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype.Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number.ToByte = function (value) {\r\n        return this.ToUInt8(value);\r\n    };\r\n    Number.ToInt16 = function (value) {\r\n        var signMask = (value & 0x8000) << 16 >> 16;\r\n        return (value & 0x7fff) | signMask;\r\n    };\r\n    Number.ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number.ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number.ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* Enums.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Common enum values used in the SDK.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    // Supports scrubbing of the last octet in a IPV4 address. E.g. 10.121.227.147 becomes 10.121.227.*\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* AWTBondSerializer.ts\r\n* Author: Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class to handler bond serialization.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Bond = __webpack_require__(9);\r\nvar Enums_1 = __webpack_require__(1);\r\nvar Utils = __webpack_require__(3);\r\nvar AWTBondSerializer = /** @class */ (function () {\r\n    function AWTBondSerializer() {\r\n    }\r\n    AWTBondSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // Begin ClientCollector request\r\n        //Write TokenToDataPackagesMap\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 3);\r\n        writer.WriteMapContainerBegin(tokenCount, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_LIST);\r\n        Object.keys(requestDictionary).forEach(function (token) {\r\n            //write token\r\n            writer.WriteString(token);\r\n            var dataPackage = requestDictionary[token];\r\n            // Write list of DataPackages\r\n            writer.WriteContainerBegin(1, Bond.BondDataType.BT_STRUCT);\r\n            // Source\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 2);\r\n            writer.WriteString('act_default_source');\r\n            // DataPackageId\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 5);\r\n            writer.WriteString(Utils.newGuid());\r\n            // Timestamp\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_INT64, 6);\r\n            writer.WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n            // Records\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_LIST, 8);\r\n            writer.WriteContainerBegin(dataPackage.length, Bond.BondDataType.BT_STRUCT);\r\n            for (var i = 0; i < dataPackage.length; ++i) {\r\n                writer.WriteBlob(dataPackage[i]);\r\n            }\r\n            writer.WriteStructEnd(false);\r\n        });\r\n        // End ClientCollector\r\n        writer.WriteStructEnd(false);\r\n        return stream.GetBuffer();\r\n    };\r\n    // As per mappings at https://skype.visualstudio.com/SCC/F.S4L.FUNDAMENTALS/_git/infrastructure_data_clienttelemetry?\r\n    // path=%2Fclienttelemetry%2Fsrc%2Fbond%2FDataPackage.bond&version=GBdev2&_a=contents\r\n    // Requires that the values of AWTEventData.properties must all be AWTEventProperty\r\n    AWTBondSerializer.getEventBlob = function (eventData) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // ID\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 1);\r\n        writer.WriteString(eventData.id);\r\n        // Timestamp\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_INT64, 3);\r\n        writer.WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 5);\r\n        writer.WriteString(eventData.type);\r\n        // Event Type\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 6);\r\n        writer.WriteString(eventData.name);\r\n        var propsString = [];\r\n        var piiProps = [];\r\n        // Iterate across event data properties and separate based on pii\r\n        Object.keys(eventData.properties).forEach(function (key) {\r\n            var property = eventData.properties[key];\r\n            if (property.pii === Enums_1.AWTPiiKind.NotSet) {\r\n                propsString.push(key);\r\n            }\r\n            else {\r\n                piiProps.push(key);\r\n            }\r\n        });\r\n        //Extension map\r\n        if (propsString.length) {\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 13);\r\n            writer.WriteMapContainerBegin(propsString.length, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_STRING);\r\n            propsString.forEach(function (name) {\r\n                writer.WriteString(name);\r\n                writer.WriteString(eventData.properties[name].value);\r\n            });\r\n        }\r\n        // Pii\r\n        if (piiProps.length) {\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 30);\r\n            writer.WriteMapContainerBegin(piiProps.length, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_STRUCT);\r\n            piiProps.forEach(function (name) {\r\n                writer.WriteString(name);\r\n                // PII Data\r\n                // O365 scrubber type\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_INT32, 1);\r\n                writer.WriteInt32(1);\r\n                // PII Kind\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_INT32, 2);\r\n                writer.WriteInt32(eventData.properties[name].pii);\r\n                // Value\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 3);\r\n                writer.WriteString(eventData.properties[name].value);\r\n                writer.WriteStructEnd(false);\r\n            });\r\n        }\r\n        writer.WriteStructEnd(false);\r\n        return stream.GetBuffer();\r\n    };\r\n    AWTBondSerializer.base64Encode = function (data) {\r\n        return Bond.Encoding.Base64.GetString(data);\r\n    };\r\n    return AWTBondSerializer;\r\n}());\r\nexports.default = AWTBondSerializer;\r\n\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* Author: Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Common functions used in the SDK.\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar GuidRegex = /[xy]/g;\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\nfunction isPii(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPii = isPii;\r\n\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class for SDK version.\r\n*/\r\nexports.Version = '1.2.2';\r\nexports.FullVersionString = 'AWT-Web-CJS-' + exports.Version;\r\n\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar Enums_1 = __webpack_require__(1);\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nvar AWT_1 = __webpack_require__(13);\r\nexports.AWT = AWT_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\n\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar BondDataType;\r\n(function (BondDataType) {\r\n    BondDataType[BondDataType[\"BT_STOP\"] = 0] = \"BT_STOP\";\r\n    BondDataType[BondDataType[\"BT_STOP_BASE\"] = 1] = \"BT_STOP_BASE\";\r\n    BondDataType[BondDataType[\"BT_UINT8\"] = 3] = \"BT_UINT8\";\r\n    BondDataType[BondDataType[\"BT_UINT32\"] = 5] = \"BT_UINT32\";\r\n    BondDataType[BondDataType[\"BT_UINT64\"] = 6] = \"BT_UINT64\";\r\n    BondDataType[BondDataType[\"BT_STRING\"] = 9] = \"BT_STRING\";\r\n    BondDataType[BondDataType[\"BT_STRUCT\"] = 10] = \"BT_STRUCT\";\r\n    BondDataType[BondDataType[\"BT_LIST\"] = 11] = \"BT_LIST\";\r\n    BondDataType[BondDataType[\"BT_MAP\"] = 13] = \"BT_MAP\";\r\n    BondDataType[BondDataType[\"BT_INT32\"] = 16] = \"BT_INT32\";\r\n    BondDataType[BondDataType[\"BT_INT64\"] = 17] = \"BT_INT64\";\r\n    BondDataType[BondDataType[\"BT_UNAVAILABLE\"] = 127] = \"BT_UNAVAILABLE\";\r\n})(BondDataType = exports.BondDataType || (exports.BondDataType = {}));\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar Utf8 = /** @class */ (function () {\r\n    function Utf8() {\r\n    }\r\n    Utf8.GetBytes = function (value) {\r\n        var array = [];\r\n        for (var i = 0; i < value.length; ++i) {\r\n            var char = value.charCodeAt(i);\r\n            if (char < 0x80) {\r\n                array.push(char);\r\n            }\r\n            else if (char < 0x800) {\r\n                array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n            }\r\n            else if (char < 0xd800 || char >= 0xe000) {\r\n                array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n            }\r\n            else {\r\n                char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n                array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n            }\r\n        }\r\n        return array;\r\n    };\r\n    return Utf8;\r\n}());\r\nexports.Utf8 = Utf8;\r\nvar Base64 = /** @class */ (function () {\r\n    function Base64() {\r\n    }\r\n    Base64.GetString = function (inArray) {\r\n        var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n        var output = [];\r\n        var paddingBytes = inArray.length % 3;\r\n        var toBase64 = function (num) {\r\n            return [lookup.charAt((num >> 18) & 0x3F),\r\n                lookup.charAt((num >> 12) & 0x3F),\r\n                lookup.charAt((num >> 6) & 0x3F),\r\n                lookup.charAt(num & 0x3F)].join('');\r\n        };\r\n        for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n            var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n            output.push(toBase64(temp));\r\n        }\r\n        switch (paddingBytes) {\r\n            case 1:\r\n                var temp = inArray[inArray.length - 1];\r\n                output.push(lookup.charAt(temp >> 2));\r\n                output.push(lookup.charAt((temp << 4) & 0x3F));\r\n                output.push('==');\r\n                break;\r\n            case 2:\r\n                var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n                output.push(lookup.charAt(temp2 >> 10));\r\n                output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n                output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n                output.push('=');\r\n                break;\r\n        }\r\n        return output.join('');\r\n    };\r\n    return Base64;\r\n}());\r\nexports.Base64 = Base64;\r\nvar Varint = /** @class */ (function () {\r\n    function Varint() {\r\n    }\r\n    Varint.GetBytes = function (value) {\r\n        var array = [];\r\n        while (value & 0xffffff80) {\r\n            array.push((value & 0x7f) | 0x80);\r\n            value >>>= 7;\r\n        }\r\n        array.push(value & 0x7f);\r\n        return array;\r\n    };\r\n    return Varint;\r\n}());\r\nexports.Varint = Varint;\r\nvar Varint64 = /** @class */ (function () {\r\n    function Varint64() {\r\n    }\r\n    Varint64.GetBytes = function (value) {\r\n        var low = value.low;\r\n        var high = value.high;\r\n        var array = [];\r\n        while (high || (0xffffff80 & low)) {\r\n            array.push((low & 0x7f) | 0x80);\r\n            low = ((high & 0x7f) << 25) | (low >>> 7);\r\n            high >>>= 7;\r\n        }\r\n        array.push(low & 0x7f);\r\n        return array;\r\n    };\r\n    return Varint64;\r\n}());\r\nexports.Varint64 = Varint64;\r\nvar Zigzag = /** @class */ (function () {\r\n    function Zigzag() {\r\n    }\r\n    Zigzag.EncodeZigzag32 = function (value) {\r\n        value = microsoft_bond_primitives_1.Number.ToInt32(value);\r\n        return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n    };\r\n    Zigzag.EncodeZigzag64 = function (value) {\r\n        var low = value.low;\r\n        var high = value.high;\r\n        var tmpH = (high << 1) | (low >>> 31);\r\n        var tmpL = low << 1;\r\n        if (high & 0x80000000) {\r\n            tmpH = ~tmpH;\r\n            tmpL = ~tmpL;\r\n        }\r\n        var res = new microsoft_bond_primitives_1.UInt64('0');\r\n        res.low = tmpL;\r\n        res.high = tmpH;\r\n        return res;\r\n    };\r\n    return Zigzag;\r\n}());\r\nexports.Zigzag = Zigzag;\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype.WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number.ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype.Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this.WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype.GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = __webpack_require__(6);\r\nexports.BondDataType = bond_const_1.BondDataType;\r\nvar Encoding = __webpack_require__(7);\r\nexports.Encoding = Encoding;\r\nvar IO = __webpack_require__(8);\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteBlob = function (blob) {\r\n        this._stream.Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteContainerBegin = function (size, elementType) {\r\n        this.WriteUInt8(elementType);\r\n        this.WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this.WriteUInt8(keyType);\r\n        this.WriteUInt8(valueType);\r\n        this.WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteFieldBegin = function (type, id) {\r\n        if (id <= 5) {\r\n            this._stream.WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream.WriteByte(type | (6 << 5));\r\n            this._stream.WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream.WriteByte(type | (7 << 5));\r\n            this._stream.WriteByte(id);\r\n            this._stream.WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteInt32 = function (value) {\r\n        value = Encoding.Zigzag.EncodeZigzag32(value);\r\n        this.WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteInt64 = function (value) {\r\n        this.WriteUInt64(Encoding.Zigzag.EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteString = function (value) {\r\n        if (value === '') {\r\n            this.WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = Encoding.Utf8.GetBytes(value);\r\n            this.WriteUInt32(array.length);\r\n            this._stream.Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteStructEnd = function (isBase) {\r\n        this.WriteUInt8(isBase ? bond_const_1.BondDataType.BT_STOP_BASE : bond_const_1.BondDataType.BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt32 = function (value) {\r\n        var array = Encoding.Varint.GetBytes(microsoft_bond_primitives_1.Number.ToUInt32(value));\r\n        this._stream.Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt64 = function (value) {\r\n        var array = Encoding.Varint64.GetBytes(value);\r\n        this._stream.Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt8 = function (value) {\r\n        this._stream.WriteByte(microsoft_bond_primitives_1.Number.ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        var _this = this;\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs_1 = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                killedTokens.forEach(function (token) {\r\n                    _this._killedTokenDictionary[token] = Date.now() + durationMs_1;\r\n                });\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTBondSerializer_1 = __webpack_require__(2);\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_maxRequestSize, _outboundQueue) {\r\n        this._maxRequestSize = _maxRequestSize;\r\n        this._outboundQueue = _outboundQueue;\r\n        this._currentBatch = {};\r\n        this._currentBatchSize = 0;\r\n    }\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        var serializedEvent = AWTBondSerializer_1.default.getEventBlob(event);\r\n        if (serializedEvent.length > this._maxRequestSize) {\r\n            //single event too big\r\n            return;\r\n        }\r\n        if (this._currentBatchSize + serializedEvent.length > this._maxRequestSize) {\r\n            this.flushBatch();\r\n        }\r\n        else {\r\n            if (this._currentBatch[event.tenantToken] === undefined) {\r\n                this._currentBatch[event.tenantToken] = [];\r\n            }\r\n            this._currentBatch[event.tenantToken].push(serializedEvent);\r\n            this._currentBatchSize += serializedEvent.length;\r\n        }\r\n    };\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentBatchSize > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentBatchSize = 0;\r\n        }\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class for retry policy.\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* The below expression reads that we should only retry for:\r\n            - HttpStatusCodes that are smaller than 300.\r\n            - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n              and 505-HttpVersionNotSupport).\r\n            - HttpStatusCode 408-RequestTimeout.\r\n           This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(1);\r\nvar AWTTransmissionManager_1 = __webpack_require__(14);\r\nvar Utils = __webpack_require__(3);\r\nvar Version = __webpack_require__(4);\r\nvar AllTokens = 'allTkns';\r\nvar EventNameAndTypeRegex = /^[a-zA-Z0-9]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nvar EventNameDotRegex = /\\./g;\r\nvar PropertyNameRegex = /^[a-zA-Z0-9](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nvar AWT = /** @class */ (function () {\r\n    function AWT() {\r\n    }\r\n    AWT.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            // tslint:disable-next-line\r\n            throw 'Already Initialized';\r\n        }\r\n        this._defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        //Create sender\r\n        AWTTransmissionManager_1.default.initialize(this._config);\r\n        this._isInitialized = true;\r\n    };\r\n    AWT.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManager_1.default.flush(callback);\r\n        }\r\n    };\r\n    AWT.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            this._isDestroyed = true;\r\n            AWTTransmissionManager_1.default.flushAndTeardown();\r\n        }\r\n    };\r\n    AWT.setContext = function (name, property, tenantToken) {\r\n        if (tenantToken === void 0) { tenantToken = AllTokens; }\r\n        property = this._sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            return;\r\n        }\r\n        if (!this._contextProperties[tenantToken]) {\r\n            this._contextProperties[tenantToken] = {};\r\n        }\r\n        this._contextProperties[tenantToken][name] = property;\r\n    };\r\n    AWT.logEvent = function (event) {\r\n        var _this = this;\r\n        if (this._isInitialized) {\r\n            if (!event.name || !event.properties) {\r\n                return;\r\n            }\r\n            event.name = event.name.toLowerCase();\r\n            event.name.replace(EventNameDotRegex, '_');\r\n            var typePrefix = '';\r\n            if (!event.type) {\r\n                event.type = 'custom';\r\n            }\r\n            else {\r\n                event.type.toLowerCase();\r\n                typePrefix = 'custom.';\r\n            }\r\n            if (!EventNameAndTypeRegex.test(event.name) || !EventNameAndTypeRegex.test(event.type)) {\r\n                return;\r\n            }\r\n            event.type = typePrefix + event.type;\r\n            if (isNaN(event.timestamp)) {\r\n                event.timestamp = (new Date()).getTime();\r\n            }\r\n            if (!event.tenantToken) {\r\n                event.tenantToken = this._defaultTenantToken;\r\n            }\r\n            event.id = Utils.newGuid();\r\n            Object.keys(event.properties).forEach(function (name) {\r\n                event.properties[name] = _this._sanitizeProperty(name, event.properties[name]);\r\n                if (event.properties[name] === null) {\r\n                    delete event.properties[name];\r\n                }\r\n            });\r\n            this._addContextIfAbsent(event, event.tenantToken);\r\n            this._addContextIfAbsent(event, AllTokens);\r\n            if (Object.keys(event.properties).length === 0) {\r\n                return;\r\n            }\r\n            this._setDefaultProperty(event, 'EventInfo.InitId', this._getInitId(event.tenantToken));\r\n            this._setDefaultProperty(event, 'EventInfo.Sequence', this._getSequenceId(event.tenantToken));\r\n            this._setDefaultProperty(event, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n            this._setDefaultProperty(event, 'EventInfo.Name', event.name);\r\n            this._setDefaultProperty(event, 'EventInfo.Time', (new Date(event.timestamp)).toISOString());\r\n            AWTTransmissionManager_1.default.sendEvent(event);\r\n        }\r\n    };\r\n    AWT._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUrl) {\r\n            this._config.collectorUrl = config.collectorUrl;\r\n        }\r\n        if (config.sendingTimer > 1000) {\r\n            this._config.sendingTimer = config.sendingTimer;\r\n        }\r\n    };\r\n    AWT._getInitId = function (tenantToken) {\r\n        if (this._initIdMap[tenantToken] === undefined) {\r\n            this._initIdMap[tenantToken] = Utils.newGuid();\r\n        }\r\n        return this._initIdMap[tenantToken];\r\n    };\r\n    AWT._getSequenceId = function (tenantToken) {\r\n        if (this._sequenceIdMap[tenantToken] === undefined) {\r\n            this._sequenceIdMap[tenantToken] = 0;\r\n        }\r\n        return (++this._sequenceIdMap[tenantToken]).toString();\r\n    };\r\n    AWT._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet };\r\n    };\r\n    AWT._addContextIfAbsent = function (event, tenantToken) {\r\n        if (this._contextProperties[tenantToken]) {\r\n            var context_1 = this._contextProperties[tenantToken];\r\n            Object.keys(context_1).forEach(function (name) {\r\n                if (!event.properties[name]) {\r\n                    event.properties[name] = context_1[name];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    AWT._sanitizeProperty = function (name, property) {\r\n        if (typeof property === 'string' || typeof property === 'number' || typeof property === 'boolean') {\r\n            property = { value: property };\r\n        }\r\n        if (!PropertyNameRegex.test(name) || property === undefined || property === null\r\n            || property.value === null || property.value === undefined || property.value === '') {\r\n            return null;\r\n        }\r\n        if (typeof property.pii === 'undefined') {\r\n            property.pii = Enums_1.AWTPiiKind.NotSet;\r\n        }\r\n        property.value = property.value.toString();\r\n        return Utils.isPii(property.pii) ? property : null;\r\n    };\r\n    AWT._isInitialized = false;\r\n    AWT._isDestroyed = false;\r\n    AWT._contextProperties = {};\r\n    AWT._sequenceIdMap = {};\r\n    AWT._initIdMap = {};\r\n    AWT._config = {\r\n        collectorUrl: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        sendingTimer: 1000\r\n    };\r\n    return AWT;\r\n}());\r\nexports.default = AWT;\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTRecordBatcher_1 = __webpack_require__(11);\r\nvar AWTBondSerializer_1 = __webpack_require__(2);\r\nvar AWTRetryPolicy_1 = __webpack_require__(12);\r\nvar AWTKillSwitch_1 = __webpack_require__(10);\r\nvar Version = __webpack_require__(4);\r\nvar FlushCheckTimer = 250;\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\nvar MaxRetries = 4;\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    AWTTransmissionManager.initialize = function (config) {\r\n        this._inboundQueues.push([]);\r\n        this._recordBatcher = new AWTRecordBatcher_1.default(RequestSizeLimitBytes, this._outboundQueue);\r\n        this._newEventsAllowed = true;\r\n        if (typeof Uint8Array === 'undefined') {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._sendingTimer = config.sendingTimer;\r\n        this._urlString = config.collectorUrl + this._urlString + '&x-apikey=';\r\n    };\r\n    //Push the event into the inbound queue and return\r\n    AWTTransmissionManager.sendEvent = function (event) {\r\n        var _this = this;\r\n        if (this._newEventsAllowed) {\r\n            //Add event to the last inbound queue\r\n            this._inboundQueues[this._inboundQueues.length - 1].push(event);\r\n            if (!this._running && this._timeout < 0 && !this._isCurrentlyFlushing) {\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, this._sendingTimer);\r\n            }\r\n        }\r\n    };\r\n    AWTTransmissionManager.flushAndTeardown = function () {\r\n        this._newEventsAllowed = false;\r\n        this._batchAndSendEvents(true);\r\n    };\r\n    AWTTransmissionManager.flush = function (callback) {\r\n        this._inboundQueues.push([]);\r\n        if (!this._isCurrentlyFlushing) {\r\n            this._isCurrentlyFlushing = true;\r\n            this._flush(callback);\r\n        }\r\n        else {\r\n            this._flushQueue.push(callback);\r\n        }\r\n    };\r\n    AWTTransmissionManager._batchAndSendEvents = function (isTeardown) {\r\n        this._running = true;\r\n        while (this._inboundQueues[0].length > 0 && this._outboundQueue.length < 1) {\r\n            this._recordBatcher.addEventToBatch(this._inboundQueues[0].pop());\r\n        }\r\n        if (this._outboundQueue.length === 0) {\r\n            this._recordBatcher.flushBatch();\r\n        }\r\n        this._sendRequest(this._outboundQueue.pop(), 0, isTeardown);\r\n    };\r\n    AWTTransmissionManager._retryRequestIfNeeded = function (conn, request, tokenCount, apikey, retryCount) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (conn && typeof conn.status !== 'undefined') {\r\n            var killedTokens = this._killSwitch.setKillSwitchTenants(conn.getResponseHeader('kill-tokens'), conn.getResponseHeader('kill-duration-seconds'));\r\n            killedTokens.forEach(function (key) {\r\n                delete request[key];\r\n                tokenCount--;\r\n            });\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(conn.status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry && retryCount < MaxRetries) {\r\n            setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n        }\r\n        else {\r\n            this._handleRequestFinished(null);\r\n        }\r\n    };\r\n    AWTTransmissionManager._sendRequest = function (request, retryCount, isTeardown) {\r\n        var _this = this;\r\n        try {\r\n            var conn_1 = new XMLHttpRequest();\r\n            var tokenCount_1 = 0;\r\n            var apikey_1 = '';\r\n            Object.keys(request).forEach(function (token) {\r\n                if (!_this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey_1.length > 0) {\r\n                        apikey_1 += ',';\r\n                    }\r\n                    apikey_1 += token;\r\n                    tokenCount_1++;\r\n                }\r\n                else {\r\n                    delete request[token];\r\n                }\r\n            });\r\n            conn_1.open('POST', this._urlString + apikey_1, !isTeardown);\r\n            if (!isTeardown) {\r\n                conn_1.ontimeout = function () {\r\n                    _this._retryRequestIfNeeded(conn_1, request, tokenCount_1, apikey_1, retryCount);\r\n                };\r\n                conn_1.onerror = function () {\r\n                    _this._retryRequestIfNeeded(conn_1, request, tokenCount_1, apikey_1, retryCount);\r\n                };\r\n                conn_1.onload = function () {\r\n                    _this._handleRequestFinished(conn_1);\r\n                };\r\n            }\r\n            if (tokenCount_1 > 0) {\r\n                var blob = AWTBondSerializer_1.default.getPayloadBlob(request, tokenCount_1);\r\n                if (typeof Uint8Array === 'undefined') {\r\n                    conn_1.send(AWTBondSerializer_1.default.base64Encode(blob));\r\n                }\r\n                else {\r\n                    conn_1.send(new Uint8Array(blob));\r\n                }\r\n            }\r\n            else if (isTeardown) {\r\n                this._handleRequestFinished(null);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._handleRequestFinished(null);\r\n        }\r\n    };\r\n    AWTTransmissionManager._handleRequestFinished = function (conn) {\r\n        var _this = this;\r\n        if (conn) {\r\n            this._killSwitch.setKillSwitchTenants(conn.getResponseHeader('kill-tokens'), conn.getResponseHeader('kill-duration-seconds'));\r\n        }\r\n        if (this._inboundQueues[0].length > 0) {\r\n            this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, this._sendingTimer);\r\n        }\r\n        else {\r\n            this._timeout = -1;\r\n            this._running = false;\r\n        }\r\n    };\r\n    AWTTransmissionManager._flush = function (callback) {\r\n        var _this = this;\r\n        if (!this._running) {\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            if (this._inboundQueues[0].length > 0) {\r\n                this._batchAndSendEvents(false);\r\n            }\r\n        }\r\n        this._checkPrimaryInboundQueueEmpty(function () {\r\n            //Move the next queue to be primary\r\n            _this._inboundQueues.shift();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._flushQueue.length > 0) {\r\n                setTimeout(function () { return _this._flush(_this._flushQueue.shift()); }, _this._sendingTimer);\r\n            }\r\n            else {\r\n                _this._isCurrentlyFlushing = false;\r\n                if (_this._inboundQueues[0].length > 0) {\r\n                    _this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, _this._sendingTimer);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTTransmissionManager._checkPrimaryInboundQueueEmpty = function (callback) {\r\n        var _this = this;\r\n        if (this._inboundQueues[0].length === 0) {\r\n            this._checkOutboundQueueEmptyAndSent(callback);\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkPrimaryInboundQueueEmpty(callback); }, FlushCheckTimer);\r\n        }\r\n    };\r\n    AWTTransmissionManager._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (!this._running) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, FlushCheckTimer);\r\n        }\r\n    };\r\n    AWTTransmissionManager._outboundQueue = [];\r\n    AWTTransmissionManager._inboundQueues = [];\r\n    AWTTransmissionManager._newEventsAllowed = false;\r\n    AWTTransmissionManager._killSwitch = new AWTKillSwitch_1.default();\r\n    AWTTransmissionManager._isCurrentlyFlushing = false;\r\n    AWTTransmissionManager._flushQueue = [];\r\n    AWTTransmissionManager._running = false;\r\n    AWTTransmissionManager._timeout = -1;\r\n    AWTTransmissionManager._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n        + Version.FullVersionString;\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\nmodule.exports = __webpack_require__(5);\r\n\r\n\r\n/***/ })\r\n/******/ ]);\r\n});\r\n//# sourceMappingURL=aria-webjs-compact-sdk-1.2.2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/app/thirdparty/aria-webjs-compact-sdk-1.2.2.js\n");

/***/ })

/******/ });