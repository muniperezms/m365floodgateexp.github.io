{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/app/Utils.ts","webpack:///./scripts/app/Configuration/Configuration.ts","webpack:///index.ts","webpack:///src/Utils.ts","webpack:///./scripts/app/Configuration/IInitOptions.ts","webpack:///./scripts/app/Constants.ts","webpack:///src/Api/IFloodgateStorageProvider.ts","webpack:///src/Api/Api.ts","webpack:///src/Constants.ts","webpack:///src/GovernedChannel.ts","webpack:///src/Api/ISurvey.ts","webpack:///src/Api/ISurveyComponent.ts","webpack:///src/FloodgateEngine.ts","webpack:///src/Campaign/CampaignDefinitionProvider.ts","webpack:///src/Api/IGovernanceServiceClient.ts","webpack:///src/Surveys/SurveyDataSource.ts","webpack:///src/Surveys/Survey.ts","webpack:///../../../src/generated/schema-object.g.ts","webpack:///src/Governor.ts","webpack:///src/ISurveyInfo.ts","webpack:///src/StateProviderHelpers.ts","webpack:///src/SurveyComponents/CommentComponent.ts","webpack:///src/SurveyComponents/PromptComponent.ts","webpack:///src/SurveyComponents/RatingComponent.ts","webpack:///src/SurveyActivityListener.ts","webpack:///src/Campaign/CampaignStateProvider.ts","webpack:///src/SurveyStatCollectionActivation.ts","webpack:///src/SurveyStatCollection.ts","webpack:///src/SurveyComponents/CVSurveyComponent.ts","webpack:///src/GovernedChannelStateProvider.ts","webpack:///src/SurveyStatCollectionEventActivity.ts","webpack:///./scripts/app/Localization.ts","webpack:///../../src/index.ts","webpack:///src/Api/IActivityListener.ts","webpack:///src/Api/IFloodgateSettingIdMap.ts","webpack:///src/Campaign/CampaignManager.ts","webpack:///src/Campaign/CampaignSurveyFactory.ts","webpack:///src/SurveyEvents.ts","webpack:///src/ActivityTrackingData.ts","webpack:///src/ActivityTrackingSet.ts","webpack:///src/SurveyMetadata.ts","webpack:///src/Surveys/FpsSurvey.ts","webpack:///src/SurveyComponents/MultipleChoiceComponent.ts","webpack:///src/Surveys/GenericMessagingSurfaceSurvey.ts","webpack:///src/Surveys/InterceptSurvey.ts","webpack:///src/SurveyComponents/InterceptComponent.ts","webpack:///src/Surveys/NlqsSurvey.ts","webpack:///src/Surveys/NpsSurvey.ts","webpack:///src/FloodgateSettings.ts","webpack:///src/ActivityTracker.ts","webpack:///src/IndexedTracker.ts","webpack:///src/ActivityTrackingContract.ts","webpack:///src/GovernanceUtils.ts","webpack:///src/UserFact/UserFactHelper.ts","webpack:///src/UserFact/UserFact.ts","webpack:///./scripts/app/thirdparty/aria-webjs-compact-sdk-1.2.2.js","webpack:///../../src/annotations.ts","webpack:///../../src/operations.ts","webpack:///../../src/tiles.ts","webpack:///../../../src/generated/annotations.g.ts","webpack:///../../../src/generated/operations.g.ts","webpack:///../../../src/generated/signals.g.ts","webpack:///../../../src/generated/tiles.g.ts","webpack:///./scripts/app/Version.ts","webpack:///./scripts/app/Window/Window.ts","webpack:///./scripts/app/Logging/Telemetry/Contracts.ts","webpack:///./scripts/app/Logging/Telemetry/Aria.ts","webpack:///./scripts/app/Logging/Telemetry/AriaTelemetryLogger.ts","webpack:///./scripts/app/FloodgateCore/FloodgateStorageProvider.ts","webpack:///./scripts/app/Logging/Constants.ts","webpack:///./scripts/app/TargetedMessaging/TargetedMessagingCache.ts","webpack:///./scripts/app/Configuration/DynamicConfiguration.ts","webpack:///./scripts/app/Logging/Logging.ts","webpack:///./scripts/app/Logging/Telemetry/TelemetryLoggerFactory.ts","webpack:///./scripts/app/CommonApp.ts","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./scripts/app/TargetedMessaging/TargetedMessagingTransport.ts","webpack:///./scripts/app/TargetedMessaging/TargetedMessagingConstants.ts","webpack:///./scripts/app/Common/UrlUtils.ts","webpack:///./scripts/app/TargetedMessaging/AugLoopHelper.ts","webpack:///./scripts/app/TargetedMessaging/TargetedMessagingClient.ts","webpack:///./scripts/app/TargetedMessaging/AssetsProvider.ts","webpack:///./scripts/app/FloodgateCore/CoachingUXLauncherFactory.ts","webpack:///./scripts/app/Window/DomUtils.ts","webpack:///./scripts/app/FloodgateCore/UISurvey/UISurvey.ts","webpack:///./scripts/app/FloodgateCore/RudeSurveyLauncherFactory.ts","webpack:///./scripts/app/FloodgateCore/AdaptiveSurveyLauncherFactory.ts","webpack:///./scripts/app/Transport/Petrol.ts","webpack:///./scripts/app/Transport/Files/Screenshot.ts","webpack:///./scripts/app/Transport/Files/Manifest.ts","webpack:///./scripts/app/Transport/Transport.ts","webpack:///./scripts/app/FloodgateCore/TransporterFactory.ts","webpack:///./scripts/app/FloodgateCore/FloodgateEnvironmentProvider.ts","webpack:///./scripts/app/UIStrings/UIStrings.ts","webpack:///./scripts/app/FloodgateCore/FloodgateStringProvider.ts","webpack:///./scripts/app/TargetedMessaging/TargetedMessagingCampaignDefinitionProvider.ts","webpack:///./scripts/app/TargetedMessaging/LocalUserFactHelper.ts","webpack:///./scripts/app/TargetedMessaging/UserFactsProvider.ts","webpack:///./scripts/app/DynamicContent/DynamicContentTransport.ts","webpack:///./scripts/app/Personalizer/PersonalizerClient.ts","webpack:///./scripts/app/GovernanceService/GovernanceServiceClient.ts","webpack:///./scripts/app/CommonFloodgate.ts","webpack:///./scripts/app/FloodgateCore/FloodgateTelemetryLogger.ts","webpack:///./scripts/app/App_Floodgate_Bare.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","guid","overrideValues","isNOU","isBoolean","isString","isObject","isEnumValue","isNumber","isInteger","isFinite","Math","floor","expectObject","expectNumber","expectString","expectBoolean","expectGuid","test","isGuid","expectArray","Array","isArray","expectEnum","enumType","createTimeoutPromise","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","race","checkCssSelectorToBeSet","cssSelector","sheetIndex","document","styleSheets","length","currentStyleSheet","rulesIndex","rules","currentRule","selectorText","includes","error","Configuration","feedbackSubmitted","categories","show","customCategories","customCategory","this","commonInitOptions","inAppFeedbackInitOptions","inAppFeedbackLaunchOptions","floodgateInitOptions","floodgateSurvey","sdkSessionId","eventSampling","passedInitOptions","initOptions","appId","applicationGroup","build","cid","environment","intlFilename","intlUrl","webSurfacesResourceBaseUrl","locale","onError","originalLocale","primaryColour","secondaryColour","sessionId","stylesUrl","telemetryGroup","userEmail","webGroup","petrolTimeout","isCommercialHost","customResourcesSetExternally","emailPolicyValue","screenshotPolicyValue","ageGroup","authenticationType","applicationSettings","webSurfacesSettings","expectedValues","Strings","Css","undefined","None","processSessionId","extendedManifestData","JSON","stringify","RegExp","officeBuild","hexColourRegex","err","Unauthenticated","Undefined","parseEventSamplingOption","commonPolicyAllowAADC","determineAADCPolicy","bugForm","onDismiss","screenshot","showEmailAddress","transitionEnabled","isShowThanks","sendFeedbackPolicyValue","feedbackForumUrl","myFeedbackForumUrl","submitted","launchOptions","validateCategoryOptions","autoDismiss","campaignDefinitions","campaignFlights","campaignQueryParameters","onSurveyActivatedCallback","settingStorageCallback","uIStringGetter","authTokenCallback","surveyEnabled","augLoopCallback","customerVoiceSurveyParams","governanceServiceEnabled","governanceServiceConfig","personalizerEnabled","messagingServiceSettings","campaignId","defaultOnSurveyActivatedCallback","launcher","survey","surveyParams","launch","str","parseGovernanceServiceConfig","cvFlights","isCVSurveyEnabled","productName","uiHost","AAD","MinorWithParentalConsent","MinorWithoutParentalConsent","Adult","NotAdult","MinorNoParentalConsentRequired","samplingOptions","eventInitSampling","event","index","type","sampleRate","config","forceServicelessSurveyDisplay","retry","simpleRequestEnabled","configuration","Api","Utils","FloodgateEngine","isDate","input","toString","isNaN","getTime","subtractSecondsWithoutOverflow","date","seconds","addSecondsWithoutOverflow","milliseconds","MIN_DATE_MILLISECONDS","Date","interval","units","toLowerCase","Error","MAX_DATE_MILLISECONDS","extractLanguageSubtag","language","matches","match","randomHex4","random","substring","subTag","extractedSubTag","substr","keys","sort","values","push","newDate","sourceObject","targetobject","result","field","pad","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","arrIn","lastNonShuffledElement","pickIndex","temp","serializedValue","defaultValue","parsedObject","parse","e","CustomResources","AgeGroup","AuthenticationType","customerVoiceLauncherType","FeedbackType","DynamicScriptUrls","WebSurfacesIntLink","WebSurfacesProdLink","GUIDs","TMSAppID","TULIPSAppID","SDK_VERSION_PREFIX","IFloodgateStorageProvider","FileType","ISurveyInfo","IActivityListener","IFloodgateSettingIdMap","ISurvey","ISurveyComponent","CampaignDefinition","CampaignState","Deserialize","Failed","FileBasedCampaignStateProvider","Load","HostBasedCampaignStateProvider","GetStatesFromHost","Floodgate","Initialize","Start","Warning","SurveysDisabled","UserFactsLoad","UserFactsSpecDeserialization","UserFactsSpecIsAMatch","Mismatch","Summary","Make","Common","StartAsync","Stopped","OnSurveyActivated","ActivationStatsSuppressedSurvey","ClosedChannelType","SurveyNotDefined","SessionSuppressedSurvey","ActivationExpiredSurvey","ActivationIrrelevantSurvey","CheckGovernanceServiceAndActivateSurvey","GovernanceServiceForceToDisplay","GovernanceServiceClientCompleted","GovernedChannelState","FileBasedGovernedChannelStateProvider","HostBasedGovernedChannelStateProvider","SurveyStatCollectionActivation","FromJson","ToJson","HostBasedSurveyActivationStatsProvider","GetSurveyStatsFromHost","SurveyStatCollectionEventActivity","SurveyActivity","LogActivity","EventsReprocessed","SurveysReprocessed","SetActivityTrackingContracts","DuplicateSurveyID","TelemetryEvent","GovernedChannelType","getDefault","Standard","cooldownSeconds","cooldownStartTime","setCooldownStartTime","cooldownEndTime","getDistantPast","isOpen","isOpenAtDate","getType","getName","getCooldownSeconds","getCooldownStartTime","getCooldownEndTime","GovernedChannel","Type","DOM_FEEDBACKSURVEY_TAGNAME","DOM_NPS_TAGNAME","DOM_PSAT_TAGNAME","DOM_BPS_TAGNAME","DOM_FPS_TAGNAME","DOM_NLQS_TAGNAME","DOM_INTERCEPT_TAGNAME","LAUNCHER_TYPE_DEFAULT","DOM_PROMPT_TAGNAME","DOM_COMMENT_TAGNAME","DOM_RATING_TAGNAME","DOM_CVSURVEY_TAGNAME","DOM_MULTIPLECHOICE_TAGNAME","JSON_INTERCEPT_KEYNAME","JSON_INTERCEPTURL_KEYNAME","JSON_PROMPT_KEYNAME","JSON_PROMPTYESTEXT_KEYNAME","JSON_PROMPTNOTEXT_KEYNAME","JSON_COMMENT_KEYNAME","JSON_RATING_KEYNAME","JSON_CVSURVEY_KEYNAME","JSON_CVSURVEYFORMID_KEYNAME","JSON_CVSURVEYTHEME_KEYNAME","JSON_RATINGOPTIONS_KEYNAME","JSON_CVSURVEYPRODUCTNAME_KEYNAME","JSON_CVSURVEYUIHOST_KEYNAME","JSON_CVSURVEYPLATFORM_KEYNAME","JSON_TITLE_KEYNAME","JSON_QUESTION_KEYNAME","JSON_MULTIPLECHOICE_KEYNAME","JSON_APPLICATION_KEYNAME","JSON_EXTENDEDMANIFESTDATA_KEYNAME","JSON_SURVEYSTRINGS_KEYNAME","JSON_SURVEYSPECIFICDATA_KEYNAME","log_TriggerMet","surveyId","surveyType","surveyActivityInfo","additionalSurveyInfo","log_UserSelected","log_CampaignLoad_Failed","errorMessage","log_Error","eventId","log_Event","properties","log_LocalError","message","defaultSurveyActivityListener","run","shouldAcceptActivity","activityName","globalSessionSurveyActivationCounts","surveyClient","activityListener","launcherFactory","storage","governor","surveyActivationStatsProvider","transporterFactory","governanceServiceClient","initializationStatus","candidateSurveys","launchedSurveys","launchedLaunchers","surveyEventSent","staleTriggeredSurveysQueue","loggedFirstStart","setPendingSurveys","clearSurveys","thisObj","setCallback","contextInfo","onSurveyActivated","setTelemetryLogger","telemetryLogger","getTelemetryLogger","getTransportFactory","make","buildVersion","fileBasedStorageProvider","hostBasedStorageProvider","stringProvider","environmentProvider","campaignDefinitionProviders","userFactsProvider","governedChannelStateProvider","GovernedChannelStateProviderFactory","SurveyActivationStatsProviderFactory","campaignStateProvider","CampaignStateProviderFactory","FileSystemCampaignDefinitionProvider","CampaignManager","SurveyActivityListener","Governor","ErrorMessage","ErrorDetails","stack","mergeAndSave","saveSettings","saveSurveyActivationHistory","saveSurveyEventActivityHistory","saveCurrentState","saveChannelStates","start","setInitializationStatus","loadSettingsAndPriorEventCounts","channelTypes","getAvailableChannelTypes","refreshSurveyDefinitions","setPendingSurveysAndStartFloodgate","startAsync","refreshSurveyDefinitionsAsync","then","stop","catch","updateActivityListenerWithCurrentSurveyDefinitions","getActivityListener","status","fileLock","FloodgateSettings","writeString","toJson","floodgateSettings","fileUnlock","previousSurveyActivationStats","load","previousSurveyEventActivityStats","fromJson","readString","SurveyEventActivityStats","stats","getStats","channels","getAvailableChannelData","forEach","channel","getAppSurveys","logActivity","FloodgateStartActivityName","updateSurveyActivationStats","surveyInfo","getSurveyInfo","getId","SurveyActivationStats","ExpirationTimeUtc","getExpirationTimeUtc","ActivationTimeUtc","SurveyLaunchCount","addStats","statCollection","previousStats","updateCollection","accumulate","save","now","isActiveForDate","allActivities","getActivationEvent","getTrackingSet","getList","data","getIsAggregate","getActivity","Counts","moveSessionCountIntoBaseCount","activity","saveSessionTrackingActivity","pendingSurveys","AcceptsSurvey","getCurrentSurveyDefinitions","surveyList","allCampaignDefinitionIDs","getAllCampaignDefinitionIDs","allCandidateCampaignDefinitionIDs","getAllCandidateCampaignDefinitionIDs","allCampaignDefinitions","getCampaignDefinitions","isSurveyAllowed","isBusinessCriticalSurvey","surveyActivationStats","getBySurveyId","isMultiLaunchSurvey","hasSurveyReachedMaxLaunches","hasSurveyReachedMaxLaunchesPerSession","getBackEndId","indexOf","getAdditionalSurveyInfoForTelemetry","percentageNumerator","percentageDenominator","nominationPeriodNumber","cooldownPeriodNumber","correspondingCampaignDefinition","getCampaignId","nominationScheme","nominationPeriod","asTimeIntervalSeconds","cooldownPeriod","channelType","getGovernedChannelType","contextCount","surveyLauncherType","getLauncherType","businessLevel","getBusinessLevel","maxLaunches","getMaxLaunches","maxLaunchesPerSession","getMaxLaunchesPerSession","candidateSurvey","definitionsKey","definition","trackingContractList","trackingContract","ActivityTrackingContract","setCriticalPendingSurveysAndUpdateActivityListener","activeSurveys","isCriticalSurvey","tempSurvey","governedChannelType","isEnabled","checkGovernanceServiceAndActivateSurvey","activateSurvey","launchSurvey","refreshChannelData","isChannelOpen","CampaignId","SurveyId","triggeredSurvey","activityTrackingString","getActivityTrackingInfo","governanceServiceClientState","getClientState","startChannelCooldown","isSurveyComplete","launchLauncher","campaignDefinition","campaignCooldown","channelCooldown","GetChannelCoolDown","checkGovernancePermitAsync","serviceResult","Message","createGorvernanceResponseTelemetry","shouldForceDisplay","permission","lastSurveyTriggerInfo","lastTriggerSurvey","lastTriggerSurveyTime","clearSurveyWithChannel","shift","fileType","read","write","makeSurveyLauncher","UpdateActivityTrackingContracts","FloodgateEngineStatus","GovernanceServiceResult","StaleTriggeredSurveysQueueCount","DefaultFloodgateTelemetryLogger","getDistantFuture","isUtcDatetimeString","stringToDate","deserialize","CampaignLanguageRangeLanguageSubtag","validate","CampaignLanguageRange","languageSubTag","Value","isInRange","extractedLanguageSubTag","toLocaleUpperCase","isValidLanguageSubTag","CampaignScopeAny","CampaignScopeEnvironmentCrossProduct","CampaignScopeUserFactAny","CampaignScopeUserFactAll","CampaignScope","isInScope","languageRanges","Languages","readRange","setEnvironmentProvider","getLanguage","userFacts","deserializeUserFacts","setUserFactsProvider","some","userFact","rawUserFact","getUserFact","isAMatch","validateUserFacts","mismatchedFacts","filter","mismatchedNames","map","Count","CampaignDurationTimeInterval","CampaignDurationSingleBuildChange","CampaignDuration","intervalSeconds","IntervalSeconds","additionalDataRequested","CampaignAdditionalDataRequested","additionalData","CampaignDistributionRamp","CampaignDistribution","maxDelaySeconds","MaxDelaySeconds","chunks","Chunks","CampaignNominationSchemeRatioPercentage","getActiveSurveyTimeIntervalSeconds","nominationTimIntervalSeconds","fallbackSurveyDurationSeconds","calculateSurveyStartTimeFromDate","soonestStartTime","calculateSurveyExpirationTimeFromSurveyStartTime","surveyStartTime","getCampaignCooldown","didUserActivateSurvey","CampaignNominationScheme","DistributionModel","distributionModel","CooldownPeriod","NominationPeriod","FallbackSurveyDurationSeconds","PercentageDenominator","PercentageNumerator","evaluateNominationRules","rand","CampaignSurveyEventCountedActivity","CampaignSurveyEventCountedActivitySequence","CampaignSurveyEvent","Activity","count","isAggregate","IsAggregate","sequence","Sequence","readActivity","optionalComponents","CampaignSurveyContent","prompt","CampaignSurveyContentPrompt","Prompt","rating","CampaignSurveyContentRating","Rating","comment","CampaignSurveyContentComment","Question","multipleChoice","CampaignSurveyContentMultipleChoice","MultipleChoice","intercept","CampaignSurveyContentIntercept","Intercept","cvSurvey","CampaignSurveyContentCVSurvey","CVSurveyParams","question","availableOptions","AvailableOptions","minNumberOfSelectedOptions","MinNumberOfSelectedOptions","maxNumberOfSelectedOptions","MaxNumberOfSelectedOptions","customerVoiceFormId","CustomerVoiceFormId","title","Title","yesLabel","YesLabel","noLabel","NoLabel","url","Url","isZeroBased","IsZeroBased","ratingValuesAscending","RatingValuesAscending","CampaignSurveyMetadata","contentMetadata","ContentMetadata","CampaignSurveyTemplateNps5PointStatic","CampaignSurveyTemplateNps11PointStatic","CampaignSurveyTemplateFps","CampaignSurveyTemplateNlqs","CampaignSurveyTemplateNps","CampaignSurveyTemplateGenericMessagingSurface","CampaignSurveyTemplateIntercept","activationEvent","CampaignSurveyTemplate","ActivationEvent","content","Content","metadata","Metadata","MaxLaunches","MaxLaunchesPerSession","preferredLaunchType","PreferredLaunchType","startTime","StartTimeUtc","endTime","EndTimeUtc","launcherType","LauncherType","primaryPriority","PrimaryPriority","tags","Tags","AdditionalDataRequested","SurveyTemplate","surveyTemplate","NominationScheme","Scope","scope","BusinessLevel","FilterValidCampaignDefinitions","badIndexes","newDefinition","readDefinitions","definitionString","CampaignDefinitions","loadAsync","definitions","GovernanceServiceSurveyType","GovernanceServiceClientState","expirationTimeUtc","backEndIdentifier","getRawStartTimeUtc","startTimeUtc","getStartTimeUtc","parsed","getRawExpirationTimeUtc","getPreferredLaunchType","isAdditionalDataRequested","additionalDataToCheck","getMetadata","getDomElements","doc","typeElement","createElement","DOM_TYPE_TAGNAME","appendChild","createTextNode","DOM_TYPE_VALUE","idElement","DOM_ID_TAGNAME","getJsonElements","surveyObject","JSON_ID_KEYNAME","JSON_SURVEY_KEYNAME","SurveyDataSource","SurveyDataSourceData","getClientFeedbackId","clientFeedbackId","submit","transporter","makeTransporter","setManifestValues","getPreGeneratedClientFeedbackId","Survey","obj","SchemaObject","assign","getTypeName","getBaseTypes","getTypeNameFor","H_","T_","getBaseTypesFor","B_","getAllTypesFor","typeName","matchesTypesFor","types","objType","baseTypes","ctr","target","source","DEFAULT_TEACHING_MESSAGE_COOLDOWN","channelStateProvider","loadChannels","channelData","defaultChannelData","SetDefaultChannelCoolDown","channelStates","channelState","item","loadChannelStatesFromProvider","Number","defaultData","newChannel","minute","hour","day","DefaultChannelData","Urgent","Banner","TeachingMessage","items","itemCount","add","find","remove","ItemCollection","itemValue","beginPos","SETTING_DATA_OPEN_TAG","endPos","SETTING_DATA_CLOSE_TAG","previousStates","currentStates","stateCollections","mergedStates","toBeUpdatedStates","previousState","currentState","pos","splice","current","LastCooldownEndTimeUtc","getCooldownStartDate","LastNominationTimeUtc","currentStats","statsCollections","mergedStats","toBeUpdatedStats","previousStatsDictionary","currentStatsDictionary","currentActivationStats","toBeUpdatedStatsDictionary","toBeUpdated","userComment","CommentComponent","getQuestion","setSubmittedText","getSubmittedText","element","getComponentJson","CommentComponentData","yesButtonLabel","noButtonLabel","selectedButton","PromptComponent","getTitle","getYesButtonText","getNoButtonText","setButtonSelected","selected","getButtonSelected","promptButtonToString","PromptComponentData","selectedIndex","RatingComponent","getRatingValuesAscending","getSelectedRating","isRatingIndexValid","setSelectedRatingIndex","getSelectedRatingIndex","getNormalizedRatingScore","toFixed","RatingComponentData","queuedActivities","pendingActivityCount","previousTrackedActivityMap","callback","loggerCallback","activityContext","trackedActivityMap","resetSessionActivity","increment","context","logActivity_private","logActivityStartTime","logActivityStopTime","stopTime","activityTrackingContracts","baseline","duplicateCounter","newMap","trackedSurveyIds","activityTrackingContract","trackingSet","baselineStats","baselineCounts","currentIndexedTrackers","currentBaselineIndex","currentIndex","trackingData","tracker","newTracker","ActivityTracker","initCounts","generateActivityIndexList","activityIndex","indexedTracker","IndexedTracker","copyObject","getOwnPropertyNames","getCount","getIndexedTracker","getSessionCount","getSurveyIds","indexedTrackers","resetQueuedActivities","logType","timestamp","MaxPendingActivitiesQueueSize","activityNames","slice","queuedActivity","ActivityNames","Dropped","logActivity_core","indices","fyShuffle","trackerSurveyId","incrementActivity","executeCallback","lastNominationTime","lastNominationBuildNumber","deleteAfterSecondsWhenStale","ForceCandidacy","isCandidate","didCandidateTriggerSurvey","lastSurveyActivatedTime","lastSurveyId","lastSurveyStartTime","lastSurveyExpirationTime","lastCooldownEndTimeUtc","LastNominationBuildNumber","DeleteAfterSecondsWhenStale","IsCandidate","DidCandidateTriggerSurvey","LastSurveyActivatedTimeUtc","LastSurveyId","LastSurveyStartTimeUtc","LastSurveyExpirationTimeUtc","markCurrentSurveyTakenOnDate","fileBasedStorage","hostBasedStorage","fileBasedStateProvider","statesFromFile","statesFromHost","getStatesFromHost","StateProviderHelpers","MergeAndUpdateCampaignStates","campaignStates","StateCollections","state","stateValue","makeSettingItemValue","upsertSettingItem","CampaignStates","states","settings","readSettingList","dataString","extractSettingItemValueSubString","itemObject","newState","fileData","FileData","json","readStats","other","rawStats","Surveys","newStat","SurveyStatCollection","FileBasedSurveyActivationStatsProvider","surveyStatsFromHost","getSurveyStatsFromHost","surveyStatsFromFile","MergeAndUpdateSurveyActivationStats","statsFromHost","statsCollection","itemData","newStats","deleteSettingItem","surveyStatCollectionActivation","SurveyLaunchCountPerSession","CVSurveyComponent","getFormId","CVSurveyComponentData","ChannelType","CooldownStartTimeUtc","MergeAndUpdateGovernedChannelStates","GovernedChannelStates","String","ChannelStates","ourStats","resizedCounts","val","supportedLocales","localeVariantToSupportedlocaleMap","localeUpperCase","supportedLocale","toUpperCase","localePartOne","split","ItemOperation","ItemChanges","AppLaunch","AppUsageTime","AppResume","ActivityName","RoamingSettingIdMap","stateProvider","definitionProviders","currentBuildNumber","currentDate","isStateUpForNomination","buildNumber","campaignCooldownDuration","hasBuildChangeDurationElapsed","hasTimeIntervalDurationElapsed","isDateInRange","startDate","endDate","duration","startBuild","isCampaignInScope","isDateInRangeWithDefinition","getActiveSurveys","surveys","prioritizedCampaigns","getPrioritizedCampaigns","CampaignSurveyFactory","makeSurvey","onCampaignSurveyActivated","takenDate","getCampaignStates","getUserFacts","refreshSurveyDefinitionsPrivate","refreshSurveyDefinitionsPrivateAsync","errReason","makeArrayFromObjectValuesSortedByKeyString","loadAndFilterCampaignData","evaluateCampaigns","thisCampaignManager","loadAndFilterCampaignDataAsync","loadedDefinitions","promises","userFactsPromise","provider","all","concat","setUserFacts","FilterCampaignData","loadedDefinitionsMap","Critical","loadedStates","staleLoadedStates","shouldRemove","matchingTagCampaigns","tagId","mapKey","maxPriority","reduce","prev","cur","currentPriority","dateToShortUtcString","surveyDataSource","makeSurveyDataSourceData","surveyModel","NpsSurvey","make5Point","make11Point","FpsSurvey","makeFps","NlqsSurvey","makeNlqs","makeCustom","GenericMessagingSurfaceSurvey","InterceptSurvey","makeIntercept","surveyData","makeEvent","makeMetadata","makeCountedActivityEventData","eventModel","eventData","CountedActivityEventData","makeCountedActivityEvent","CountedActivityEvent","makeCountedActivitySequenceEvent","sequenceEventData","CountedActivitySequenceEventData","CountedActivitySequenceEvent","metadataModel","SurveyMetadata","trackingDataList","ActivityTrackingData","ActivityTrackingSet","countedActivityEventData","getSequence","countedActivityEvent","setCount","isOrdered","list","getIsOrdered","activitiesInfoObject","Activities","IsListOrdered","actualCount","tempActivities","ActualCount","IsDiscrete","getContentMetadata","baseData","promptData","commentData","ratingData","multipleChoiceData","MultipleChoiceComponent","cvSurveyData","sp","FpsSurveyData","getCustomString","customString","MultipleChoiceComponentData","Fps","getCommentComponent","getPromptComponent","getRatingComponent","getMultipleChoiceComponent","getCVSurveyComponent","getComponent","componentType","child","makeSurveyStrings","makeResponseString","response","getOptionSelectedStates","numberOfOptions","selectedRating","actualStrings","option","optionStates","getAvailableOptions","getMinNumberofSelectedOptions","getMaxNumberofSelectedOptions","setOptionSelectedStates","selectedStates","ValidateMinNumberofSelectedOptions","ValidateMaxNumberofSelectedOptions","GenericMessagingSurfaceSurveyData","GenericMessagingSurface","InterceptComponent","interceptData","InterceptSurveyData","InterceptComponentData","getInterceptComponent","getUrl","NlqsSurveyData","Nlqs","NpsSurveyData","loadStringResource","Nps","trackedActivities","activationMask","currentActivationFlags","isActivationByInitPending","currentCounts","currentStartTimes","currentSessionCounts","isValidIndex","getStartTime","sessionCount","otherTrackers","wasAlreadyActivatedThisSession","hasCountCrossedThreshold","finishActivityAtIndex","isActivated","indexList","ActivityIndex","startedLessThanThreshold","isPermittedIndexForActivationByInit","commitActivation","diff","UserFacts","userFactInput","UserFact","commonComparatorTypes","rawUserFactSpec","Values","Name","validateUserFactType","LatencyType","validateLatencyType","LatencyDurationInSeconds","IntervalType","supportedComparatorTypes","getComparatorTypes","Comparator","comparator","isComparatorTypeSupported","userFactType","latency","factType","userFactValue","isLatencyAcceptable","userFactSpecValue","rawUserFactValueInBoolean","compareValues","compareBooleanValues","getValue","getComparator","rawUserFactValueInMilliseconds","isAValidNumber","userFactName","userFactSpecValueInMilliseconds","compareDateTimeUTCValues","rawUserFactValueInNumber","parseInt","compareNumberValues","compareStringValues","intervalType","currentTimeInMilliseconds","currentDateDiff","TimeMilliseconds","compareTimeIntervalValues","getIntervalType","compareListValues","getLatencyType","getLatencyDurationInSeconds","latencyType","latencyDurationInSeconds","userFactTime","sourceDateTime","storageDateTime","clientIngestionDateTime","userFactTimeInMilliseconds","evaluateFactCandidacy","userFactRawValue","isFactValueInTargetItem","userFactTargetValues","specValue","numberValue","rawUserFactName","factory","configurable","Int64","numberStr","low","high","Equals","tmp","UInt64","ToByte","ToUInt8","ToInt16","ToInt32","ToUInt32","AWTPiiKind","Bond","Enums_1","AWTBondSerializer","getPayloadBlob","requestDictionary","tokenCount","stream","IO","MemoryStream","writer","CompactBinaryProtocolWriter","WriteFieldBegin","BondDataType","BT_MAP","WriteMapContainerBegin","BT_STRING","BT_LIST","token","WriteString","dataPackage","WriteContainerBegin","BT_STRUCT","newGuid","BT_INT64","WriteInt64","numberToBondInt64","WriteBlob","WriteStructEnd","GetBuffer","getEventBlob","propsString","piiProps","pii","NotSet","BT_INT32","WriteInt32","base64Encode","Encoding","Base64","GetString","default","microsoft_bond_primitives_1","GuidRegex","bond_value","replace","isPii","Version","FullVersionString","AWT_1","AWT","AWT_COLLECTOR_URL_UNITED_STATES","AWT_COLLECTOR_URL_GERMANY","AWT_COLLECTOR_URL_JAPAN","AWT_COLLECTOR_URL_AUSTRALIA","AWT_COLLECTOR_URL_EUROPE","Utf8","GetBytes","array","char","charCodeAt","inArray","num","lookup","output","paddingBytes","length_1","charAt","join","temp2","Varint","Varint64","Zigzag","EncodeZigzag32","EncodeZigzag64","tmpH","tmpL","res","_buffer","WriteByte","byte","Write","buffer","offset","bond_const_1","_stream","blob","size","elementType","WriteUInt8","WriteUInt32","keyType","valueType","WriteUInt64","isBase","BT_STOP_BASE","BT_STOP","AWTKillSwitch","_killedTokenDictionary","setKillSwitchTenants","killTokens","killDuration","_this","killedTokens","durationMs_1","ex","isTenantKilled","tenantToken","AWTBondSerializer_1","AWTRecordBatcher","_maxRequestSize","_outboundQueue","_currentBatch","_currentBatchSize","addEventToBatch","serializedEvent","flushBatch","AWTRetryPolicy","shouldRetryForStatus","httpStatusCode","getMillisToBackoffForRetry","retriesSoFar","waitDuration","randomBackoff","BaseBackoff","pow","min","AWTTransmissionManager_1","EventNameAndTypeRegex","EventNameDotRegex","PropertyNameRegex","initialize","_isInitialized","_defaultTenantToken","_overrideValuesFromConfig","_config","flush","_isDestroyed","flushAndTeardown","setContext","_sanitizeProperty","_contextProperties","logEvent","typePrefix","_addContextIfAbsent","_setDefaultProperty","_getInitId","_getSequenceId","toISOString","sendEvent","collectorUrl","sendingTimer","_initIdMap","_sequenceIdMap","context_1","AWTRecordBatcher_1","AWTRetryPolicy_1","AWTKillSwitch_1","AWTTransmissionManager","_inboundQueues","_recordBatcher","_newEventsAllowed","Uint8Array","_urlString","_sendingTimer","_running","_timeout","_isCurrentlyFlushing","_batchAndSendEvents","_flushQueue","_flush","isTeardown","pop","_sendRequest","_retryRequestIfNeeded","conn","request","apikey","retryCount","shouldRetry","_killSwitch","getResponseHeader","_handleRequestFinished","conn_1","XMLHttpRequest","tokenCount_1","apikey_1","open","ontimeout","onerror","onload","send","_checkPrimaryInboundQueueEmpty","_checkOutboundQueueEmptyAndSent","AnnotationState","BlobRefType","OpenType","lowerIndexBound","maxNumberOfRows","maxNumberOfColumns","firstColumnName","lastColumnName","GridConstants","Annotation","M_","typeGuard","schemaObject","BinaryClassificationAnnotation","ItemDelta","ItemChangesDelta","Operation","OperationWithSiblingContext","AddOperation","MoveOperation","UpdateAnnotationMetaDataOperation","UpdateOperation","DeleteOperation","PurgeOperation","FocusOperation","VisibilityOperation","DeltaUpdateOperation","MicroSyncOperation","SignalOperation","Signal","Blob","Binary","TileGroup","Session","Document","SubDocument","GridCell","GridNeighborhoodContext","DynamicContext","ContextHolder","UserContextHolder","TenantContextHolder","w","window","officeBrowserFeedback","OfficeBrowserFeedback","floodgate","getGlobal","App","version","PLATFORM","Host","Event","ID_DELIMITER","SOURCE","SCHEMA_VERSION","Release","audienceGroup","Browser","Device","User","primaryIdentityHash","tenantId","trim","primaryIdentitySpace","generatePrimaryIdentitySpace","startsWith","aria","namespace","app","session","host","release","browser","device","user","oesApp","oesSession","oesHost","oesRelease","oesBrowser","oesDevice","oesUser","getPlatform","getVersion","getSessionId","getLocale","getSource","getSchemaVersion","getSampleRate","getAudienceGroup","getPrimaryIdentityHash","getPrimaryIdentitySpace","getTenantId","eventName","customProperties","oesEvent","EVENT_NAME_DELIMITER","ariaProperties","CUSTOM_PROPERTIES_FIELD_PREFIX","setApp","setSession","setHost","setRelease","setEvent","setBrowser","setDevice","setUser","fileTypeToKeyMap","TmsCache_CampaignContent","TmsCache_MessageMetadata","TmsCache_UserGovernance","Tms_DynamicSettings","LogLevelSettings","DebugOverrides","x","localStorage","setItem","removeItem","DOMException","code","storageKey","getItem","SURVEY_FLOODGATE_FILEREAD_FAILED","FileName","SURVEY_FLOODGATE_FILEWRITE_FAILED","EventIds","InApp","UI","Picker","Shown","VALUE","Form","Submit","SURVEY_FLOODGATE_CAMPAIGNLOAD_FAILED","SURVEY_FLOODGATE_TRIGGERMET","SURVEY_FLOODGATE_USERSELECTED","SURVEY_UI_FORM_SHOWN","SURVEY_UI_FORM_SUBMIT","SURVEY_UI_FORM_SECONDARY_SUBMIT","SURVEY_UI_FORM_SUBMIT_ERROR","SURVEY_UI_FORM_USERCLOSED","SURVEY_UI_FORM_NO_RETURN_TYPE","SURVEY_UI_PROMPT_AUTODISMISSED","SURVEY_UI_PROMPT_SHOWN","SURVEY_UI_PROMPT_USERCLOSED","SURVEY_UI_PROMPT_CLICKED","SURVEY_UI_REDIRECTIONFAILURE","GOVERNANCE_SERVICEFAILURE","GOVERNANCE_SERVICERESULT","DYNAMICTRANSPORT_POST_ERROR","FEEDBACK_SURVEYSDISABLED_AADC","SURVEY_UI_DISABLED_AADC","PERSONALIZER_SERVICEREWARDRESULT","PERSONALIZER_CLIENTFAILURE","Shared","Upload","Prevented","Screenshot","Render","Success","GetContent","DefaultImage","Returned","WebSurfaces","Info","Messaging","Requests","LocalFact","AugLoop","Provider","useLocalStorage","cachedItems","contentType","expiryTime","cacheItem","createItem","expiryDate","lastRetrievedDate","updateItemInLocalStorage","isStorageAvailable","floodgateStorage","initCachedItemsFromLocalStorage","contentKey","tempStorageItem","mapContentTypeToFloodgateProviderKey","tempCacheItem","parseObjectFromCache","tempItem","dynamicSettingsTmsgCache","getDynamicSetting","settingsObj","getItemContent","settingValue","returnValue","parseFloat","logger","env","initOptionsCommon","appName","appVersion","logSessionId","samplingOption","TokenManager","getTenantToken","browserVersion","deviceId","loggableUserId","getLogger","SAMPLING_RESULT","logSeverity","internalSampleRate","DEFAULT_SAMPLE_RATE","isEventSampled","getEventSamplingRate","isConsoleLogEnabled","console","log","EVENT_NAME","EVENT_ID","isLoggingEnabled","isEventTelemetryEnabled","others","dynamicLogSettings","settingName","overrideSettings","inputLogLevel","logLevel","currentLogLevel","getCurrentLogLevel","urlParams","URLSearchParams","location","search","consoleLogParam","documentReferrer","referrer","logLevelParam","parseObject","logSettings","consoleLog","TENANT_TOKEN_PRODUCTION","TENANT_TOKEN_PRE_PRODUCTION","initialized","isFeedbackSurveyEnabledByAADC","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","next","rejected","done","apply","requestUrl","useTimeout","requestInit","method","headers","createHeaders","timeoutFetch","fetch","requestBody","body","Headers","append","init","buildQueryParameters","keyAndValues","encodeValueAsURI","queryParamsString","encodeURIComponent","sleep","getObjectProperty","targetObject","propertyName","propertyValue","getOwnPropertyDescriptor","getGlobalAugLoopRuntime","loadDelay","augLoopRuntime","delayLoadTime","retryTimes","getDelayDefinedValueWithWait","delay","definedProperty","currentPropertyValue","set","newValue","getDelayDefinedObjectValue","getAugLoopAnnotationData","annotationName","getRuntimeSession","augLoopSession","augLoopSessionPromise","augLoop","ALFactoryGlobal","getAugLoopRuntimeManager","getSession","activateAnnotation","operation","schemaObjects","getAnnotationData","ContentResponse","platform","country","campaignParameters","audience","tmsgCacheIn","isInternalEnv","tmsConfigBaseUrlPrefix","messagingServiceIntUrl","messagingServiceProdUrl","tmsDefaultBaseUrlPrefix","tmsBaseUrlPrefix","tmsgCache","requestedContent","isItemExpired","refreshItemsInCacheFromTmsService","retrieveCacheItemAndCreateContentResponse","contentResponses","bulkRefreshList","responseItem","createCachedContentResponse","refreshItemsInCacheFromTulipsService","beaconParameters","tmsAppId","Constants","authToken","getAuthToken","puid","getUserPuid","requestStartTime","tmsQueryParams","actionName","actionUrl","sendRequest","createTelemetryData","refreshUserFactsInCacheFromAugLoop","cachedUserFacts","Flights","addClientIngestionTimeAndNormalizeKeysInArray","setContentItem","augLoopError","requestStartTimestamp","statusText","serverSessionId","serverCorrelationId","SessionId","CorrelationId","HttpStatusCode","HttpStatusText","tmsgQueryParams","defaultBaseUrl","verb","tmsgTransport","queryParamStr","tmsgBaseUrl","sendPostRequest","sendGetRequest","contentResponse","appIdOrUri","createAuthTelemetryData","retVal","contentTypes","userPuid","documentElement","getElementsByTagName","browserParams","pageWidth","innerWidth","clientWidth","pageHeight","innerHeight","clientHeight","screenWidth","screen","width","screenHeight","height","colorDepth","debugOverrides","safeReadObject","replaceTmsQueryParams","campaignParams","OFC_FLIGHTS","addTmsQueryParams","tmsServiceResponse","MessageMetadata","UserGovernanceRules","CampaignContent","DynamicSettings","tulipsAppId","tulipsServiceResponse","normalizedUserFacts","addClientIngestionTimeAndNormalizeKeys","currentDateTime","responseFact","fact","normalizeKeys","normalizedUserFact","getFloodgateInitOptions","getCommonInitOptions","isAugLoopEnabled","tmsgClient","extractCountryFromLocale","getSdkSessionId","debugResponse","tmsResponse","getDebugCampaignDefinitions","getContent","getCachedContent","userFactsResponse","getDebugUserFacts","timeoutMilliseconds","getAugLoopUserFacts","getSubstrateUserFacts","sendBeaconRequestToService","splitLocale","getUserFactsContent","getAugLoopUserFactsContent","assetsProvider","WebSurfacesScriptPromise","createwebSurfacesScriptPromise","pageOrigin","origin","script","async","readyState","onreadystatechange","src","crossOrigin","entry","parentNode","insertBefore","webSurfacesConfigLink","webSurfacesIntUrl","webSurfacesProdUrl","webSurfacesDefaultLink","getWebSurfacesLink","toLocaleLowerCase","LAUNCHER_TYPE","surveyMetadata","getWebSurfacesInstance","windowInstance","OfficeWebSurfaces","renderWebSurface","uxInitOptions","officeWebSurfaces","RemoveSurface","surfaceParams","surfaceContext","surveyForm","RenderSurface","logErrorEvent","surveyActivatedCallback","uxOptions","beaconCallback","setCampaignAction","surfaceInitTime","surfaceId","renderer","renderCallback","onTeachingCampaignRender","showPrompt","showEmailRequest","isIntercept","interceptComponent","promptComponent","commentComponent","ratingComponent","cvSurveyComponent","getCVSurveyFormId","showSurvey","rudeSurveyLauncherFactory","coachingUXLauncherFactory","makeGenericMessagingSurfaceLauncher","makeRudeSurveyLauncher","checkIfSurveysEnabled","isProduction","manifest","diagnostics","formData","FormData","maxRetries","onLoad","makeRequest","retries","xhr","responseText","httpTimeout","makeHttpRequest","imgString","toDataURL","blobBin","atob","manifestType","submitTime","manifestData","application","telemetry","sanitizeType","web","sdkVersion","email","category","featureArea","appData","sendSurveyPolicyValue","complianceChecks","policyAllowFeedback","policyAllowSurvey","policyAllowScreenshot","policyAllowContact","setComplianceInformation","ocpsEnumToString","getInAppFeedbackInitOptions","ocpsBooleanToString","getExtendedManifestData","setComment","setEmail","setCategory","setAppData","setExtendedManifestData","setClientFeedbackId","setValues","Data","manifestContent","screenshotContent","setFeedbackSubmitted","ClientFeedbackId","policyValue","uIStrings","stringId","uiStrings","Points11Value0","Points11Value1","Points11Value2","Points11Value3","Points11Value4","Points11Value5","Points11Value6","Points11Value7","Points11Value8","Points11Value9","Points11Value10","Points5Value1","Points5Value2","Points5Value3","Points5Value4","Points5Value5","Comment","No","Yes","loadAsyncTriggered","campaignDefinitionsPromise","loadCampaignDefinitions","timeoutPromise","getCachedCampaignDefinitions","campaigns","getBrowserSettings","pageTop","pageYOffset","scrollTop","pageLeft","pageXOffset","scrollLeft","userAgent","navigator","createUserFact","factName","factValue","loweCaseFactName","isFunction","localFactTargetObjects","getLocalUserFact","userConsentGroup","getUserConsentGroup","feedbackEnabledByAADC","generatedFact","factNameValues","objectName","globalObject","curr","getBrowserLocalFact","nameAndUserFactMap","loadUserFacts","getCachedUserFacts","logUserFactInfo","tulipsIngestionTimeInterval","userFactProperties","nowDate","isExpired","rawItemDate","itemDate","factInfo","RefreshTime","IngestionTime","SourcesExpired","StoragesExpired","IngestionsExpired","super","thisDynamicContentTransport","requestId","postRequestWithRetry","createSimpleHeaders","createNormalHeaders","personalizerClient","dynamicTransport","personalizerSurveyInformationMap","retryLimit","configType","configValue","newRecommendedAutoDismissValue","validateAndGetAutoDismissTime","recommendedAutoDismissValue","userAction","infoExistsForSurveyId","responseResult","actionPayload","getValidatedActionPayloadForSurveyId","timeBefore","performance","timeAfter","AdditionalSurveyInfo","buildConfigTelemetryString","PersonalizerUserAction","UserAction","PersonalizerEventId","EventId","ok","surveyPersonalizerInfo","objectTelemetry","lastSurveyFailedSync","clientState","Disabled","clientInfo","applicationId","surveyPlatform","hostPlatform","userId","InitializationFailed","Enabled","surveyLevelCooldown","userLevelCooldown","buildSurveyInfo","buildBodyRequest","serviceCallTime","GovernanceRequestBody","GovernanceResponseText","text","jsonResponse","timeUntilNextSurveyAllowed","setEventIdAndOverrideValueForSurveyId","actionId","stringType","isPersonalizerEnabled","surveyTriggerTime","surveyChannel","localOffsetTime","getTimezoneOffset","client","engine","startCount","engineStartPromise","engineTmsProvider","setEngineStartPromise","startPromise","getEngineStartPromise","startInternal","loadSynchronously","customEngine","rejectAndLogError","setFloodgateInitOptions","teachingCooldown","enginePromise","startError","resetEngine","floodgateGetEngine","floodgateStart","floodgateStop","floodgateInitialize","getEngine","SurveyType","SurveyActivityInfo","log_Local","logLocal","DefaultFloodgateStringProvider","setCommonInitOptions","getEventSampling","filteredResult","setup"],"mappings":"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","file":"officebrowserfeedback_floodgate_bare.es6.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 66);\n","/*\r\n * Utils.ts\r\n *\r\n * Module for utility functions\r\n */\r\n\r\nimport { Utils } from \"@ms-ofb/officefloodgatecore\";\r\nconst { guid, overrideValues, isNOU, isBoolean, isString, isObject, isEnumValue } = Utils;\r\nexport { guid, overrideValues, isNOU, isBoolean }\r\n\r\n/**\r\n * Check if given value is a number\r\n * @param {any} value value\r\n */\r\nfunction isNumber(value: any): boolean {\r\n\treturn (typeof value === \"number\");\r\n}\r\n\r\n/**\r\n * Check if given value is an integer\r\n * @param {any} value value\r\n */\r\nexport function isInteger(value: any): boolean {\r\n\treturn typeof value === \"number\" &&\r\n\t\tisFinite(value) &&\r\n\t\tMath.floor(value) === value;\r\n}\r\n\r\n/**\r\n * Check if value is a valid guid\r\n * @param {any} value value\r\n */\r\nfunction isGuid(value: any): boolean {\r\n\treturn (isString(value) &&\r\n\t\t/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(value));\r\n}\r\n\r\n/**\r\n * Throw if not object\r\n */\r\nexport function expectObject(value: any, name: string): void {\r\n\tif (!isObject(value)) {\r\n\t\tthrow name + \" is not an object: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not number\r\n */\r\nexport function expectNumber(value: any, name: string): void {\r\n\tif (!isNumber(value)) {\r\n\t\tthrow name + \" is not a number: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not string\r\n */\r\nexport function expectString(value: any, name: string): void {\r\n\tif (!isString(value)) {\r\n\t\tthrow name + \" is not a string: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not boolean\r\n */\r\nexport function expectBoolean(value: any, name: string): void {\r\n\tif (!isBoolean(value)) {\r\n\t\tthrow name + \" is not a boolean: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not guid\r\n */\r\nexport function expectGuid(value: any, name: string): void {\r\n\tif (!isGuid(value)) {\r\n\t\tthrow name + \" is not a guid: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not array\r\n */\r\nexport function expectArray(value: any, name: string): void {\r\n\tif (!Array.isArray(value)) {\r\n\t\tthrow name + \" is not an array: \" + value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Throw if not valid enum\r\n * Note: this won't work with const enum\r\n */\r\nexport function expectEnum(value: any, enumType: any, name: string): void {\r\n\tif (!isNumber(value) || !isEnumValue(value, enumType)) {\r\n\t\tthrow name + \" is not an enum: \" + value;\r\n\t}\r\n}\r\n\r\n// Creates a promise that rejects in <ms> milliseconds and\r\n// returns the race between the created timeout promise and the passed in promise\r\nexport function createTimeoutPromise<T>(ms: number, promise: Promise<T>): Promise<T> {\r\n\t// Create a promise that rejects in <ms> milliseconds\r\n\tconst timeout = new Promise((resolve, reject) => {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t\treject(\"Timed out in \" + ms + \"ms.\");\r\n\t\t}, ms);\r\n\t});\r\n\r\n\t// Returns a race between our timeout and the passed in promise\r\n\treturn Promise.race([promise, timeout]) as Promise<T>;\r\n}\r\n\r\n/**\r\n * Checks to see if a passed CSS selector is set as a rule in one of the document's stylesheets.\r\n * \r\n * @param cssSelector : a Css selector string such as '#obf-TPromptTitle'\r\n */\r\nexport function checkCssSelectorToBeSet (cssSelector: string): boolean {\r\n\r\n\ttry {\r\n\t\tfor (let sheetIndex = 0; sheetIndex < document.styleSheets.length; sheetIndex++) {\r\n\t\t\tconst currentStyleSheet = document.styleSheets[sheetIndex];\r\n\r\n\t\t\tfor (let rulesIndex = 0; rulesIndex < currentStyleSheet.rules.length; rulesIndex++) {\r\n\t\t\t\tconst currentRule = currentStyleSheet.rules[rulesIndex] as CSSStyleRule;\r\n\r\n\t\t\t\tif (!isNOU(currentRule.selectorText) && currentRule.selectorText.includes(cssSelector)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// tslint:disable-next-line: no-empty\r\n\t} catch (error) {}\r\n\r\n\treturn false;\r\n}\r\n","/**\r\n * Configuration.ts\r\n *\r\n * Module for logic relating to the sdk user configuration\r\n */\r\n\r\nimport * as Utils from \"./../Utils\";\r\nimport * as Constants from \"./../Constants\";\r\nimport * as Localization from \"./../Localization\";\r\nimport { ICategoryOptions } from \"./ICategoryOptions\";\r\nimport * as IInitOptions from \"./IInitOptions\";\r\nimport * as ILaunchOptions from \"./ILaunchOptions\";\r\nimport IUISurvey from \"./../FloodgateCore/UISurvey/IUISurvey\";\r\nimport { IOnSurveyActivatedCallback, ISurveyForm, ISurveyLauncher } from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { ISurveyParams } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IOnSurveyActivatedCallback\";\r\n\r\nexport * from \"./IInitOptions\";\r\nexport * from \"./ILaunchOptions\";\r\n\r\n/**\r\n * Class representing a configuration (user provided options)\r\n */\r\n\r\nexport class Configuration {\r\n\t/**\r\n\t * Validate category options, default \"show\" to false if CategoryOptions is not provided.\r\n\t * @param categories Category options\r\n\t * @returns {ICategoryOptions} the validated CategoryOptions\r\n\t */\r\n\tprivate static validateCategoryOptions(categories?: ICategoryOptions): ICategoryOptions {\r\n\t\tif (!categories) {\r\n\t\t\treturn { show: false };\r\n\t\t}\r\n\r\n\t\tUtils.expectBoolean(categories.show, \"categories.show\");\r\n\t\tif (categories.customCategories) {\r\n\t\t\tUtils.expectArray(categories.customCategories, \"categories.customCategories\");\r\n\r\n\t\t\tfor (let customCategory of categories.customCategories) {\r\n\t\t\t\tUtils.expectString(customCategory, \"custom category '\" + customCategory + \"'\");\r\n\t\t\t\tif (customCategory.length > 20) {\r\n\t\t\t\t\tthrow \"custom category '\" + customCategory + \"' too long, max 20 characters.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn categories;\r\n\t}\r\n\r\n\tprivate commonInitOptions: IInitOptions.IInitOptionsCommon;\r\n\r\n\tprivate inAppFeedbackInitOptions: IInitOptions.IInitOptionsInAppFeedback;\r\n\tprivate inAppFeedbackLaunchOptions: ILaunchOptions.ILaunchOptionsInAppFeedback;\r\n\r\n\tprivate floodgateInitOptions: IInitOptions.IInitOptionsFloodgate;\r\n\tprivate floodgateSurvey: IUISurvey;\r\n\r\n\tprivate sdkSessionId: string;\r\n\r\n\tprivate eventSampling: IInitOptions.ISamplingInitOption;\r\n\r\n\tprivate commonPolicyAllowAADC: boolean;\r\n\r\n\tprivate feedbackSubmitted: boolean = false;\r\n\r\n\tpublic getFeedbackSubmitted(): boolean {\r\n\t\treturn this.feedbackSubmitted;\r\n\t}\r\n\r\n\tpublic setFeedbackSubmitted(value: boolean): void {\r\n\t\tthis.feedbackSubmitted = value;\r\n\t}\r\n\r\n\tpublic getCommonInitOptions(): IInitOptions.IInitOptionsCommon {\r\n\t\treturn this.commonInitOptions;\r\n\t}\r\n\r\n\tpublic getInAppFeedbackInitOptions(): IInitOptions.IInitOptionsInAppFeedback {\r\n\t\treturn this.inAppFeedbackInitOptions;\r\n\t}\r\n\r\n\tpublic getInAppFeedbackLaunchOptions(): ILaunchOptions.ILaunchOptionsInAppFeedback {\r\n\t\treturn this.inAppFeedbackLaunchOptions;\r\n\t}\r\n\r\n\tpublic getFloodgateInitOptions(): IInitOptions.IInitOptionsFloodgate {\r\n\t\treturn this.floodgateInitOptions;\r\n\t}\r\n\r\n\tpublic getFloodgateSurvey(): IUISurvey {\r\n\t\treturn this.floodgateSurvey;\r\n\t}\r\n\r\n\tpublic getSdkSessionId(): string {\r\n\t\tif (!this.sdkSessionId) {\r\n\t\t\tthis.sdkSessionId = Utils.guid();\r\n\t\t}\r\n\r\n\t\treturn this.sdkSessionId;\r\n\t}\r\n\r\n\tpublic getEventSampling(): IInitOptions.ISamplingInitOption {\r\n\t\treturn this.eventSampling;\r\n\t}\r\n\r\n\t/**\r\n\t * Set initOptions for common functionality.\r\n\t */\r\n\tpublic setCommonInitOptions(passedInitOptions: IInitOptions.IInitOptionsCommon) {\r\n\t\tUtils.expectObject(passedInitOptions, \"passedInitOptions\");\r\n\t\tlet initOptions: IInitOptions.IInitOptionsCommon = {\r\n\t\t\tappId: passedInitOptions.appId,\r\n\t\t\tapplicationGroup: passedInitOptions.applicationGroup || {},\r\n\t\t\tbuild: passedInitOptions.build,\r\n\t\t\tcid: passedInitOptions.cid,\r\n\t\t\tenvironment: passedInitOptions.environment,\r\n\t\t\tintlFilename: passedInitOptions.intlFilename,\r\n\t\t\tintlUrl: passedInitOptions.intlUrl,\r\n\t\t\twebSurfacesResourceBaseUrl: passedInitOptions.webSurfacesResourceBaseUrl,\r\n\t\t\tlocale: passedInitOptions.locale,\r\n\t\t\tonError: passedInitOptions.onError,\r\n\t\t\toriginalLocale: passedInitOptions.locale,\r\n\t\t\tprimaryColour: passedInitOptions.primaryColour,\r\n\t\t\tsecondaryColour: passedInitOptions.secondaryColour,\r\n\t\t\tsessionId: passedInitOptions.sessionId,\r\n\t\t\tstylesUrl: passedInitOptions.stylesUrl,\r\n\t\t\ttelemetryGroup: passedInitOptions.telemetryGroup || {},\r\n\t\t\tuserEmail: passedInitOptions.userEmail,\r\n\t\t\twebGroup: passedInitOptions.webGroup || {},\r\n\t\t\teventSampling: passedInitOptions.eventSampling,\r\n\t\t\tpetrolTimeout: passedInitOptions.petrolTimeout,\r\n\t\t\tisCommercialHost: passedInitOptions.isCommercialHost,\r\n\t\t\tcustomResourcesSetExternally: passedInitOptions.customResourcesSetExternally,\r\n\t\t\temailPolicyValue: passedInitOptions.emailPolicyValue,\r\n\t\t\tscreenshotPolicyValue: passedInitOptions.screenshotPolicyValue,\r\n\t\t\tageGroup: passedInitOptions.ageGroup,\r\n\t\t\tauthenticationType: passedInitOptions.authenticationType,\r\n\t\t\tapplicationSettings: passedInitOptions.applicationSettings,\r\n\t\t\twebSurfacesSettings: passedInitOptions.webSurfacesSettings,\r\n\t\t};\r\n\r\n\t\tUtils.expectNumber(initOptions.appId, \"initOptions.appId\");\r\n\t\tif (!(initOptions.appId % 1 === 0 && initOptions.appId > 0)) {\r\n\t\t\tthrow \"initOptions.appId is not a positive integer: \" + initOptions.appId;\r\n\t\t}\r\n\r\n\t\t// tslint:disable-next-line: no-bitwise\r\n\t\tconst expectedValues = IInitOptions.CustomResources.Strings | IInitOptions.CustomResources.Css;\r\n\r\n\t\tif (initOptions.customResourcesSetExternally === undefined) {\r\n\t\t\tinitOptions.customResourcesSetExternally = IInitOptions.CustomResources.None;\r\n\t\t\t// tslint:disable-next-line: no-bitwise\r\n\t\t} else if (typeof (initOptions.customResourcesSetExternally) !== \"number\" ||\r\n\t\t\t// tslint:disable-next-line: no-bitwise\r\n\t\t\t(initOptions.customResourcesSetExternally | expectedValues) !== expectedValues) {\r\n\t\t\tthrow \"initOptions.customResourcesSetExternally has an invalid value: \" + initOptions.customResourcesSetExternally;\r\n\t\t}\r\n\t\t// tslint:disable-next-line: no-bitwise\r\n\t\tif ((initOptions.customResourcesSetExternally & IInitOptions.CustomResources.Css) !== IInitOptions.CustomResources.Css) {\r\n\t\t\tUtils.expectString(initOptions.stylesUrl, \"initOptions.stylesUrl\");\r\n\t\t}\r\n\t\t// tslint:disable-next-line: no-bitwise\r\n\t\tif ((initOptions.customResourcesSetExternally & IInitOptions.CustomResources.Strings) !== IInitOptions.CustomResources.Strings) {\r\n\t\t\tUtils.expectString(initOptions.intlUrl, \"initOptions.intlUrl\");\r\n\t\t}\r\n\r\n\t\tif (initOptions.intlFilename !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.intlFilename, \"initOptions.intlFilename\");\r\n\t\t} else {\r\n\t\t\tinitOptions.intlFilename = \"officebrowserfeedbackstrings.js\";\r\n\t\t}\r\n\r\n\t\tUtils.expectNumber(initOptions.environment, \"initOptions.environment\");\r\n\t\tif (!(initOptions.environment === 1 || initOptions.environment === 0)) {\r\n\t\t\tthrow \"initOptions.environment has a bad value: \" + initOptions.environment;\r\n\t\t}\r\n\r\n\t\tif (initOptions.userEmail !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.userEmail, \"initOptions.userEmail\");\r\n\t\t} else {\r\n\t\t\tinitOptions.userEmail = \"\";\r\n\t\t}\r\n\r\n\t\tif (initOptions.sessionId !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.sessionId, \"initOptions.sessionId\");\r\n\t\t} else {\r\n\t\t\tinitOptions.sessionId = \"00000000-0000-0000-0000-000000000000\";\r\n\t\t}\r\n\r\n\t\t// Copy sessionID over to telemetryGroup\r\n\t\tinitOptions.telemetryGroup.processSessionId = initOptions.sessionId;\r\n\r\n\t\tif (initOptions.cid !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.cid, \"initOptions.cid\");\r\n\r\n\t\t\t// Copy cid over to extendedManifestData of applicationGroup\r\n\t\t\tinitOptions.applicationGroup.extendedManifestData = JSON.stringify({ cid: initOptions.cid });\r\n\t\t}\r\n\r\n\t\tif (initOptions.build !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.build, \"initOptions.build\");\r\n\t\t\tlet buildRegex = \"^[0-9]{1,9}(\\\\.[0-9]{1,9})?(\\\\.[0-9]{1,9})?(\\\\.[0-9]{1,9})?$\";\r\n\t\t\tif (!new RegExp(buildRegex).test(initOptions.build)) {\r\n\t\t\t\tinitOptions.build = \"0.0.0.0\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tinitOptions.build = \"0.0.0.0\";\r\n\t\t}\r\n\t\t// Copy build over to telemetryGroup\r\n\t\tinitOptions.telemetryGroup.officeBuild = initOptions.build;\r\n\r\n\t\tlet hexColourRegex = new RegExp(\"^#[0-9a-f]{3}([0-9a-f]{3})?$\", \"i\");\r\n\t\tif (initOptions.primaryColour !== undefined) {\r\n\t\t\tif (!hexColourRegex.test(initOptions.primaryColour)) {\r\n\t\t\t\tinitOptions.primaryColour = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (initOptions.secondaryColour !== undefined) {\r\n\t\t\tif (!hexColourRegex.test(initOptions.secondaryColour)) {\r\n\t\t\t\tinitOptions.secondaryColour = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (initOptions.locale !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.locale, \"initOptions.locale\");\r\n\t\t\tinitOptions.locale = Localization.validate(initOptions.locale);\r\n\t\t} else {\r\n\t\t\tinitOptions.locale = \"en\";\r\n\t\t}\r\n\r\n\t\tif (initOptions.onError === undefined) {\r\n\t\t\tinitOptions.onError = (err: string) => { return; };\r\n\t\t}\r\n\r\n\t\tif (initOptions.petrolTimeout !== undefined) {\r\n\t\t\tUtils.expectNumber(initOptions.petrolTimeout, \"initOptions.petrolTimeout\");\r\n\t\t}\r\n\r\n\t\tif (initOptions.authenticationType !== undefined) {\r\n\t\t\tUtils.expectEnum(initOptions.authenticationType, IInitOptions.AuthenticationType, \"initOptions.authenticationType\");\r\n\t\t} else {\r\n\t\t\tinitOptions.authenticationType = IInitOptions.AuthenticationType.Unauthenticated;\r\n\t\t}\r\n\r\n\t\t// For AAD or Unauthenticated, ageGroup value is unknown, so it's safe to only parse for MSA\r\n\t\tif (initOptions.ageGroup !== undefined) {\r\n\t\t\tUtils.expectEnum(initOptions.ageGroup, IInitOptions.AgeGroup, \"initOptions.ageGroup\");\r\n\t\t} else {\r\n\t\t\tinitOptions.ageGroup = IInitOptions.AgeGroup.Undefined;\r\n\t\t}\r\n\r\n\t\tthis.eventSampling = this.parseEventSamplingOption(initOptions.eventSampling);\r\n\r\n\t\tthis.commonInitOptions = initOptions;\r\n\t\tthis.commonPolicyAllowAADC = this.determineAADCPolicy(initOptions.authenticationType, initOptions.ageGroup);\r\n\r\n\t\tif (initOptions.isCommercialHost === undefined || initOptions.isCommercialHost == null) {\r\n\t\t\tinitOptions.isCommercialHost = false; // By default privacy consent is not shown. (From SDK's perspective)\r\n\t\t} else {\r\n\t\t\tUtils.expectBoolean(initOptions.isCommercialHost, \"initOptions.isCommercialHost\");\r\n\t\t}\r\n\r\n\t\tif (initOptions.emailPolicyValue === undefined) {\r\n\t\t\tinitOptions.emailPolicyValue = Constants.OCPSValues.NotConfigured;\r\n\t\t} else if (typeof (initOptions.emailPolicyValue) !== \"number\" ||\r\n\t\t\t(initOptions.emailPolicyValue !== Constants.OCPSValues.NotConfigured &&\r\n\t\t\t\tinitOptions.emailPolicyValue !== Constants.OCPSValues.Enabled &&\r\n\t\t\t\tinitOptions.emailPolicyValue !== Constants.OCPSValues.Disabled)) {\r\n\t\t\tthrow \"initOptions.emailPolicyValue has an invalid value: \" + initOptions.emailPolicyValue;\r\n\t\t}\r\n\r\n\t\tif (initOptions.screenshotPolicyValue === undefined) {\r\n\t\t\tinitOptions.screenshotPolicyValue = Constants.OCPSValues.NotConfigured;\r\n\t\t} else if (typeof (initOptions.screenshotPolicyValue) !== \"number\" ||\r\n\t\t\tinitOptions.screenshotPolicyValue !== Constants.OCPSValues.NotConfigured &&\r\n\t\t\tinitOptions.screenshotPolicyValue !== Constants.OCPSValues.Enabled &&\r\n\t\t\tinitOptions.screenshotPolicyValue !== Constants.OCPSValues.Disabled) {\r\n\t\t\tthrow \"initOptions.screenshotPolicyValue has an invalid value: \" + initOptions.screenshotPolicyValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set init options for inAppFeedback\r\n\t */\r\n\tpublic setInAppFeedbackInitOptions(passedInitOptions: IInitOptions.IInitOptionsInAppFeedback) {\r\n\t\tUtils.expectObject(passedInitOptions, \"passedInitOptions\");\r\n\r\n\t\tlet initOptions: IInitOptions.IInitOptionsInAppFeedback = {\r\n\t\t\tbugForm: passedInitOptions.bugForm,\r\n\t\t\tonDismiss: passedInitOptions.onDismiss,\r\n\t\t\tscreenshot: passedInitOptions.screenshot,\r\n\t\t\tshowEmailAddress: passedInitOptions.showEmailAddress,\r\n\t\t\tuserEmail: passedInitOptions.userEmail,\r\n\t\t\ttransitionEnabled: passedInitOptions.transitionEnabled,\r\n\t\t\tisShowThanks: passedInitOptions.isShowThanks,\r\n\t\t\tsendFeedbackPolicyValue: passedInitOptions.sendFeedbackPolicyValue,\r\n\t\t\tfeedbackForumUrl: passedInitOptions.feedbackForumUrl !== undefined ?\r\n\t\t\t\tpassedInitOptions.feedbackForumUrl :\r\n\t\t\t\tundefined,\r\n\t\t\tmyFeedbackForumUrl: passedInitOptions.myFeedbackForumUrl !== undefined ?\r\n\t\t\t\tpassedInitOptions.myFeedbackForumUrl :\r\n\t\t\t\tundefined,\r\n\t\t};\r\n\r\n\t\tif (initOptions.onDismiss === undefined) {\r\n\t\t\tinitOptions.onDismiss = function (submitted: boolean) { return; };\r\n\t\t}\r\n\r\n\t\tif (initOptions.bugForm !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.bugForm, \"initOptions.bugForm\");\r\n\t\t} else {\r\n\t\t\tinitOptions.bugForm = false;\r\n\t\t}\r\n\r\n\t\tif (initOptions.userEmail !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.userEmail, \"initOptions.userEmail\");\r\n\t\t}\r\n\r\n\t\tif (initOptions.screenshot !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.screenshot, \"initOptions.screenshot\");\r\n\t\t} else {\r\n\t\t\tinitOptions.screenshot = true;\r\n\t\t}\r\n\r\n\t\tif (initOptions.showEmailAddress !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.showEmailAddress, \"initOptions.showEmailAddress\");\r\n\t\t} else {\r\n\t\t\tinitOptions.showEmailAddress = true;\r\n\t\t}\r\n\r\n\t\tif (initOptions.feedbackForumUrl !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.feedbackForumUrl, \"initOptions.feedbackForumUrl\");\r\n\t\t} else {\r\n\t\t\tinitOptions.feedbackForumUrl = undefined;\r\n\t\t}\r\n\r\n\t\tif (initOptions.isShowThanks !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.isShowThanks, \"initOptions.isShowThanks\");\r\n\t\t} else {\r\n\t\t\tinitOptions.isShowThanks = true;\r\n\t\t}\r\n\r\n\t\tif (initOptions.myFeedbackForumUrl !== undefined) {\r\n\t\t\tUtils.expectString(initOptions.myFeedbackForumUrl, \"initOptions.myFeedbackForumUrl\");\r\n\t\t} else {\r\n\t\t\tinitOptions.myFeedbackForumUrl = undefined;\r\n\t\t}\r\n\r\n\t\tif (initOptions.transitionEnabled === undefined) {\r\n\t\t\tinitOptions.transitionEnabled = true;\r\n\t\t}\r\n\r\n\t\tif (initOptions.sendFeedbackPolicyValue === undefined) {\r\n\t\t\tinitOptions.sendFeedbackPolicyValue = Constants.OCPSValues.NotConfigured;\r\n\t\t} else if (typeof (initOptions.sendFeedbackPolicyValue) !== \"number\" ||\r\n\t\t\t(initOptions.sendFeedbackPolicyValue !== Constants.OCPSValues.NotConfigured &&\r\n\t\t\t\tinitOptions.sendFeedbackPolicyValue !== Constants.OCPSValues.Enabled &&\r\n\t\t\t\tinitOptions.sendFeedbackPolicyValue !== Constants.OCPSValues.Disabled)) {\r\n\t\t\tthrow \"initOptions.sendFeedbackPolicyValue has an invalid value: \" + initOptions.sendFeedbackPolicyValue;\r\n\t\t}\r\n\r\n\t\tthis.inAppFeedbackInitOptions = initOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Set launch options for inAppFeedback\r\n\t */\r\n\tpublic setInAppFeedbackLaunchOptions(launchOptions?: ILaunchOptions.ILaunchOptionsInAppFeedback) {\r\n\t\tif (!this.commonInitOptions) {\r\n\t\t\tthrow \"commonInitOptions not set\";\r\n\t\t}\r\n\r\n\t\tif (!launchOptions) {\r\n\t\t\tlaunchOptions = {};\r\n\t\t}\r\n\r\n\t\t// Override any setting done in LaunchOptions for the metadataGroups\r\n\t\tthis.commonInitOptions.applicationGroup = Utils.overrideValues(launchOptions.applicationGroup,\r\n\t\t\tthis.commonInitOptions.applicationGroup);\r\n\t\tthis.commonInitOptions.telemetryGroup = Utils.overrideValues(launchOptions.telemetryGroup,\r\n\t\t\tthis.commonInitOptions.telemetryGroup);\r\n\t\tthis.commonInitOptions.webGroup = Utils.overrideValues(launchOptions.webGroup,\r\n\t\t\tthis.commonInitOptions.webGroup);\r\n\r\n\t\tlaunchOptions.categories = Configuration.validateCategoryOptions(launchOptions.categories);\r\n\r\n\t\tthis.inAppFeedbackLaunchOptions = launchOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Set init options for floodgate\r\n\t */\r\n\tpublic setFloodgateInitOptions(passedInitOptions: IInitOptions.IInitOptionsFloodgate) {\r\n\t\tUtils.expectObject(passedInitOptions, \"passedInitOptions\");\r\n\r\n\t\tlet initOptions: IInitOptions.IInitOptionsFloodgate = {\r\n\t\t\tautoDismiss: passedInitOptions.autoDismiss,\r\n\t\t\tcampaignDefinitions: passedInitOptions.campaignDefinitions,\r\n\t\t\tcampaignFlights: passedInitOptions.campaignFlights,\r\n\t\t\tcampaignQueryParameters: passedInitOptions.campaignQueryParameters,\r\n\t\t\tonDismiss: passedInitOptions.onDismiss,\r\n\t\t\tonSurveyActivatedCallback: passedInitOptions.onSurveyActivatedCallback,\r\n\t\t\tsettingStorageCallback: passedInitOptions.settingStorageCallback,\r\n\t\t\tuIStringGetter: passedInitOptions.uIStringGetter,\r\n\t\t\tauthTokenCallback: passedInitOptions.authTokenCallback,\r\n\t\t\tsurveyEnabled: passedInitOptions.surveyEnabled,\r\n\t\t\tshowEmailAddress: passedInitOptions.showEmailAddress,\r\n\t\t\taugLoopCallback: passedInitOptions.augLoopCallback,\r\n\t\t\tcustomerVoiceSurveyParams: passedInitOptions.customerVoiceSurveyParams,\r\n\t\t\tgovernanceServiceEnabled: passedInitOptions.governanceServiceEnabled,\r\n\t\t\tgovernanceServiceConfig: passedInitOptions.governanceServiceConfig,\r\n\t\t\tpersonalizerEnabled: passedInitOptions.personalizerEnabled,\r\n\t\t\tmessagingServiceSettings: passedInitOptions.messagingServiceSettings,\r\n\t\t};\r\n\r\n\t\tif (initOptions.autoDismiss === undefined) {\r\n\t\t\tinitOptions.autoDismiss = Constants.AutoDismissValues.NoAutoDismiss;\r\n\t\t}\r\n\r\n\t\tif (initOptions.onDismiss === undefined) {\r\n\t\t\tinitOptions.onDismiss = (campaignId: string, submitted: boolean) => { return; };\r\n\t\t}\r\n\r\n\t\tif (initOptions.onSurveyActivatedCallback === undefined) {\r\n\t\t\tlet defaultOnSurveyActivatedCallback: IOnSurveyActivatedCallback = {\r\n\t\t\t\tonSurveyActivated(launcher: ISurveyLauncher, survey?: ISurveyForm, surveyParams?: ISurveyParams): void {\r\n\t\t\t\t\tlauncher.launch();\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tinitOptions.onSurveyActivatedCallback = defaultOnSurveyActivatedCallback;\r\n\t\t}\r\n\r\n\t\tif (initOptions.uIStringGetter === undefined) {\r\n\t\t\tinitOptions.uIStringGetter = (str: string) => str; // By default return the string as is.\r\n\t\t}\r\n\r\n\t\tif (initOptions.surveyEnabled === undefined) {\r\n\t\t\tinitOptions.surveyEnabled = true; // By default surveys are enabled. (From SDK's perspective)\r\n\t\t} else {\r\n\t\t\tUtils.expectBoolean(initOptions.surveyEnabled, \"surveyEnabled\");\r\n\t\t}\r\n\r\n\t\tif (initOptions.showEmailAddress !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.showEmailAddress, \"initOptionsFloodgate.showEmailAddress\");\r\n\t\t} else {\r\n\t\t\tinitOptions.showEmailAddress = true;  // By default email field and collection is enabled. (From SDK's perspective)\r\n\t\t}\r\n\r\n\t\tif (initOptions.governanceServiceEnabled !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.governanceServiceEnabled, \"initOptionsFloodgate.governanceServiceEnable\");\r\n\t\t} else {\r\n\t\t\tinitOptions.governanceServiceEnabled = false;  // By default governanceServiceEnable is disabled\r\n\t\t}\r\n\r\n\t\tif (initOptions.governanceServiceEnabled) {\r\n\t\t\tinitOptions.governanceServiceConfig = this.parseGovernanceServiceConfig(\r\n\t\t\t\tinitOptions.governanceServiceConfig !== undefined ?\r\n\t\t\t\t\tinitOptions.governanceServiceConfig :\r\n\t\t\t\t\t{});\r\n\t\t}\r\n\r\n\t\tif (initOptions.customerVoiceSurveyParams === undefined) {\r\n\t\t\tinitOptions.customerVoiceSurveyParams = { cvFlights: \"\", isCVSurveyEnabled: false, productName: \"\", uiHost: \"\" };\r\n\t\t}\r\n\r\n\t\tif (initOptions.personalizerEnabled !== undefined) {\r\n\t\t\tUtils.expectBoolean(initOptions.personalizerEnabled, \"initOptionsFloodgate.personalizerEnabled\");\r\n\t\t} else {\r\n\t\t\tinitOptions.personalizerEnabled = false;  // By default personalizerEnabled is disabled\r\n\t\t}\r\n\r\n\t\tthis.floodgateInitOptions = initOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the floodgate survey\r\n\t */\r\n\tpublic setFloodgateSurvey(survey: IUISurvey): void {\r\n\t\tthis.floodgateSurvey = survey;\r\n\t}\r\n\r\n\t// Checks if the surveyEnabled policy is true or false.\r\n\tpublic checkIfSurveysEnabled(): boolean {\r\n\t\t// If no floodgateInitOptions defined, return true for surveyEnabled\r\n\t\tconst policyAllowSurvey = this.floodgateInitOptions ? this.floodgateInitOptions.surveyEnabled : true;\r\n\t\treturn policyAllowSurvey && this.commonPolicyAllowAADC;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the flag the Feedback and Survey enabled by AADC.\r\n\t */\r\n\tpublic isFeedbackSurveyEnabledByAADC(): boolean {\r\n\t\treturn this.commonPolicyAllowAADC;\r\n\t}\r\n\r\n\tpublic getCVSurveyFlights(): string | null {\r\n\t\treturn this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n\t\t\tthis.floodgateInitOptions.customerVoiceSurveyParams.cvFlights : \"\";\r\n\t}\r\n\r\n\tpublic isCVSurveyEnabled(): boolean {\r\n\t\treturn this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n\t\t\tthis.floodgateInitOptions.customerVoiceSurveyParams.isCVSurveyEnabled : false;\r\n\t}\r\n\r\n\tpublic getProductName(): string {\r\n\t\treturn this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n\t\t\tthis.floodgateInitOptions.customerVoiceSurveyParams.productName : \"\";\r\n\t}\r\n\r\n\tpublic getUIHost(): string {\r\n\t\treturn this.floodgateInitOptions && this.floodgateInitOptions.customerVoiceSurveyParams ?\r\n\t\t\tthis.floodgateInitOptions.customerVoiceSurveyParams.uiHost : \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Check AADC rule at once since Configuration cannot be set again.\r\n\t * So that we don't need to repeat the same process over again.\r\n\t */\r\n\tpublic determineAADCPolicy(authenticationType: IInitOptions.AuthenticationType,\r\n\t\tageGroup: IInitOptions.AgeGroup): boolean {\r\n\t\t// Return Based on authentication first\r\n\t\tif (authenticationType === IInitOptions.AuthenticationType.Unauthenticated ||\r\n\t\t\tauthenticationType === IInitOptions.AuthenticationType.AAD) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Return based on AgeGroup\r\n\t\treturn ageGroup !== IInitOptions.AgeGroup.MinorWithParentalConsent &&\r\n\t\t\tageGroup !== IInitOptions.AgeGroup.MinorWithoutParentalConsent;\r\n\t}\r\n\r\n\t// Keep implementation in sync with %SRCROOT%\\privacy\\idconsentprovider\\IdentityBasedConsentGroupProvider.cpp\r\n\tpublic getUserConsentGroup(): IInitOptions.UserConsentGroup {\r\n\t\tconst authenticationType = this.commonInitOptions.authenticationType;\r\n\t\tif (authenticationType === IInitOptions.AuthenticationType.Unauthenticated ||\r\n\t\t\tauthenticationType === IInitOptions.AuthenticationType.AAD) {\r\n\t\t\treturn IInitOptions.UserConsentGroup.CanConsent;\r\n\t\t}\r\n\r\n\t\tconst ageGroup = this.commonInitOptions.ageGroup;\r\n\t\tswitch (ageGroup) {\r\n\t\t\tcase IInitOptions.AgeGroup.Undefined:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CanConsent;\r\n\t\t\tcase IInitOptions.AgeGroup.MinorWithoutParentalConsent:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CannotConsent;\r\n\t\t\tcase IInitOptions.AgeGroup.MinorWithParentalConsent:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CannotConsent;\r\n\t\t\tcase IInitOptions.AgeGroup.Adult:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CanConsent;\r\n\t\t\tcase IInitOptions.AgeGroup.NotAdult:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.PartialConsent;\r\n\t\t\tcase IInitOptions.AgeGroup.MinorNoParentalConsentRequired:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CanConsent;\r\n\t\t\tdefault:\r\n\t\t\t\treturn IInitOptions.UserConsentGroup.CannotConsent;\r\n\t\t}\r\n\r\n\t\treturn IInitOptions.UserConsentGroup.CannotConsent;\r\n\t}\r\n\r\n\tprivate parseEventSamplingOption(samplingOptions: IInitOptions.ISamplingEvent[]): IInitOptions.ISamplingInitOption {\r\n\t\tlet eventInitSampling: IInitOptions.ISamplingInitOption = { event: {} };\r\n\t\tif (samplingOptions !== undefined) {\r\n\t\t\t// Iterating through init options\r\n\t\t\tfor (const index in samplingOptions) {\r\n\t\t\t\tif (samplingOptions.hasOwnProperty(index)) {\r\n\t\t\t\t\t// Check for correct Type\r\n\t\t\t\t\tswitch (samplingOptions[index].type) {\r\n\t\t\t\t\t\tcase \"Event\":\r\n\t\t\t\t\t\t\t// Parsing the Name and SampleRate\r\n\t\t\t\t\t\t\tlet sampleRate = samplingOptions[index].sampleRate;\r\n\t\t\t\t\t\t\tUtils.expectNumber(sampleRate, \"initOption.EventSampling.SampleRate\");\r\n\t\t\t\t\t\t\tUtils.expectString(samplingOptions[index].name, \"initOption.EventSampling.Name\");\r\n\t\t\t\t\t\t\t// check the range for sampling percentage\r\n\t\t\t\t\t\t\tif (sampleRate < 0 || sampleRate > 1) {\r\n\t\t\t\t\t\t\t\tthrow \"initOption.EventSampling.\" + samplingOptions[index].name + \".SampleRate is out of range\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// finally, save the sampling event\r\n\t\t\t\t\t\t\teventInitSampling.event[samplingOptions[index].name] = sampleRate;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tthrow \"initOption.EventSampling.Type value is not recognized\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn eventInitSampling;\r\n\t}\r\n\r\n\tprivate parseGovernanceServiceConfig(config: IInitOptions.IGovernanceServiceConfig): IInitOptions.IGovernanceServiceConfig {\r\n\t\treturn {\r\n\t\t\t// by default, disable the trigger in failure\r\n\t\t\tforceServicelessSurveyDisplay: config.forceServicelessSurveyDisplay ?? false,\r\n\r\n\t\t\t// by default, no retry\r\n\t\t\tretry: config.retry ?? 1,\r\n\r\n\t\t\t// by default, timeout is 1000 miliseconds\r\n\t\t\ttimeout: config.timeout ?? 1000,\r\n\r\n\t\t\t// simple request is default to false\r\n\t\t\tsimpleRequestEnabled: config.simpleRequestEnabled ?? false,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nlet configuration: Configuration = new Configuration();\r\n\r\n/**\r\n * Get the current configuration\r\n */\r\nexport function get(): Configuration {\r\n\treturn configuration;\r\n}\r\n\r\n/**\r\n * Validate feedbackType\r\n * @param feedbackType feedbackType\r\n * @returns {Constants.FeedbackType} the validated feedbackType\r\n */\r\nexport function validateFeedbackType(feedbackType: string): Constants.FeedbackType {\r\n\tUtils.expectString(feedbackType, \"feedbackType\");\r\n\r\n\tif (feedbackType === Constants.FeedbackType[Constants.FeedbackType.Smile]) {\r\n\t\treturn Constants.FeedbackType.Smile;\r\n\t} else if (feedbackType === Constants.FeedbackType[Constants.FeedbackType.Frown]) {\r\n\t\treturn Constants.FeedbackType.Frown;\r\n\t} else if (feedbackType === Constants.FeedbackType[Constants.FeedbackType.Bug]) {\r\n\t\treturn Constants.FeedbackType.Bug;\r\n\t} else {\r\n\t\tthrow \"feedbackType should be one of Smile, Frown or Bug\";\r\n\t}\r\n}\r\n","/**\r\n * Main entry point.\r\n */\r\n\r\nimport * as Api from \"./src/Api/Api\";\r\nimport * as Utils from \"./src/Utils\";\r\n\r\nexport { FloodgateEngine } from \"./src/FloodgateEngine\";\r\nexport { Api, Utils };\r\n","/*\r\n * Utils.ts\r\n *\r\n * Module for utility functions\r\n */\r\n\r\n/**\r\n * Add time to a given date\r\n * Example, timeAdd(new Date(), 'minute', 5)  //returns 5 minutes from now\r\n * @param date  Date to start with\r\n * @param interval  One of: hour or h, minute or m, second or s\r\n * @param units  units of the given interval to add\r\n * @return date\r\n */\r\nexport function timeAdd(date: Date, interval: string, units: number): Date {\r\n\tswitch (interval.toLowerCase()) {\r\n\t\tcase \"h\":\r\n\t\tcase \"hour\":\r\n\t\t\treturn new Date(date.getTime() + (units * 3600000));\r\n\t\tcase \"m\":\r\n\t\tcase \"minute\":\r\n\t\t\treturn new Date(date.getTime() + (units * 60000));\r\n\t\tcase \"s\":\r\n\t\tcase \"second\":\r\n\t\t\treturn new Date(date.getTime() + (units * 1000));\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Invalid interval value of \" + interval);\r\n\t}\r\n}\r\n\r\n/**\r\n * Check if an input value is a valid date, null or undefined return false.\r\n * @param input  input value\r\n * @return boolean\r\n */\r\nexport function isDate(input: any): boolean {\r\n\tif (Object.prototype.toString.call(input) === \"[object Date]\") {\r\n\t\t// it is a date\r\n\t\tif (!(isNaN(input.getTime()))) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Check if an input value is a valid value in the input enum\r\n * @param value  input value\r\n * @param input  input enum\r\n * Returns true if value exists in the enum\r\n */\r\nexport function isEnumValue(value: any, input: any): boolean {\r\n\treturn (value in input);\r\n}\r\n\r\n/**\r\n * Check if an input value is a number\r\n * @param value: input value\r\n */\r\nexport function isNumber(value: any): boolean {\r\n\treturn (value !== null && !isNaN(value) && isFinite(value));\r\n}\r\n\r\n/**\r\n * Check if an input value is null or undefined\r\n * @param value: input value\r\n */\r\nexport function isNOU(value: any): boolean {\r\n\treturn (value === null || value === undefined);\r\n}\r\n\r\n/**\r\n * Check if an input value is an object\r\n * @param value: input value\r\n */\r\nexport function isObject(value: any): boolean {\r\n\treturn (value !== null && value !== undefined && (typeof value === \"object\"));\r\n}\r\n\r\n/**\r\n * Check if an input value is an array\r\n * @param value: input value\r\n */\r\nexport function isFunction(value: any): boolean {\r\n\treturn (value !== null && value !== undefined && (typeof value === \"function\"));\r\n}\r\n\r\n/**\r\n * Check if an input value is an array\r\n * @param value: input value\r\n */\r\nexport function isArray(value: any): boolean {\r\n\treturn (value !== null && value !== undefined && (Array.isArray(value)));\r\n}\r\n\r\n/**\r\n * Check if given value is a string\r\n * @param {any} value value\r\n */\r\nexport function isString(value: any): boolean {\r\n\treturn (typeof value === \"string\");\r\n}\r\n\r\n/**\r\n * Check if value is an object\r\n * @param {any} value value\r\n */\r\nexport function isBoolean(value: any): boolean {\r\n\treturn typeof (value) === \"boolean\";\r\n}\r\n\r\n/**\r\n * Returns a lower temporal boundary\r\n * @return date\r\n */\r\nexport function getDistantPast(): Date {\r\n\t// Corresponds to UTC 1601-01-01T00:00:00Z\r\n\treturn new Date(-11644473600000);\r\n}\r\n\r\n/**\r\n * Get an upper temporal boundary\r\n * @return date\r\n */\r\nexport function getDistantFuture(): Date {\r\n\t// Corresponds to UTC 4001-01-01T00:00:00Z\r\n\treturn new Date(64092211200000);\r\n}\r\n\r\nexport const MAX_DATE_MILLISECONDS: number = 8640000000000000;\r\nexport const MIN_DATE_MILLISECONDS: number = -8640000000000000;\r\n\r\n/**\r\n * Adds seconds to a date, if overflows returns Date(Number.Max_VALUE)\r\n *\r\n * @param date    date to add to\r\n * @param seconds seconds as number\r\n * @return Resulting date\r\n */\r\nexport function addSecondsWithoutOverflow(date: Date, seconds: number): Date {\r\n\tif (!date) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tif (seconds < 0) {\r\n\t\treturn subtractSecondsWithoutOverflow(date, -1 * seconds);\r\n\t} else {\r\n\t\tconst milliseconds: number = date.getTime() + seconds * 1000;\r\n\r\n\t\tif (milliseconds < MAX_DATE_MILLISECONDS) {\r\n\t\t\treturn new Date(milliseconds);\r\n\t\t} else {\r\n\t\t\treturn new Date(MAX_DATE_MILLISECONDS);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Subtracts seconds from a date, if overflows returns Date(Number.MIN_VALUE)\r\n *\r\n * @param date   date to subtract from\r\n * @param seconds seconds as number\r\n * @return Resulting date\r\n */\r\nexport function subtractSecondsWithoutOverflow(date: Date, seconds: number): Date {\r\n\tif (!date) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tif (seconds < 0) {\r\n\t\tseconds = -seconds;\r\n\t\treturn this.addSecondsWithoutOverflow(date, seconds);\r\n\t}\r\n\r\n\tconst milliseconds: number = date.getTime() - (seconds * 1000);\r\n\r\n\tif (milliseconds > MIN_DATE_MILLISECONDS) {\r\n\t\treturn new Date(milliseconds);\r\n\t} else {\r\n\t\treturn new Date(MIN_DATE_MILLISECONDS);\r\n\t}\r\n}\r\n\r\n// region Language related\r\n\r\n/**\r\n * Effectively un-anchored on the right side because tags can have many more trailing sub-parts than we care to extract\r\n * Refer to https://www.ietf.org/rfc/rfc5646.txt\r\n */\r\nconst LANGUAGE_AND_SCRIPT_TAG_PATTERN: string =\r\n\t\"^\" +\r\n\t// capture 1:language subtag\r\n\t\"(\" +\r\n\t\"(?:[a-zA-Z]{2,3}(?:-[a-zA-Z]{3}){0,3})\" +  // 2-3 Alpha chars, followed by up to three optional extension tags, each of format -AAA, A=Alpha char\r\n\t\"|\" +\r\n\t\"(?:[a-zA-Z]{4,8})\" +                       // 4-Alpha chars (reserved in standard) or 5-8 Alpha chars\r\n\t\")\" +\r\n\t\"(?:\" +\r\n\t\"-\" +\r\n\t// capture 2: optional script subtag (without leading dash), exactly 4 alpha chars\r\n\t\"([a-zA-Z]{4})\" +                           // 4-Alpha chars\r\n\t\")?\" +\r\n\t// capture 3: optional region subtag (without leading dash), exactly 2 alpha chars or 3 digits\r\n\t\"(?:-([a-zA-Z]{2}|[0-9]{3}))?\" +\r\n\t\"(\" +\r\n\t// capture 4: any left-overs, rejecting remainder strings that don't end here or lead with a dash.\r\n\t\"-.*\" +\r\n\t\")?\" +\r\n\t\"$\";\r\n\r\nexport function isValidLanguageSubTag(subTag: string): boolean {\r\n\tif (!subTag) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst extractedSubTag: string = extractLanguageSubtag(subTag);\r\n\tif (!extractedSubTag) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn extractedSubTag === subTag;\r\n}\r\n\r\nexport function extractLanguageSubtag(language: string): string {\r\n\tif (!language) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst matches = language.match(LANGUAGE_AND_SCRIPT_TAG_PATTERN);\r\n\tif (!matches || matches.length < 1 || !isNOU(matches[4])) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// return the first capture group which should be the original input if there is a match\r\n\t// For example, \"en-US\" input should return \"en-US\", and \"en\" input should return \"en\".\r\n\treturn matches[0];\r\n}\r\n\r\n// endregion\r\n\r\n/**\r\n * Create guid string\r\n */\r\nexport function guid(): string {\r\n\t// Stitch in '4' in the third group\r\n\treturn (randomHex4() + randomHex4() + \"-\" + randomHex4() + \"-4\" + randomHex4().substr(0, 3) + \"-\" + randomHex4() + \"-\"\r\n\t\t+ randomHex4() + randomHex4() + randomHex4()).toLowerCase();\r\n}\r\n\r\n/**\r\n * Create random Hex4 string\r\n */\r\nfunction randomHex4(): string {\r\n\treturn (Math.floor(((1 + Math.random()) * 0x10000))).toString(16).substring(1);\r\n}\r\n\r\n/**\r\n * Create an array from input object values sorted by object key\r\n * @param Object input object\r\n * @return array\r\n */\r\nexport function makeArrayFromObjectValuesSortedByKeyString(object: object): any[] {\r\n\tconst keys: string[] = Object.keys(object);\r\n\tkeys.sort();\r\n\r\n\tconst values: any[] = [];\r\n\tfor (const id in keys) {\r\n\t\tif (keys.hasOwnProperty(id)) {\r\n\t\t\tconst key: string = keys[id];\r\n\t\t\tvalues.push(object[key]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn values;\r\n}\r\n\r\n/**\r\n * Create a date object from an input string\r\n * @param Object input string\r\n * @return date\r\n */\r\nexport function stringToDate(input: any): Date {\r\n\tif (!isString(input)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst newDate: Date = input ? new Date(input) : null;\r\n\treturn isDate(newDate) ? newDate : null;\r\n}\r\n\r\n/**\r\n * Takes two objects (source, target) and returns the target object with values in the source added to it.\r\n * It overwrites any source properties which already exist in target.\r\n */\r\nexport function overrideValues<T>(sourceObject: T, targetobject: T): T {\r\n\tif (!targetobject) {\r\n\t\treturn targetobject;\r\n\t}\r\n\r\n\tconst result: T = targetobject;\r\n\r\n\tif (sourceObject) {\r\n\t\tfor (const field in sourceObject) {\r\n\t\t\tif (sourceObject.hasOwnProperty(field)) {\r\n\t\t\t\t(result as any)[field] = (sourceObject as any)[field];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Test a string is in our supported ISO8601 UTC format of \"yyyy-MM-ddTHH:mm:ssZ\" and \"yyyy-MM-ddTHH:mm:ss.fffZ\"\r\n * @param input Input string to be evaluated.\r\n */\r\nexport function isUtcDatetimeString(input: any): boolean {\r\n\tif (!isString(input)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst supportedUtcRegex = /^(\\d{4}\\-\\d\\d\\-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d\\d\\d)?Z)$/;\r\n\treturn supportedUtcRegex.test(input);\r\n}\r\n\r\n/**\r\n * Convert a date object to a string in ISO8601 UTC format supported by Floodgate (\"yyyy-MM-ddTHH:mm:ssZ\")\r\n * @param input Input date object\r\n */\r\nexport function dateToShortUtcString(input: Date): string {\r\n\tif (!isDate(input)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction pad(n: number): string {\r\n\t\treturn (n < 10) ? (\"0\" + n) : n.toString();\r\n\t}\r\n\r\n\treturn input.getUTCFullYear() +\r\n\t\t\"-\" + pad(input.getUTCMonth() + 1) +\r\n\t\t\"-\" + pad(input.getUTCDate()) +\r\n\t\t\"T\" + pad(input.getUTCHours()) +\r\n\t\t\":\" + pad(input.getUTCMinutes()) +\r\n\t\t\":\" + pad(input.getUTCSeconds()) +\r\n\t\t\"Z\";\r\n}\r\n\r\n/*\r\nImplementing the Fisher-Yates Shuffle\r\n(Shuffles in situ)\r\n*/\r\nexport function fyShuffle(arrIn: number[]): number[] | undefined {\r\n\r\n\tif (isNOU(arrIn)) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// If the array is empty or has one element, do nothing.\r\n\tif (arrIn.length === 0 || arrIn.length === 1) {\r\n\t\treturn arrIn;\r\n\t}\r\n\r\n\tlet lastNonShuffledElement = arrIn.length - 1;\r\n\r\n\t// While there is still a non shuffled element.\r\n\twhile (lastNonShuffledElement > 0) {\r\n\r\n\t\t// Pick one of the non shuffled elements (num range [0,lastNonShuffledElement+1))\r\n\t\tconst pickIndex = Math.floor(Math.random() * (lastNonShuffledElement + 1));\r\n\r\n\t\t// And swap it with the last non shuffled element\r\n\t\tconst temp = arrIn[lastNonShuffledElement];\r\n\t\tarrIn[lastNonShuffledElement] = arrIn[pickIndex];\r\n\t\tarrIn[pickIndex] = temp;\r\n\r\n\t\tlastNonShuffledElement--;\r\n\t}\r\n\r\n\treturn arrIn;\r\n}\r\n\r\n/**\r\n * Check if value is an valid user id\r\n * One or two character before colon, a colon, and some word after colon.\r\n * @param {any} value value\r\n */\r\nexport function isValidUserId(value: any): boolean {\r\n\tif (!isString(value)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst supportedUserIdRegex = /^([a-z]{1,2}):\\w+/;\r\n\treturn supportedUserIdRegex.test(value);\r\n}\r\n\r\n/**\r\n * Safely read an object\r\n */\r\nexport function safeParseObject<T>(serializedValue: string, defaultValue?: T): T {\r\n\ttry {\r\n\t\tconst parsedObject = serializedValue && (serializedValue[0] === \"{\" || serializedValue[0] === \"[\")\r\n\t\t\t\t\t\t\t? JSON.parse(serializedValue)\r\n\t\t\t\t\t\t\t: undefined;\r\n\t\treturn parsedObject ?? defaultValue;\r\n\t} catch (e) {\r\n\t\t// ignore\r\n\t}\r\n\r\n\treturn defaultValue;\r\n}\r\n","import * as Constants from \"./../Constants\";\r\nimport { IOnDismissDelegate } from \"./../IOnDismissDelegate\";\r\nimport { IAugLoopCallback, IFloodgateAuthTokenCallback, IFloodgateSettingStorageCallback, IOnSurveyActivatedCallback }\r\n\tfrom \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { CampaignDefinition } from \"@ms-ofb/officefloodgatecore/dist/src/Campaign/CampaignDefinitionProvider\";\r\nimport { IManifestDataApplication, IManifestDataTelemetry, IManifestDataWeb } from \"./../Transport/Transport\";\r\nimport { ISession } from \"@augloop/runtime-client\";\r\nimport { ICVSurveyParams } from \"@ms-ofb/officefloodgatecore/dist/src/Api/ICVSurvey\";\r\n\r\n/**\r\n * Interface for common initialization options\r\n */\r\nexport interface IInitOptionsCommon {\r\n\t// An id uniquely identifying the host app in the OCV world\r\n\tappId: number;\r\n\t// The url at which the styles reside\r\n\tstylesUrl?: string;\r\n\t// The url at which the internationalization files reside\r\n\tintlUrl?: string;\r\n\t// The filename for the internationalization strings, if different than the default filename\r\n\tintlFilename?: string;\r\n\t// Base url where any ux assets reside. Mainly used by coaching ux\r\n\twebSurfacesResourceBaseUrl?: string;\r\n\t// Environment\r\n\tenvironment: Constants.Environment;\r\n\t// A string uniquely identifying the current session\r\n\tsessionId?: string;\r\n\t// cid string which is in-scope for GDPR compliance for export and deletion request\r\n\tcid?: string;\r\n\t// A build version for your app\r\n\tbuild?: string;\r\n\t// The primary colour in hex form #[0-9a-f]{6}\r\n\tprimaryColour?: string;\r\n\t// The secondary colour in hex form #[0-9a-f]{6}\r\n\tsecondaryColour?: string;\r\n\t// The UI locale name of the calling page\r\n\tlocale?: string;\r\n\t// System-Use only\r\n\toriginalLocale?: string;\r\n\t// A callback which will be called when the SDK encounters errors\r\n\tonError?: (err: string) => void;\r\n\t// Application related metadata\r\n\tapplicationGroup?: IManifestDataApplication;\r\n\t// Telemetry related metadata\r\n\ttelemetryGroup?: IManifestDataTelemetry;\r\n\t// Web related metadata\r\n\twebGroup?: IManifestDataWeb;\r\n\t// User Email \r\n\tuserEmail?: string;\r\n\t// The json string to define event sampling\r\n\teventSampling?: ISamplingEvent[];\r\n\t// The timeout for sending response in petrol\r\n\tpetrolTimeout?: number;\r\n\t// check to see if user is consumer/commercial to dynamically display UI\r\n\tisCommercialHost?: boolean;\r\n\t// Option to see if the host will be providing their own resources such as strings or CSS\r\n\tcustomResourcesSetExternally?: CustomResources;\r\n\t// the email policy value from OCPS to determines if the user can see an option to include their email when they submit feedback\r\n\temailPolicyValue?: Constants.OCPSValues;\r\n\t// the screenshot policy value from OCPS to determines if the user can see an option to include their screenshot when they submit feedback\r\n\tscreenshotPolicyValue?: Constants.OCPSValues;\r\n\t// AgeGroup enum which user is classfied as\r\n\tageGroup?: AgeGroup;\r\n\t// Authentication Type of user\r\n\tauthenticationType?: AuthenticationType;\r\n\t// Application settings\r\n\tapplicationSettings?: IApplicationSettings;\r\n\t// Package settings for the new web surfaces urls (after migration of the CDN)\r\n\twebSurfacesSettings?: IWebSurfacesSettings;\r\n}\r\n\r\n/**\r\n * Interface for messaging service settings\r\n */\r\nexport interface IMessagingServiceSettings {\r\n\t// Internal messaging service url\r\n\tmessagingServiceIntUrl?: string;\r\n\t// Production messaging service url \r\n\tmessagingServiceProdUrl?: string;\r\n}\r\n\r\n/**\r\n * Interface for package settings\r\n */\r\nexport interface IWebSurfacesSettings {\r\n\t// Internal web surfaces url\r\n\twebSurfacesIntUrl?: string;\r\n\t// Production web surfaces url \r\n\twebSurfacesProdUrl?: string;\r\n}\r\n\r\n/**\r\n * Interface for host application settings\r\n */\r\nexport interface IApplicationSettings {\r\n\treadonly [key: string]: unknown;\r\n}\r\n\r\n/**\r\n * Interface for inAppFeedback initialization options\r\n */\r\nexport interface IInitOptionsInAppFeedback {\r\n\t// Method called on feedback submission\r\n\tonDismiss?: IOnDismissDelegate;\r\n\t// Bug form toggle\r\n\tbugForm?: boolean;\r\n\t// email enabled\r\n\tshowEmailAddress?: boolean;\r\n\t// User email\r\n\tuserEmail?: string;\r\n\t// Screenshot toggle\r\n\tscreenshot?: boolean;\r\n\t// The switch to show a thank you panel\r\n\tisShowThanks?: boolean;\r\n\t// Flag to enable/disable transistion on the UI.\r\n\ttransitionEnabled?: boolean;\r\n\t// the feedback policy value from OCPS to determines if the user can submit feedback\r\n\tsendFeedbackPolicyValue?: Constants.OCPSValues;\r\n\t// Feedback Forum URL\r\n\tfeedbackForumUrl?: string;\r\n\t// My feedback Forum URL\r\n\tmyFeedbackForumUrl?: string;\r\n}\r\n\r\n/**\r\n * Interface for floodgate initialization options\r\n */\r\nexport interface IInitOptionsFloodgate {\r\n\t// Should the floodgate prompt automatically dismiss if not clicked? Default is false\r\n\tautoDismiss?: Constants.AutoDismissValues;\r\n\r\n\t// Campaign definitions\r\n\tcampaignDefinitions?: CampaignDefinition[];\r\n\r\n\t// Flights for TMS service\r\n\tcampaignFlights?: string;\r\n\r\n\t// Additional query parameters for TMS service\r\n\tcampaignQueryParameters?: string;\r\n\r\n\t// Delegate to be called when the floodgate UI is dismissed, whether on a submission or not\r\n\tonDismiss?: (campiagnId: string, submitted: boolean) => void;\r\n\r\n\t// The callback to be executed when a survey is activated\r\n\tonSurveyActivatedCallback?: IOnSurveyActivatedCallback;\r\n\r\n\t// The callback to be executed when host-based data operations are needed\r\n\tsettingStorageCallback?: IFloodgateSettingStorageCallback;\r\n\r\n\t// Optionally provide a method which will accept the custom strings in Campaign Definitions and return actual\r\n\t// strings that must be displayed. Used for localization.\r\n\tuIStringGetter?: (str: string) => string;\r\n\r\n\t// The callback to be executed when host-based auth token is needed\r\n\tauthTokenCallback?: IFloodgateAuthTokenCallback;\r\n\r\n\t// The boolean option to enforce if surveys are allowed by a policy, such as an OCPS policy for a tenant.\r\n\t// True: Surveys are enabled, floodgate works normally; False: Surveys are disabled\r\n\tsurveyEnabled?: boolean;\r\n\r\n\t// The boolean option to enforce if email address collection in a survey is allowed by a policy, such as an OCPS policy for a tenant.\r\n\t// True: email address collection is enabled, floodgate works normally; False: email address collection is disabled\r\n\tshowEmailAddress?: boolean;\r\n\r\n\t// Interface to enable/disable and pass augLoop host references\r\n\taugLoopCallback?: IAugLoopCallback<ISession>;\r\n\r\n\t// Interface to pass the params for the Customer Voice Survey\r\n\tcustomerVoiceSurveyParams?: ICVSurveyParams;\r\n\r\n\t// The boolean option to enabl the governance service\r\n\tgovernanceServiceEnabled?: boolean;\r\n\r\n\t// configuration for governance service\r\n\tgovernanceServiceConfig?: IGovernanceServiceConfig;\r\n\r\n\t// is personalizer enabled on client side.\r\n\tpersonalizerEnabled?: boolean;\r\n\r\n\t// Messaging service settings for the new base urls (after migration of the CDN)\r\n\tmessagingServiceSettings?: IMessagingServiceSettings;\r\n}\r\n\r\n/**\r\n * Interface for floodgate event sampling options\r\n */\r\nexport interface ISamplingEvent {\r\n\ttype: string;\r\n\tname: string;\r\n\tsampleRate: number;\r\n}\r\n\r\nexport interface ISamplingInitOption {\r\n\tevent?: Record<string, number>;\r\n}\r\n\r\nexport interface IGovernanceServiceConfig {\r\n\t// limit number of retry\r\n\tretry?: number;\r\n\r\n\t// timeout in second\r\n\ttimeout?: number;\r\n\r\n\t// In case of failure call, option to whether continue display survey or fall off\r\n\tforceServicelessSurveyDisplay?: boolean;\r\n\r\n\t// Option to use simple request\r\n\tsimpleRequestEnabled?: boolean;\r\n}\r\n\r\n// bit mask flag: values should be set 0,1,2,4,8,16, etc...\r\n// Example for Css and Strings both, use 3.\r\nexport enum CustomResources {\r\n\tNone = 0,\r\n\tCss = 1,\r\n\tStrings = 2,\r\n}\r\n\r\nexport enum AgeGroup {\r\n\tUndefined, // Unknown age\r\n\tMinorWithoutParentalConsent, // Minor under the age of consent\r\n\tMinorWithParentalConsent, // Minor under age of consent\r\n\tAdult, // Adult\r\n\tNotAdult, // Minor above age of consent\t\r\n\tMinorNoParentalConsentRequired, // Minor above age of consent\r\n}\r\n\r\nexport enum AuthenticationType {\r\n\tMSA,\r\n\tAAD,\r\n\tUnauthenticated\r\n}\r\n\r\n// Taken from %SRCROOT%\\privacy\\options\\public\\UserConsentGroup.h\r\n// Enum that describes the different consent categories of the user.\r\nexport const enum UserConsentGroup {\r\n\t// Unknown consent group, we do not have info to determine this\r\n\tUnknown = 0,\r\n\t// Can give consent to data collection, upsell messages\r\n\tCanConsent = 1,\r\n\t// Can still give consent but is only a limited consent.\r\n\t// As an example, upsell / cross sell should not be shown.\r\n\tPartialConsent = 2,\r\n\t// They cannot provide any form of consent. No consent dialogs / upsell should not be shown.\r\n\tCannotConsent = 3,\r\n};\r\n","/**\r\n * Constants.ts\r\n *\r\n * A module for non-UI constants.\r\n */\r\n\r\n/**\r\n * Value for the Customer Voice Launcher Type\r\n */\r\nexport const customerVoiceLauncherType = \"customervoice\";\r\n\r\n/**\r\n * Value for the Customer Voice Survey text for adding to App data\r\n */\r\nexport const customerVoiceSurveyUX = \"Customer Voice Survey UX\";\r\n\r\n/**\r\n * Values for types of feedback that go into the json\r\n * Also used to determine the FormTemplate used on each one of the feedback types.\r\n */\r\nexport enum FeedbackType {\r\n\tSmile,\r\n\tFrown,\r\n\tIdea,\r\n\tBug,\r\n\tIdeaRedirect,\r\n}\r\n\r\n/**\r\n * Values for types of panels that go into the json\r\n * Also used to determine the PanelTemplate used on each one of the panel types.\r\n */\r\nexport const enum PanelType {\r\n\tThanks\r\n}\r\n\r\n/**\r\n * Values for the environment\r\n */\r\nexport const enum Environment {\r\n\tProduction,\r\n\tInt\r\n}\r\n\r\n/**\r\n * Values for autodismiss\r\n */\r\nexport const enum AutoDismissValues {\r\n\tNoAutoDismiss,\r\n\tSevenSeconds,\r\n\tFourteenSeconds,\r\n\tTwentyOneSeconds,\r\n\tTwentyEightSeconds,\r\n\tSixtySeconds,\r\n\tNinetySeconds,\r\n\tOneHundredAndTwentySeconds,\r\n\tOneHundredAndFiftySeconds,\r\n}\r\n\r\n/**\r\n * Dynamic scripts\r\n */\r\nexport class DynamicScriptUrls {\r\n\t/**\r\n\t * Link to the Office WebSurfaces UX package\r\n\t */\r\n\t/* tslint:disable:max-line-length */\r\n\tpublic static WebSurfacesIntLink: string = \"https://content.growth.office.net/mirrored/resources/programmablesurfaces/int/officewebsurfaces.core.min.js\";\r\n\tpublic static WebSurfacesProdLink: string = \"https://content.growth.office.net/mirrored/resources/programmablesurfaces/prod/officewebsurfaces.core.min.js\";\r\n}\r\n\r\n/**\r\n * Constant GUIDs\r\n */\r\nexport class GUIDs {\r\n\tpublic static TMSAppID: string = \"4c4f550b-42b2-4a16-93f9-fdb9e01bb6ed\";\r\n\tpublic static TULIPSAppID: string = \"05c88d91-956e-46b4-91b0-77a33cc21a4d\";\r\n}\r\n\r\nexport const enum OCPSValues {\r\n\tNotConfigured = 0,\r\n\tEnabled = 1,\r\n\tDisabled = 2\r\n}\r\n\r\nexport const enum FeedbackStatus {\r\n\tEnabled,\r\n\tDisabledByAdmin,\r\n\tDisabledByAgeGroup\r\n}\r\n\r\n/**\r\n * Prefix for SDK version string\r\n */\r\nexport const SDK_VERSION_PREFIX = \"Web SDK v\";\r\n","/**\r\n * Interface for storing and retrieving floodgate-specific data from storage\r\n */\r\ninterface IFloodgateStorageProvider {\r\n\t/**\r\n\t * Lock the file to prevent access from another process.\r\n\t */\r\n\tfileLock(fileType: IFloodgateStorageProvider.FileType): void;\r\n\r\n\t/**\r\n\t * Unlock the file.\r\n\t */\r\n\tfileUnlock(fileType: IFloodgateStorageProvider.FileType): void;\r\n\r\n\t/**\r\n\t * Read the file\r\n\t */\r\n\tread(fileType: IFloodgateStorageProvider.FileType): string;\r\n\r\n\t/**\r\n\t * Write to the file\r\n\t */\r\n\twrite(fileType: IFloodgateStorageProvider.FileType, content: string): void;\r\n}\r\n\r\nmodule IFloodgateStorageProvider {\r\n\t/**\r\n\t * Enum for the files used by floodgate\r\n\t */\r\n\texport enum FileType {\r\n\t\tFloodgateSettings,\r\n\t\tSurveyActivationStats,\r\n\t\tSurveyEventActivityStats,\r\n\t\tCampaignDefinitions,\r\n\t\tCampaignStates,\r\n\t\tGovernedChannelStates,\r\n\t\tTmsCache_MessageMetadata,\r\n\t\tTmsCache_UserGovernance,\r\n\t\tTmsCache_CampaignContent,\r\n\t\tTms_DynamicSettings,\r\n\t\tLogLevelSettings,\r\n\t\tUserFacts,\r\n\t\tDebugOverrides,\r\n\t}\r\n}\r\n\r\nexport = IFloodgateStorageProvider;\r\n","/**\r\n * Parent module for all modules in Api/\r\n */\r\n\r\nimport * as ISurveyInfo from \"./../ISurveyInfo\";\r\nimport * as IActivityListener from \"./IActivityListener\";\r\nimport * as IFloodgateSettingIdMap from \"./IFloodgateSettingIdMap\";\r\nimport * as IFloodgateStorageProvider from \"./IFloodgateStorageProvider\";\r\nimport * as IFloodgateStringProvider from \"./IFloodgateStringProvider\";\r\nimport * as ISurvey from \"./ISurvey\";\r\nimport * as ISurveyComponent from \"./ISurveyComponent\";\r\n\r\nexport { CampaignDefinition } from \"../Campaign/CampaignDefinitionProvider\";\r\nexport { IActivityListener };\r\nexport { IAssetsProvider } from \"./IAssetsProvider\";\r\nexport { IAugLoopCallback } from \"./IAugLoopCallback\";\r\nexport { IBpsSurvey } from \"./IBpsSurvey\";\r\nexport { ICampaignDefinitionProvider } from \"../Campaign/CampaignDefinitionProvider\";\r\nexport { ICommentComponent } from \"./ICommentComponent\";\r\nexport { ICVSurveyComponent } from \"./ICVSurveyComponent\";\r\nexport { IDataProvider } from \"./IDataProvider\";\r\nexport { IFeedbackSurvey } from \"./IFeedbackSurvey\";\r\nexport { IFloodgateAuthTokenCallback } from \"./IFloodgateAuthTokenCallback\";\r\nexport { IFloodgateEnvironmentProvider } from \"./IFloodgateEnvironmentProvider\";\r\nexport { IFloodgateSettingStorageCallback } from \"./IFloodgateSettingStorageCallback\";\r\nexport { IFloodgateStorageProvider };\r\nexport { IFloodgateStringProvider };\r\nexport { IFloodgateSettingIdMap };\r\nexport { IFloodgateTelemetryLogger } from \"./IFloodgateTelemetryLogger\";\r\nexport { IFpsSurvey } from \"./IFpsSurvey\";\r\nexport { INpsSurvey } from \"./INpsSurvey\";\r\nexport { IInterceptSurvey } from \"./IInterceptSurvey\";\r\nexport { IOnSurveyActivatedCallback } from \"./IOnSurveyActivatedCallback\";\r\nexport { IPromptComponent } from \"./IPromptComponent\";\r\nexport { IInterceptComponent } from \"./IInterceptComponent\";\r\nexport { IPsatSurvey } from \"./IPsatSurvey\";\r\nexport { IRatingComponent } from \"./IRatingComponent\";\r\nexport { IFloodgateSetting } from \"./IFloodgateSetting\";\r\nexport { ISurvey };\r\nexport { ISurveyComponent };\r\nexport { ISurveyDomWriter } from \"./ISurveyDomWriter\";\r\nexport { ISurveyForm } from \"./ISurveyForm\";\r\nexport { ISurveyJsonWriter } from \"./ISurveyJsonWriter\";\r\nexport { ISurveyInfo };\r\nexport { ISurveyLauncher } from \"./ISurveyLauncher\";\r\nexport { ISurveyLauncherFactory } from \"./ISurveyLauncherFactory\";\r\nexport { ITelemetryProperties } from \"./ITelemetryProperties\";\r\nexport { ITransporter } from \"./ITransporter\";\r\nexport { ITransporterFactory } from \"./ITransporterFactory\";\r\nexport { IUserFact } from \"../UserFact/IUserFact\";\r\nexport { IUserFactProvider } from \"./IUserFactProvider\";\r\nexport { IGovernanceServiceClient } from \"./IGovernanceServiceClient\";\r\nexport { IPersonalizerClient } from \"./IPersonalizerClient\";\r\n","/**\r\n * Constants.ts\r\n *\r\n * A module for all the constants.\r\n */\r\n\r\n/**\r\n * Telemetry events\r\n */\r\nexport class TelemetryEvent {\r\n\tpublic static CampaignState = class {\r\n\t\tpublic static Deserialize = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_CampaignState_Deserialize_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static FileBasedCampaignStateProvider = class {\r\n\t\tpublic static Load = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_FileBasedCampaignStateProvider_Load_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static HostBasedCampaignStateProvider = class {\r\n\t\tpublic static GetStatesFromHost = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_HostBasedCampaignStateProvider_GetStatesFromHost_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static Floodgate = class {\r\n\t\tpublic static Initialize = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_Floodgate_Initialize_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static Start = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_Floodgate_Start_Failed\";\r\n\t\t\tpublic static Warning: string = \"FloodgateCore_Floodgate_Start_Warning\";\r\n\t\t\tpublic static SurveysDisabled: string = \"FloodgateCore_Floodgate_Start_SurveysDisabled\";\r\n\t\t};\r\n\r\n\t\tpublic static UserFactsLoad = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_Floodgate_UserFactsLoad_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static UserFactsSpecDeserialization = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_Floodgate_UserFactsSpecDeserialization_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static UserFactsSpecIsAMatch = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Failed\";\r\n\t\t\tpublic static Mismatch: string = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Mismatch\";\r\n\t\t\tpublic static Summary: string = \"FloodgateCore_Floodgate_UserFactsSpecIsAMatch_Summary\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static FloodgateEngine = class {\r\n\t\tpublic static Make = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_FloodgateEngine_Make_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static Common = class {\r\n\t\t\tpublic static Error: string = \"FloodgateCore_FloodgateEngine_Common_Error\";\r\n\t\t};\r\n\r\n\t\tpublic static Start = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_FloodgateEngine_Start_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static StartAsync = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_FloodgateEngine_StartAsync_Failed\";\r\n\t\t\tpublic static Stopped: string = \"FloodgateCore_FloodgateEngine_StartAsync_Stopped\";\r\n\t\t};\r\n\r\n\t\tpublic static OnSurveyActivated = class {\r\n\t\t\tpublic static ActivationStatsSuppressedSurvey: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationStatsSuppressedSurvey\";\r\n\t\t\tpublic static ClosedChannelType: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ClosedChannelType\";\r\n\t\t\tpublic static SurveyNotDefined: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_SurveyNotDefined\";\r\n\t\t\tpublic static SessionSuppressedSurvey: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_SessionSuppressedSurvey\";\r\n\t\t\tpublic static ActivationExpiredSurvey: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationExpiredSurvey\";\r\n\t\t\tpublic static ActivationIrrelevantSurvey: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_ActivationIrrelevantSurvey\";\r\n\t\t\tpublic static Error: string = \"FloodgateCore_FloodgateEngine_OnSurveyActivated_Error\";\r\n\t\t};\r\n\r\n\t\tpublic static CheckGovernanceServiceAndActivateSurvey = class {\r\n\t\t\tpublic static GovernanceServiceForceToDisplay: string = \"FloodgateCore_FloodgateEngine_GovernanceService_GovernanceServiceForceToDisplay\";\r\n\t\t\tpublic static GovernanceServiceClientCompleted: string = \"FloodgateCore_FloodgateEngine_GovernanceService_GovernanceServiceClientCompleted\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static GovernedChannelState = class {\r\n\t\tpublic static Deserialize = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_GovernedChannelState_Deserialize_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static FileBasedGovernedChannelStateProvider = class {\r\n\t\tpublic static Load = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_FileBasedGovernedChannelStateProvider_Load_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static HostBasedGovernedChannelStateProvider = class {\r\n\t\tpublic static GetStatesFromHost = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_HostBasedGovernedChannelStateProvider_GetStatesFromHost_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static SurveyStatCollectionActivation = class {\r\n\t\tpublic static FromJson = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_SurveyStatCollectionActivation_FromJson_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static ToJson = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_SurveyStatCollectionActivation_ToJson_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static HostBasedSurveyActivationStatsProvider = class {\r\n\t\tpublic static GetSurveyStatsFromHost = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_HostBasedSurveyActivationStatsProvider_GetSurveyStatsFromHost_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static SurveyStatCollectionEventActivity = class {\r\n\t\tpublic static FromJson = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_SurveyStatCollectionEventActivity_FromJson_Failed\";\r\n\t\t};\r\n\r\n\t\tpublic static ToJson = class {\r\n\t\t\tpublic static Failed: string = \"FloodgateCore_SurveyStatCollectionEventActivity_ToJson_Failed\";\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static SurveyActivity = class {\r\n\t\tpublic static LogActivity = class {\r\n\t\t\tpublic static EventsReprocessed: string = \"FloodgateCore_SurveyActivity_LogActivity_EventsReprocessed\";\r\n\t\t\tpublic static SurveysReprocessed: string = \"FloodgateCore_SurveyActivity_LogActivity_SurveysReprocessed\";\r\n\t\t};\r\n\r\n\t\tpublic static SetActivityTrackingContracts = class {\r\n\t\t\tpublic static DuplicateSurveyID: string = \"FloodgateCore_SurveyActivity_SetActivityTrackingContracts_DuplicateSurveyID\";\r\n\t\t};\r\n\t};\r\n}\r\n","import * as Utils from \"./Utils\";\r\n\r\nexport enum GovernedChannelType {\r\n\tStandard, // 0\r\n\tUrgent, // 1\r\n\tBanner, // 2\r\n\tTeachingMessage, // 3\r\n}\r\n\r\nexport namespace GovernedChannelType {\r\n\texport function getDefault(): GovernedChannelType { return GovernedChannelType.Standard; }\r\n}\r\n\r\nexport interface IGovernedChannelData {\r\n\t/**\r\n\t * Gets the type of GovernedChannel this object represents\r\n\t */\r\n\tgetType(): GovernedChannelType;\r\n\r\n\t/**\r\n\t * Gets the name of this GovernedChannel\r\n\t */\r\n\tgetName(): string;\r\n\r\n\t/**\r\n\t * Gets the amount of time during which this channel will refuse new surveys after a successful prompt\r\n\t */\r\n\tgetCooldownSeconds(): number;\r\n\r\n\t/**\r\n\t * Gets the last time this channel started a cool down (aka the last time a survey was successfully shown).\r\n\t * Null if cool down has never been initiated\r\n\t */\r\n\tgetCooldownStartTime(): Date;\r\n\r\n\t/**\r\n\t * If in cool down, returns the time in which this channel will next be \"Open\".\r\n\t * Else returns the last time this channel became \"Open\".\r\n\t */\r\n\tgetCooldownEndTime(): Date;\r\n\r\n\t/**\r\n\t * Whether or not this channel is open to new surveys at this current point in time (aka Now)\r\n\t */\r\n\tisOpen(): boolean;\r\n\r\n\t/**\r\n\t * Whether or not this channel is open to new surveys at the specified point in time\r\n\t */\r\n\tisOpenAtDate(date: Date): boolean;\r\n}\r\n\r\nexport class GovernedChannel implements IGovernedChannelData {\r\n\tprivate type: GovernedChannelType;\r\n\tprivate name: string;\r\n\tprivate cooldownSeconds: number;\r\n\tprivate cooldownStartTime: Date;\r\n\tprivate cooldownEndTime: Date;\r\n\r\n\tpublic constructor(type: GovernedChannelType, name: string, cooldownSeconds: number, cooldownStartTime: Date) {\r\n\t\tif (!Utils.isEnumValue(type, GovernedChannelType)) {\r\n\t\t\tthrow new Error(\"type is not a valid GovernedChannelType\");\r\n\t\t}\r\n\r\n\t\tif (!name) {\r\n\t\t\tthrow new Error(\"name must not be null or empty\");\r\n\t\t}\r\n\r\n\t\tif (cooldownSeconds < 0) {\r\n\t\t\tthrow new Error(\"cooldownSeconds must not be negative\");\r\n\t\t}\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.name = name;\r\n\t\tthis.cooldownSeconds = cooldownSeconds;\r\n\t\tthis.setCooldownStartTime(cooldownStartTime);\r\n\t}\r\n\r\n\tpublic setCooldownStartTime(cooldownStartTime: Date): void {\r\n\t\t// Set the start time\r\n\t\tthis.cooldownStartTime = cooldownStartTime;\r\n\r\n\t\tif (Utils.isNOU(this.cooldownStartTime)) {\r\n\t\t\t// Null cooldownStartTime means cool down has never been initiated, so set the cooldownEndTime to distant past\r\n\t\t\tthis.cooldownEndTime = Utils.getDistantPast();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Calculate the end time, but don't overflow past max.\r\n\t\tthis.cooldownEndTime = Utils.addSecondsWithoutOverflow(this.cooldownStartTime, this.cooldownSeconds);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isOpen(): boolean {\r\n\t\treturn this.isOpenAtDate(new Date());\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isOpenAtDate(date: Date): boolean {\r\n\t\tif (!date) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn (date > this.cooldownEndTime);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): GovernedChannelType {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCooldownSeconds(): number {\r\n\t\treturn this.cooldownSeconds;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCooldownStartTime(): Date {\r\n\t\treturn this.cooldownStartTime;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCooldownEndTime(): Date {\r\n\t\treturn this.cooldownEndTime;\r\n\t}\r\n}\r\n","import { ISurveyForm } from \"../Api/ISurveyForm\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport { ISurveyDomWriter } from \"./ISurveyDomWriter\";\r\nimport { ISurveyJsonWriter } from \"./ISurveyJsonWriter\";\r\n\r\n/**\r\n * The interface for all Surveys\r\n * A survey has a type, a globally unique id (otherwise opaque, but suitable for correlation with telemetry and for saving stats in the registry),\r\n * an expiration time to aid in cache cleanup, and an activation event to cause this survey to be triggered\r\n */\r\ninterface ISurvey extends ISurveyForm, ISurveyDomWriter, ISurveyJsonWriter {\r\n\t/**\r\n\t * Get the type of this survey.\r\n\t */\r\n\tgetType(): ISurvey.Type;\r\n\r\n\t/**\r\n\t * Get basic root-level information about this survey\r\n\t */\r\n\tgetSurveyInfo(): ISurveyInfo;\r\n}\r\n\r\nmodule ISurvey {\r\n\texport enum Type {\r\n\t\t// A Feedback survey. Contains a single question with a free-form text response\r\n\t\tFeedback = 0,\r\n\t\t// An NPS (net promoter score) survey. Asks user to rate \"whether or not they would recommend this product to family/friends\".\r\n\t\t// Contains a prompt, question, and rating\r\n\t\tNps = 1,\r\n\t\t// A PSAT (product satisfaction) survey. Asks user to rate \"overall, based on their experience, how satisifed are they with this app\"\r\n\t\t// Contains a prompt, question, and rating\r\n\t\tPsat = 2,\r\n\t\t// A BPS (build promotion) survey. Asks user to choose between Yes and No options of promoting the current build to the next audience ring\r\n\t\t// Contains a prompt, question, and rating (Yes/No)\r\n\t\tBps = 3,\r\n\t\t// A FPS (feature promotion) survey. Asks user to rate a given app feature.\r\n\t\t// Contains a prompt, question, and rating\r\n\t\tFps = 4,\r\n\t\t// A NLQS (net language quality score) survey. Asks user to rate the language quality.\r\n\t\t// Contains a prompt, question, and rating\r\n\t\tNlqs = 5,\r\n\t\t// An intercept survey. Asks user if they want to talk to a Microsoft engineer to give feedback.\r\n\t\t// User can dismiss it or click on it to go to the intercept website, where the experience continues.\r\n\t\tIntercept = 6,\r\n\t\t// A Generic surface survey that uses content metadata to render a surface.\r\n\t\t// As of 4th Feb 2019 there are 11 types defined in Mso hence giving a value of 12.\r\n\t\tGenericMessagingSurface = 12,\r\n\t}\r\n\r\n\texport const DOM_FEEDBACKSURVEY_TAGNAME = \"FeedbackSurvey\";\r\n\texport const DOM_NPS_TAGNAME = \"Nps\";\r\n\texport const DOM_PSAT_TAGNAME = \"Psat\";\r\n\texport const DOM_BPS_TAGNAME = \"Bps\";\r\n\texport const DOM_FPS_TAGNAME = \"Fps\";\r\n\texport const DOM_NLQS_TAGNAME = \"Nlqs\";\r\n\texport const DOM_INTERCEPT_TAGNAME = \"Intercept\";\r\n\r\n\t// If the launcher type is null or undefined in campaign definition then this value will be used as default\r\n\texport const LAUNCHER_TYPE_DEFAULT = \"survey\";\r\n}\r\n\r\nexport = ISurvey;\r\n","/**\r\n * Base interface for a SurveyComponent (i.e. a question/widget to show the user\r\n * in a survey form, and that typically requires a response value of some kind)\r\n */\r\ninterface ISurveyComponent {\r\n\tgetType(): ISurveyComponent.Type;\r\n}\r\n\r\nmodule ISurveyComponent {\r\n\texport const enum Type {\r\n\t\t// A quick pop-up requesting participation in a survey\r\n\t\tPrompt = \"Prompt\",\r\n\r\n\t\t// A question paired with a free-form text response\r\n\t\tComment = \"Comment\",\r\n\r\n\t\t// A question asking for a selection from a list of allowed values with numeric meaning\r\n\t\tRating = \"Rating\",\r\n\r\n\t\t// Information needed to pass into CVSurvey\r\n\t\tCVSurvey = \"CVSurvey\",\r\n\r\n\t\t// A question asking for one or more selections from a list of allowed values\r\n\t\tMultipleChoice = \"MultipleChoice\",\r\n\r\n\t\t// A pop-up dialog requesting participation in an Intercept session\r\n\t\tIntercept = \"Intercept\",\r\n\t}\r\n\r\n\texport const DOM_PROMPT_TAGNAME = \"Prompt\";\r\n\texport const DOM_COMMENT_TAGNAME = \"Comment\";\r\n\texport const DOM_RATING_TAGNAME = \"Rating\";\r\n\texport const DOM_CVSURVEY_TAGNAME = \"CVSurvey\";\r\n\texport const DOM_MULTIPLECHOICE_TAGNAME = \"MultipleChoice\";\r\n\texport const DOM_INTERCEPT_TAGNAME = \"Intercept\";\r\n\texport const JSON_INTERCEPT_KEYNAME = \"intercept\";\r\n\texport const JSON_INTERCEPTURL_KEYNAME = \"url\";\r\n\texport const JSON_PROMPT_KEYNAME = \"prompt\";\r\n\texport const JSON_PROMPTYESTEXT_KEYNAME = \"yesButtonText\";\r\n\texport const JSON_PROMPTNOTEXT_KEYNAME = \"noButtonText\";\r\n\texport const JSON_COMMENT_KEYNAME = \"comment\";\r\n\texport const JSON_RATING_KEYNAME = \"rating\";\r\n\texport const JSON_CVSURVEY_KEYNAME = \"cvSurvey\";\r\n\texport const JSON_CVSURVEYFORMID_KEYNAME = \"formId\";\r\n\texport const JSON_CVSURVEYTHEME_KEYNAME = \"theme\";\r\n\texport const JSON_RATINGOPTIONS_KEYNAME = \"options\";\r\n\texport const JSON_CVSURVEYPRODUCTNAME_KEYNAME = \"productName\";\r\n\texport const JSON_CVSURVEYUIHOST_KEYNAME = \"uiHost\";\r\n\texport const JSON_CVSURVEYPLATFORM_KEYNAME = \"platform\";\r\n\texport const JSON_TITLE_KEYNAME = \"title\";\r\n\texport const JSON_QUESTION_KEYNAME = \"question\";\r\n\texport const JSON_MULTIPLECHOICE_KEYNAME = \"multipleChoice\";\r\n\texport const JSON_APPLICATION_KEYNAME = \"application\";\r\n\texport const JSON_EXTENDEDMANIFESTDATA_KEYNAME = \"extendedManifestData\";\r\n\texport const JSON_SURVEYSTRINGS_KEYNAME = \"surveyStrings\";\r\n\texport const JSON_SURVEYSPECIFICDATA_KEYNAME = \"surveySpecificData\";\r\n}\r\n\r\nexport = ISurveyComponent;\r\n","import { ActivityTrackingSet } from \"./ActivityTrackingSet\";\r\nimport { ISurveyInfo, IUserFactProvider } from \"./Api/Api\";\r\nimport * as IActivityListener from \"./Api/IActivityListener\";\r\nimport { IFloodgateEnvironmentProvider } from \"./Api/IFloodgateEnvironmentProvider\";\r\nimport { IFloodgateSettingStorageCallback } from \"./Api/IFloodgateSettingStorageCallback\";\r\nimport * as IFloodgateStorageProvider from \"./Api/IFloodgateStorageProvider\";\r\nimport * as IFloodgateStringProvider from \"./Api/IFloodgateStringProvider\";\r\nimport { IFloodgateTelemetryLogger } from \"./Api/IFloodgateTelemetryLogger\";\r\nimport { GovernanceServiceClientState, IGovernanceServiceClient, IGovernanceServiceResult, IGovernanceSurveyInfo, IGovernanceSurveyResponse } from \"./Api/IGovernanceServiceClient\";\r\nimport { IContextData, IOnSurveyActivatedCallback } from \"./Api/IOnSurveyActivatedCallback\";\r\nimport * as ISurvey from \"./Api/ISurvey\";\r\nimport { ISurveyLauncher } from \"./Api/ISurveyLauncher\";\r\nimport { ISurveyLauncherFactory } from \"./Api/ISurveyLauncherFactory\";\r\nimport { ITelemetryProperties } from \"./Api/ITelemetryProperties\";\r\nimport { ITransporterFactory } from \"./Api/ITransporterFactory\";\r\nimport { CampaignDefinition,\r\n\t\tCampaignNominationSchemeRatioPercentage,\r\n\t\tFileSystemCampaignDefinitionProvider,\r\n\t\tICampaignDefinitionProvider } from \"./Campaign/CampaignDefinitionProvider\";\r\nimport { CampaignManager } from \"./Campaign/CampaignManager\";\r\nimport { CampaignStateProviderFactory, ICampaignStateProvider } from \"./Campaign/CampaignStateProvider\";\r\nimport { IDictionary } from \"./Common\";\r\nimport { TelemetryEvent } from \"./Constants\";\r\nimport { FloodgateSettings } from \"./FloodgateSettings\";\r\nimport { GovernedChannelType, IGovernedChannelData } from \"./GovernedChannel\";\r\nimport { GovernedChannelStateProviderFactory, IGovernedChannelStateProvider } from \"./GovernedChannelStateProvider\";\r\nimport { Governor, IGovernor } from \"./Governor\";\r\nimport { ISurveyClient } from \"./ISurveyClient\";\r\nimport * as SurveyActivityListener from \"./SurveyActivityListener\";\r\nimport { ISurveyActivationStatsProvider, SurveyActivationStats, SurveyActivationStatsProviderFactory,\r\n\tSurveyStatCollectionActivation } from \"./SurveyStatCollectionActivation\";\r\nimport { SurveyEventActivityStats, SurveyStatCollectionEventActivity } from \"./SurveyStatCollectionEventActivity\";\r\n\r\nimport FileType = IFloodgateStorageProvider.FileType;\r\nimport { ActivityTrackingContract } from \"./ActivityTrackingContract\";\r\nimport { hasSurveyReachedMaxLaunches, hasSurveyReachedMaxLaunchesPerSession, isBusinessCriticalSurvey, isCriticalSurvey, isMultiLaunchSurvey } from \"./GovernanceUtils\";\r\nimport { isNOU } from \"./Utils\";\r\n\r\n// Telemetry logger with no-op logger\r\nclass DefaultFloodgateTelemetryLogger implements IFloodgateTelemetryLogger {\r\n\t// @Override\r\n\tpublic log_TriggerMet(campaignId: string, surveyId: string, surveyType: ISurvey.Type, surveyActivityInfo: string,\r\n\t\tadditionalSurveyInfo: string): void {}\r\n\r\n\t// @Override\r\n\tpublic log_UserSelected(campaignId: string, surveyId: string, surveyType: ISurvey.Type,\r\n\t\tadditionalSurveyInfo: string): void {}\r\n\r\n\t// @Override\r\n\tpublic log_CampaignLoad_Failed(errorMessage: string): void {}\r\n\r\n\t// @Override\r\n\tpublic log_Error(eventId: string, errorMessage: string): void {}\r\n\r\n\t// @Override\r\n\tpublic log_Event(eventId: string, properties: ITelemetryProperties): void {}\r\n\r\n\t// @Override\r\n\tpublic log_LocalError(message: string, ...data: any[]): void {}\r\n}\r\n\r\nexport const enum InitializationStatus {\r\n\tNone = 0,\r\n\tError,\r\n\tInitializing,\r\n\tStarted,\r\n\tStopped,\r\n}\r\n\r\nconst defaultSurveyActivityListener: SurveyActivityListener.IActivityListenerCallback = {\r\n\trun(survey) {\r\n\t},\r\n\tshouldAcceptActivity(activityName) {\r\n\t\treturn true;\r\n\t},\r\n};\r\n\r\nconst globalSessionSurveyActivationCounts: IDictionary<number> = {};\r\n\r\n/**\r\n * Floodgate Engine class.  The main wiring hub and the brains responsible for\r\n * linking together the survey definitions, governance, activity tracking, and\r\n * survey launchers.  Only one-instance-at-a-time of these should be created\r\n * per app session.\r\n */\r\nexport class FloodgateEngine {\r\n\tpublic static setTelemetryLogger(telemetryLogger: IFloodgateTelemetryLogger): void {\r\n\t\tif (!telemetryLogger) {\r\n\t\t\tthrow new Error(\"telemetryLogger must not be null\");\r\n\t\t}\r\n\r\n\t\tFloodgateEngine.telemetryLogger = telemetryLogger;\r\n\t}\r\n\r\n\tpublic static getTelemetryLogger(): IFloodgateTelemetryLogger {\r\n\t\treturn FloodgateEngine.telemetryLogger;\r\n\t}\r\n\r\n\tpublic static getTransportFactory(): ITransporterFactory {\r\n\t\treturn FloodgateEngine.transporterFactory;\r\n\t}\r\n\r\n\tpublic static make(\r\n\t\tbuildVersion: string,\r\n\t\tlauncherFactory: ISurveyLauncherFactory,\r\n\t\tonSurveyActivatedCallback: IOnSurveyActivatedCallback,\r\n\t\tfileBasedStorageProvider: IFloodgateStorageProvider,\r\n\t\thostBasedStorageProvider: IFloodgateSettingStorageCallback,\r\n\t\tstringProvider: IFloodgateStringProvider,\r\n\t\tenvironmentProvider: IFloodgateEnvironmentProvider,\r\n\t\ttransporterFactory: ITransporterFactory,\r\n\t\tcampaignDefinitionProviders: ICampaignDefinitionProvider[],\r\n\t\tuserFactsProvider: IUserFactProvider,\r\n\t\tgovernanceServiceClient: IGovernanceServiceClient): FloodgateEngine {\r\n\r\n\t\ttry {\r\n\t\t\tconst governedChannelStateProvider: IGovernedChannelStateProvider\r\n\t\t\t\t= GovernedChannelStateProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\r\n\r\n\t\t\tconst surveyActivationStatsProvider: ISurveyActivationStatsProvider\r\n\t\t\t\t= SurveyActivationStatsProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\r\n\r\n\t\t\tconst campaignStateProvider: ICampaignStateProvider\r\n\t\t\t\t= CampaignStateProviderFactory.make(fileBasedStorageProvider, hostBasedStorageProvider);\r\n\r\n\t\t\tcampaignDefinitionProviders.push(new FileSystemCampaignDefinitionProvider(fileBasedStorageProvider));\r\n\r\n\t\t\treturn new FloodgateEngine(\r\n\t\t\t\tnew CampaignManager(\r\n\t\t\t\t\tcampaignStateProvider,\r\n\t\t\t\t\tcampaignDefinitionProviders,\r\n\t\t\t\t\tstringProvider,\r\n\t\t\t\t\tenvironmentProvider,\r\n\t\t\t\t\tbuildVersion,\r\n\t\t\t\t\tnew Date(),\r\n\t\t\t\t\tuserFactsProvider,\r\n\t\t\t\t),\r\n\t\t\t\tnew SurveyActivityListener(\r\n\t\t\t\t\tdefaultSurveyActivityListener,\r\n\t\t\t\t\tthis.getTelemetryLogger,\r\n\t\t\t\t),\r\n\t\t\t\tlauncherFactory,\r\n\t\t\t\tonSurveyActivatedCallback,\r\n\t\t\t\tfileBasedStorageProvider,\r\n\t\t\t\tnew Governor(\r\n\t\t\t\t\tgovernedChannelStateProvider,\r\n\t\t\t\t),\r\n\t\t\t\tsurveyActivationStatsProvider,\r\n\t\t\t\ttransporterFactory,\r\n\t\t\t\tgovernanceServiceClient,\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tthis.telemetryLogger.log_Event(TelemetryEvent.FloodgateEngine.Make.Failed,\r\n\t\t\t\t{ ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\r\n\t\t}\r\n\t}\r\n\r\n\t// Initialize telemetry logger with no-op logger\r\n\tprivate static telemetryLogger: IFloodgateTelemetryLogger = new DefaultFloodgateTelemetryLogger();\r\n\tprivate static transporterFactory: ITransporterFactory;\r\n\r\n\tprivate surveyClient: ISurveyClient;\r\n\tprivate activityListener: SurveyActivityListener;\r\n\tprivate onSurveyActivatedCallback: IOnSurveyActivatedCallback;\r\n\tprivate launcherFactory: ISurveyLauncherFactory;\r\n\tprivate storage: IFloodgateStorageProvider;\r\n\tprivate governor: IGovernor;\r\n\tprivate initializationStatus: InitializationStatus = InitializationStatus.None;\r\n\tprivate loggedFirstStart: boolean;\r\n\r\n\tprivate floodgateSettings: FloodgateSettings;\r\n\tprivate previousSurveyActivationStats: SurveyStatCollectionActivation;\r\n\tprivate previousSurveyEventActivityStats: SurveyStatCollectionEventActivity;\r\n\r\n\tprivate candidateSurveys: IDictionary<ISurvey> = {};\r\n\tprivate launchedSurveys: IDictionary<ISurvey> = {};\r\n\tprivate launchedLaunchers: ISurveyLauncher[] = [];\r\n\tprivate surveyEventSent: string[] = [];\r\n\r\n\tprivate surveyActivationStatsProvider: ISurveyActivationStatsProvider;\r\n\r\n\tprivate governanceServiceClient: IGovernanceServiceClient;\r\n\tprivate staleTriggeredSurveysQueue: ISurvey[] = [];\r\n\r\n\tpublic constructor(surveyClient: ISurveyClient, activityListener: SurveyActivityListener, launcherFactory: ISurveyLauncherFactory,\r\n\t\tonSurveyActivatedCallback: IOnSurveyActivatedCallback, storage: IFloodgateStorageProvider, governor: IGovernor,\r\n\t\tsurveyActivationStatsProvider: ISurveyActivationStatsProvider, transporterFactory: ITransporterFactory,\r\n\t\tgovernanceServiceClient: IGovernanceServiceClient) {\r\n\r\n\t\tif (!surveyClient) {\r\n\t\t\tthrow new Error(\"surveyClient must not be null\");\r\n\t\t}\r\n\t\tif (!activityListener) {\r\n\t\t\tthrow new Error(\"activityListener must not be null\");\r\n\t\t}\r\n\t\tif (!launcherFactory) {\r\n\t\t\tthrow new Error(\"launcherFactory must not be null\");\r\n\t\t}\r\n\t\tif (!onSurveyActivatedCallback) {\r\n\t\t\tthrow new Error(\"onSurveyActivatedCallback must not be null\");\r\n\t\t}\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error(\"storage must not be null\");\r\n\t\t}\r\n\t\tif (!governor) {\r\n\t\t\tthrow new Error(\"governor must not be null\");\r\n\t\t}\r\n\t\tif (!transporterFactory) {\r\n\t\t\tthrow new Error(\"transporterFactory must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyClient = surveyClient;\r\n\t\tthis.activityListener = activityListener;\r\n\t\tthis.launcherFactory = launcherFactory;\r\n\t\tthis.onSurveyActivatedCallback = onSurveyActivatedCallback;\r\n\t\tthis.storage = storage;\r\n\t\tthis.governor = governor;\r\n\t\tthis.surveyActivationStatsProvider = surveyActivationStatsProvider;\r\n\t\tthis.governanceServiceClient = governanceServiceClient;\r\n\t\tFloodgateEngine.transporterFactory = transporterFactory;\r\n\r\n\t\tthis.loggedFirstStart = false;\r\n\r\n\t\t// Initialize our list to a valid, empty collection\r\n\t\tthis.setPendingSurveys(null);\r\n\r\n\t\t// If the listener was pre-configured with survey for some reason, clear it now\r\n\t\tthis.activityListener.clearSurveys();\r\n\r\n\t\t// Link ourselves with the listener\r\n\t\tconst thisObj = this; // Save current object in a variable to allow access from callback.\r\n\t\tthis.activityListener.setCallback({\r\n\t\t\trun(surveyId: string, contextInfo: IContextData[]) {\r\n\t\t\t\tthisObj.onSurveyActivated(surveyId, contextInfo);\r\n\t\t\t},\r\n\t\t\tshouldAcceptActivity(activityName: string) {\r\n\t\t\t\treturn thisObj.shouldAcceptActivity(activityName);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Save all internal stats and floodgateSettings (merging with existing file contents), without stopping the engine.\r\n\t */\r\n\tpublic mergeAndSave(): void {\r\n\t\tthis.saveSettings();\r\n\t\tthis.saveSurveyActivationHistory();\r\n\t\tthis.saveSurveyEventActivityHistory();\r\n\r\n\t\t// Inform surveyClient to save its state\r\n\t\tthis.surveyClient.saveCurrentState();\r\n\r\n\t\t// Save governed channel states\r\n\t\tthis.governor.saveChannelStates();\r\n\t}\r\n\r\n\t/**\r\n\t * Start the engine.  Checks feature enable state, causes survey definitions to be read, and tracked activities to be set on the listener.\r\n\t */\r\n\tpublic start(): void {\r\n\t\tif (this.initializationStatus === InitializationStatus.Initializing ||\r\n\t\t\tthis.initializationStatus === InitializationStatus.Started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.setInitializationStatus(InitializationStatus.Initializing);\r\n\t\t\tthis.loadSettingsAndPriorEventCounts();\r\n\r\n\t\t\tconst channelTypes: GovernedChannelType[] = this.getAvailableChannelTypes();\r\n\r\n\t\t\tthis.surveyClient.refreshSurveyDefinitions(channelTypes);\r\n\r\n\t\t\tthis.setPendingSurveysAndStartFloodgate();\r\n\t\t\tthis.setInitializationStatus(InitializationStatus.Started);\r\n\t\t} catch (e) {\r\n\t\t\tthis.setInitializationStatus(InitializationStatus.Error);\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.FloodgateEngine.Start.Failed,\r\n\t\t\t\t{ ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Start the engine.  Checks feature enable state, causes survey definitions to be read, and tracked activities to be set on the listener.\r\n\t */\r\n\tpublic startAsync(): Promise<void> {\r\n\t\tif (this.initializationStatus === InitializationStatus.Initializing ||\r\n\t\t\tthis.initializationStatus === InitializationStatus.Started) {\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.setInitializationStatus(InitializationStatus.Initializing);\r\n\t\t\tthis.loadSettingsAndPriorEventCounts();\r\n\r\n\t\t\tconst channelTypes: GovernedChannelType[] = this.getAvailableChannelTypes();\r\n\r\n\t\t\tconst thisFloodgateEngine = this;\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tthisFloodgateEngine.surveyClient.refreshSurveyDefinitionsAsync(channelTypes).then(\r\n\t\t\t\t\tfunction onFulfilled() {\r\n\t\t\t\t\t\t// Handle any stop() calls that happened while initializing\r\n\t\t\t\t\t\tif (thisFloodgateEngine.initializationStatus === InitializationStatus.Stopped) {\r\n\t\t\t\t\t\t\tthisFloodgateEngine.setInitializationStatus(InitializationStatus.Started);\r\n\t\t\t\t\t\t\tthisFloodgateEngine.stop();\r\n\t\t\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.FloodgateEngine.StartAsync.Stopped,\r\n\t\t\t\t\t\t\t\t{ ErrorMessage: \"Stopped because of a pending stop() call\" });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthisFloodgateEngine.setPendingSurveysAndStartFloodgate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t},\r\n\t\t\t\t).catch(\r\n\t\t\t\t\tfunction OnRejected(error: Error) {\r\n\t\t\t\t\t\tthisFloodgateEngine.setInitializationStatus(InitializationStatus.Error);\r\n\t\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.FloodgateEngine.StartAsync.Failed,\r\n\t\t\t\t\t\t\t{ ErrorMessage: \"Survey refresh error \" + (error && error.message) });\r\n\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t},\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tthis.setInitializationStatus(InitializationStatus.Error);\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.FloodgateEngine.StartAsync.Failed,\r\n\t\t\t\t{ ErrorMessage: e && e.toString(), ErrorDetails: e && e.stack });\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Stop the engine.  Causes tracked activities to be cleared and any in-progress counters not otherwise saved to be thrown out.\r\n\t */\r\n\tpublic stop(): void {\r\n\t\tif (this.initializationStatus === InitializationStatus.Started) {\r\n\t\t\tthis.mergeAndSave();\r\n\r\n\t\t\t// Clear our Survey list, and push that through to the listener\r\n\t\t\tthis.setPendingSurveys(null);\r\n\t\t\tthis.updateActivityListenerWithCurrentSurveyDefinitions();\r\n\t\t}\r\n\r\n\t\tthis.setInitializationStatus(InitializationStatus.Stopped);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the IActivityListener logging interface for callers that want to log directly rather than through telemetry\r\n\t */\r\n\tpublic getActivityListener(): IActivityListener {\r\n\t\treturn this.activityListener;\r\n\t}\r\n\r\n\tprivate setInitializationStatus(status: InitializationStatus): void {\r\n\t\tthis.initializationStatus = status;\r\n\t}\r\n\r\n\tprivate saveSettings(): void {\r\n\t\tthis.storage.fileLock(FileType.FloodgateSettings);\r\n\r\n\t\ttry {\r\n\t\t\tthis.writeString(FileType.FloodgateSettings, FloodgateSettings.toJson(this.floodgateSettings));\r\n\t\t} finally {\r\n\t\t\tthis.storage.fileUnlock(FileType.FloodgateSettings);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate loadSettingsAndPriorEventCounts(): void {\r\n\t\ttry {\r\n\t\t\t// Load up the prior survey history and prior event counts\r\n\t\t\tthis.previousSurveyActivationStats = this.surveyActivationStatsProvider.load();\r\n\r\n\t\t\tthis.previousSurveyEventActivityStats =\r\n\t\t\t\tSurveyStatCollectionEventActivity.fromJson(this.readString(FileType.SurveyEventActivityStats));\r\n\r\n\t\t\t// get the list of survey Id - all the survey should have event sent already\r\n\t\t\tconst stats: IDictionary<SurveyEventActivityStats> = this.previousSurveyEventActivityStats.getStats();\r\n\t\t\tfor (const key in stats) {\r\n\t\t\t\tif (stats.hasOwnProperty(key)) {\r\n\t\t\t\t\tthis.surveyEventSent.push(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Load up the general floodgateSettings\r\n\t\t\tthis.floodgateSettings = FloodgateSettings.fromJson(this.readString(FileType.FloodgateSettings));\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.FloodgateEngine.Common.Error,\r\n\t\t\t\t{ ErrorMessage: \"Error loading prior settings/events \" + (e && e.toString()) });\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getAvailableChannelTypes(): GovernedChannelType[] {\r\n\t\t// Make sure we've loaded the current survey definitions\r\n\t\tconst channels: IGovernedChannelData[] = this.governor.getAvailableChannelData();\r\n\t\tconst channelTypes: GovernedChannelType[] = [];\r\n\r\n\t\tchannels.forEach((channel) => {\r\n\t\t\tif (channel) {\r\n\t\t\t\tchannelTypes.push(channel.getType());\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn channelTypes;\r\n\t}\r\n\r\n\tprivate setPendingSurveysAndStartFloodgate(): void {\r\n\t\t// Update our survey list, and push that through to the listener\r\n\t\tthis.setPendingSurveys(this.surveyClient.getAppSurveys());\r\n\t\tthis.updateActivityListenerWithCurrentSurveyDefinitions();\r\n\r\n\t\t// Mark us as started\r\n\t\tthis.setInitializationStatus(InitializationStatus.Started);\r\n\r\n\t\t// Log our first start (aka floodgate boot) event\r\n\t\tif (!this.loggedFirstStart) {\r\n\t\t\tthis.loggedFirstStart = true;\r\n\t\t\tthis.getActivityListener().logActivity(SurveyActivityListener.FloodgateStartActivityName);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateSurveyActivationStats(survey: ISurvey) {\r\n\t\tconst surveyInfo = survey.getSurveyInfo();\r\n\t\tconst surveyId = surveyInfo.getId();\r\n\t\tconst stats = this.previousSurveyActivationStats.getStats()[surveyId] || new SurveyActivationStats();\r\n\t\tstats.Type = survey.getType();\r\n\t\tstats.ExpirationTimeUtc = surveyInfo.getExpirationTimeUtc();\r\n\t\tstats.ActivationTimeUtc = new Date();\r\n\t\tstats.SurveyLaunchCount++;\r\n\r\n\t\tthis.previousSurveyActivationStats.addStats(surveyId, stats);\r\n\r\n\t\t// Save the SurveyLaunchCountPerSession into global memory but not local storage\r\n\t\t// so it won't be overwritten in local storage by another app instance\r\n\t\tif (!globalSessionSurveyActivationCounts.hasOwnProperty(surveyId)) {\r\n\t\t\tglobalSessionSurveyActivationCounts[surveyId] = 0;\r\n\t\t}\r\n\t\tglobalSessionSurveyActivationCounts[surveyId]++;\r\n\t}\r\n\r\n\tprivate saveSurveyActivationHistory(): void {\r\n\t\tthis.storage.fileLock(FileType.SurveyActivationStats);\r\n\r\n\t\ttry {\r\n\t\t\tconst statCollection: SurveyStatCollectionActivation = this.surveyActivationStatsProvider.load();\r\n\r\n\t\t\tconst previousStats = this.previousSurveyActivationStats.getStats();\r\n\r\n\t\t\t// Build the update collection\r\n\t\t\tconst updateCollection = new SurveyStatCollectionActivation();\r\n\t\t\tfor (const key in this.launchedSurveys) {\r\n\t\t\t\tif (this.launchedSurveys.hasOwnProperty(key)) {\r\n\t\t\t\t\tconst survey: ISurvey = this.launchedSurveys[key];\r\n\t\t\t\t\tconst surveyId = survey.getSurveyInfo().getId();\r\n\r\n\t\t\t\t\t// Make this part of the update list\r\n\t\t\t\t\tconst stats = previousStats[surveyId];\r\n\t\t\t\t\tupdateCollection.addStats(surveyId, stats);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Actually merge our updates into the full collection\r\n\t\t\tstatCollection.accumulate(updateCollection);\r\n\t\t\tthis.surveyActivationStatsProvider.save(statCollection);\r\n\r\n\t\t\t// Make sure to keep our internal collection consistent with what we just wrote\r\n\t\t\tthis.previousSurveyActivationStats = statCollection;\r\n\t\t} finally {\r\n\t\t\tthis.storage.fileUnlock(FileType.SurveyActivationStats);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate saveSurveyEventActivityHistory(): void {\r\n\t\tthis.storage.fileLock(FileType.SurveyEventActivityStats);\r\n\r\n\t\ttry {\r\n\t\t\tconst statCollection: SurveyStatCollectionEventActivity =\r\n\t\t\t\tSurveyStatCollectionEventActivity.fromJson(this.readString(FileType.SurveyEventActivityStats));\r\n\r\n\t\t\tconst now = new Date();\r\n\t\t\t// Fill out our list of updates\r\n\t\t\tconst updateCollection = new SurveyStatCollectionEventActivity();\r\n\t\t\tfor (const key in this.candidateSurveys) {\r\n\t\t\t\tif (this.candidateSurveys.hasOwnProperty(key)) {\r\n\t\t\t\t\tconst stats: SurveyEventActivityStats = new SurveyEventActivityStats();\r\n\t\t\t\t\tconst survey: ISurvey = this.candidateSurveys[key];\r\n\r\n\t\t\t\t\tif (!survey.getSurveyInfo().isActiveForDate(now)) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstats.ExpirationTimeUtc = survey.getSurveyInfo().getExpirationTimeUtc();\r\n\r\n\t\t\t\t\t// Get the activities which are aggregated, if there aren't any continue\r\n\t\t\t\t\tconst allActivities: ActivityTrackingSet = survey.getSurveyInfo().getActivationEvent().getTrackingSet();\r\n\t\t\t\t\tconst aggregateActivities: string[] = [];\r\n\t\t\t\t\tconst nonAggregateActivities: string[] = [];\r\n\r\n\t\t\t\t\tallActivities.getList().forEach((data) => {\r\n\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\tif (data.getIsAggregate()) {\r\n\t\t\t\t\t\t\t\taggregateActivities.push(data.getActivity());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnonAggregateActivities.push(data.getActivity());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tstats.Counts = new Array(aggregateActivities.length);\r\n\r\n\t\t\t\t\t// Save off the counts we've added for this session\r\n\t\t\t\t\tfor (let i = 0; i < aggregateActivities.length; i++) {\r\n\t\t\t\t\t\tstats.Counts[i] = this.activityListener.moveSessionCountIntoBaseCount(aggregateActivities[i], survey.getSurveyInfo().getId());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (const activity of nonAggregateActivities) {\r\n\t\t\t\t\t\tthis.activityListener.saveSessionTrackingActivity(activity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Make this part of the update list\r\n\t\t\t\t\tupdateCollection.addStats(survey.getSurveyInfo().getId(), stats);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Actually merge our updates into the full collection\r\n\t\t\tstatCollection.accumulate(updateCollection);\r\n\r\n\t\t\tthis.writeString(FileType.SurveyEventActivityStats, SurveyStatCollectionEventActivity.toJson(statCollection));\r\n\t\t\t// Make sure to keep our internal collection consistent with what we just wrote\r\n\t\t\tthis.previousSurveyEventActivityStats = statCollection;\r\n\t\t} finally {\r\n\t\t\tthis.storage.fileUnlock(FileType.SurveyEventActivityStats);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setPendingSurveys(pendingSurveys: IDictionary<ISurvey>): void {\r\n\t\tthis.candidateSurveys = {};\r\n\t\tif (pendingSurveys) {\r\n\t\t\tfor (const key in pendingSurveys) {\r\n\t\t\t\tif (pendingSurveys.hasOwnProperty(key)) {\r\n\t\t\t\t\tconst survey: ISurvey = pendingSurveys[key];\r\n\t\t\t\t\tif (this.launcherFactory.AcceptsSurvey(survey)) {\r\n\t\t\t\t\t\tthis.candidateSurveys[key] = survey;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCurrentSurveyDefinitions(): ISurvey[] {\r\n\t\t// Get a vector of Surveys from our id-based map\r\n\t\tconst surveyList: ISurvey[] = new Array<ISurvey>();\r\n\r\n\t\tconst allCampaignDefinitionIDs = this.getAllCampaignDefinitionIDs();\r\n\t\tconst allCandidateCampaignDefinitionIDs = this.getAllCandidateCampaignDefinitionIDs();\r\n\r\n\t\t// Get all the campaign definitions. We need info from these for telemetry.\r\n\t\tconst allCampaignDefinitions = (this.surveyClient as CampaignManager).getCampaignDefinitions();\r\n\r\n\t\tconst isSurveyAllowed = (surveyInfo: ISurveyInfo) => {\r\n\t\t\t// always allow business critical and approved campaigns\r\n\t\t\tif (isBusinessCriticalSurvey(surveyInfo)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tconst surveyActivationStats = this.previousSurveyActivationStats.getBySurveyId(surveyInfo.getId());\r\n\t\t\tif (isMultiLaunchSurvey(surveyInfo) &&\r\n\t\t\t\t!hasSurveyReachedMaxLaunches(surveyInfo, surveyActivationStats) &&\r\n\t\t\t\t!hasSurveyReachedMaxLaunchesPerSession(surveyInfo, globalSessionSurveyActivationCounts)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Skip over any candidate surveys that have been previously completed or not active anymore\r\n\t\t\tif (surveyActivationStats || !surveyInfo.isActiveForDate(new Date())) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tfor (const key in this.candidateSurveys) {\r\n\t\t\tif (this.candidateSurveys.hasOwnProperty(key)) {\r\n\t\t\t\tconst survey: ISurvey = this.candidateSurveys[key];\r\n\t\t\t\tconst surveyInfo = survey.getSurveyInfo();\r\n\t\t\t\tconst campaignDefinition: CampaignDefinition = allCampaignDefinitions[surveyInfo?.getBackEndId()];\r\n\t\t\t\tif (!campaignDefinition || !isSurveyAllowed(surveyInfo)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// send the UserSelected event if it is not sent before\r\n\t\t\t\tif (this.surveyEventSent.indexOf(key) < 0) {\r\n\t\t\t\t\tthis.surveyEventSent.push(key);\r\n\r\n\t\t\t\t\tconst additionalSurveyInfo = this.getAdditionalSurveyInfoForTelemetry(survey,\r\n\t\t\t\t\t\tnull /* contextInfo */,\r\n\t\t\t\t\t\tallCampaignDefinitionIDs,\r\n\t\t\t\t\t\tallCandidateCampaignDefinitionIDs);\r\n\r\n\t\t\t\t\tFloodgateEngine.telemetryLogger.log_UserSelected(surveyInfo.getBackEndId(),\r\n\t\t\t\t\t\tsurveyInfo.getId(),\r\n\t\t\t\t\t\tsurvey.getType(),\r\n\t\t\t\t\t\tJSON.stringify(additionalSurveyInfo));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsurveyList.push(survey);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn surveyList;\r\n\t}\r\n\r\n\tprivate getAdditionalSurveyInfoForTelemetry(survey: ISurvey,\r\n\t\tcontextInfo: IContextData[], allCampaignDefinitionIDs: string[], allCandidateCampaignDefinitionIDs: string[]): {\r\n\t\tallCandidateCampaignDefinitionIDs: string[],\r\n\t\tallCampaignDefinitionIDs: string[],\r\n\t\tcontextCount?: number,\r\n\t\tsurveyLauncherType: string,\r\n\t\tchannelType: GovernedChannelType,\r\n\t\tpercentageNumerator: number,\r\n\t\tpercentageDenominator: number,\r\n\t\tnominationPeriodNumber: number,\r\n\t\tcooldownPeriodNumber: number,\r\n\t\tbusinessLevel: number,\r\n\t\tmaxLaunches: number,\r\n\t\tmaxLaunchesPerSession: number,\r\n\t\tgovernanceServiceClientState?: GovernanceServiceClientState,\r\n\t} {\r\n\t\t// Get all the campaign definitions. We need info from these for telemetry.\r\n\t\tconst allCampaignDefinitions = (this.surveyClient as CampaignManager).getCampaignDefinitions();\r\n\r\n\t\t// Get the corresponding campaign definition to the survey in question.\r\n\t\tconst correspondingCampaignDefinition = allCampaignDefinitions[survey.getCampaignId()];\r\n\r\n\t\t// Survey properties to get from its corresponding CampaignDefinition:\r\n\t\tlet percentageNumerator: number;\r\n\t\tlet percentageDenominator: number;\r\n\t\tlet nominationPeriodNumber: number;\r\n\t\tlet cooldownPeriodNumber: number;\r\n\r\n\t\tpercentageNumerator = (correspondingCampaignDefinition.nominationScheme as CampaignNominationSchemeRatioPercentage).percentageNumerator;\r\n\t\tpercentageDenominator = (correspondingCampaignDefinition.nominationScheme as CampaignNominationSchemeRatioPercentage).percentageDenominator;\r\n\r\n\t\tnominationPeriodNumber = correspondingCampaignDefinition.nominationScheme.nominationPeriod.asTimeIntervalSeconds();\r\n\t\tnominationPeriodNumber = isNOU(nominationPeriodNumber) ? -1 : nominationPeriodNumber; // Setting to -1 if null or undefined\r\n\r\n\t\tcooldownPeriodNumber = correspondingCampaignDefinition.nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\r\n\t\tcooldownPeriodNumber = isNOU(cooldownPeriodNumber) ? -1 : cooldownPeriodNumber;  // Setting to -1 if null or undefined\r\n\r\n\t\tconst surveyInfo = survey.getSurveyInfo();\r\n\t\treturn {\r\n\t\t\tallCampaignDefinitionIDs,\r\n\t\t\tallCandidateCampaignDefinitionIDs,\r\n\t\t\tchannelType: surveyInfo.getGovernedChannelType(),\r\n\t\t\tcontextCount: contextInfo ? contextInfo.length : undefined,\r\n\t\t\tcooldownPeriodNumber,\r\n\t\t\tnominationPeriodNumber,\r\n\t\t\tpercentageDenominator,\r\n\t\t\tpercentageNumerator,\r\n\t\t\tsurveyLauncherType: survey.getLauncherType(),\r\n\r\n\t\t\tbusinessLevel: surveyInfo.getBusinessLevel(),\r\n\t\t\tmaxLaunches: surveyInfo.getMaxLaunches(),\r\n\t\t\tmaxLaunchesPerSession: surveyInfo.getMaxLaunchesPerSession(),\r\n\t\t};\r\n\t}\r\n\r\n\tprivate getAllCandidateCampaignDefinitionIDs(): string[] {\r\n\r\n\t\tconst allCandidateCampaignDefinitionIDs: string[] = [];\r\n\r\n\t\t// Get all the candidate surveys' campaign definition IDs\r\n\t\tfor (const key in this.candidateSurveys) {\r\n\t\t\tif (this.candidateSurveys.hasOwnProperty(key)) {\r\n\t\t\t\tconst candidateSurvey: ISurvey = this.candidateSurveys[key];\r\n\t\t\t\tallCandidateCampaignDefinitionIDs.push(candidateSurvey.getSurveyInfo().getBackEndId());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn allCandidateCampaignDefinitionIDs;\r\n\t}\r\n\r\n\tprivate getAllCampaignDefinitionIDs(): string[] {\r\n\r\n\t\tconst allCampaignDefinitions = (this.surveyClient as CampaignManager).getCampaignDefinitions();\r\n\t\tconst allCampaignDefinitionIDs: string[] = [];\r\n\r\n\t\tfor (const definitionsKey in allCampaignDefinitions) {\r\n\t\t\tif (Object.prototype.hasOwnProperty.call(allCampaignDefinitions, definitionsKey)) {\r\n\t\t\t\tconst definition: CampaignDefinition = allCampaignDefinitions[definitionsKey];\r\n\t\t\t\tallCampaignDefinitionIDs.push(definition.campaignId);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn allCampaignDefinitionIDs;\r\n\t}\r\n\r\n\tprivate updateActivityListenerWithCurrentSurveyDefinitions(): void {\r\n\t\tconst surveyList: ISurvey[] = this.getCurrentSurveyDefinitions();\r\n\t\tconst trackingContractList: ActivityTrackingContract[] = [];\r\n\r\n\t\tfor (const survey of surveyList) {\r\n\t\t\tconst surveyInfo = survey.getSurveyInfo();\r\n\t\t\tconst trackingContract = new ActivityTrackingContract(surveyInfo.getId(), surveyInfo.getActivationEvent().getTrackingSet());\r\n\t\t\ttrackingContractList.push(trackingContract);\r\n\t\t}\r\n\r\n\t\tthis.activityListener.SetActivityTrackingContracts(trackingContractList, this.previousSurveyEventActivityStats);\r\n\t}\r\n\r\n\tprivate setCriticalPendingSurveysAndUpdateActivityListener() {\r\n\t\tconst activeSurveys: IDictionary<ISurvey> = {};\r\n\r\n\t\t// Get all the candidate surveys' campaign definition IDs\r\n\t\tfor (const key in this.candidateSurveys) {\r\n\t\t\tif (this.candidateSurveys.hasOwnProperty(key)) {\r\n\t\t\t\tconst candidateSurvey: ISurvey = this.candidateSurveys[key];\r\n\t\t\t\tif (isCriticalSurvey(candidateSurvey.getSurveyInfo())) {\r\n\t\t\t\t\tactiveSurveys[key] = candidateSurvey;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (Object.keys(activeSurveys).length > 0) {\r\n\t\t\tthis.setPendingSurveys(activeSurveys);\r\n\t\t\tthis.updateActivityListenerWithCurrentSurveyDefinitions();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate shouldAcceptActivity(activityName: string): boolean {\r\n\t\treturn this.initializationStatus === InitializationStatus.Started ||\r\n\t\t\tactivityName === SurveyActivityListener.FloodgateStartActivityName;\r\n\t}\r\n\r\n\tprivate onSurveyActivated(surveyId: string, contextInfo: IContextData[]): void {\r\n\t\t// Find the survey object that corresponds to the surveyId passed\r\n\t\tconst surveys: ISurvey[] = this.getCurrentSurveyDefinitions();\r\n\t\tlet survey: ISurvey;\r\n\r\n\t\tfor (const tempSurvey of surveys) {\r\n\t\t\tif (tempSurvey.getSurveyInfo().getId() === surveyId) {\r\n\t\t\t\tsurvey = tempSurvey;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isNOU(survey)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.SurveyNotDefined,\r\n\t\t\t\t\"Survey is not defined in the current survey definitions.\",\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst governedChannelType: GovernedChannelType = survey.getSurveyInfo().getGovernedChannelType();\r\n\r\n\t\t\t// If the governance service is in use, launch survey asynchronously\r\n\t\t\tif (this.governanceServiceClient.isEnabled(governedChannelType)) {\r\n\t\t\t\t// record the stale surveys, so we can clear its tracker if Engine is stopped\r\n\t\t\t\tthis.staleTriggeredSurveysQueue.push(survey);\r\n\r\n\t\t\t\t// If there is no survey in stale before, launch the survey right away\r\n\t\t\t\tif (this.staleTriggeredSurveysQueue.length === 1) {\r\n\t\t\t\t\t// Launch the survey asynchronously\r\n\t\t\t\t\tthis.checkGovernanceServiceAndActivateSurvey(survey, governedChannelType, contextInfo);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.activateSurvey(survey, governedChannelType, contextInfo);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.telemetryLogger.log_Event(TelemetryEvent.FloodgateEngine.OnSurveyActivated.Error,\r\n\t\t\t\t{ ErrorMessage: `Error activating survey ${e && e.toString()}`, ErrorDetails: e && e.stack });\r\n\t\t}\r\n\t}\r\n\r\n\tprivate activateSurvey(survey: ISurvey, governedChannelType: GovernedChannelType, contextInfo: IContextData[]) {\r\n\t\tlet launchSurvey: boolean = false;\r\n\t\t// Figure out if the activated survey is still relevant\r\n\t\tif (!this.candidateSurveys[survey.getSurveyInfo().getId()]) {\r\n\t\t\t// Survey is no longer relevant but was activated. Suppress it.\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationIrrelevantSurvey,\r\n\t\t\t\t{\r\n\t\t\t\t\tCampaignId: survey.getSurveyInfo().getBackEndId(),\r\n\t\t\t\t\tSurveyId: survey.getSurveyInfo().getId(),\r\n\t\t\t\t});\r\n\t\t} else if (!survey.getSurveyInfo().isActiveForDate(new Date())) {\r\n\t\t\t// Survey is no longer active (e.g. it was when we registered it but it has now expired)\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationExpiredSurvey,\r\n\t\t\t\t{\r\n\t\t\t\t\tCampaignId: survey.getSurveyInfo().getBackEndId(),\r\n\t\t\t\t\tSurveyId: survey.getSurveyInfo().getId(),\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Refresh channels\r\n\t\t\tthis.governor.refreshChannelData();\r\n\r\n\t\t\tif (isCriticalSurvey(survey.getSurveyInfo())) {\r\n\t\t\t\tlaunchSurvey = true;\r\n\t\t\t} else if (!this.governor.isChannelOpen(governedChannelType)) {\r\n\t\t\t\t// Channel has closed and maxLaunches is not set, suppress the survey\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.ClosedChannelType,\r\n\t\t\t\t\t{ ClosedChannelType: GovernedChannelType[governedChannelType] });\r\n\t\t\t} else {\r\n\t\t\t\t// Get latest survey states from provider\r\n\t\t\t\tconst refreshedSurveyActivationStats = this.surveyActivationStatsProvider.load();\r\n\t\t\t\tif (refreshedSurveyActivationStats.getBySurveyId(survey.getSurveyInfo().getId())) {\r\n\t\t\t\t\t// Survey stats exists already, don't launch\r\n\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.ActivationStatsSuppressedSurvey,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tCampaignId: survey.getSurveyInfo().getBackEndId(),\r\n\t\t\t\t\t\t\tSurveyId: survey.getSurveyInfo().getId(),\r\n\t\t\t\t\t\t});\r\n\t\t\t\t} else if (Object.keys(this.launchedSurveys).length === 0) {\r\n\t\t\t\t\t// for now we only support launching one survey per session unless it is multi-launch campaign\r\n\t\t\t\t\t// Track this survey activation for the launch history tracker\r\n\t\t\t\t\tlaunchSurvey = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst triggeredSurvey = Object.values(this.launchedSurveys)[0];\r\n\t\t\t\t\tif (!isNOU(triggeredSurvey)) {\r\n\t\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\t\t\tTelemetryEvent.FloodgateEngine.OnSurveyActivated.SessionSuppressedSurvey,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tCampaignId: triggeredSurvey.getSurveyInfo().getBackEndId(),\r\n\t\t\t\t\t\t\t\tSurveyId: triggeredSurvey.getSurveyInfo().getId(),\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (launchSurvey) {\r\n\t\t\t\tthis.launchedSurveys[survey.getSurveyInfo().getId()] = survey;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// At this point, regardless of whether or not the survey is still relevant, we should flush out the stats\r\n\t\tthis.updateSurveyActivationStats(survey);\r\n\t\tthis.mergeAndSave();\r\n\t\t// shut off further survey launches\r\n\t\tthis.activityListener.clearSurveys();\r\n\r\n\t\t// Clear the survey from stale list\r\n\t\tthis.staleTriggeredSurveysQueue = [];\r\n\r\n\t\t// Actually launch the survey if possible\r\n\t\tif (launchSurvey) {\r\n\t\t\t// Get the stringified json with activity names, counts and isAggregate info for TriggetMet telemetry.\r\n\t\t\tconst activityTrackingString = survey.getSurveyInfo().getActivationEvent().getTrackingSet()\r\n\t\t\t.getActivityTrackingInfo(this.activityListener, survey.getSurveyInfo().getId());\r\n\r\n\t\t\tconst additionalSurveyInfo = this.getAdditionalSurveyInfoForTelemetry(survey, contextInfo, this.getAllCampaignDefinitionIDs(),\r\n\t\t\t\tthis.getAllCandidateCampaignDefinitionIDs());\r\n\r\n\t\t\t// Only adding the governance service client state at TriggerMet event\r\n\t\t\tadditionalSurveyInfo.governanceServiceClientState = this.governanceServiceClient.getClientState();\r\n\r\n\t\t\tFloodgateEngine.telemetryLogger.log_TriggerMet(survey.getSurveyInfo().getBackEndId(), survey.getSurveyInfo().getId(),\r\n\t\t\t\tsurvey.getType(), activityTrackingString, JSON.stringify(additionalSurveyInfo));\r\n\r\n\t\t\t// Set govern channel\r\n\t\t\tthis.governor.startChannelCooldown(governedChannelType);\r\n\r\n\t\t\tconst surveyInfo = survey.getSurveyInfo();\r\n\t\t\tlet isSurveyComplete = true;\r\n\t\t\tif (isBusinessCriticalSurvey(surveyInfo)) {\r\n\t\t\t\t// critical campaigns are not tracked\r\n\t\t\t\tisSurveyComplete = false;\r\n\t\t\t} else if (isMultiLaunchSurvey(surveyInfo)) {\r\n\t\t\t\tconst surveyActivationStats = this.previousSurveyActivationStats.getBySurveyId(surveyInfo.getId());\r\n\t\t\t\tisSurveyComplete = hasSurveyReachedMaxLaunches(surveyInfo, surveyActivationStats);\r\n\t\t\t}\r\n\r\n\t\t\t// Set campaign states\r\n\t\t\tthis.surveyClient.onSurveyActivated(surveyInfo, isSurveyComplete);\r\n\r\n\t\t\t// Show the survey\r\n\t\t\tthis.launchLauncher(survey, contextInfo);\r\n\r\n\t\t\t// check if there are any critical campaigns and start tracking again\r\n\t\t\tthis.setCriticalPendingSurveysAndUpdateActivityListener();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async checkGovernanceServiceAndActivateSurvey(survey: ISurvey,\r\n\t\tgovernedChannelType: GovernedChannelType,\r\n\t\tcontextInfo: IContextData[]): Promise<void> {\r\n\t\t// Get the cooldown setting\r\n\t\tconst campaignDefinition = this.surveyClient.getCampaignDefinitions()[survey.getCampaignId()];\r\n\t\tconst campaignCooldown = campaignDefinition.nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\r\n\t\tconst channelCooldown = Governor.GetChannelCoolDown(governedChannelType);\r\n\r\n\t\t// Call the Governance Service\r\n\t\tconst serviceResult: IGovernanceServiceResult = await this.governanceServiceClient\r\n\t\t\t.checkGovernancePermitAsync(survey, campaignCooldown, channelCooldown, governedChannelType);\r\n\t\tlet launchSurvey: boolean = false;\r\n\r\n\t\t// Log the stale\r\n\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\tTelemetryEvent.FloodgateEngine.CheckGovernanceServiceAndActivateSurvey.GovernanceServiceClientCompleted,\r\n\t\t\t{\r\n\t\t\t\tMessage: JSON.stringify(this.createGorvernanceResponseTelemetry(serviceResult)),\r\n\t\t\t});\r\n\r\n\t\t// Check if engine is still running\r\n\t\tif (this.initializationStatus !== InitializationStatus.Started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!serviceResult.error) {\r\n\t\t\t// Check result is permitted\r\n\t\t\tif (serviceResult.permission) { // the Governance Service is permitting, continue to trigger\r\n\t\t\t\tlaunchSurvey = true;\r\n\t\t\t} else {\r\n\t\t\t\tconst lastSurveyTriggerInfo: IGovernanceSurveyResponse = serviceResult.lastTriggerSurvey;\r\n\t\t\t\t// For now, we only know the channel is in cooldown but not the specific survey\r\n\t\t\t\t// So only set governed channel to new cooldown\r\n\t\t\t\tthis.governor.startChannelCooldown(governedChannelType, lastSurveyTriggerInfo.lastTriggerSurveyTime);\r\n\r\n\t\t\t\t// Clear the survey relating to channel\r\n\t\t\t\tthis.clearSurveyWithChannel(governedChannelType);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// If force to display with error, continue to trigger the survey\r\n\t\t\tif (this.governanceServiceClient.shouldForceDisplay()) {\r\n\t\t\t\tlaunchSurvey = true;\r\n\r\n\t\t\t\t// Log the force to display event\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\tTelemetryEvent.FloodgateEngine.CheckGovernanceServiceAndActivateSurvey.GovernanceServiceForceToDisplay,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tErrorMessage: serviceResult.errorMessage,\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (launchSurvey) {\r\n\t\t\t// Launch the survey\r\n\t\t\tthis.activateSurvey(survey, governedChannelType, contextInfo);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If there is only one survey, which is the current one in process, clear queue and return\r\n\t\tif (this.staleTriggeredSurveysQueue.length <= 1) {\r\n\t\t\tthis.staleTriggeredSurveysQueue = [];\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove the first activated survey from the list which is the current one in process\r\n\t\tthis.staleTriggeredSurveysQueue.shift();\r\n\r\n\t\t// Playback the next activated survey in waiting\r\n\t\tthis.checkGovernanceServiceAndActivateSurvey(this.staleTriggeredSurveysQueue[0], governedChannelType, contextInfo);\r\n\t}\r\n\r\n\tprivate readString(fileType: FileType): string {\r\n\t\treturn this.storage.read(fileType);\r\n\t}\r\n\r\n\tprivate writeString(fileType: FileType, str: string): void {\r\n\t\tthis.storage.write(fileType, str);\r\n\t}\r\n\r\n\tprivate launchLauncher(survey: ISurvey, contextInfo: IContextData[]): void {\r\n\t\tconst launcher: ISurveyLauncher = this.launcherFactory.makeSurveyLauncher(survey);\r\n\t\tif (launcher) {\r\n\t\t\tthis.launchedLaunchers.push(launcher);\r\n\t\t\tthis.onSurveyActivatedCallback.onSurveyActivated(launcher, survey, { contextInfo });\r\n\t\t}\r\n\t}\r\n\r\n\tprivate clearSurveyWithChannel(governedChannelType: GovernedChannelType) {\r\n\t\tconst activeSurveys: IDictionary<ISurvey> = {};\r\n\r\n\t\t// Get all the candidate surveys' campaign definition IDs\r\n\t\tfor (const key in this.candidateSurveys) {\r\n\t\t\tif (this.candidateSurveys.hasOwnProperty(key)) {\r\n\t\t\t\tconst candidateSurvey: ISurvey = this.candidateSurveys[key];\r\n\t\t\t\tif (candidateSurvey.getSurveyInfo().getGovernedChannelType() !== governedChannelType) {\r\n\t\t\t\t\tactiveSurveys[key] = candidateSurvey;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.candidateSurveys = activeSurveys;\r\n\t\tthis.activityListener.UpdateActivityTrackingContracts(this.candidateSurveys);\r\n\t}\r\n\r\n\tprivate createGorvernanceResponseTelemetry(serviceResult: IGovernanceServiceResult ) {\r\n\t\treturn {\r\n\t\t\tFloodgateEngineStatus: this.initializationStatus.toString(),\r\n\t\t\tGovernanceServiceResult: serviceResult,\r\n\t\t\tStaleTriggeredSurveysQueueCount: this.staleTriggeredSurveysQueue.length - 1,\r\n\t\t};\r\n\t}\r\n}\r\n","import { IFloodgateEnvironmentProvider } from \"../Api/IFloodgateEnvironmentProvider\";\r\nimport * as IFloodgateStorageProvider from \"../Api/IFloodgateStorageProvider\";\r\nimport { TelemetryEvent } from \"../Constants\";\r\nimport { FloodgateEngine } from \"../FloodgateEngine\";\r\nimport { GovernedChannelType } from \"../GovernedChannel\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport { BusinessLevel } from \"../ISurveyInfo\";\r\nimport * as Utils from \"../Utils\";\r\n\r\nimport { IUserFactProvider } from \"../Api/Api\";\r\nimport { UserFact } from \"../UserFact/UserFact\";\r\nimport { deserializeUserFacts, validateUserFacts } from \"../UserFact/UserFactHelper\";\r\nimport { CampaignScopeType } from \"./CampaignScopeTypes\";\r\n\r\nconst { getDistantFuture, isBoolean, isNOU, isNumber, isString, isUtcDatetimeString, stringToDate } = Utils;\r\n\r\n// region Language Range\r\n\r\n/**\r\n * Base class representing a language range in a campaign setting\r\n */\r\nexport abstract class CampaignLanguageRange {\r\n\tpublic static deserialize(input: any): CampaignLanguageRange {\r\n\t\tlet result: CampaignLanguageRange;\r\n\r\n\t\tif (input && input.Type === 0) {\r\n\t\t\tresult = CampaignLanguageRangeLanguageSubtag.deserialize(input);\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected constructor() { }\r\n\r\n\t/**\r\n\t * Returns whether or not the specific language tag (format from RFC 5646) is in this language range specification\r\n\t */\r\n\tpublic abstract isInRange(language: string): boolean;\r\n\r\n\tprotected validate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Represents a range matching on the \"language subtag\" against fully specified language tags, according to RFC 5646\r\n */\r\nexport class CampaignLanguageRangeLanguageSubtag extends CampaignLanguageRange {\r\n\tpublic static deserialize(input: any): CampaignLanguageRangeLanguageSubtag {\r\n\t\tconst result = new CampaignLanguageRangeLanguageSubtag();\r\n\r\n\t\tif (input) {\r\n\t\t\tresult.languageSubTag = input.Value;\r\n\t\t}\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Value\")\r\n\tpublic languageSubTag: string;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tpublic isInRange(language: string): boolean {\r\n\t\tif (isNOU(language)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst extractedLanguageSubTag: string = Utils.extractLanguageSubtag(language);\r\n\t\tif (isNOU(extractedLanguageSubTag)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// compare strings ignoring case\r\n\t\treturn extractedLanguageSubTag.toLocaleUpperCase() === this.languageSubTag.toLocaleUpperCase();\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.languageSubTag) || !isString(this.languageSubTag)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Reject any spec that isn't exactly a language subtag\r\n\t\tif (!Utils.isValidLanguageSubTag(this.languageSubTag)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Scope\r\n\r\nexport abstract class CampaignScope {\r\n\tpublic static deserialize(input: any): CampaignScope {\r\n\t\tlet result: CampaignScope;\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (input.Type) {\r\n\t\t\tcase CampaignScopeType.CampaignScopeAny:\r\n\t\t\t\tresult = CampaignScopeAny.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignScopeType.CampaignScopeEnvironmentCrossProduct:\r\n\t\t\t\tresult = CampaignScopeEnvironmentCrossProduct.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignScopeType.CampaignScopeUserFactAny:\r\n\t\t\t\tresult = CampaignScopeUserFactAny.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignScopeType.CampaignScopeUserFactAll:\r\n\t\t\t\tresult = CampaignScopeUserFactAll.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected constructor() { }\r\n\r\n\tpublic abstract isInScope(): boolean;\r\n\r\n\tprotected validate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignScopeAny extends CampaignScope {\r\n\tpublic static deserialize(input: any): CampaignScopeAny {\r\n\t\treturn new CampaignScopeAny();\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tpublic isInScope(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignScopeEnvironmentCrossProduct extends CampaignScope {\r\n\tpublic static deserialize(input: any): CampaignScopeEnvironmentCrossProduct {\r\n\t\tconst result = new CampaignScopeEnvironmentCrossProduct();\r\n\t\tlet languageRanges: CampaignLanguageRange[] = [];\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfor (const key in input.Languages) {\r\n\t\t\tif (input.Languages.hasOwnProperty(key)) {\r\n\t\t\t\tconst readRange: CampaignLanguageRange = input.Languages[key];\r\n\r\n\t\t\t\tif (readRange) {\r\n\t\t\t\t\tlanguageRanges.push(CampaignLanguageRange.deserialize(readRange));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (languageRanges.length === 0) {\r\n\t\t\tlanguageRanges = null;\r\n\t\t}\r\n\r\n\t\tresult.languageRanges = languageRanges;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Languages\")\r\n\tpublic languageRanges: CampaignLanguageRange[];\r\n\r\n\tprivate environmentProvider: IFloodgateEnvironmentProvider;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tpublic setEnvironmentProvider(environmentProvider: IFloodgateEnvironmentProvider) {\r\n\t\tthis.environmentProvider = environmentProvider;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isInScope(): boolean {\r\n\t\tif (isNOU(this.languageRanges)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.environmentProvider) || !this.environmentProvider.getLanguage()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst language = this.environmentProvider.getLanguage();\r\n\t\t// If the environment matches a single pattern, then this is a yes\r\n\t\tfor (const key in this.languageRanges) {\r\n\t\t\tif (this.languageRanges.hasOwnProperty(key)) {\r\n\t\t\t\tconst range = this.languageRanges[key];\r\n\r\n\t\t\t\tif (range.isInRange(language)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Null languageRanges is allowed, means will match with everything.\r\n\t\tif (this.languageRanges) {\r\n\t\t\tfor (const key in this.languageRanges) {\r\n\t\t\t\tif (this.languageRanges.hasOwnProperty(key) && !this.languageRanges[key]) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignScopeUserFactAny extends CampaignScope {\r\n\tpublic static deserialize(input: any): CampaignScopeUserFactAny {\r\n\t\tconst result = new CampaignScopeUserFactAny();\r\n\t\tresult.userFacts = deserializeUserFacts(input);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"UserFacts\")\r\n\tpublic userFacts: UserFact[];\r\n\r\n\tprivate userFactsProvider?: IUserFactProvider;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tpublic setUserFactsProvider(userFactsProvider?: IUserFactProvider) {\r\n\t\tthis.userFactsProvider = userFactsProvider;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isInScope(): boolean {\r\n\t\tif (isNOU(this.userFacts)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (!this.userFactsProvider) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// If one of the user fact matches, then this is a yes\r\n\t\treturn this.userFacts.some((userFact) => {\r\n\t\t\tconst rawUserFact = this.userFactsProvider.getUserFact(userFact.getName());\r\n\t\t\treturn userFact.isAMatch(rawUserFact);\r\n\t\t});\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn validateUserFacts(this.userFacts);\r\n\t}\r\n}\r\n\r\nexport class CampaignScopeUserFactAll extends CampaignScope {\r\n\tpublic static deserialize(input: any): CampaignScopeUserFactAll {\r\n\t\tconst result = new CampaignScopeUserFactAll();\r\n\t\tresult.userFacts = deserializeUserFacts(input);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"UserFacts\")\r\n\tpublic userFacts: UserFact[];\r\n\r\n\tprivate userFactsProvider?: IUserFactProvider;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tpublic setUserFactsProvider(userFactsProvider?: IUserFactProvider) {\r\n\t\tthis.userFactsProvider = userFactsProvider;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isInScope(): boolean {\r\n\t\tif (isNOU(this.userFacts)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (!this.userFactsProvider) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Get all of the mismatched user facts\r\n\t\tconst mismatchedFacts = this.userFacts.filter((userFact) => {\r\n\t\t\tconst rawUserFact = this.userFactsProvider.getUserFact(userFact.getName());\r\n\t\t\treturn !userFact.isAMatch(rawUserFact);\r\n\t\t});\r\n\r\n\t\tif (mismatchedFacts.length > 0) {\r\n\t\t\tconst mismatchedNames = mismatchedFacts.map((userFact) => userFact.getName());\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Summary, {\r\n\t\t\t\t\tCount: mismatchedFacts.length,\r\n\t\t\t\t\tMessage: mismatchedNames.toString(),\r\n\t\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// If all of the user facts match, then this is a yes\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn validateUserFacts(this.userFacts);\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Durations\r\n\r\n/**\r\n * Base class representing a duration in a campaign setting\r\n */\r\nexport abstract class CampaignDuration {\r\n\tpublic static deserialize(input: any): CampaignDuration {\r\n\t\tlet result: CampaignDuration;\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (input.Type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tresult = CampaignDurationTimeInterval.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tresult = CampaignDurationSingleBuildChange.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected constructor() { }\r\n\r\n\tpublic abstract asTimeIntervalSeconds(): number;\r\n\r\n\tprotected validate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * A Duration expressed in seconds. UTC datetime comparisons are used to determine expiration.\r\n */\r\nexport class CampaignDurationTimeInterval extends CampaignDuration {\r\n\tpublic static deserialize(input: any): CampaignDurationTimeInterval {\r\n\t\tconst result = new CampaignDurationTimeInterval();\r\n\r\n\t\tif (input) {\r\n\t\t\tresult.intervalSeconds = input.IntervalSeconds;\r\n\t\t}\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"IntervalSeconds\")\r\n\tpublic intervalSeconds: number;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tpublic asTimeIntervalSeconds(): number {\r\n\t\treturn this.intervalSeconds;\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.intervalSeconds)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * A Duration representing exactly 1 change in build number\r\n */\r\nexport class CampaignDurationSingleBuildChange extends CampaignDuration {\r\n\tpublic static deserialize(input: any): CampaignDurationSingleBuildChange {\r\n\t\treturn new CampaignDurationSingleBuildChange();\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tpublic asTimeIntervalSeconds(): number {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing AdditionalDataRequested in CampaignDefinition\r\n */\r\nexport class CampaignAdditionalDataRequested {\r\n\tpublic static deserialize(additionalDataRequested: string[]): CampaignAdditionalDataRequested {\r\n\t\tconst result = new CampaignAdditionalDataRequested();\r\n\r\n\t\tif (!isNOU(additionalDataRequested)) {\r\n\t\t\t// Convert from AdditionalDataRequested string to enum\r\n\t\t\tresult.additionalData = [];\r\n\t\t\tfor (const additionalData of additionalDataRequested) {\r\n\t\t\t\tif (additionalData === \"EmailAddress\") {\r\n\t\t\t\t\tresult.additionalData.push(ISurveyInfo.AdditionalDataType.EmailAddress);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic additionalData: ISurveyInfo.AdditionalDataType[];\r\n\r\n\tprivate validate(): boolean {\r\n\t\tif (isNOU(this.additionalData)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n// endregion\r\n\r\n// region Distribution Schemes\r\n\r\nexport abstract class CampaignDistribution {\r\n\tpublic static deserialize(input: any): CampaignDistribution {\r\n\t\tlet result: CampaignDistribution;\r\n\r\n\t\tif (input && input.Type === 0) {\r\n\t\t\tresult = CampaignDistributionRamp.deserialize(input);\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected constructor() { }\r\n\r\n\tprotected validate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignDistributionRamp extends CampaignDistribution {\r\n\tpublic static deserialize(input: any): CampaignDistributionRamp {\r\n\t\tconst result = new CampaignDistributionRamp();\r\n\r\n\t\tif (input) {\r\n\t\t\tresult.maxDelaySeconds = input.MaxDelaySeconds;\r\n\t\t\tresult.chunks = input.Chunks;\r\n\t\t}\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// The time window over which the ramp will distribute start dates.\r\n\t// @SerializedName(\"MaxDelaySeconds\")\r\n\tpublic maxDelaySeconds: number;\r\n\r\n\t// The number of discrete buckets to divide the time window (maxDelaySeconds) into\r\n\t// @SerializedName(\"Chunks\")\r\n\tpublic chunks: number;\r\n\r\n\tprivate constructor() { super(); }\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.maxDelaySeconds) || this.maxDelaySeconds < 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.chunks) || this.chunks < 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Nomination Scheme\r\n\r\nexport abstract class CampaignNominationScheme {\r\n\tpublic static deserialize(input: any): CampaignNominationScheme {\r\n\t\tlet result: CampaignNominationScheme;\r\n\r\n\t\tif (input && input.Type === 0) {\r\n\t\t\tresult = CampaignNominationSchemeRatioPercentage.deserialize(input);\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// The amount of time (in seconds) for which the survey is active, if the nominationPeriod can't be interpreted as a time interval\r\n\t// note: This is only used when nominationPeriod is not of a type that can be interpreted as a time interval, otherwise\r\n\t// that value is used instead\r\n\t// @SerializedName(\"FallbackSurveyDurationSeconds\")\r\n\tpublic fallbackSurveyDurationSeconds: number;\r\n\r\n\t// When the user never sees the survey during their candidacy (or anti-candidacy), this is the duration that must lapse\r\n\t// before re- nominating\r\n\t// @SerializedName(\"NominationPeriod\")\r\n\tpublic nominationPeriod: CampaignDuration;\r\n\r\n\t// When the user does sees the survey during their candidacy, this is the duration that must lapse before re-evaluating\r\n\t// candidacy. Generally recommended that this be greater than nominationPeriod\r\n\t// @SerializedName(\"CooldownPeriod\")\r\n\tpublic cooldownPeriod: CampaignDuration;\r\n\r\n\tprotected constructor() { }\r\n\r\n\t/**\r\n\t * @return The amount of time the survey should be active, in seconds. Abstracts the difference between nominationPeriod and the fallback\r\n\t */\r\n\tpublic getActiveSurveyTimeIntervalSeconds(): number {\r\n\t\tconst nominationTimIntervalSeconds: number = this.nominationPeriod.asTimeIntervalSeconds();\r\n\r\n\t\tif (isNumber(nominationTimIntervalSeconds)) {\r\n\t\t\treturn nominationTimIntervalSeconds;\r\n\t\t}\r\n\r\n\t\treturn this.fallbackSurveyDurationSeconds;\r\n\t}\r\n\r\n\t/**\r\n\t * @return The survey start time, possibly adjusted by an underlying DistributionModel.\r\n\t */\r\n\tpublic calculateSurveyStartTimeFromDate(soonestStartTime: Date): Date {\r\n\t\t// No adjustment in base class.  Derived classes can override and implement delays like a \"ramp\"\r\n\t\treturn soonestStartTime ? soonestStartTime : new Date();\r\n\t}\r\n\r\n\t/**\r\n\t * @return The survey expiration time, based on the nomination periods and the survey's adjusted start time\r\n\t */\r\n\tpublic calculateSurveyExpirationTimeFromSurveyStartTime(surveyStartTime: Date): Date {\r\n\t\tsurveyStartTime = surveyStartTime ? surveyStartTime : new Date();\r\n\t\treturn Utils.addSecondsWithoutOverflow(surveyStartTime, this.getActiveSurveyTimeIntervalSeconds());\r\n\t}\r\n\r\n\t/**\r\n\t * @return The appropriate campaign cool down based on whether or not the user activated the survey\r\n\t */\r\n\tpublic getCampaignCooldown(didUserActivateSurvey: boolean): CampaignDuration {\r\n\t\tif (didUserActivateSurvey) {\r\n\t\t\treturn this.cooldownPeriod;\r\n\t\t} else {\r\n\t\t\treturn this.nominationPeriod;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Evaluate this rule set based on a random number\r\n\t *\r\n\t * @return true if the user should be a candidate, false if they should be an anti-candidate\r\n\t */\r\n\tpublic abstract evaluateNominationRules(): boolean;\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (isNOU(this.nominationPeriod)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.cooldownPeriod)) {\r\n\t\t\tthis.cooldownPeriod = this.nominationPeriod;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.nominationPeriod.asTimeIntervalSeconds())) {\r\n\t\t\tif (!isNumber(this.fallbackSurveyDurationSeconds) || this.fallbackSurveyDurationSeconds <= 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing a set of campaign nomination rules to evaluate for in-scope campaigns:\r\n * percentage\r\n * re-election durations\r\n * distribution model (for \"nominated\" candidates)\r\n */\r\nexport class CampaignNominationSchemeRatioPercentage extends CampaignNominationScheme {\r\n\tpublic static deserialize(input: any): CampaignNominationSchemeRatioPercentage {\r\n\t\tconst result = new CampaignNominationSchemeRatioPercentage();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (input.DistributionModel) {\r\n\t\t\tresult.distributionModel = CampaignDistribution.deserialize(input.DistributionModel);\r\n\t\t}\r\n\r\n\t\tif (input.CooldownPeriod) {\r\n\t\t\tresult.cooldownPeriod = CampaignDuration.deserialize(input.CooldownPeriod);\r\n\t\t}\r\n\r\n\t\tif (input.NominationPeriod) {\r\n\t\t\tresult.nominationPeriod = CampaignDuration.deserialize(input.NominationPeriod);\r\n\t\t}\r\n\r\n\t\tresult.fallbackSurveyDurationSeconds = input.FallbackSurveyDurationSeconds;\r\n\t\tresult.percentageDenominator = input.PercentageDenominator;\r\n\t\tresult.percentageNumerator = input.PercentageNumerator;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// The numerator when calculating the percentage of users that should be selected as candidates.  Must\r\n\t// satisfy 0 <= percentageNumerator <= percentageDenominator\r\n\t// @SerializedName(\"PercentageNumerator\")\r\n\tpublic percentageNumerator: number;\r\n\r\n\t// The denominator when calculating the percentage of users that should be selected as candidates.  Must be greater than 0.\r\n\t// @SerializedName(\"PercentageDenominator\")\r\n\tpublic percentageDenominator: number;\r\n\r\n\t// NYI - For candidates, allows the Survey start/end dates to be shifted forward in time, to help achieve a smoother signal\r\n\t// @SerializedName(\"DistributionModel\")\r\n\tpublic distributionModel: CampaignDistribution;\r\n\r\n\tprivate constructor() { super(); }\r\n\r\n\t// @Override\r\n\tpublic evaluateNominationRules(): boolean {\r\n\t\tconst rand: number = Math.random();\r\n\t\t// Creates a random number between [0 to (percentageDenominator - 1)]\r\n\t\t// In range [0 to (percentageDenominator - 1)] exactly 'percentageNumerator' values are < percentageNumerator\r\n\t\treturn Math.floor(rand * this.percentageDenominator) < this.percentageNumerator;\r\n\t}\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.percentageDenominator) || !isNumber(this.percentageNumerator)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.percentageDenominator <= 0 || this.percentageNumerator < 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.percentageNumerator > this.percentageDenominator) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// distribution model may be null\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Survey Event Definitions\r\nexport abstract class CampaignSurveyEvent {\r\n\tpublic static deserialize(input: any): CampaignSurveyEvent {\r\n\t\tlet result: CampaignSurveyEvent;\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (input.Type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tresult = CampaignSurveyEventCountedActivity.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tresult = CampaignSurveyEventCountedActivitySequence.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (result === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected constructor() { }\r\n\r\n\tprotected validate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyEventCountedActivity extends CampaignSurveyEvent {\r\n\tpublic static deserialize(input: any): CampaignSurveyEventCountedActivity {\r\n\t\tconst result = new CampaignSurveyEventCountedActivity();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activity = input.Activity;\r\n\t\tresult.count = input.Count;\r\n\t\tresult.isAggregate = input.IsAggregate;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Activity\")\r\n\tpublic activity: string;\r\n\r\n\t// @SerializedName(\"Count\")\r\n\tpublic count: number;\r\n\r\n\t// @SerializedName(\"IsAggregate\")\r\n\tpublic isAggregate: boolean;\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.activity) || !isString(this.activity)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.count) || this.count <= 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isBoolean(this.isAggregate)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyEventCountedActivitySequence extends CampaignSurveyEvent {\r\n\tpublic static deserialize(input: any): CampaignSurveyEventCountedActivitySequence {\r\n\t\tconst result = new CampaignSurveyEventCountedActivitySequence();\r\n\t\tlet sequence: CampaignSurveyEventCountedActivity[] = [];\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfor (const key in input.Sequence) {\r\n\t\t\tif (input.Sequence.hasOwnProperty(key)) {\r\n\t\t\t\tconst readActivity: CampaignSurveyEventCountedActivity = input.Sequence[key];\r\n\r\n\t\t\t\tif (readActivity) {\r\n\t\t\t\t\tsequence.push(CampaignSurveyEventCountedActivity.deserialize(readActivity));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (sequence.length === 0) {\r\n\t\t\tsequence = null;\r\n\t\t}\r\n\r\n\t\tresult.sequence = sequence;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Sequence\")\r\n\tpublic sequence: CampaignSurveyEventCountedActivity[];\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\t// @Override\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.sequence)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (const key in this.sequence) {\r\n\t\t\tif (this.sequence.hasOwnProperty(key) && !this.sequence[key]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Survey Content Definitions\r\n\r\nexport class CampaignSurveyContent {\r\n\tpublic static deserialize(input: any, optionalComponents?: boolean): CampaignSurveyContent {\r\n\t\tconst result = new CampaignSurveyContent();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.prompt = CampaignSurveyContentPrompt.deserialize(input.Prompt);\r\n\t\tresult.rating = CampaignSurveyContentRating.deserialize(input.Rating);\r\n\t\tresult.comment = CampaignSurveyContentComment.deserialize(input.Question);\r\n\t\tresult.multipleChoice = CampaignSurveyContentMultipleChoice.deserialize(input.MultipleChoice);\r\n\t\tresult.intercept = CampaignSurveyContentIntercept.deserialize(input.Intercept);\r\n\t\tresult.cvSurvey = CampaignSurveyContentCVSurvey.deserialize(input.CVSurveyParams);\r\n\r\n\t\tif (!result.validate(optionalComponents)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"CVSurvey\")\r\n\tpublic cvSurvey: CampaignSurveyContentCVSurvey;\r\n\r\n\t// @SerializedName(\"Prompt\")\r\n\tpublic prompt: CampaignSurveyContentPrompt;\r\n\r\n\t// @SerializedName(\"Rating\")\r\n\tpublic rating: CampaignSurveyContentRating;\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic comment: CampaignSurveyContentComment;\r\n\r\n\t// @SerializedName(\"MultipleChoice\")\r\n\tpublic multipleChoice: CampaignSurveyContentMultipleChoice;\r\n\r\n\t// @SerializedName(\"Intercept\")\r\n\tpublic intercept: CampaignSurveyContentIntercept;\r\n\r\n\tpublic validate(optionalComponents?: boolean): boolean {\r\n\t\tif (!isNOU(this.intercept)) {\r\n\t\t\t// An intercept survey only requires intercept.\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.prompt)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (optionalComponents) {\r\n\t\t\treturn !isNOU(this.rating) ||\r\n\t\t\t\t!isNOU(this.multipleChoice) ||\r\n\t\t\t\t!isNOU(this.comment);\r\n\t\t}\r\n\r\n\t\treturn !isNOU(this.rating) && !isNOU(this.comment);\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentMultipleChoice {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentMultipleChoice {\r\n\t\tconst result = new CampaignSurveyContentMultipleChoice();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.question = input.Question;\r\n\t\tresult.availableOptions = input.AvailableOptions;\r\n\t\tresult.minNumberOfSelectedOptions = input.MinNumberOfSelectedOptions;\r\n\t\tresult.maxNumberOfSelectedOptions = input.MaxNumberOfSelectedOptions;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic question: string;\r\n\r\n\t// @SerializedName(\"AvailableOptions\")\r\n\tpublic availableOptions: string[];\r\n\r\n\t// @SerializedName(\"MinNumberOfSelectedOptions\")\r\n\tpublic minNumberOfSelectedOptions: number;\r\n\r\n\t// @SerializedName(\"MaxNumberOfSelectedOptions\")\r\n\tpublic maxNumberOfSelectedOptions: number;\r\n\r\n\tprivate validate(): boolean {\r\n\t\tif (isNOU(this.question) || !isString(this.question) ||\r\n\t\t\tisNOU(this.availableOptions) || !Array.isArray(this.availableOptions) || this.availableOptions.length < 2 ||\r\n\t\t\tisNOU(this.minNumberOfSelectedOptions) || !isNumber(this.minNumberOfSelectedOptions) ||\r\n\t\t\tisNOU(this.maxNumberOfSelectedOptions) || !isNumber(this.maxNumberOfSelectedOptions)) {\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// expect all availableOptions values to be string\r\n\t\tfor (const key in this.availableOptions) {\r\n\t\t\tif (this.availableOptions.hasOwnProperty(key)) {\r\n\t\t\t\tif (!isString(this.availableOptions[key])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentCVSurvey {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentCVSurvey {\r\n\t\tconst result = new CampaignSurveyContentCVSurvey();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.customerVoiceFormId = input.CustomerVoiceFormId;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"FormId\")\r\n\tpublic customerVoiceFormId: string;\r\n\r\n\tprivate validate(): boolean {\r\n\r\n\t\treturn (!isNOU(this.customerVoiceFormId) && isString(this.customerVoiceFormId));\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentPrompt {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentPrompt {\r\n\t\tconst result = new CampaignSurveyContentPrompt();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.title = input.Title;\r\n\t\tresult.question = input.Question;\r\n\t\tresult.yesLabel = input.YesLabel;\r\n\t\tresult.noLabel = input.NoLabel;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Title\")\r\n\tpublic title: string;\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic question: string;\r\n\r\n\t// @SerializedName(\"YesLabel\")\r\n\tpublic yesLabel: string;\r\n\r\n\t// @SerializedName(\"NoLabel\")\r\n\tpublic noLabel: string;\r\n\r\n\tprivate validate(): boolean {\r\n\t\tif (isNOU(this.title) || !isString(this.title) ||\r\n\t\t\tisNOU(this.question) || !isString(this.question) ||\r\n\t\t\tisNOU(this.yesLabel) || !isString(this.yesLabel) ||\r\n\t\t\tisNOU(this.noLabel) || !isString(this.noLabel)) {\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentIntercept {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentIntercept {\r\n\t\tconst result = new CampaignSurveyContentIntercept();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.title = input.Title;\r\n\t\tresult.question = input.Question;\r\n\t\tresult.url = input.Url;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Title\")\r\n\tpublic title: string;\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic question: string;\r\n\r\n\t// @SerializedName(\"Url\")\r\n\tpublic url: string;\r\n\r\n\tprivate validate(): boolean {\r\n\t\tif (isNOU(this.title) || !isString(this.title) ||\r\n\t\t\tisNOU(this.question) || !isString(this.question) ||\r\n\t\t\tisNOU(this.url) || !isString(this.url)) {\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentRating {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentRating {\r\n\t\tconst result = new CampaignSurveyContentRating();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.isZeroBased = input.IsZeroBased;\r\n\t\tresult.question = input.Question;\r\n\t\tresult.ratingValuesAscending = input.RatingValuesAscending;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"IsZeroBased\")\r\n\tpublic isZeroBased: boolean;\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic question: string;\r\n\r\n\t// @SerializedName(\"RatingValuesAscending\")\r\n\tpublic ratingValuesAscending: string[];\r\n\r\n\tprivate validate(): boolean {\r\n\t\t// expect ratingValuesAscending to contain between 2 to 11 values\r\n\t\tif (isNOU(this.question) || !isString(this.question) ||\r\n\t\t\tisNOU(this.ratingValuesAscending) || !Array.isArray(this.ratingValuesAscending) ||\r\n\t\t\tthis.ratingValuesAscending.length < 2 || this.ratingValuesAscending.length > 11) {\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.isZeroBased)) {\r\n\t\t\t// default to false if not provided\r\n\t\t\tthis.isZeroBased = false;\r\n\t\t} else if (!isBoolean(this.isZeroBased)) {\r\n\t\t\t// fail validation if non boolean value is provided\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// expect all ratingValuesAscending values to be string\r\n\t\tfor (const key in this.ratingValuesAscending) {\r\n\t\t\tif (this.ratingValuesAscending.hasOwnProperty(key)) {\r\n\t\t\t\tif (!isString(this.ratingValuesAscending[key])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyContentComment {\r\n\tpublic static deserialize(input: any): CampaignSurveyContentComment {\r\n\t\tconst result = new CampaignSurveyContentComment();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// @SerializedName(\"Question\")\r\n\t\tresult.question = input.Question;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"Question\")\r\n\tpublic question: string;\r\n\r\n\tprivate validate(): boolean {\r\n\t\tif (isNOU(this.question) || !isString(this.question)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Survey Metadata Definitions\r\n\r\nexport class CampaignSurveyMetadata {\r\n\tpublic static deserialize(input: any): CampaignSurveyMetadata {\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst result = new CampaignSurveyMetadata();\r\n\t\tresult.contentMetadata = input.ContentMetadata;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"ContentMetadata\")\r\n\tpublic contentMetadata: object;\r\n\r\n\tpublic validate(): boolean {\r\n\t\tif (isNOU(this.contentMetadata) || !Utils.isObject(this.contentMetadata)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Survey Template definitions\r\n\r\nexport abstract class CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplate {\r\n\t\tlet result: CampaignSurveyTemplate;\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (input.Type) {\r\n\t\t\tcase CampaignSurveyTemplate.Type.Nps5PointStatic:\r\n\t\t\t\tresult = CampaignSurveyTemplateNps5PointStatic.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.Nps11PointStatic:\r\n\t\t\t\tresult = CampaignSurveyTemplateNps11PointStatic.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.Fps:\r\n\t\t\t\tresult = CampaignSurveyTemplateFps.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.Nlqs:\r\n\t\t\t\tresult = CampaignSurveyTemplateNlqs.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.Nps:\r\n\t\t\t\tresult = CampaignSurveyTemplateNps.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.GenericMessagingSurface:\r\n\t\t\t\tresult = CampaignSurveyTemplateGenericMessagingSurface.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CampaignSurveyTemplate.Type.Intercept:\r\n\t\t\t\tresult = CampaignSurveyTemplateIntercept.deserialize(input);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (isNOU(result)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"ActivationEvent\")\r\n\tpublic activationEvent: CampaignSurveyEvent;\r\n\r\n\t// @SerializedName(\"Content\")\r\n\tpublic content: CampaignSurveyContent;\r\n\r\n\t// @SerializedName(\"Metadata\")\r\n\tpublic metadata: CampaignSurveyMetadata;\r\n\r\n\t// @SerializedName(\"MaxLaunches\")\r\n\tpublic maxLaunches: number;\r\n\r\n\t// @SerializedName(\"MaxLaunchesPerSession\")\r\n\tpublic maxLaunchesPerSession: number;\r\n\r\n\t// @SerializedName(\"PreferredLaunchType\")\r\n\tpublic preferredLaunchType: ISurveyInfo.LaunchType;\r\n\r\n\tprotected constructor() { }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (isNOU(this.activationEvent)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport module CampaignSurveyTemplate {\r\n\texport const enum Type {\r\n\t\tNps5PointStatic = 0,\r\n\t\tNps11PointStatic = 1,\r\n\t\tFps = 2,\r\n\t\tNlqs = 3,\r\n\t\tNps = 4,\r\n\t\tIntercept = 5,\r\n\t\t// A generic messagibg surface template type, which will make use of\r\n\t\t// content metadata to render ui.\r\n\t\t// As of 4th Feb 2019 there are 20 template types defined in Mso,\r\n\t\t// hence giving 22 as value for this type.\r\n\t\tGenericMessagingSurface = 22,\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateFps extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateFps {\r\n\t\tconst result = new CampaignSurveyTemplateFps();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\t\tresult.content = CampaignSurveyContent.deserialize(input.Content, true /* optionalComponents */);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate() || isNOU(this.content)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateNlqs extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateNlqs {\r\n\t\tconst result = new CampaignSurveyTemplateNlqs();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\t\tresult.content = CampaignSurveyContent.deserialize(input.Content);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate() || isNOU(this.content)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateNps extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateNps {\r\n\t\tconst result = new CampaignSurveyTemplateNps();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\t\tresult.content = CampaignSurveyContent.deserialize(input.Content);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate() || isNOU(this.content)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateNps5PointStatic extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateNps5PointStatic {\r\n\t\tconst result = new CampaignSurveyTemplateNps5PointStatic();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateNps11PointStatic extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateNps11PointStatic {\r\n\t\tconst result = new CampaignSurveyTemplateNps11PointStatic();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateGenericMessagingSurface extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateGenericMessagingSurface {\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst result = new CampaignSurveyTemplateGenericMessagingSurface();\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\t\tresult.metadata = CampaignSurveyMetadata.deserialize(input.Metadata);\r\n\t\tresult.maxLaunches = input.MaxLaunches;\r\n\t\tresult.maxLaunchesPerSession = input.MaxLaunchesPerSession;\r\n\t\tresult.preferredLaunchType = input.PreferredLaunchType;\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate() || isNOU(this.metadata)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif ((!isNOU(this.maxLaunches) && (!isNumber(this.maxLaunches) || this.maxLaunches <= 0)) ||\r\n\t\t\t(!isNOU(this.maxLaunchesPerSession) && (!isNumber(this.maxLaunchesPerSession) || this.maxLaunchesPerSession <= 0))) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid Multi Launch settings\", this.maxLaunches, this.maxLaunchesPerSession);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// check for valid values\r\n\t\tif (isNumber(this.maxLaunches) &&\r\n\t\t\tisNumber(this.maxLaunchesPerSession) &&\r\n\t\t\tthis.maxLaunchesPerSession > this.maxLaunches) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid Multi launch settings\", this.maxLaunches, this.maxLaunchesPerSession);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNOU(this.preferredLaunchType) && !isString(this.preferredLaunchType)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid launcher type\", this.preferredLaunchType);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class CampaignSurveyTemplateIntercept extends CampaignSurveyTemplate {\r\n\tpublic static deserialize(input: any): CampaignSurveyTemplateIntercept {\r\n\t\tconst result = new CampaignSurveyTemplateIntercept();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.activationEvent = CampaignSurveyEvent.deserialize(input.ActivationEvent);\r\n\t\tresult.content = CampaignSurveyContent.deserialize(input.Content);\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// public for UT only\r\n\tpublic constructor() { super(); }\r\n\r\n\tprotected validate(): boolean {\r\n\t\tif (!super.validate() || isNOU(this.content)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// endregion\r\n\r\n// region Campaign Definition\r\n\r\nexport class CampaignDefinition {\r\n\t/**\r\n\t * Method to deserialize a JSON object to class object\r\n\t * @param input: JSON object\r\n\t * Returns result of validation check\r\n\t */\r\n\tpublic static deserialize(input: any): CampaignDefinition {\r\n\t\tconst result: CampaignDefinition = new CampaignDefinition();\r\n\r\n\t\tif (isNOU(input)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tresult.campaignId = input.CampaignId;\r\n\t\tresult.governedChannelType = input.GovernedChannelType;\r\n\t\tresult.startTime = input.StartTimeUtc;\r\n\t\tresult.endTime = input.EndTimeUtc;\r\n\t\tresult.launcherType = input.LauncherType;\r\n\t\tresult.primaryPriority = input.PrimaryPriority;\r\n\t\tresult.tags = input.Tags;\r\n\r\n\t\tconst additionalDataRequested: CampaignAdditionalDataRequested = CampaignAdditionalDataRequested.deserialize(\r\n\t\t\tinput.AdditionalDataRequested);\r\n\t\tresult.additionalDataRequested = additionalDataRequested ? additionalDataRequested.additionalData : [];\r\n\r\n\t\tif (input.SurveyTemplate) {\r\n\t\t\tresult.surveyTemplate = CampaignSurveyTemplate.deserialize(input.SurveyTemplate);\r\n\t\t}\r\n\r\n\t\tif (input.NominationScheme) {\r\n\t\t\tresult.nominationScheme = CampaignNominationScheme.deserialize(input.NominationScheme);\r\n\t\t}\r\n\r\n\t\tif (input.Scope) {\r\n\t\t\tresult.scope = CampaignScope.deserialize(input.Scope);\r\n\t\t}\r\n\r\n\t\tif (!isNOU(input.BusinessLevel)) {\r\n\t\t\tresult.businessLevel = input.BusinessLevel;\r\n\t\t}\r\n\r\n\t\tif (!result.validate()) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_LocalError(\"Invalid definition\", input);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"CampaignId\")\r\n\tpublic campaignId: string;\r\n\r\n\t// @SerializedName(\"GovernedChannelType\")\r\n\tpublic governedChannelType: GovernedChannelType;\r\n\r\n\t// @SerializedName(\"Scope\")\r\n\tpublic scope: CampaignScope;\r\n\r\n\t// @SerializedName(\"NominationScheme\")\r\n\tpublic nominationScheme: CampaignNominationScheme;\r\n\r\n\t// @SerializedName(\"SurveyTemplate\")\r\n\tpublic surveyTemplate: CampaignSurveyTemplate;\r\n\r\n\t// @SerializedName(\"StartTimeUtc\")\r\n\tpublic startTime: Date;\r\n\r\n\t// @SerializedName(\"EndTimeUtc\")\r\n\tpublic endTime: Date;\r\n\r\n\t// @SerializedName(\"AdditionalDataRequested\")\r\n\tpublic additionalDataRequested: ISurveyInfo.AdditionalDataType[];\r\n\r\n\t// @SerializedName(\"LauncherType\")\r\n\tpublic launcherType: string;\r\n\r\n\t// @SerializedName(\"Priority\")\r\n\tpublic primaryPriority: number;\r\n\r\n\t// @SerializedName(\"Tags\")\r\n\tpublic tags: string[];\r\n\r\n\t// @SerializedName(\"BusinessLevel\")\r\n\tpublic businessLevel: BusinessLevel;\r\n\r\n\tpublic validate(): boolean {\r\n\t\tif (isNOU(this.scope)) {\r\n\t\t\tthis.scope = new CampaignScopeAny();\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.campaignId) || !isString(this.campaignId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNumber(this.governedChannelType) || !Utils.isEnumValue(this.governedChannelType, GovernedChannelType)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.nominationScheme)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.surveyTemplate)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNOU(this.launcherType) && !isString(this.launcherType)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.launcherType === \"customervoice\" && isNOU(this.surveyTemplate.content?.cvSurvey?.customerVoiceFormId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isNOU(this.primaryPriority) && !isNumber(this.primaryPriority)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.tags && !Array.isArray(this.tags)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Campaigns with no start date are effectively disabled, in fact, this is the supported way to stage a definition but have it be turned off\r\n\t\tif (isNOU(this.startTime)) {\r\n\t\t\tthis.startTime = getDistantFuture();\r\n\t\t} else if (isUtcDatetimeString(this.startTime)) {\r\n\t\t\tthis.startTime = stringToDate(this.startTime);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Campaigns with no end date are effectively on indefinitely\r\n\t\tif (isNOU(this.endTime) ||\r\n\t\t\t(typeof(this.endTime) === \"string\" && this.endTime === \"\")) {\r\n\t\t\tthis.endTime = getDistantFuture();\r\n\t\t} else if (isUtcDatetimeString(this.endTime)) {\r\n\t\t\tthis.endTime = stringToDate(this.endTime);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Given an array of campaign definitions, returns the valid ones and errors if any are invalid.\r\n * @param input: JSON object\r\n * Returns the valid definitions and the error as string if any.\r\n */\r\nexport function FilterValidCampaignDefinitions(campaignDefinitions: any): { result: CampaignDefinition[], error: string } {\r\n\tconst result: CampaignDefinition[] = [];\r\n\r\n\tif (isNOU(campaignDefinitions)) {\r\n\t\treturn { result, error: \"Empty\" };\r\n\t}\r\n\r\n\tif (!Array.isArray(campaignDefinitions)) {\r\n\t\treturn { result, error: \"Not an array\" };\r\n\t}\r\n\r\n\tconst badIndexes: number[] = [];\r\n\tfor (let i = 0; i < campaignDefinitions.length; i++) {\r\n\t\tconst definition: any = campaignDefinitions[i];\r\n\r\n\t\tif (definition) {\r\n\t\t\tconst newDefinition: CampaignDefinition = CampaignDefinition.deserialize(definition);\r\n\r\n\t\t\tnewDefinition\r\n\t\t\t\t? result.push(newDefinition)\r\n\t\t\t\t: badIndexes.push(i);\r\n\t\t} else {\r\n\t\t\tbadIndexes.push(i);\r\n\t\t}\r\n\t}\r\n\r\n\tconst error: string = badIndexes.length > 0 ? \"Invalid campaign definitions at indexes: \" + badIndexes.toString() : undefined;\r\n\treturn { result, error };\r\n}\r\n\r\n// endregion\r\n\r\nexport interface ICampaignDefinitionProvider {\r\n\tload(): CampaignDefinition[];\r\n\tloadAsync(): Promise<CampaignDefinition[]>;\r\n}\r\n\r\nexport class FileSystemCampaignDefinitionProvider implements ICampaignDefinitionProvider {\r\n\tprivate storage: IFloodgateStorageProvider;\r\n\r\n\tpublic constructor(storage: IFloodgateStorageProvider) {\r\n\t\tif (isNOU(storage)) {\r\n\t\t\tthrow new Error(\"storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.storage = storage;\r\n\t}\r\n\r\n\tpublic load(): CampaignDefinition[] {\r\n\t\tconst definitionString: string = this.storage.read(IFloodgateStorageProvider.FileType.CampaignDefinitions);\r\n\t\tif (isNOU(definitionString)) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet readDefinitions: any;\r\n\r\n\t\ttry {\r\n\t\t\treadDefinitions = JSON.parse(definitionString);\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(e.toString());\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\t// This ignores errors in validation for now.\r\n\t\treturn FilterValidCampaignDefinitions(readDefinitions).result;\r\n\t}\r\n\r\n\tpublic loadAsync(): Promise<CampaignDefinition[]> {\r\n\t\tconst definitions = this.load();\r\n\t\treturn new Promise(\r\n\t\t\tfunction onFulfilled(resolve, reject) {\r\n\t\t\t\tresolve(definitions);\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n}\r\n","import { GovernedChannelType } from \"../GovernedChannel\";\r\nimport * as ISurvey from \"./ISurvey\";\r\n\r\nexport const enum GovernanceServiceSurveyPlatform {\r\n\tFloodgate = 1,\r\n}\r\n\r\nexport const enum GovernanceServiceHostPlatform {\r\n\tWeb = 6,\r\n}\r\n\r\n/**\r\n * The enum is matching with Governance Service\r\n * So the missing number is not supported\r\n */\r\nexport enum GovernanceServiceSurveyType {\r\n\tUnknown = 0,\r\n\tFeedback = 1,\r\n\tNps = 2,\r\n\tPsat = 4,\r\n\tBps = 6,\r\n\tFps = 8,\r\n\tNlqs = 18,\r\n\tGenericMessagingSurface = 22,\r\n\tIntercept = 24,\r\n}\r\n\r\nexport enum GovernanceServiceClientState {\r\n\tDisabled = 0,\r\n\tInitializationFailed,\r\n\tEnabled,\r\n}\r\n\r\nexport interface IGovernanceSurveyInfo {\r\n\tsurveyId: string;\r\n\tsurveyTriggerTime: Date;\r\n\tsurveyType: number;\r\n\tsurveyLevelCooldown?: number;\r\n\tsurveyChannel?: number;\r\n\tlocalOffsetTime: number;\r\n\tpersonalizerEnabled: boolean;\r\n}\r\n\r\nexport interface IGovernanceClientInfo {\r\n\tapplicationId: string;\r\n\tsessionId: string;\r\n\tversion: string;\r\n\tsurveyPlatform: number;\r\n\thostPlatform: number;\r\n\thostOS?: string;\r\n\ttenantId?: string;\r\n\tdeviceId?: string;\r\n\taudience?: string;\r\n}\r\n\r\nexport interface IGovernanceSurveyRequest {\r\n\tuserId: string;\r\n\tsurvey: IGovernanceSurveyInfo;\r\n\tclient: IGovernanceClientInfo;\r\n\tuserLevelCooldown?: number;\r\n\trequestId?: string;\r\n}\r\n\r\nexport interface IGovernanceSurveyResponse {\r\n\tuserId: string;\r\n\tlastTriggerSurveyTime: Date;\r\n\ttimeUntilNextSurveyAllowed: number;\r\n\tactionId?: string; // For personalizer actionId\r\n\teventId?: string;\r\n}\r\n\r\nexport interface IGovernanceServiceResult {\r\n\tlastTriggerSurvey?: IGovernanceSurveyResponse;\r\n\tpermission?: boolean;\r\n\terror?: boolean;\r\n\terrorMessage?: string;\r\n}\r\n\r\nexport interface IGovernanceServiceClient {\r\n\tcheckGovernancePermitAsync(\r\n\t\tsurvey: ISurvey,\r\n\t\tsurveyLevelCooldown: number,\r\n\t\tuserLevelCooldown: number,\r\n\t\tchannel: GovernedChannelType): Promise<IGovernanceServiceResult>;\r\n\tisEnabled(governedChannelType: GovernedChannelType): boolean;\r\n\tshouldForceDisplay(): boolean;\r\n\tgetClientState(): GovernanceServiceClientState;\r\n}\r\n","import * as ISurvey from \"../../src/Api/ISurvey\";\r\nimport { GovernedChannelType } from \"../GovernedChannel\";\r\nimport * as ISurveyEvent from \"../ISurveyEvent\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport { BusinessLevel } from \"../ISurveyInfo\";\r\nimport { ISurveyMetadata } from \"../ISurveyMetadata\";\r\nimport * as Utils from \"../Utils\";\r\n\r\nconst { getDistantFuture, getDistantPast, isNOU, isDate } = Utils;\r\n\r\nclass SurveyDataSource implements ISurveyInfo {\r\n\tprivate data: SurveyDataSource.SurveyDataSourceData;\r\n\r\n\tpublic constructor(data: SurveyDataSource.SurveyDataSourceData) {\r\n\t\tif (isNOU(data)) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (isNOU(data.id) || data.id === \"\") {\r\n\t\t\tthrow new Error(\"data.id must not be null or empty\");\r\n\t\t}\r\n\t\tif (isNOU(data.governedChannelType)) {\r\n\t\t\tdata.governedChannelType = GovernedChannelType.getDefault();\r\n\t\t}\r\n\t\tif (isNOU(data.expirationTimeUtc) || data.expirationTimeUtc === \"\") {\r\n\t\t\tthrow new Error(\"data.expirationTimeUtc must not be null or empty\");\r\n\t\t}\r\n\t\tif (isNOU(data.activationEvent)) {\r\n\t\t\tthrow new Error(\"data.activationEvent must not be null\");\r\n\t\t}\r\n\t\tif (isNOU(data.backEndIdentifier) || data.backEndIdentifier === \"\") {\r\n\t\t\tdata.backEndIdentifier = data.id;\r\n\t\t}\r\n\t\tif (isNOU(data.launcherType)) {\r\n\t\t\tdata.launcherType = ISurvey.LAUNCHER_TYPE_DEFAULT;\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getId(): string {\r\n\t\treturn this.data.id;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getBackEndId(): string {\r\n\t\treturn this.data.backEndIdentifier;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getGovernedChannelType(): GovernedChannelType {\r\n\t\treturn this.data.governedChannelType;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getRawStartTimeUtc(): string {\r\n\t\treturn this.data.startTimeUtc;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getStartTimeUtc(): Date {\r\n\t\tif (isNOU(this.data.startTimeUtc)) {\r\n\t\t\treturn getDistantPast(); // Optional start date means the survey has started\r\n\t\t}\r\n\r\n\t\tconst parsed = new Date(this.data.startTimeUtc);\r\n\t\tif (!isDate(parsed)) {\r\n\t\t\treturn getDistantFuture(); // Badly specified start dates means the survey never starts\r\n\t\t}\r\n\r\n\t\treturn parsed;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getExpirationTimeUtc(): Date {\r\n\t\t// Bad or missing expiration date means survey is always expired.\r\n\r\n\t\tif (isNOU(this.data.expirationTimeUtc)) {\r\n\t\t\treturn getDistantPast();\r\n\t\t}\r\n\r\n\t\tconst parsed = new Date(this.data.expirationTimeUtc);\r\n\t\tif (!isDate(parsed)) {\r\n\t\t\treturn getDistantPast();\r\n\t\t}\r\n\r\n\t\treturn parsed;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getRawExpirationTimeUtc(): string {\r\n\t\treturn this.data.expirationTimeUtc;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isActiveForDate(date: Date): boolean {\r\n\t\tif (isNOU(date)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn (date >= this.getStartTimeUtc() && date <= this.getExpirationTimeUtc());\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getActivationEvent(): ISurveyEvent {\r\n\t\treturn this.data.activationEvent;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getPreferredLaunchType(): ISurveyInfo.LaunchType {\r\n\t\treturn this.data.preferredLaunchType;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isAdditionalDataRequested(additionalDataToCheck: ISurveyInfo.AdditionalDataType): boolean {\r\n\t\tif (isNOU(this.data.additionalDataRequested)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (const additionalData of this.data.additionalDataRequested) {\r\n\t\t\tif (additionalData === additionalDataToCheck) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getLauncherType(): string {\r\n\t\treturn this.data.launcherType;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getMetadata(): ISurveyMetadata {\r\n\t\treturn this.data.metadata;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getBusinessLevel(): BusinessLevel {\r\n\t\treturn this.data.businessLevel;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getMaxLaunches(): number {\r\n\t\treturn this.data.maxLaunches;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getMaxLaunchesPerSession(): number {\r\n\t\treturn this.data.maxLaunchesPerSession;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst typeElement: Element = doc.createElement(ISurveyInfo.DOM_TYPE_TAGNAME);\r\n\t\ttypeElement.appendChild(doc.createTextNode(ISurveyInfo.DOM_TYPE_VALUE));\r\n\r\n\t\tconst idElement: Element = doc.createElement(ISurveyInfo.DOM_ID_TAGNAME);\r\n\t\tidElement.appendChild(doc.createTextNode(this.getBackEndId()));\r\n\r\n\t\treturn [typeElement, idElement];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst surveyObject: object = {};\r\n\t\tsurveyObject[ISurveyInfo.JSON_ID_KEYNAME] = this.getBackEndId();\r\n\r\n\t\tconst result: object = {};\r\n\t\tresult[ISurveyInfo.JSON_SURVEY_KEYNAME] = surveyObject;\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nmodule SurveyDataSource {\r\n\t/**\r\n\t * Basic data needed for all Surveys\r\n\t */\r\n\texport class SurveyDataSourceData {\r\n\t\tpublic id: string;\r\n\t\tpublic backEndIdentifier: string;\r\n\t\tpublic governedChannelType: GovernedChannelType;\r\n\t\tpublic startTimeUtc: string;\r\n\t\tpublic expirationTimeUtc: string;\r\n\t\tpublic activationEvent: ISurveyEvent;\r\n\t\tpublic preferredLaunchType: ISurveyInfo.LaunchType = ISurveyInfo.LaunchType.Default;\r\n\t\tpublic additionalDataRequested: ISurveyInfo.AdditionalDataType[];\r\n\t\tpublic launcherType: string;\r\n\t\tpublic metadata: ISurveyMetadata;\r\n\r\n\t\tpublic businessLevel: BusinessLevel;\r\n\t\tpublic maxLaunches: number;\r\n\t\tpublic maxLaunchesPerSession: number;\r\n\t}\r\n}\r\n\r\nexport = SurveyDataSource;\r\n","import ISurvey = require(\"../Api/ISurvey\");\r\nimport ISurveyComponent = require(\"../Api/ISurveyComponent\");\r\nimport { ITransporter } from \"../Api/ITransporter\";\r\nimport { FloodgateEngine } from \"../FloodgateEngine\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as Utils from \"./../Utils\";\r\n\r\nexport abstract class Survey implements ISurvey {\r\n\tprivate survey: ISurvey;\r\n\tprivate clientFeedbackId: string;\r\n\r\n\tpublic abstract getComponent(componentType: ISurveyComponent.Type): ISurveyComponent;\r\n\r\n\tpublic getCampaignId(): string {\r\n\t\treturn this.getSurveyInfo().getBackEndId();\r\n\t}\r\n\r\n\tpublic getLauncherType(): string {\r\n\t\treturn this.getSurveyInfo().getLauncherType();\r\n\t}\r\n\r\n\tpublic getClientFeedbackId(): string {\r\n\t\treturn this.clientFeedbackId;\r\n\t}\r\n\r\n\tpublic submit() {\r\n\t\tconst surveyType: string = ISurvey.Type[this.getType()];\r\n\t\tconst transporter: ITransporter = FloodgateEngine.getTransportFactory().makeTransporter(surveyType);\r\n\t\ttransporter.setManifestValues(this.getJsonElements());\r\n\t\tthis.clientFeedbackId = transporter.getClientFeedbackId();\r\n\t\ttransporter.submit();\r\n\t}\r\n\r\n\tpublic getPreGeneratedClientFeedbackId(): string {\r\n\t\tif (this.clientFeedbackId) {\r\n\t\t\treturn this.clientFeedbackId;\r\n\t\t} else {\r\n\t\t\treturn this.clientFeedbackId = Utils.guid();\r\n\t\t}\r\n\t}\r\n\t// Abstract classes that are implemented by actual Surveys\r\n\tpublic abstract getType(): ISurvey.Type;\r\n\r\n\tpublic abstract getSurveyInfo(): ISurveyInfo;\r\n\r\n\tpublic abstract getJsonElements(): object;\r\n\r\n\tpublic abstract getDomElements(doc: Document): Element[];\r\n}\r\n","// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fschema-object.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\n\r\nimport { ISchemaObject, SchemaObjectHeader } from '../schema-object';\r\nimport { ISchemaObjectConstructor } from '../schema-object-constructor';\r\n\r\nexport class SchemaObject implements ISchemaObject {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ISchemaObject) {\r\n        SchemaObject.assign(SchemaObject, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_SchemaObject';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: SchemaObject.getTypeName(), B_: SchemaObject.getBaseTypes() };\r\n\r\n    // Get type name for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getTypeNameFor(new Foo()) === 'Foo'\r\n    public static getTypeNameFor(obj: ISchemaObject): string {\r\n        return (obj && obj.H_) ? obj.H_.T_ : undefined;\r\n    }\r\n\r\n    // Get base types for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getBaseTypesFor(new Foo()) === ['Bar', 'Baz']\r\n    public static getBaseTypesFor(obj: ISchemaObject): string[] {\r\n        return (obj && obj.H_ && obj.H_.B_) ? obj.H_.B_ : [];\r\n    }\r\n\r\n    // Get all types (direct and base) for the given ISchemaObject instance.\r\n    // Example:\r\n    //   SchemaObject.getTypesFor(new Foo()) == ['Foo', 'Bar', 'Baz']\r\n    public static getAllTypesFor(obj: ISchemaObject): string[] {\r\n        const typeName: string = SchemaObject.getTypeNameFor(obj);\r\n        return typeName ? [typeName, ...SchemaObject.getBaseTypesFor(obj)] : [];\r\n    }\r\n\r\n    // Returns true if the given object has any of the types in the given array,\r\n    // or if that array is undefined or empty.\r\n    public static matchesTypesFor(obj: ISchemaObject, types: string[]): boolean {\r\n        if (!Array.isArray(types) || types.length === 0) {\r\n            // Nothing passed in means \"match everything\"\r\n            return true;\r\n        }\r\n        const objType = SchemaObject.getTypeNameFor(obj);\r\n        const baseTypes = SchemaObject.getBaseTypesFor(obj);\r\n        for (const typeName of types) {\r\n            if (typeName === objType) {\r\n                return true;\r\n            }\r\n            if (baseTypes.indexOf(typeName) >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static assign(ctr: ISchemaObjectConstructor, target: ISchemaObject, source?: ISchemaObject) {\r\n        // Assign source properties to target\r\n        if (source) {\r\n            for (const key of Object.keys(source)) {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n        // Cast away readonly to set the header\r\n        (target as { -readonly [K in keyof ISchemaObject]: ISchemaObject[K] }).H_ = ctr.H_;\r\n        // Return target instance\r\n        return target;\r\n    }\r\n}\r\n\r\n","import { GovernedChannel, GovernedChannelType, IGovernedChannelData } from \"./GovernedChannel\";\r\nimport { GovernedChannelState, IGovernedChannelStateProvider } from \"./GovernedChannelStateProvider\";\r\nimport * as Utils from \"./Utils\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport const DEFAULT_TEACHING_MESSAGE_COOLDOWN = 15;\r\n\r\nexport interface IGovernor {\r\n\tgetAvailableChannelData(): IGovernedChannelData[];\r\n\r\n\tisChannelOpen(type: GovernedChannelType): boolean;\r\n\r\n\tstartChannelCooldown(type: GovernedChannelType, date?: Date): void;\r\n\r\n\trefreshChannelData(): void;\r\n\r\n\tsaveChannelStates(): void;\r\n}\r\n\r\nclass DefaultChannelData {\r\n\tpublic cooldownSeconds: number;\r\n\tpublic name: string;\r\n\r\n\tpublic constructor(name: string, cooldownSeconds: number) {\r\n\t\tthis.name = name;\r\n\t\tthis.cooldownSeconds = cooldownSeconds;\r\n\t}\r\n}\r\n\r\nexport class Governor implements IGovernor {\r\n\tpublic static GetChannelCoolDown(channelType: GovernedChannelType) {\r\n\t\tconst channelData = Governor.defaultChannelData[channelType];\r\n\t\treturn channelData ? channelData.cooldownSeconds : 0;\r\n\t}\r\n\r\n\tpublic static SetDefaultChannelCoolDown(channelType: GovernedChannelType, cooldownSeconds: number) {\r\n\t\tconst channelData = Governor.defaultChannelData[channelType];\r\n\t\tif (channelData) {\r\n\t\t\tchannelData.cooldownSeconds = cooldownSeconds;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static minute: number = 60;\r\n\tprivate static hour: number = 60 * Governor.minute;\r\n\tprivate static day: number = 24 * Governor.hour;\r\n\r\n\t// Array of default values for each channel type. Indexed by the GovernedChannelType enum name.\r\n\tprivate static defaultChannelData: DefaultChannelData[] = [\r\n\t\tnew DefaultChannelData(GovernedChannelType[GovernedChannelType.Standard], 14 * Governor.day),\r\n\t\tnew DefaultChannelData(GovernedChannelType[GovernedChannelType.Urgent], 0),\r\n\t\tnew DefaultChannelData(GovernedChannelType[GovernedChannelType.Banner], 15 * Governor.day),\r\n\t\tnew DefaultChannelData(GovernedChannelType[GovernedChannelType.TeachingMessage], DEFAULT_TEACHING_MESSAGE_COOLDOWN * Governor.day),\r\n\t];\r\n\r\n\tprivate channelStateProvider: IGovernedChannelStateProvider;\r\n\tprivate channels: GovernedChannel[] = [];\r\n\r\n\tpublic constructor(channelStateProvider: IGovernedChannelStateProvider) {\r\n\t\tif (!channelStateProvider) {\r\n\t\t\tthrow new Error(\"channelStateProvider must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.channelStateProvider = channelStateProvider;\r\n\t\tthis.loadChannels();\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic refreshChannelData(): void {\r\n\t\tthis.loadChannels();\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getAvailableChannelData(): IGovernedChannelData[] {\r\n\t\tconst channelData: IGovernedChannelData[] = [];\r\n\r\n\t\tfor (const key in this.channels) {\r\n\t\t\tif (this.channels.hasOwnProperty(key)) {\r\n\t\t\t\tconst channel: GovernedChannel = this.channels[key];\r\n\r\n\t\t\t\tif (channel.isOpen()) {\r\n\t\t\t\t\tchannelData.push(channel);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn channelData;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic isChannelOpen(type: GovernedChannelType): boolean {\r\n\t\tif (isNOU(type)) {\r\n\t\t\tthrow new Error(\"type must not be null\");\r\n\t\t}\r\n\r\n\t\treturn this.channels[type].isOpen();\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic startChannelCooldown(type: GovernedChannelType, date?: Date): void {\r\n\t\tif (isNOU(type)) {\r\n\t\t\tthrow new Error(\"type must not be null\");\r\n\t\t}\r\n\r\n\t\tdate = date ? date : new Date();\r\n\r\n\t\t// Start the cool down\r\n\t\tthis.channels[type].setCooldownStartTime(date);\r\n\r\n\t\t// Save the new channel state for future sessions\r\n\t\tthis.saveChannelStates();\r\n\t}\r\n\r\n\tpublic saveChannelStates(): void {\r\n\t\t// Build up the list of channel states\r\n\t\tconst channelStates: GovernedChannelState[] = [];\r\n\r\n\t\tfor (const key in this.channels) {\r\n\t\t\tif (this.channels.hasOwnProperty(key)) {\r\n\t\t\t\tconst channel: GovernedChannel = this.channels[key];\r\n\t\t\t\tconst channelState: GovernedChannelState =\r\n\t\t\t\t\tnew GovernedChannelState(channel.getType(), channel.getCooldownStartTime());\r\n\r\n\t\t\t\tchannelStates.push(channelState);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.channelStateProvider.save(channelStates);\r\n\t}\r\n\r\n\tprivate loadChannels(): void {\r\n\t\t// Load up state from previous sessions\r\n\t\tthis.loadChannelStatesFromProvider();\r\n\r\n\t\t// For any missing channels, init them from scratch\r\n\t\t// There's no straightforward way to iterate enums, we need to iterate through the enum array\r\n\t\t//    filtering out just the numeric enum values (excluding enum names).\r\n\t\tfor (const item in GovernedChannelType) {\r\n\t\t\tif (GovernedChannelType.hasOwnProperty(item)) {\r\n\t\t\t\tconst key: number = Number(item);\r\n\r\n\t\t\t\t// skip if key is not numeric enum value, or if already exists\r\n\t\t\t\tif (isNaN(key) || this.channels[key]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst defaultData: DefaultChannelData = Governor.defaultChannelData[key];\r\n\t\t\t\tconst newChannel: GovernedChannel =\r\n\t\t\t\t\tnew GovernedChannel(key, defaultData.name, defaultData.cooldownSeconds, null);\r\n\t\t\t\tthis.channels[key] = newChannel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate loadChannelStatesFromProvider(): void {\r\n\t\tthis.channels = [];\r\n\r\n\t\tconst channelStates: GovernedChannelState[] = this.channelStateProvider.load();\r\n\r\n\t\tfor (const key in channelStates) {\r\n\t\t\tif (channelStates.hasOwnProperty(key)) {\r\n\t\t\t\tconst channelState: GovernedChannelState = channelStates[key];\r\n\r\n\t\t\t\tconst type: GovernedChannelType = channelState.getType();\r\n\t\t\t\tconst defaultData: DefaultChannelData = Governor.defaultChannelData[type];\r\n\t\t\t\tconst newChannel: GovernedChannel =\r\n\t\t\t\t\tnew GovernedChannel(type, defaultData.name, defaultData.cooldownSeconds, channelState.getCooldownStartTime());\r\n\r\n\t\t\t\tthis.channels[newChannel.getType()] = newChannel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import { ISurveyDomWriter } from \"./Api/ISurveyDomWriter\";\r\nimport { ISurveyJsonWriter } from \"./Api/ISurveyJsonWriter\";\r\nimport { GovernedChannelType } from \"./GovernedChannel\";\r\nimport * as ISurveyEvent from \"./ISurveyEvent\";\r\nimport { ISurveyMetadata } from \"./ISurveyMetadata\";\r\n\r\n/**\r\n * Interface that can be used to access the basics of a Survey\r\n */\r\ninterface ISurveyInfo extends ISurveyDomWriter, ISurveyJsonWriter {\r\n\t/**\r\n\t * A globally unique, but otherwise opaque, identity for this particular survey\r\n\t */\r\n\tgetId(): string;\r\n\r\n\t/**\r\n\t * A globally unique, but otherwise opaque, identity for this particular survey on the OCV backend\r\n\t * May be the same, or different than getId\r\n\t */\r\n\tgetBackEndId(): string;\r\n\r\n\t/**\r\n\t * The goverend channel that this survey will be delivered/filtered through\r\n\t */\r\n\tgetGovernedChannelType(): GovernedChannelType;\r\n\r\n\t/**\r\n\t * The raw string provided as the survey's start date, with no error checking\r\n\t */\r\n\tgetRawStartTimeUtc(): string;\r\n\r\n\t/**\r\n\t * The start time, in UTC, of this Survey.  Before the client has passed this date\r\n\t * the survey will won't be loaded into the survey activity listener.\r\n\t * If no start date is given, returns distantPast.\r\n\t * If bad start date given, returns distantFuture\r\n\t * Otherwise, returns date\r\n\t */\r\n\tgetStartTimeUtc(): Date;\r\n\r\n\t/**\r\n\t * The expiration time, in UTC, of this Survey. Once the client has passed this date, it should clean any\r\n\t * cached data, and should reject any incoming surveys that have otherwise expired but are still active\r\n\t * in the flighting system\r\n\t * If no/bad expiration date given, returns distantPast to make sure this survey is always expired.\r\n\t */\r\n\tgetExpirationTimeUtc(): Date;\r\n\r\n\t/**\r\n\t * The expiration time, in UTC, of this Survey.  Once the client has passed this date, it should clean any\r\n\t * cached data, and should reject any incoming surveys that have otherwise expired but are still active\r\n\t * in the flighting system\r\n\t */\r\n\tgetRawExpirationTimeUtc(): string;\r\n\r\n\t/**\r\n\t * Returns whether or not the 'date' is between the start/expiration dates for this survey.\r\n\t */\r\n\tisActiveForDate(date: Date): boolean;\r\n\r\n\t/**\r\n\t * Gets the activation event that should be plumbed through to the FloodgateEngine/SurveyActiviytListener.\r\n\t * When activated, this survey should be shown to the user.\r\n\t */\r\n\tgetActivationEvent(): ISurveyEvent;\r\n\r\n\t/**\r\n\t * Gets the preferred launch mechanism based on this survey's data payload.  This may or may not be\r\n\t * respected by the LauncherFactory depending on the platform and implementation, and is strictly considered\r\n\t * a behavioral hint\r\n\t */\r\n\tgetPreferredLaunchType(): ISurveyInfo.LaunchType;\r\n\r\n\t/**\r\n\t * Return additionalDataRequested array\r\n\t */\r\n\tisAdditionalDataRequested(additionalData: ISurveyInfo.AdditionalDataType): boolean;\r\n\r\n\t/**\r\n\t * Return the launcher type string\r\n\t */\r\n\tgetLauncherType(): string;\r\n\r\n\t/**\r\n\t * Gets the metadata of the survey, this is optional but if available it can be used by launcher to\r\n\t * make appropriate decisions while launching a surface.\r\n\t */\r\n\tgetMetadata(): ISurveyMetadata;\r\n\r\n\t/**\r\n\t * Returns businessLevel\r\n\t */\r\n\tgetBusinessLevel(): ISurveyInfo.BusinessLevel;\r\n\r\n\t/**\r\n\t * Returns maxLaunches\r\n\t */\r\n\tgetMaxLaunches(): number;\r\n\r\n\t/**\r\n\t * Returns maxLaunches Per session\r\n\t */\r\n\tgetMaxLaunchesPerSession(): number;\r\n}\r\n\r\nmodule ISurveyInfo {\r\n\texport const enum LaunchType {\r\n\t\t// No launch type specified, defer to the launcher factory code\r\n\t\tDefault = \"Default\",\r\n\t\t// Prefer a notification-based launcher (like the windows toast launcher when present)\r\n\t\tNotification = \"Notification\",\r\n\t\t// Prefer a modal-dialog based launcher\r\n\t\tModal = \"Modal\",\r\n\t}\r\n\r\n\texport enum BusinessLevel {\r\n\t\tNone = 0,\r\n\t\tCritical,\r\n\t}\r\n\r\n\texport const enum AdditionalDataType {\r\n\t\t// Request email address\r\n\t\tEmailAddress,\r\n\t}\r\n\r\n\texport const DOM_TYPE_TAGNAME = \"Type\";\r\n\texport const DOM_TYPE_VALUE = \"Survey\";\r\n\texport const DOM_ID_TAGNAME = \"SurveyID\";\r\n\texport const JSON_SURVEY_KEYNAME = \"survey\";\r\n\texport const JSON_ID_KEYNAME = \"surveyId\";\r\n}\r\n\r\nexport = ISurveyInfo;\r\n","import { SurveyActivationStats, SurveyStatCollectionActivation } from \"../src/SurveyStatCollectionActivation\";\r\nimport { CampaignState } from \"./Campaign/CampaignStateProvider\";\r\nimport { IDictionary } from \"./Common\";\r\nimport { GovernedChannelState } from \"./GovernedChannelStateProvider\";\r\n\r\n/**\r\n * Values for the state list types\r\n */\r\nexport const enum StateListType {\r\n\tMerged,\r\n\tToBeUpdated,\r\n}\r\n\r\nexport interface IKeyedCollection<T> {\r\n\tadd(key: number, value: T);\r\n\tfind(key: number): T;\r\n\tremove(key: number);\r\n\tcount(): number;\r\n}\r\n\r\nexport class ItemCollection<T> implements IKeyedCollection<T> {\r\n\tprivate items: { [key: number]: T } = {};\r\n\tprivate itemCount: number = 0;\r\n\r\n\tpublic add(key: number, value: T) {\r\n\t\tif (!this.items[key]) {\r\n\t\t\tthis.itemCount++;\r\n\t\t}\r\n\t\tthis.items[key] = value;\r\n\t}\r\n\r\n\tpublic find(key: number): T {\r\n\t\treturn this.items[key];\r\n\t}\r\n\r\n\tpublic remove(key: number): T {\r\n\t\tconst item: T = this.items[key];\r\n\r\n\t\tif (item) {\r\n\t\t\tdelete this.items[key];\r\n\t\t\tthis.itemCount--;\r\n\t\t}\r\n\r\n\t\treturn item;\r\n\t}\r\n\r\n\tpublic count(): number {\r\n\t\treturn this.itemCount;\r\n\t}\r\n}\r\n\r\nexport function extractSettingItemValueSubString(itemValue: string): string {\r\n\tif (!itemValue) {\r\n\t\treturn itemValue;\r\n\t}\r\n\r\n\tconst beginPos: number = itemValue.indexOf(SETTING_DATA_OPEN_TAG) + SETTING_DATA_OPEN_TAG.length;\r\n\tconst endPos: number = itemValue.indexOf(SETTING_DATA_CLOSE_TAG);\r\n\r\n\tif (beginPos < 0 || endPos < 0) {\r\n\t\treturn itemValue;\r\n\t}\r\n\r\n\treturn itemValue.substring(beginPos, endPos);\r\n}\r\n\r\nexport function makeSettingItemValue(value: string): string {\r\n\tif (!value) {\r\n\t\treturn SETTING_DATA_OPEN_TAG + SETTING_DATA_CLOSE_TAG;\r\n\t}\r\n\r\n\treturn SETTING_DATA_OPEN_TAG + value + SETTING_DATA_CLOSE_TAG;\r\n}\r\n\r\nexport function MergeAndUpdateGovernedChannelStates(previousStates: GovernedChannelState[],\r\n\tcurrentStates: GovernedChannelState[]): IKeyedCollection<GovernedChannelState[]> {\r\n\tconst stateCollections: IKeyedCollection<GovernedChannelState[]> = new ItemCollection<GovernedChannelState[]>();\r\n\r\n\t// Todo: move the following into a generic method to be shared\r\n\tif (!previousStates && !currentStates) {\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tif (!previousStates) {\r\n\t\tstateCollections.add(StateListType.Merged, currentStates);\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tif (!currentStates) {\r\n\t\tstateCollections.add(StateListType.Merged, previousStates);\r\n\t\tstateCollections.add(StateListType.ToBeUpdated, previousStates);\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tconst mergedStates: GovernedChannelState[] = [];\r\n\tconst toBeUpdatedStates: GovernedChannelState[] = [];\r\n\r\n\tif (previousStates) {\r\n\t\tpreviousStates.forEach((previousState) => {\r\n\t\t\t// find matching in current states\r\n\t\t\tlet pos = -1;\r\n\t\t\tlet currentState: GovernedChannelState;\r\n\t\t\tfor (let i = 0; i < currentStates.length; i++) {\r\n\t\t\t\tcurrentState = currentStates[i];\r\n\t\t\t\tif (currentState.getType() === previousState.getType()) {\r\n\t\t\t\t\tpos = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if previous state is not in current states\r\n\t\t\tif (pos === -1) {\r\n\t\t\t\t// add previous state to merged\r\n\t\t\t\tmergedStates.push(previousState);\r\n\r\n\t\t\t\t// add previous state to toUpdated\r\n\t\t\t\ttoBeUpdatedStates.push(previousState);\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// if ActivationTimeUtc of previous is greater than current\r\n\t\t\tif (previousState.getCooldownStartTime() > currentState.getCooldownStartTime()) {\r\n\t\t\t\t// add previous state to merged\r\n\t\t\t\tmergedStates.push(previousState);\r\n\r\n\t\t\t\t// add previous state to toUpdated\r\n\t\t\t\ttoBeUpdatedStates.push(previousState);\r\n\t\t\t} else {\r\n\t\t\t\t// add current state to merged\r\n\t\t\t\tmergedStates.push(currentState);\r\n\t\t\t}\r\n\r\n\t\t\t// remove state from current states\r\n\t\t\tcurrentStates.splice(pos, 1);\r\n\t\t});\r\n\t}\r\n\r\n\t// for the remaining current states\r\n\tif (currentStates) {\r\n\t\tcurrentStates.forEach((currentState) => {\r\n\t\t\t// add current state to merged\r\n\t\t\tmergedStates.push(currentState);\r\n\t\t});\r\n\t}\r\n\r\n\tstateCollections.add(StateListType.Merged, mergedStates);\r\n\r\n\tif (toBeUpdatedStates.length > 0) {\r\n\t\tstateCollections.add(StateListType.ToBeUpdated, toBeUpdatedStates);\r\n\t}\r\n\r\n\treturn stateCollections;\r\n}\r\n\r\nexport function MergeAndUpdateCampaignStates(previousStates: CampaignState[],\r\n\tcurrentStates: CampaignState[]): IKeyedCollection<CampaignState[]> {\r\n\tconst stateCollections: IKeyedCollection<CampaignState[]> = new ItemCollection<CampaignState[]>();\r\n\r\n\tif (!previousStates && !currentStates) {\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tif (!previousStates) {\r\n\t\tstateCollections.add(StateListType.Merged, currentStates);\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tif (!currentStates) {\r\n\t\tstateCollections.add(StateListType.Merged, previousStates);\r\n\t\tstateCollections.add(StateListType.ToBeUpdated, previousStates);\r\n\t\treturn stateCollections;\r\n\t}\r\n\r\n\tconst mergedStates: CampaignState[] = [];\r\n\tconst toBeUpdatedStates: CampaignState[] = [];\r\n\r\n\tif (previousStates) {\r\n\t\tpreviousStates.forEach((previousState) => {\r\n\t\t\tconst current = new Date();\r\n\r\n\t\t\t// find matching in current states\r\n\t\t\tlet pos = -1;\r\n\t\t\tlet currentState: CampaignState;\r\n\t\t\tfor (let i = 0; i < currentStates.length; i++) {\r\n\t\t\t\tcurrentState = currentStates[i];\r\n\t\t\t\tif (currentState.CampaignId === previousState.CampaignId) {\r\n\t\t\t\t\tpos = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if previous state is not in current states\r\n\t\t\tif (pos === -1) {\r\n\t\t\t\t// add previous state to merged\r\n\t\t\t\tmergedStates.push(previousState);\r\n\r\n\t\t\t\t// add previous state to toUpdated\r\n\t\t\t\ttoBeUpdatedStates.push(previousState);\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// if current state is in cooldown, add to merged list\r\n\t\t\tif (currentState.LastCooldownEndTimeUtc > current) {\r\n\t\t\t\t// add previous state to merged list\r\n\t\t\t\tmergedStates.push(currentState);\r\n\r\n\t\t\t\t// emove state from current states\r\n\t\t\t\tcurrentStates.splice(pos, 1);\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// if previous state is in cooldown, add to merged and toUpdated lists\r\n\t\t\tif (previousState.LastCooldownEndTimeUtc > current) {\r\n\t\t\t\t// add previous state to merged list\r\n\t\t\t\tmergedStates.push(previousState);\r\n\r\n\t\t\t\t// add previous state to to-be-updated list\r\n\t\t\t\ttoBeUpdatedStates.push(previousState);\r\n\r\n\t\t\t\t// emove state from current states\r\n\t\t\t\tcurrentStates.splice(pos, 1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// add previous state to toUpdated and merged for the following two conditions:\r\n\t\t\t//  1. previous cooldown time wins, or\r\n\t\t\t//  2. cooldown times are the same and previous nomination wins\r\n\t\t\tif (previousState.getCooldownStartDate() > currentState.getCooldownStartDate()\r\n\t\t\t\t|| (previousState.getCooldownStartDate() === currentState.getCooldownStartDate()\r\n\t\t\t\t\t&& previousState.LastNominationTimeUtc > currentState.LastNominationTimeUtc)\r\n\t\t\t) {\r\n\t\t\t\tmergedStates.push(previousState);\r\n\r\n\t\t\t\ttoBeUpdatedStates.push(previousState);\r\n\t\t\t} else {\r\n\t\t\t\t// add current state to merged\r\n\t\t\t\tmergedStates.push(currentState);\r\n\t\t\t}\r\n\r\n\t\t\t// remove state from current states\r\n\t\t\tcurrentStates.splice(pos, 1);\r\n\t\t});\r\n\t}\r\n\r\n\t// for the remaining current states\r\n\tif (currentStates) {\r\n\t\tcurrentStates.forEach((current) => {\r\n\t\t\t// add current state to merged\r\n\t\t\tmergedStates.push(current);\r\n\t\t});\r\n\t}\r\n\r\n\tstateCollections.add(StateListType.Merged, mergedStates);\r\n\r\n\tif (toBeUpdatedStates.length > 0) {\r\n\t\tstateCollections.add(StateListType.ToBeUpdated, toBeUpdatedStates);\r\n\t}\r\n\r\n\treturn stateCollections;\r\n}\r\n\r\nexport function MergeAndUpdateSurveyActivationStats(previousStats: SurveyStatCollectionActivation,\r\n\tcurrentStats: SurveyStatCollectionActivation): IKeyedCollection<SurveyStatCollectionActivation> {\r\n\r\n\tconst statsCollections: IKeyedCollection<SurveyStatCollectionActivation> = new ItemCollection<SurveyStatCollectionActivation>();\r\n\r\n\t// Handle previousStats and/or currentStats equal to null\r\n\tif (!previousStats && !currentStats) {\r\n\t\treturn statsCollections;\r\n\t}\r\n\r\n\tif (!previousStats) {\r\n\t\tstatsCollections.add(StateListType.Merged, currentStats);\r\n\t\treturn statsCollections;\r\n\t}\r\n\r\n\tif (!currentStats) {\r\n\t\tstatsCollections.add(StateListType.Merged, previousStats);\r\n\t\tstatsCollections.add(StateListType.ToBeUpdated, previousStats);\r\n\t\treturn statsCollections;\r\n\t}\r\n\r\n\t// Enumerate preivous stats\r\n\tconst mergedStats: SurveyStatCollectionActivation = new SurveyStatCollectionActivation();\r\n\tconst toBeUpdatedStats: SurveyStatCollectionActivation = new SurveyStatCollectionActivation();\r\n\r\n\tconst previousStatsDictionary: IDictionary<SurveyActivationStats> = previousStats.getStats();\r\n\tconst currentStatsDictionary: IDictionary<SurveyActivationStats> = currentStats.getStats();\r\n\r\n\tfor (const surveyId in previousStatsDictionary) {\r\n\t\tif (previousStatsDictionary.hasOwnProperty(surveyId)) {\r\n\t\t\t// if an updated stat is not found\r\n\t\t\tconst currentActivationStats: SurveyActivationStats = currentStatsDictionary[surveyId];\r\n\t\t\tif (!currentActivationStats) {\r\n\t\t\t\t// add to merged collection\r\n\t\t\t\tmergedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\r\n\t\t\t\t// add to-be-updated collection\r\n\t\t\t\ttoBeUpdatedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// if previous stat has higher activation time\r\n\t\t\tconst previousActivationStats: SurveyActivationStats = previousStatsDictionary[surveyId];\r\n\t\t\tif (previousActivationStats.ActivationTimeUtc > currentActivationStats.ActivationTimeUtc) {\r\n\t\t\t\t// add to merged collection\r\n\t\t\t\tmergedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\r\n\t\t\t\t// add to-be-updated collection\r\n\t\t\t\ttoBeUpdatedStats.addStats(surveyId, previousStatsDictionary[surveyId]);\r\n\t\t\t} else {\r\n\t\t\t\t// add to current stat merged collection\r\n\t\t\t\tmergedStats.addStats(surveyId, currentStatsDictionary[surveyId]);\r\n\t\t\t}\r\n\r\n\t\t\t// delete from stats\r\n\t\t\tdelete currentStatsDictionary[surveyId];\r\n\t\t}\r\n\t}\r\n\r\n\t// merge any remaining stats\r\n\tfor (const surveyId in currentStatsDictionary) {\r\n\t\tif (currentStatsDictionary.hasOwnProperty(surveyId)) {\r\n\t\t\tmergedStats.addStats(surveyId, currentStatsDictionary[surveyId]);\r\n\t\t}\r\n\t}\r\n\r\n\t// always return merged list\r\n\tstatsCollections.add(StateListType.Merged, mergedStats);\r\n\r\n\t// since dictionaries don't have an empty check, enumerate the  first entry to check for non-empty\r\n\tconst toBeUpdatedStatsDictionary: IDictionary<SurveyActivationStats> = toBeUpdatedStats.getStats();\r\n\tfor (const toBeUpdated in toBeUpdatedStatsDictionary) {\r\n\t\tif (toBeUpdatedStatsDictionary.hasOwnProperty(toBeUpdated)) {\r\n\t\t\t// not empty, return to-be-updated\r\n\t\t\tstatsCollections.add(StateListType.ToBeUpdated, toBeUpdatedStats);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn statsCollections;\r\n}\r\n\r\nconst SETTING_DATA_OPEN_TAG = \"<data>\";\r\nconst SETTING_DATA_CLOSE_TAG = \"</data>\";\r\n","import { ICommentComponent } from \"./../Api/ICommentComponent\";\r\nimport ISurveyComponent = require(\"./../Api/ISurveyComponent\");\r\n\r\nclass CommentComponent implements ICommentComponent {\r\n\tpublic static make(data: CommentComponent.CommentComponentData): ICommentComponent {\r\n\t\ttry {\r\n\t\t\treturn new CommentComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: CommentComponent.CommentComponentData;\r\n\tprivate userComment: string;\r\n\r\n\tpublic constructor(data: CommentComponent.CommentComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.question) {\r\n\t\t\tthrow new Error(\"data.question must not be null or empty\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.userComment = \"\";\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.Comment;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getQuestion(): string {\r\n\t\treturn this.data.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic setSubmittedText(userComment: string): void {\r\n\t\tthis.userComment = userComment;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSubmittedText(): string {\r\n\t\treturn this.userComment;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurveyComponent.DOM_COMMENT_TAGNAME);\r\n\t\telement.appendChild(doc.createTextNode(this.getSubmittedText()));\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst result: object = {};\r\n\t\tresult[ISurveyComponent.JSON_COMMENT_KEYNAME] = this.getSubmittedText();\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_QUESTION_KEYNAME]: this.getQuestion(),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule CommentComponent {\r\n\texport class CommentComponentData {\r\n\t\tpublic question: string;\r\n\t}\r\n}\r\n\r\nexport = CommentComponent;\r\n","import * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport * as IPrompt from \"./../Api/IPrompt\";\r\nimport { IPromptComponent } from \"./../Api/IPromptComponent\";\r\n\r\nclass PromptComponent implements IPromptComponent {\r\n\tpublic static make(data: PromptComponent.PromptComponentData): IPromptComponent {\r\n\t\ttry {\r\n\t\t\treturn new PromptComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: PromptComponent.PromptComponentData;\r\n\tprivate selectedButton: IPrompt.PromptButton;\r\n\r\n\tpublic constructor(data: PromptComponent.PromptComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.question) {\r\n\t\t\tthrow new Error(\"data.question must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.title) {\r\n\t\t\tthrow new Error(\"data.title must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.yesButtonLabel) {\r\n\t\t\tthrow new Error(\"data.yesButtonLabel must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.noButtonLabel) {\r\n\t\t\tthrow new Error(\"data.noButtonLabel must not be null or empty\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.selectedButton = IPrompt.PromptButton.Unselected;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.Prompt;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getTitle(): string {\r\n\t\treturn this.data.title;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getQuestion(): string {\r\n\t\treturn this.data.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getYesButtonText(): string {\r\n\t\treturn this.data.yesButtonLabel;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getNoButtonText(): string {\r\n\t\treturn this.data.noButtonLabel;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic setButtonSelected(selected: IPrompt.PromptButton): void {\r\n\t\tif (selected) {\r\n\t\t\tthis.selectedButton = selected;\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getButtonSelected(): IPrompt.PromptButton {\r\n\t\treturn this.selectedButton;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[]  {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurveyComponent.DOM_PROMPT_TAGNAME);\r\n\t\telement.appendChild(doc.createTextNode(this.promptButtonToString(this.getButtonSelected())));\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst result: object = {};\r\n\t\tresult[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.promptButtonToString(this.getButtonSelected());\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_TITLE_KEYNAME]: this.getTitle(),\r\n\t\t\t[ISurveyComponent.JSON_QUESTION_KEYNAME]: this.getQuestion(),\r\n\t\t\t[ISurveyComponent.JSON_PROMPTYESTEXT_KEYNAME]: this.getYesButtonText(),\r\n\t\t\t[ISurveyComponent.JSON_PROMPTNOTEXT_KEYNAME]: this.getNoButtonText(),\r\n\t\t};\r\n\t}\r\n\r\n\tprivate promptButtonToString(value: IPrompt.PromptButton): string {\r\n\t\tswitch (value) {\r\n\t\t\tcase IPrompt.PromptButton.Unselected:\r\n\t\t\t\treturn \"Unselected\";\r\n\t\t\tcase IPrompt.PromptButton.Yes:\r\n\t\t\t\treturn \"Yes\";\r\n\t\t\tcase IPrompt.PromptButton.No:\r\n\t\t\t\treturn \"No\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"Unknown\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule PromptComponent {\r\n\texport class PromptComponentData {\r\n\t\tpublic question: string;\r\n\t\tpublic title: string;\r\n\t\tpublic yesButtonLabel: string;\r\n\t\tpublic noButtonLabel: string;\r\n\t}\r\n}\r\n\r\nexport = PromptComponent;\r\n","import * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { IRatingComponent } from \"./../Api/IRatingComponent\";\r\n\r\nclass RatingComponent implements IRatingComponent {\r\n\tpublic static make(data: RatingComponent.RatingComponentData): IRatingComponent {\r\n\t\ttry {\r\n\t\t\treturn new RatingComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: RatingComponent.RatingComponentData;\r\n\tprivate selectedIndex: number;\r\n\r\n\tpublic constructor(data: RatingComponent.RatingComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.question) {\r\n\t\t\tthrow new Error(\"data.question must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.ratingValuesAscending || data.ratingValuesAscending.length < 2) {\r\n\t\t\tthrow new Error(\"data.ratingValuesAscending must not be null or have less than two choices\");\r\n\t\t}\r\n\r\n\t\tdata.ratingValuesAscending.forEach((rating) => {\r\n\t\t\tif (!rating) {\r\n\t\t\t\tthrow new Error(\"rating values must not contain null or empty\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.selectedIndex = -1;\r\n\t}\r\n\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.Rating;\r\n\t}\r\n\r\n\tpublic getQuestion(): string {\r\n\t\treturn this.data.question;\r\n\t}\r\n\r\n\tpublic getRatingValuesAscending(): string[] {\r\n\t\treturn this.data.ratingValuesAscending;\r\n\t}\r\n\r\n\tpublic getSelectedRating(): string {\r\n\t\tif (!this.isRatingIndexValid(this.selectedIndex)) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\treturn this.data.ratingValuesAscending[this.selectedIndex];\r\n\t}\r\n\r\n\tpublic setSelectedRatingIndex(selected: number): void {\r\n\t\tif (this.isRatingIndexValid(selected)) {\r\n\t\t\tthis.selectedIndex = selected;\r\n\t\t} else {\r\n\t\t\tthis.selectedIndex = -1;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSelectedRatingIndex(): number {\r\n\t\treturn this.selectedIndex;\r\n\t}\r\n\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurveyComponent.DOM_RATING_TAGNAME);\r\n\r\n\t\tif (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\r\n\t\t\telement.appendChild(doc.createTextNode(\"Not rated\"));\r\n\t\t} else {\r\n\t\t\t// Enforce six digits after the decimal\r\n\t\t\telement.appendChild(doc.createTextNode(this.getNormalizedRatingScore().toFixed(6)));\r\n\t\t}\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst result: object = {};\r\n\r\n\t\tif (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\r\n\t\t\tresult[ISurveyComponent.JSON_RATING_KEYNAME] = \"Not rated\";\r\n\t\t} else {\r\n\t\t\tresult[ISurveyComponent.JSON_RATING_KEYNAME] = this.getNormalizedRatingScore();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_QUESTION_KEYNAME]: this.getQuestion(),\r\n\t\t\t[ISurveyComponent.JSON_RATINGOPTIONS_KEYNAME]: this.getRatingValuesAscending(),\r\n\t\t};\r\n\t}\r\n\r\n\tpublic getNormalizedRatingScore(): number {\r\n\t\tif (!this.isRatingIndexValid(this.getSelectedRatingIndex())) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\tif (this.data.isZeroBased) {\r\n\t\t\treturn (this.selectedIndex) / (this.data.ratingValuesAscending.length - 1);\r\n\t\t} else {\r\n\t\t\treturn (this.selectedIndex + 1.0) / this.data.ratingValuesAscending.length;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate isRatingIndexValid(index: number): boolean {\r\n\t\treturn (index >= 0 && index < this.data.ratingValuesAscending.length);\r\n\t}\r\n\r\n}\r\n\r\nmodule RatingComponent {\r\n\texport class RatingComponentData {\r\n\t\tpublic question: string;\r\n\t\tpublic ratingValuesAscending: string[];\r\n\t\tpublic isZeroBased: boolean;\r\n\t}\r\n}\r\n\r\nexport = RatingComponent;\r\n","import * as ActivityTracker from \"./ActivityTracker\";\r\nimport { ActivityTrackingContract } from \"./ActivityTrackingContract\";\r\nimport { ActivityTrackingSet } from \"./ActivityTrackingSet\";\r\nimport * as IActivityListener from \"./Api/IActivityListener\";\r\nimport { IFloodgateTelemetryLogger } from \"./Api/IFloodgateTelemetryLogger\";\r\nimport { IContextData } from \"./Api/IOnSurveyActivatedCallback\";\r\nimport ISurvey = require(\"./Api/ISurvey\");\r\nimport { IDictionary } from \"./Common\";\r\nimport { TelemetryEvent } from \"./Constants\";\r\nimport { IndexedTracker } from \"./IndexedTracker\";\r\nimport { SurveyEventActivityStats, SurveyStatCollectionEventActivity } from \"./SurveyStatCollectionEventActivity\";\r\nimport { fyShuffle, isNOU } from \"./Utils\";\r\n\r\nlet queuedActivities: SurveyActivityListener.IQueuedActivityParams[] = [];\r\nlet pendingActivityCount: number = 0;\r\nlet previousTrackedActivityMap: { [id: string]: IndexedTracker[] } = {};\r\n\r\n/**\r\n * This class tracks log calls against named activity strings (matched on strict case-sensitive equality)\r\n * and calls the provided callback when all activity thresholds for a given survey have been crossed\r\n */\r\nclass SurveyActivityListener implements IActivityListener {\r\n\tpublic static FloodgateStartActivityName = \"FloodgateFirstStart\";\r\n\t// The size of the dropped activities is set to 100 due to the following two reasons.\r\n\t// 1) To prevent the array growing too big and causing memory issues.\r\n\t// 2) Based on the telemetry analysis of number of dropped activities, the count is very small and much lesser than 100.\r\n\tpublic static MaxPendingActivitiesQueueSize = 100;\r\n\r\n\tpublic static resetSessionActivity(): void {\r\n\t\tpreviousTrackedActivityMap = {};\r\n\t}\r\n\r\n\t// Save incoming activity context data in a dictionary with SurveyID as key, activity data array as value\r\n\tprivate activityContext: Record<string, IContextData[]> = {};\r\n\r\n\tprivate trackedActivityMap: { [id: string]: IndexedTracker[] };\r\n\tprivate callback: SurveyActivityListener.IActivityListenerCallback;\r\n\tprivate loggerCallback: () => IFloodgateTelemetryLogger;\r\n\r\n\tpublic constructor(callback: SurveyActivityListener.IActivityListenerCallback, loggerCallback?: () => IFloodgateTelemetryLogger) {\r\n\t\tif (!callback) {\r\n\t\t\tthrow new Error(\"callback must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.trackedActivityMap = {};\r\n\t\tthis.callback = callback;\r\n\t\tthis.loggerCallback = loggerCallback;\r\n\t}\r\n\r\n\tpublic logActivity(activityName: string, increment: number = 1, context?: IActivityListener.IActivityContext): void {\r\n\t\tthis.logActivity_private(activityName, SurveyActivityListener.LogActionType.Increment, increment, null, context);\r\n\t}\r\n\r\n\tpublic logActivityStartTime(activityName: string, startTime?: Date): void {\r\n\t\tthis.logActivity_private(activityName, SurveyActivityListener.LogActionType.StartTime, 0, startTime, null);\r\n\t}\r\n\r\n\tpublic logActivityStopTime(activityName: string, stopTime?: Date): void {\r\n\t\tthis.logActivity_private(activityName, SurveyActivityListener.LogActionType.StopTime, 0, stopTime, null);\r\n\t}\r\n\r\n\tpublic SetActivityTrackingContracts(activityTrackingContracts: ActivityTrackingContract[],\r\n\t\tbaseline = new SurveyStatCollectionEventActivity()): void {\r\n\r\n\t\tlet duplicateCounter = 0;\r\n\r\n\t\tif (!activityTrackingContracts || activityTrackingContracts.length === 0 || !baseline) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Populate a new map based on the passed in surveys, but propagating and tracking activity counts\r\n\t\t// we may have seen against those events\r\n\t\t// NOTE: We will lose activity counts for survey events that are no longer relevant.\r\n\t\tconst newMap: { [id: string]: IndexedTracker[] } = {};\r\n\t\tconst trackedSurveyIds: string[] = [];\r\n\r\n\t\tfor (const activityTrackingContract of activityTrackingContracts) {\r\n\t\t\tconst trackingSet: ActivityTrackingSet = activityTrackingContract.trackingSet;\r\n\r\n\t\t\t// Added to the new set to make sure they are not duplicated. Based on MSO.\r\n\t\t\tif (trackedSurveyIds.indexOf(activityTrackingContract.surveyId) === -1) {\r\n\t\t\t\ttrackedSurveyIds.push(activityTrackingContract.surveyId);\r\n\t\t\t} else {\r\n\t\t\t\t// Duplicate surveyId being added, count it for the log.\r\n\t\t\t\tduplicateCounter++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// At this point, the survey's activities are safe to add.\r\n\t\t\t// Set up the structures we need to transfer baseline counts (from previous sessions) or current counts (from previous trackers)\r\n\t\t\t// Both vectors must be sorted in the same order as the trackingSet.List items\r\n\t\t\tconst baselineStats: SurveyEventActivityStats = baseline.getBySurveyId(activityTrackingContract.surveyId);\r\n\t\t\tconst baselineCounts: number[] = [trackingSet.getList().length];\r\n\t\t\tconst currentIndexedTrackers: IndexedTracker[] = new Array<IndexedTracker>(trackingSet.getList().length);\r\n\r\n\t\t\tlet currentBaselineIndex = 0;\r\n\t\t\tlet currentIndex = 0;\r\n\r\n\t\t\tfor (const trackingData of trackingSet.getList()) {\r\n\t\t\t\t// Baseline stats count is 0 for events with \"IsAggregate = false\"\r\n\t\t\t\tbaselineCounts[currentIndex] = 0;\r\n\t\t\t\tif (trackingData.getIsAggregate() && baselineStats && currentBaselineIndex < baselineStats.Counts.length) {\r\n\t\t\t\t\tbaselineCounts[currentIndex] = baselineStats.Counts[currentBaselineIndex++];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Session stats may be available in the previous trackedActivityMap\r\n\t\t\t\t// Transfer the old \"current session\" count to the new tracker\r\n\t\t\t\t// Is set to null if not available\r\n\t\t\t\tif (previousTrackedActivityMap[trackingData.getActivity()]) {\r\n\t\t\t\t\tfor (const tracker of previousTrackedActivityMap[trackingData.getActivity()]) {\r\n\t\t\t\t\t\tif (tracker.surveyId === activityTrackingContract.surveyId) {\r\n\t\t\t\t\t\t\tcurrentIndexedTrackers[currentIndex] = tracker;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentIndex++;\r\n\t\t\t}\r\n\r\n\t\t\t// Make a new tracker and init the counts appropriately.\r\n\t\t\tconst newTracker = new ActivityTracker(trackingSet);\r\n\t\t\t// If in a future change we start keeping trackers registered past activation, this will change\r\n\t\t\tnewTracker.initCounts(baselineCounts, currentIndexedTrackers, false /*wasActivatedThisSession*/);\r\n\r\n\t\t\t// Setup the indexed trackers\r\n\t\t\tfor (const activityIndex of newTracker.generateActivityIndexList()) {\r\n\t\t\t\tconst indexedTracker = new IndexedTracker();\r\n\t\t\t\tindexedTracker.index = activityIndex.index;\r\n\t\t\t\tindexedTracker.surveyId = activityTrackingContract.surveyId;\r\n\t\t\t\tindexedTracker.tracker = newTracker;\r\n\r\n\t\t\t\tif (!newMap[activityIndex.activity]) {\r\n\t\t\t\t\tnewMap[activityIndex.activity] = [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Register the new tracker in our new map\r\n\t\t\t\tnewMap[activityIndex.activity].push(indexedTracker);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (duplicateCounter > 0) {\r\n\t\t\tconst telemetryLogger = this.loggerCallback && this.loggerCallback();\r\n\t\t\tif (telemetryLogger) {\r\n\t\t\t\ttelemetryLogger.log_Error(TelemetryEvent.SurveyActivity.SetActivityTrackingContracts.DuplicateSurveyID,\r\n\t\t\t\t\t\"Duplicate surveyId passed in activityTrackingContracts. Duplicate count: \" + duplicateCounter);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the new map in place of the old\r\n\t\tthis.copyObject(this.trackedActivityMap, newMap);\r\n\t}\r\n\r\n\tpublic clearSurveys(): void {\r\n\t\tObject.getOwnPropertyNames(this.trackedActivityMap).forEach((key) => {\r\n\t\t\tdelete this.trackedActivityMap[key];\r\n\t\t});\r\n\t}\r\n\r\n\tpublic saveSessionTrackingActivity(activity: string): void {\r\n\t\t// Set the new activity in place of the old\r\n\t\tpreviousTrackedActivityMap[activity] = this.trackedActivityMap[activity];\r\n\t}\r\n\r\n\t// Get the indexedTracker that corresponds to the SurveyID and return that count. otherwise return 0.\r\n\tpublic getCount(activity: string, surveyId: string): number {\r\n\t\tconst indexedTracker = this.getIndexedTracker(activity, surveyId);\r\n\t\tif (!indexedTracker) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn indexedTracker.tracker.getCount(indexedTracker.index);\r\n\t}\r\n\r\n\tpublic getSessionCount(activity: string, surveyId: string): number {\r\n\t\tconst indexedTracker = this.getIndexedTracker(activity, surveyId);\r\n\t\tif (!indexedTracker) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn indexedTracker.tracker.getSessionCount(indexedTracker.index);\r\n\t}\r\n\r\n\t/**\r\n\t * An atomic get-and-set method.  Returns the current SessionCount, resetting it to zero and adding it into the established baseline\r\n\t */\r\n\tpublic moveSessionCountIntoBaseCount(activity: string, surveyId: string): number {\r\n\t\tconst indexedTracker = this.getIndexedTracker(activity, surveyId);\r\n\t\tif (!indexedTracker) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn indexedTracker.tracker.moveSessionCountIntoBaseCount(indexedTracker.index);\r\n\t}\r\n\r\n\tpublic getSurveyIds(activity: string): string[] | undefined {\r\n\t\tif (isNOU(activity)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst indexedTrackers = this.trackedActivityMap[activity];\r\n\t\tif (!indexedTrackers) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst surveyIds = indexedTrackers.map((indexedTracker) => indexedTracker.surveyId);\r\n\t\treturn surveyIds;\r\n\t}\r\n\r\n\tpublic setCallback(callback: SurveyActivityListener.IActivityListenerCallback): void {\r\n\t\tthis.callback = callback;\r\n\t}\r\n\r\n\tpublic UpdateActivityTrackingContracts(surveyList: IDictionary<ISurvey>): void {\r\n\t\tif (isNOU(surveyList) || Object.keys(surveyList).length === 0) {\r\n\t\t\tthis.clearSurveys();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (const key in this.trackedActivityMap) {\r\n\t\t\tif (this.trackedActivityMap.hasOwnProperty(key)) {\r\n\t\t\t\tconst tracker: IndexedTracker[] = this.trackedActivityMap[key];\r\n\r\n\t\t\t\t// loop through tracker and remove the ones not associate with given surveys\r\n\t\t\t\tfor (let i = tracker.length - 1; i >= 0; --i) {\r\n\t\t\t\t\tif (surveyList.hasOwnProperty(tracker[i].surveyId)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttracker.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getIndexedTracker(activity: string, surveyId: string): IndexedTracker | undefined {\r\n\t\tconst indexedTrackers = this.trackedActivityMap[activity];\r\n\r\n\t\tif (!indexedTrackers) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tlet indexedTracker: IndexedTracker | undefined;\r\n\t\tfor (const tracker of indexedTrackers) {\r\n\t\t\tif (tracker.surveyId === surveyId) {\r\n\t\t\t\tindexedTracker = tracker;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn indexedTracker;\r\n\t}\r\n\r\n\tprivate resetQueuedActivities(): void {\r\n\t\tqueuedActivities = [];\r\n\t}\r\n\r\n\tprivate logActivity_private(activityName: string,\r\n\t\tlogType: SurveyActivityListener.LogActionType,\r\n\t\tincrement: number,\r\n\t\ttimestamp: Date,\r\n\t\tcontext: IActivityListener.IActivityContext): void {\r\n\t\tif (this.callback && !this.callback.shouldAcceptActivity(activityName)) {\r\n\t\t\tpendingActivityCount++;\r\n\t\t\tif (queuedActivities.length < SurveyActivityListener.MaxPendingActivitiesQueueSize) {\r\n\t\t\t\tqueuedActivities.push({activityName, logType, increment, timestamp});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Count any activities that are posted before 'FloodgateFirstStart' activity happens\r\n\t\tif (activityName === SurveyActivityListener.FloodgateStartActivityName) {\r\n\t\t\tif (pendingActivityCount > 0) {\r\n\t\t\t\t// Get the activity names of the queued activities for telemetry, send only first 25.\r\n\t\t\t\tconst activityNames = queuedActivities.slice(0, 25).map((queuedActivity) => queuedActivity.activityName);\r\n\r\n\t\t\t\tconst telemetryLogger = this.loggerCallback && this.loggerCallback();\r\n\t\t\t\tif (telemetryLogger) {\r\n\t\t\t\t\t// Sampling this telemetry event to 5%\r\n\t\t\t\t\ttelemetryLogger.log_Event(TelemetryEvent.SurveyActivity.LogActivity.EventsReprocessed,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tActivityNames: JSON.stringify(activityNames),\r\n\t\t\t\t\t\t\tCount: queuedActivities.length,\r\n\t\t\t\t\t\t\tDropped: pendingActivityCount - queuedActivities.length,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t0.05);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// replay all the queued activities one by one as the floodgate engine has started now\r\n\t\t\t\tqueuedActivities.map((queuedActivity) => this.logActivity_core(\r\n\t\t\t\t\tqueuedActivity.activityName, queuedActivity.logType, queuedActivity.increment, queuedActivity.timestamp, context));\r\n\t\t\t}\r\n\r\n\t\t\tpendingActivityCount = 0;\r\n\t\t\tthis.resetQueuedActivities();\r\n\t\t}\r\n\r\n\t\tthis.logActivity_core(activityName, logType, increment, timestamp, context);\r\n\t}\r\n\r\n\tprivate logActivity_core(activityName: string,\r\n\t\tlogType: SurveyActivityListener.LogActionType,\r\n\t\tincrement: number,\r\n\t\ttimestamp: Date,\r\n\t\tcontext: IActivityListener.IActivityContext): void {\r\n\t\tconst indexedTrackers: IndexedTracker[] = this.trackedActivityMap[activityName];\r\n\t\tif (!indexedTrackers || indexedTrackers.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet indices: number[] = [];\r\n\r\n\t\t// If we have more than one tracker shuffle trackers to randomize which is evaluated first\r\n\t\tif (indexedTrackers.length > 1) {\r\n\t\t\tindices = new Array<number>(indexedTrackers.length);\r\n\t\t\tfor (let i = 0; i < indices.length; i++) {\r\n\t\t\t\tindices[i] = i;\r\n\t\t\t}\r\n\t\t\tindices = fyShuffle(indices); // shuffle and reassign\r\n\t\t} else {\r\n\t\t\tindices.push(0); // just have a zero. Shuffling is not needed.\r\n\t\t}\r\n\r\n\t\t// Loop through trackers in shuffled order\r\n\t\tfor (const index of indices) {\r\n\t\t\tconst tracker: IndexedTracker = indexedTrackers[index];\r\n\t\t\tswitch (logType) {\r\n\t\t\t\tcase SurveyActivityListener.LogActionType.StartTime: {\r\n\t\t\t\t\ttracker.tracker.startTime(tracker.index, timestamp);\r\n\t\t\t\t\tcontinue; // Look at the next tracker. Increment not needed.\r\n\t\t\t\t}\r\n\t\t\t\tcase SurveyActivityListener.LogActionType.StopTime: {\r\n\t\t\t\t\tincrement = tracker.tracker.stopTime(tracker.index, timestamp);\r\n\t\t\t\t\t// fall through to increment the activity as well.\r\n\t\t\t\t}\r\n\t\t\t\tcase SurveyActivityListener.LogActionType.Increment: {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (context) {\r\n\t\t\t\tconst trackerSurveyId = tracker.surveyId;\r\n\t\t\t\tthis.activityContext[trackerSurveyId] = this.activityContext[trackerSurveyId] || [];\r\n\t\t\t\tthis.activityContext[trackerSurveyId].push({ activityName, context });\r\n\t\t\t}\r\n\r\n\t\t\tconst result: ActivityTracker.IncrementResult = tracker.tracker.incrementActivity(tracker.index, increment);\r\n\t\t\tif (result === ActivityTracker.IncrementResult.AllActivitiesActivated) {\r\n\t\t\t\t// Check the activated surveys list to ensure whether any previous survey is still in process\r\n\t\t\t\t// If not, the length should be 1 and call to execute this survey right away\r\n\t\t\t\t// This should only happen if calling to Governance Service, due to the call is asynchronous\r\n\t\t\t\tthis.executeCallback(tracker.surveyId);\r\n\t\t\t\tbreak;\r\n\t\t\t\t/* Breaking here to let one and only one callback to be made from a logActivity call.\r\n\t\t\t\tThis ensures only one survey can fully 'trigger' for a logActivity call. Others that would also\r\n\t\t\t\thave triggered must wait until the next call to trigger (without there being a cooldown, of course).\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate executeCallback(surveyId: string): void {\r\n\t\tthis.callback.run(surveyId, this.activityContext[surveyId]);\r\n\t}\r\n\r\n\tprivate copyObject(target: {}, source: {}) {\r\n\t\tObject.keys(source).forEach((key) => {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule SurveyActivityListener {\r\n\texport interface IActivityListenerCallback {\r\n\t\trun(surveyId: string, contextData: IContextData[]): void;\r\n\t\tshouldAcceptActivity(activityName: string): boolean;\r\n\t}\r\n\r\n\texport const enum LogActionType {\r\n\t\tIncrement,\r\n\t\tStartTime,\r\n\t\tStopTime,\r\n\t}\r\n\r\n\texport interface IQueuedActivityParams {\r\n\t\tactivityName: string;\r\n\t\tlogType: SurveyActivityListener.LogActionType;\r\n\t\tincrement: number;\r\n\t\ttimestamp: Date;\r\n\t}\r\n}\r\n\r\nexport = SurveyActivityListener;\r\n","import { IFloodgateSetting } from \"../Api/IFloodgateSetting\";\r\nimport { IFloodgateSettingStorageCallback } from \"../Api/IFloodgateSettingStorageCallback\";\r\nimport * as IFloodgateStorageProvider from \"../Api/IFloodgateStorageProvider\";\r\nimport { TelemetryEvent } from \"../Constants\";\r\nimport { FloodgateEngine } from \"../FloodgateEngine\";\r\nimport * as StateProviderHelpers from \"../StateProviderHelpers\";\r\nimport * as Utils from \"../Utils\";\r\nimport FileType = IFloodgateStorageProvider.FileType;\r\nimport StateListType = StateProviderHelpers.StateListType;\r\n\r\nconst { getDistantPast, isBoolean, isDate, isNOU, isString, isUtcDatetimeString, stringToDate } = Utils;\r\n\r\nexport class CampaignState {\r\n\t/**\r\n\t * Method to deserialize a JSON object to class object\r\n\t * @param input: JSON object\r\n\t * Returns class object\r\n\t */\r\n\tpublic static deserialize(input: any): CampaignState {\r\n\t\tlet result: CampaignState;\r\n\r\n\t\tif (!input) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tresult = new CampaignState(\r\n\t\t\t\tinput.CampaignId,\r\n\t\t\t\tinput.LastNominationTimeUtc,\r\n\t\t\t\tinput.LastNominationBuildNumber,\r\n\t\t\t\tinput.DeleteAfterSecondsWhenStale,\r\n\t\t\t\tfalse, // ForceCandidacy\r\n\t\t\t\tinput.IsCandidate,\r\n\t\t\t\tinput.DidCandidateTriggerSurvey,\r\n\t\t\t\tinput.LastSurveyActivatedTimeUtc,\r\n\t\t\t\tinput.LastSurveyId,\r\n\t\t\t\tinput.LastSurveyStartTimeUtc,\r\n\t\t\t\tinput.LastSurveyExpirationTimeUtc,\r\n\t\t\t\tinput.LastCooldownEndTimeUtc,\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(TelemetryEvent.CampaignState.Deserialize.Failed, { ErrorMessage: e.toString() });\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// The Campaign to which this state corresponds\r\n\t// @SerializedName(\"CampaignId\")\r\n\tpublic CampaignId: string;\r\n\r\n\t// The last time the candidacy was evaluated\r\n\t// @SerializedName(\"LastNominationTimeUtc\")\r\n\tpublic LastNominationTimeUtc: Date;\r\n\r\n\t// The build number from the last time the candidacy was evaluated\r\n\t// @SerializedName(\"LastNominationBuildNumber\")\r\n\tpublic LastNominationBuildNumber: string;\r\n\r\n\t// Amount of time to delay cleanup of this state from storage, when it's campaign definition is no longer present\r\n\t// @SerializedName(\"DeleteAfterSecondsWhenStale\")\r\n\tpublic DeleteAfterSecondsWhenStale: number;\r\n\r\n\t// Manual setting that can be used to force this client to be a candidate for this campaign. Not persisted to the file.\r\n\tpublic ForceCandidacy: boolean;\r\n\r\n\t// Whether or not the user is currently a candidate or anti-candidate\r\n\t// @SerializedName(\"IsCandidate\")\r\n\tpublic IsCandidate: boolean;\r\n\r\n\t// Whether or not the user triggered a survey when they are a Candidate.\r\n\t// If isCandidate is false, then this value is meaningless.\r\n\t// If isCandidate is true, then this is used to pick a different campaign cooldown time\r\n\t// @SerializedName(\"DidCandidateTriggerSurvey\")\r\n\tpublic DidCandidateTriggerSurvey: boolean;\r\n\r\n\t// The date the last survey was activated\r\n\t// @SerializedName(\"LastSurveyActivatedTimeUtc\")\r\n\tpublic LastSurveyActivatedTimeUtc: Date;\r\n\r\n\t// region Properties of the most recently generated survey.\u0010\r\n\r\n\t// When isCandidate == true for the current election time, this is used to regenerate the same Survey definition\r\n\t// each time we are invoked\r\n\t// Consider: Putting this in its own subclass\r\n\r\n\t// The surveyId for the most recently generated survey in this campaign (can differ from campaignId, and is\r\n\t// used to guarantee a given survey is shown once)\r\n\t// @SerializedName(\"LastSurveyId\")\r\n\tpublic LastSurveyId: string;\r\n\r\n\t// The start time of the most recently generated survey\r\n\t// @SerializedName(\"LastSurveyStartTimeUtc\")\r\n\tpublic LastSurveyStartTimeUtc: Date;\r\n\r\n\t// The expiration time of the most recently generated survey\r\n\t// @SerializedName(\"LastSurveyExpirationTimeUtc\")\r\n\tpublic LastSurveyExpirationTimeUtc: Date;\r\n\r\n\t// The cooldown end time of the most recently generated survey\r\n\t// @SerializedName(\"LastCooldownEndTimeUtc\")\r\n\tpublic LastCooldownEndTimeUtc: Date;\r\n\r\n\tpublic constructor(campaignId: string, lastNominationTime: Date, lastNominationBuildNumber: string, deleteAfterSecondsWhenStale: number,\r\n\t\tForceCandidacy: boolean, isCandidate: boolean, didCandidateTriggerSurvey: boolean, lastSurveyActivatedTime: Date,\r\n\t\tlastSurveyId: string, lastSurveyStartTime: Date, lastSurveyExpirationTime: Date, lastCooldownEndTimeUtc: Date) {\r\n\t\tthis.CampaignId = campaignId;\r\n\t\tthis.LastNominationTimeUtc = lastNominationTime;\r\n\t\tthis.LastNominationBuildNumber = lastNominationBuildNumber;\r\n\t\tthis.DeleteAfterSecondsWhenStale = deleteAfterSecondsWhenStale;\r\n\t\tthis.ForceCandidacy = ForceCandidacy;\r\n\t\tthis.IsCandidate = isCandidate;\r\n\t\tthis.DidCandidateTriggerSurvey = didCandidateTriggerSurvey;\r\n\t\tthis.LastSurveyActivatedTimeUtc = lastSurveyActivatedTime;\r\n\t\tthis.LastSurveyId = lastSurveyId;\r\n\t\tthis.LastSurveyStartTimeUtc = lastSurveyStartTime;\r\n\t\tthis.LastSurveyExpirationTimeUtc = lastSurveyExpirationTime;\r\n\t\tthis.LastCooldownEndTimeUtc = lastCooldownEndTimeUtc;\r\n\r\n\t\tif (!this.validate()) {\r\n\t\t\tthrow new Error(\"Constructor arguments are not valid\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic validate(): boolean {\r\n\t\tif (!this.CampaignId || !isString(this.CampaignId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.LastNominationBuildNumber)\r\n\t\t\t|| !isString(this.LastNominationBuildNumber)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!Utils.isNumber(this.DeleteAfterSecondsWhenStale) || this.DeleteAfterSecondsWhenStale < 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!isBoolean(this.IsCandidate) || !isBoolean(this.DidCandidateTriggerSurvey)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.IsCandidate) {\r\n\t\t\t// Disallow the following null's if isCandidate == true\r\n\t\t\tif (isNOU(this.LastSurveyStartTimeUtc) || isNOU(this.LastSurveyExpirationTimeUtc)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// LastSurveyId could be \"\"\r\n\t\t\tif (!isString(this.LastSurveyId)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.DidCandidateTriggerSurvey) {\r\n\t\t\t// Disallow the following null's if didCandidateTriggerSurvey == true\r\n\t\t\tif (isNOU(this.LastSurveyActivatedTimeUtc)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isNOU(this.LastSurveyId)) {\r\n\t\t\tthis.LastSurveyId = \"\";\r\n\t\t} else if (!isString(this.LastSurveyId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// LastNominationTime does not allow null\r\n\t\tif (isUtcDatetimeString(this.LastNominationTimeUtc)) {\r\n\t\t\tthis.LastNominationTimeUtc = stringToDate(this.LastNominationTimeUtc);\r\n\t\t// invalidate if it's not a Date object\r\n\t\t} else if (!isDate(this.LastNominationTimeUtc)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Set value to distance past if value not provided\r\n\t\tif (isNOU(this.LastSurveyActivatedTimeUtc)) {\r\n\t\t\tthis.LastSurveyActivatedTimeUtc = getDistantPast();\r\n\t\t// check if it's UTC date time string, possibly coming from deserialize method\r\n\t\t} else if (isUtcDatetimeString(this.LastSurveyActivatedTimeUtc)) {\r\n\t\t\tthis.LastSurveyActivatedTimeUtc = stringToDate(this.LastSurveyActivatedTimeUtc);\r\n\t\t// invalidate if it's not a Date object\r\n\t\t} else if (!isDate(this.LastSurveyActivatedTimeUtc)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Set value to distance past if value not provided\r\n\t\tif (isNOU(this.LastSurveyStartTimeUtc)) {\r\n\t\t\tthis.LastSurveyStartTimeUtc = getDistantPast();\r\n\t\t// check if it's string, possibly coming from deserialize method\r\n\t\t} else if (isUtcDatetimeString(this.LastSurveyStartTimeUtc)) {\r\n\t\t\tthis.LastSurveyStartTimeUtc = stringToDate(this.LastSurveyStartTimeUtc);\r\n\t\t// invalidate if it's not a Date object\r\n\t\t} else if (!isDate(this.LastSurveyStartTimeUtc)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Set value to distance past if value not provided\r\n\t\tif (isNOU(this.LastSurveyExpirationTimeUtc)) {\r\n\t\t\tthis.LastSurveyExpirationTimeUtc = getDistantPast();\r\n\t\t// check if it's string, possibly coming from deserialize method\r\n\t\t} else if (isUtcDatetimeString(this.LastSurveyExpirationTimeUtc)) {\r\n\t\t\tthis.LastSurveyExpirationTimeUtc = stringToDate(this.LastSurveyExpirationTimeUtc);\r\n\t\t} else if (!isDate(this.LastSurveyExpirationTimeUtc)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Set value to distance past if value not provided\r\n\t\tif (isNOU(this.LastCooldownEndTimeUtc)) {\r\n\t\t\tthis.LastCooldownEndTimeUtc = getDistantPast();\r\n\t\t// check if it's string, possibly coming from deserialize method\r\n\t\t} else if (isUtcDatetimeString(this.LastCooldownEndTimeUtc)) {\r\n\t\t\tthis.LastCooldownEndTimeUtc = stringToDate(this.LastCooldownEndTimeUtc);\r\n\t\t} else if (!isDate(this.LastCooldownEndTimeUtc)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Record that the current survey was taken on this date\r\n\t *\r\n\t * @param date date\r\n\t * @param cooldownSeconds number\r\n\t */\r\n\tpublic markCurrentSurveyTakenOnDate(date: Date, cooldownSeconds: number, isSurveyComplete: boolean): void {\r\n\t\tthis.DidCandidateTriggerSurvey = isSurveyComplete;\r\n\t\tthis.LastSurveyActivatedTimeUtc = date != null ? date : new Date();\r\n\t\tthis.LastCooldownEndTimeUtc = Utils.addSecondsWithoutOverflow(this.LastSurveyActivatedTimeUtc, cooldownSeconds);\r\n\t}\r\n\r\n\tpublic getCooldownStartDate(): Date {\r\n\t\tif (!this.IsCandidate) {\r\n\t\t\treturn this.LastNominationTimeUtc;\r\n\t\t}\r\n\r\n\t\tif (this.DidCandidateTriggerSurvey) {\r\n\t\t\treturn this.LastSurveyActivatedTimeUtc;\r\n\t\t}\r\n\r\n\t\t// In practice this wil be equal to lastNominationTime, but\r\n\t\t// distribution models like a ramp effectively cause us to\r\n\t\t// shift our \"effective nomination date\" forward with the survey start date\r\n\t\treturn this.LastSurveyStartTimeUtc;\r\n\t}\r\n\r\n\t// endregion\r\n}\r\n\r\nexport interface ICampaignStateProvider {\r\n\tload(): CampaignState[];\r\n\r\n\tsave(campaignStates: CampaignState[]): void;\r\n}\r\n\r\nexport class CampaignStateProviderFactory {\r\n\tpublic static make(fileBasedStorage: IFloodgateStorageProvider,\r\n\t\thostBasedStorage: IFloodgateSettingStorageCallback): ICampaignStateProvider {\r\n\t\tif (hostBasedStorage) {\r\n\t\t\treturn new HostBasedCampaignStateProvider(fileBasedStorage, hostBasedStorage);\r\n\t\t}\r\n\r\n\t\treturn new FileBasedCampaignStateProvider(fileBasedStorage);\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing what is stored in the file.\r\n */\r\nclass FileData {\r\n\t// @SerializedName(\"CampaignStates\")\r\n\tpublic CampaignStates: CampaignState[];\r\n\r\n}\r\n\r\nexport class HostBasedCampaignStateProvider implements ICampaignStateProvider {\r\n\tprivate fileBasedStateProvider: ICampaignStateProvider;\r\n\tprivate hostBasedStorage: IFloodgateSettingStorageCallback;\r\n\r\n\tpublic constructor(fileBasedStorage: IFloodgateStorageProvider, hostBasedStorage: IFloodgateSettingStorageCallback) {\r\n\t\tif (!hostBasedStorage) {\r\n\t\t\tthrow new Error(\"host-based storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.hostBasedStorage = hostBasedStorage;\r\n\r\n\t\t// file-based provider is optional\r\n\t\tif (fileBasedStorage) {\r\n\t\t\tthis.fileBasedStateProvider = new FileBasedCampaignStateProvider(fileBasedStorage);\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): CampaignState[] {\r\n\t\tconst statesFromHost: CampaignState[] = this.getStatesFromHost();\r\n\r\n\t\tlet statesFromFile: CampaignState[];\r\n\t\tif (this.fileBasedStateProvider) {\r\n\t\t\tstatesFromFile = this.fileBasedStateProvider.load();\r\n\t\t}\r\n\r\n\t\tconst StateCollections = StateProviderHelpers.MergeAndUpdateCampaignStates(statesFromFile, statesFromHost);\r\n\t\treturn StateCollections.find(StateListType.Merged);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(campaignStates: CampaignState[]): void {\r\n\t\tif (!campaignStates) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst statesFromHost: CampaignState[] = this.getStatesFromHost();\r\n\t\tconst StateCollections = StateProviderHelpers.MergeAndUpdateCampaignStates(campaignStates, statesFromHost);\r\n\t\tconst toBeUpdatedStates: CampaignState[] = StateCollections.find(StateListType.ToBeUpdated);\r\n\t\tconst mergedStates: CampaignState[] = StateCollections.find(StateListType.Merged);\r\n\r\n\t\t// write delta_data to host\r\n\t\tif (toBeUpdatedStates) {\r\n\t\t\ttoBeUpdatedStates.forEach((state) => {\r\n\t\t\t\tconst stateValue: string = StateProviderHelpers.makeSettingItemValue(JSON.stringify(state));\r\n\t\t\t\tthis.hostBasedStorage.upsertSettingItem(FileType[FileType.CampaignStates], state.CampaignId, stateValue);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Write merged data to File\r\n\t\tif (this.fileBasedStateProvider) {\r\n\t\t\tthis.fileBasedStateProvider.save(mergedStates);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getStatesFromHost(): CampaignState[] {\r\n\t\tconst states: CampaignState[] = [];\r\n\t\tconst settings: IFloodgateSetting = this.hostBasedStorage.readSettingList(FileType[FileType.CampaignStates]);\r\n\r\n\t\tfor (const key in settings) {\r\n\t\t\tif (!settings.hasOwnProperty(key)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst value = settings[key];\r\n\t\t\tconst dataString: string = StateProviderHelpers.extractSettingItemValueSubString(value);\r\n\r\n\t\t\tlet itemObject: any = {};\r\n\t\t\ttry {\r\n\t\t\t\titemObject = JSON.parse(dataString);\r\n\r\n\t\t\t\tconst newState: CampaignState = CampaignState.deserialize(itemObject);\r\n\t\t\t\tif (newState) {\r\n\t\t\t\t\tstates.push(newState);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\tTelemetryEvent.HostBasedCampaignStateProvider.GetStatesFromHost.Failed,\r\n\t\t\t\t\t{ ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn states;\r\n\t}\r\n}\r\n\r\nexport class FileBasedCampaignStateProvider implements ICampaignStateProvider {\r\n\tprivate storage: IFloodgateStorageProvider;\r\n\r\n\tpublic constructor(storage: IFloodgateStorageProvider) {\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error(\"storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.storage = storage;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): CampaignState[] {\r\n\t\tconst readString: string = this.storage.read(FileType.CampaignStates);\r\n\t\tif (!readString) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet fileData: FileData;\r\n\t\ttry {\r\n\t\t\tfileData = JSON.parse(readString);\r\n\r\n\t\t\tconst result: CampaignState[] = [];\r\n\t\t\tif (fileData && fileData.CampaignStates) {\r\n\t\t\t\tfileData.CampaignStates.forEach((state) => {\r\n\t\t\t\t\tconst newState: CampaignState = CampaignState.deserialize(state);\r\n\r\n\t\t\t\t\tif (newState) {\r\n\t\t\t\t\t\tresult.push(newState);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.FileBasedCampaignStateProvider.Load.Failed,\r\n\t\t\t\t{ ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + readString });\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(campaignStates: CampaignState[]): void {\r\n\t\tif (!campaignStates) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst fileData = new FileData();\r\n\t\tfileData.CampaignStates = campaignStates;\r\n\t\tconst writeString: string = JSON.stringify(fileData);\r\n\t\tthis.storage.write(FileType.CampaignStates, writeString);\r\n\t}\r\n}\r\n","import { IFloodgateSetting } from \"./Api/IFloodgateSetting\";\r\nimport { IFloodgateSettingStorageCallback } from \"./Api/IFloodgateSettingStorageCallback\";\r\nimport * as IFloodgateStorageProvider from \"./Api/IFloodgateStorageProvider\";\r\nimport FileType = IFloodgateStorageProvider.FileType;\r\nimport * as ISurvey from \"./Api/ISurvey\";\r\nimport { IDictionary, ISerializable } from \"./Common\";\r\nimport { TelemetryEvent } from \"./Constants\";\r\nimport { FloodgateEngine } from \"./FloodgateEngine\";\r\nimport * as StateProviderHelpers from \"./StateProviderHelpers\";\r\nimport { SurveyStatCollection } from \"./SurveyStatCollection\";\r\nimport * as Utils from \"./Utils\";\r\n\r\n/**\r\n * StatCollection for activated surveys.  Should be used to track the SurveyIds\r\n * that have been recently shown to a user\r\n */\r\n// TODO (gachoi) Check if this applies - VSOBug: 1443010 One bad Stat object fails the entire serialization\r\nexport class SurveyStatCollectionActivation extends SurveyStatCollection<SurveyActivationStats> implements ISerializable {\r\n\t/**\r\n\t * Load from Json\r\n\t */\r\n\tpublic static fromJson(json: string): SurveyStatCollectionActivation {\r\n\t\tconst statCollection = new SurveyStatCollectionActivation();\r\n\r\n\t\tif (!json) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.SurveyStatCollectionActivation.FromJson.Failed, { ErrorMessage: \"Input json is null or empty.\" });\r\n\t\t\treturn statCollection;\r\n\t\t}\r\n\r\n\t\tlet readStats: SurveyStatCollectionActivation;\r\n\t\ttry {\r\n\t\t\treadStats = JSON.parse(json);\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.SurveyStatCollectionActivation.FromJson.Failed, { ErrorMessage: \"Json parsing failed. \" + e.toString() });\r\n\t\t\treturn statCollection;\r\n\t\t}\r\n\r\n\t\tif (!statCollection.deserialize(readStats)) {\r\n\t\t\treturn new SurveyStatCollectionActivation();\r\n\t\t}\r\n\r\n\t\treturn statCollection;\r\n\t}\r\n\r\n\t/**\r\n\t * Convert to Json\r\n\t */\r\n\tpublic static toJson(object: SurveyStatCollectionActivation): string {\r\n\t\tif (!object) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.SurveyStatCollectionActivation.ToJson.Failed, { ErrorMessage: \"Input json is null or empty.\" });\r\n\t\t\tobject = new SurveyStatCollectionActivation();\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(object);\r\n\t}\r\n\r\n\t/**\r\n\t * Add another SurveyStatCollectionActivation object\r\n\t */\r\n\tpublic accumulate(other: SurveyStatCollectionActivation): void {\r\n\t\tif (!other) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst stats: IDictionary<SurveyActivationStats> = other.getStats();\r\n\t\t// SurveyActivationStats accumulation simply overwrites any keys from 'other' into our collection\r\n\t\tfor (const key in stats) {\r\n\t\t\tif (stats.hasOwnProperty(key)) {\r\n\t\t\t\tthis.addStats(key, stats[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Method to deserialize SurveyStatCollectionActivation\r\n\t * @param input: collection of SurveyStatCollectionActivation\r\n\t * Returns result of validation check\r\n\t */\r\n\tpublic deserialize(input: any): boolean {\r\n\t\tconst rawStats: IDictionary<SurveyActivationStats> = input.Surveys;\r\n\t\tconst now = new Date();\r\n\r\n\t\tfor (const key in rawStats) {\r\n\t\t\tif (rawStats.hasOwnProperty(key)) {\r\n\t\t\t\tconst newStat = new SurveyActivationStats();\r\n\r\n\t\t\t\tif (newStat.deserialize(rawStats[key]) && newStat.ExpirationTimeUtc > now) {\r\n\t\t\t\t\tthis.addStats(key, newStat);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validate the Surveys\r\n\t * Returns false if validation fails\r\n\t */\r\n\tpublic validate(): boolean {\r\n\t\treturn Utils.isObject(this.getStats());\r\n\t}\r\n}\r\n\r\nexport interface ISurveyActivationStatsProvider {\r\n\tload(): SurveyStatCollectionActivation;\r\n\r\n\tsave(surveyStatCollectionActivation: SurveyStatCollectionActivation): void;\r\n}\r\n\r\nexport class SurveyActivationStatsProviderFactory {\r\n\tpublic static make(fileBasedStorage: IFloodgateStorageProvider,\r\n\t\thostBasedStorage: IFloodgateSettingStorageCallback): ISurveyActivationStatsProvider {\r\n\t\tif (hostBasedStorage) {\r\n\t\t\treturn new HostBasedSurveyActivationStatsProvider(fileBasedStorage, hostBasedStorage);\r\n\t\t}\r\n\r\n\t\treturn new FileBasedSurveyActivationStatsProvider(fileBasedStorage);\r\n\t}\r\n}\r\n\r\nexport class HostBasedSurveyActivationStatsProvider implements ISurveyActivationStatsProvider {\r\n\tprivate fileBasedStorageProvider: FileBasedSurveyActivationStatsProvider;\r\n\tprivate hostBasedStorage: IFloodgateSettingStorageCallback;\r\n\r\n\tpublic constructor(fileBasedStorageProvider: IFloodgateStorageProvider, hostBasedStorage: IFloodgateSettingStorageCallback) {\r\n\t\tif (!hostBasedStorage) {\r\n\t\t\tthrow new Error(\"host-based storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.hostBasedStorage = hostBasedStorage;\r\n\r\n\t\t// file based provider is optional\r\n\t\tif (fileBasedStorageProvider) {\r\n\t\t\tthis.fileBasedStorageProvider = new FileBasedSurveyActivationStatsProvider(fileBasedStorageProvider);\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): SurveyStatCollectionActivation {\r\n\t\tconst surveyStatsFromHost: SurveyStatCollectionActivation = this.getSurveyStatsFromHost();\r\n\r\n\t\tlet surveyStatsFromFile: SurveyStatCollectionActivation = new SurveyStatCollectionActivation();\r\n\t\tif (this.fileBasedStorageProvider) {\r\n\t\t\tsurveyStatsFromFile = this.fileBasedStorageProvider.load();\r\n\t\t}\r\n\r\n\t\tconst surveyStatsCollections = StateProviderHelpers.MergeAndUpdateSurveyActivationStats(surveyStatsFromFile, surveyStatsFromHost);\r\n\t\treturn surveyStatsCollections.find(StateProviderHelpers.StateListType.Merged);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(stats: SurveyStatCollectionActivation): void {\r\n\t\tif (!stats) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst statsFromHost: SurveyStatCollectionActivation = this.getSurveyStatsFromHost();\r\n\t\tconst statCollection = StateProviderHelpers.MergeAndUpdateSurveyActivationStats(stats, statsFromHost);\r\n\t\tconst toBeUpdatedStats: SurveyStatCollectionActivation = statCollection.find(StateProviderHelpers.StateListType.ToBeUpdated);\r\n\t\tconst mergedStates: SurveyStatCollectionActivation = statCollection.find(StateProviderHelpers.StateListType.Merged);\r\n\r\n\t\t// write delta_data to Roaming\r\n\t\tif (toBeUpdatedStats) {\r\n\t\t\tconst toBeUpdatedStatsDictionary: IDictionary<SurveyActivationStats> = toBeUpdatedStats.getStats();\r\n\t\t\tfor (const surveyId in toBeUpdatedStatsDictionary) {\r\n\t\t\t\tif (toBeUpdatedStatsDictionary.hasOwnProperty(surveyId)) {\r\n\t\t\t\t\tconst item: string = StateProviderHelpers.makeSettingItemValue(\r\n\t\t\t\t\t\tJSON.stringify(toBeUpdatedStatsDictionary[surveyId]));\r\n\r\n\t\t\t\t\tthis.hostBasedStorage.upsertSettingItem(FileType[FileType.SurveyActivationStats],\r\n\t\t\t\t\t\tsurveyId, item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Write merged data to File\r\n\t\tif (this.fileBasedStorageProvider) {\r\n\t\t\tthis.fileBasedStorageProvider.save(mergedStates);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getSurveyStatsFromHost(): SurveyStatCollectionActivation {\r\n\t\tconst statsCollection: SurveyStatCollectionActivation = new  SurveyStatCollectionActivation();\r\n\t\tconst itemData: IFloodgateSetting = this.hostBasedStorage.readSettingList(FileType[FileType.SurveyActivationStats]);\r\n\r\n\t\tconst now = new Date();\r\n\t\tfor (const surveyId in itemData) {\r\n\t\t\tif (!itemData.hasOwnProperty(surveyId)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst dataString: string = StateProviderHelpers.extractSettingItemValueSubString(itemData[surveyId]);\r\n\t\t\tconst newStats: SurveyActivationStats = new SurveyActivationStats();\r\n\t\t\ttry {\r\n\t\t\t\tconst readStats: SurveyActivationStats = JSON.parse(dataString);\r\n\t\t\t\tnewStats.deserialize(readStats);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\tTelemetryEvent.HostBasedSurveyActivationStatsProvider.GetSurveyStatsFromHost.Failed,\r\n\t\t\t\t\t{ ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\r\n\t\t\t}\r\n\r\n\t\t\tif (newStats.ExpirationTimeUtc <= now) {\r\n\t\t\t\t// Delete survey stat from host storage if it's expired.\r\n\t\t\t\tthis.hostBasedStorage.deleteSettingItem(FileType[FileType.SurveyActivationStats], surveyId);\r\n\t\t\t} else {\r\n\t\t\t\tstatsCollection.addStats(surveyId, newStats);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn statsCollection;\r\n\t}\r\n}\r\nexport class FileBasedSurveyActivationStatsProvider implements ISurveyActivationStatsProvider {\r\n\tprivate storage: IFloodgateStorageProvider;\r\n\r\n\tpublic constructor(storage: IFloodgateStorageProvider) {\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error(\"storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.storage = storage;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): SurveyStatCollectionActivation {\r\n\t\tconst readString: string = this.storage.read(IFloodgateStorageProvider.FileType.SurveyActivationStats);\r\n\t\tif (!readString) {\r\n\t\t\treturn new SurveyStatCollectionActivation();\r\n\t\t}\r\n\r\n\t\treturn SurveyStatCollectionActivation.fromJson(readString);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(surveyStatCollectionActivation: SurveyStatCollectionActivation): void {\r\n\t\tif (!surveyStatCollectionActivation) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst writeString: string = SurveyStatCollectionActivation.toJson(surveyStatCollectionActivation);\r\n\t\tthis.storage.write(IFloodgateStorageProvider.FileType.SurveyActivationStats, writeString);\r\n\t}\r\n}\r\n\r\nexport class SurveyActivationStats implements ISerializable {\r\n\t// The following property names match JSON property names for proper serialization/deserialization\r\n\tpublic ExpirationTimeUtc: Date;\r\n\tpublic ActivationTimeUtc: Date;\r\n\tpublic Type: ISurvey.Type;\r\n\tpublic SurveyLaunchCount = 0;\r\n\tpublic SurveyLaunchCountPerSession = 0;\r\n\r\n\t/**\r\n\t * Method to deserialize a JSON object to class object\r\n\t * @param input: JSON object\r\n\t * Returns result of validation check\r\n\t */\r\n\tpublic deserialize(input: any): boolean {\r\n\t\tthis.ActivationTimeUtc = input.ActivationTimeUtc;\r\n\t\tthis.ExpirationTimeUtc = input.ExpirationTimeUtc;\r\n\t\tthis.Type = input.Type;\r\n\t\tthis.SurveyLaunchCount = input.SurveyLaunchCount ?? 0;\r\n\t\tthis.SurveyLaunchCountPerSession = input.SurveyLaunchCountPerSession ?? 0;\r\n\r\n\t\treturn this.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Method to call after deserialization to validate generated object.\r\n\t * Returns false if not valid.\r\n\t */\r\n\tpublic validate(): boolean {\r\n\t\t// make it a date object if it's a valid UTC date time value\r\n\t\tif (Utils.isUtcDatetimeString(this.ActivationTimeUtc)) {\r\n\t\t\tthis.ActivationTimeUtc = Utils.stringToDate(this.ActivationTimeUtc);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// make it a date object if it's a valid UTC date time value\r\n\t\tif (Utils.isUtcDatetimeString(this.ExpirationTimeUtc)) {\r\n\t\t\tthis.ExpirationTimeUtc = Utils.stringToDate(this.ExpirationTimeUtc);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!Utils.isNumber(this.SurveyLaunchCount) ||\r\n\t\t\t!Utils.isNumber(this.SurveyLaunchCountPerSession)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn Utils.isEnumValue(this.Type, ISurvey.Type);\r\n\t}\r\n}\r\n","import { IDictionary } from \"./Common\";\r\n\r\n/**\r\n * Generic class for managing a collection of survey stats. Includes read-from/write-to json structures or a file,\r\n * as well as merge routines for combining collections\r\n */\r\nexport abstract class SurveyStatCollection<TStats> {\r\n\t// The following property name matches the JSON root key name for proper serialization/ deserialization\r\n\tprivate Surveys: IDictionary<TStats> = {};\r\n\r\n\tpublic constructor() {\r\n\t\tthis.Surveys = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Add stats. Overwrites if already exists.\r\n\t */\r\n\tpublic addStats(surveyId: string, stats: TStats): void {\r\n\t\tthis.Surveys[surveyId] = stats;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a SurveyActivationStats object by surveyId. Returns null if surveyId is not found\r\n\t */\r\n\tpublic getBySurveyId(surveyId: string): TStats {\r\n\t\treturn (this.Surveys[surveyId]);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all stats available\r\n\t */\r\n\tpublic getStats(): IDictionary<TStats> {\r\n\t\treturn this.Surveys;\r\n\t}\r\n}\r\n","import { ICVSurveyComponent } from \"src/Api/Api\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\n\r\nclass CVSurveyComponent implements ICVSurveyComponent {\r\n\tpublic static make(data: CVSurveyComponent.CVSurveyComponentData): ICVSurveyComponent {\r\n\t\ttry {\r\n\t\t\treturn new CVSurveyComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: CVSurveyComponent.CVSurveyComponentData;\r\n\r\n\tpublic constructor(data: CVSurveyComponent.CVSurveyComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.customerVoiceFormId) {\r\n\t\t\tthrow new Error(\"data.formID must not be null or empty\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.CVSurvey;\r\n\t}\r\n\r\n\tpublic getFormId(): string {\r\n\t\treturn this.data.customerVoiceFormId;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\t\tconst element: Element = doc.createElement(ISurveyComponent.DOM_CVSURVEY_TAGNAME);\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst result: object = {};\r\n\r\n\t\tresult[ISurveyComponent.JSON_CVSURVEY_KEYNAME] = this.getFormId();\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_CVSURVEYFORMID_KEYNAME]: this.getFormId(),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule CVSurveyComponent {\r\n\texport class CVSurveyComponentData {\r\n\t\tpublic customerVoiceFormId: string;\r\n\t}\r\n}\r\n\r\nexport = CVSurveyComponent;\r\n","import { IFloodgateSetting } from \"./Api/IFloodgateSetting\";\r\nimport { IFloodgateSettingStorageCallback } from \"./Api/IFloodgateSettingStorageCallback\";\r\nimport * as IFloodgateStorageProvider from \"./Api/IFloodgateStorageProvider\";\r\nimport { TelemetryEvent } from \"./Constants\";\r\nimport { FloodgateEngine } from \"./FloodgateEngine\";\r\nimport { GovernedChannelType } from \"./GovernedChannel\";\r\nimport * as StateProviderHelpers from \"./StateProviderHelpers\";\r\nimport * as Utils from \"./Utils\";\r\nimport FileType = IFloodgateStorageProvider.FileType;\r\nimport StateListType = StateProviderHelpers.StateListType;\r\n\r\nexport class GovernedChannelState {\r\n\t/**\r\n\t * Method to deserialize a JSON object to class object\r\n\t * @param input: JSON object\r\n\t * Returns class object\r\n\t */\r\n\tpublic static deserialize(input: any): GovernedChannelState {\r\n\t\tlet result: GovernedChannelState;\r\n\r\n\t\tif (!input) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Validation is handled by GovernedChannelState's constructor\r\n\t\ttry {\r\n\t\t\tresult = new GovernedChannelState(\r\n\t\t\t\tinput.ChannelType,\r\n\t\t\t\tinput.CooldownStartTimeUtc,\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.GovernedChannelState.Deserialize.Failed, { ErrorMessage: e.toString() });\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @SerializedName(\"ChannelType\")\r\n\tprivate ChannelType: GovernedChannelType;\r\n\r\n\t// @SerializedName(\"CooldownStartTimeUtc\")\r\n\tprivate CooldownStartTimeUtc: Date;\r\n\r\n\tpublic constructor(type: GovernedChannelType, cooldownStartTime: Date) {\r\n\t\tthis.ChannelType = type;\r\n\t\tthis.CooldownStartTimeUtc = cooldownStartTime;\r\n\r\n\t\tif (!this.validate()) {\r\n\t\t\tthrow new Error(\"Constructor arguments are not valid\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic validate(): boolean {\r\n\t\tif (!Utils.isEnumValue(this.ChannelType, GovernedChannelType)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// make it a date object if it's a valid UTC date time value\r\n\t\tif (Utils.isUtcDatetimeString(this.CooldownStartTimeUtc)) {\r\n\t\t\tthis.CooldownStartTimeUtc = Utils.stringToDate(this.CooldownStartTimeUtc);\r\n\t\t// Allow null and bad cooldownStartTime\r\n\t\t} else if (Utils.isNOU(this.CooldownStartTimeUtc) || !Utils.isDate(this.CooldownStartTimeUtc)) {\r\n\t\t\tthis.CooldownStartTimeUtc = Utils.getDistantPast();\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic getType(): GovernedChannelType {\r\n\t\treturn this.ChannelType;\r\n\t}\r\n\r\n\tpublic getCooldownStartTime(): Date {\r\n\t\treturn this.CooldownStartTimeUtc;\r\n\t}\r\n}\r\n\r\nexport interface IGovernedChannelStateProvider {\r\n\tload(): GovernedChannelState[];\r\n\r\n\tsave(channels: GovernedChannelState[]): void;\r\n}\r\n\r\nexport class GovernedChannelStateProviderFactory {\r\n\tpublic static make(fileBasedStorage: IFloodgateStorageProvider,\r\n\t\thostBasedStorage: IFloodgateSettingStorageCallback): IGovernedChannelStateProvider {\r\n\t\tif (hostBasedStorage) {\r\n\t\t\treturn new HostBasedGovernedChannelStateProvider(fileBasedStorage, hostBasedStorage);\r\n\t\t}\r\n\r\n\t\treturn new FileBasedGovernedChannelStateProvider(fileBasedStorage);\r\n\t}\r\n}\r\n\r\n/**\r\n * Class representing what is stored in the file.\r\n */\r\nclass FileData {\r\n\t// @SerializedName(\"ChannelStates\")\r\n\tpublic ChannelStates: GovernedChannelState[];\r\n}\r\n\r\nexport class HostBasedGovernedChannelStateProvider implements IGovernedChannelStateProvider {\r\n\tprivate fileBasedStateProvider: IGovernedChannelStateProvider;\r\n\tprivate hostBasedStorage: IFloodgateSettingStorageCallback;\r\n\r\n\tpublic constructor(fileBasedStorage: IFloodgateStorageProvider, hostBasedStorage: IFloodgateSettingStorageCallback) {\r\n\t\tif (!hostBasedStorage) {\r\n\t\t\tthrow new Error(\"host-based storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.hostBasedStorage = hostBasedStorage;\r\n\r\n\t\t// file-based provider is optional\r\n\t\tif (fileBasedStorage) {\r\n\t\t\tthis.fileBasedStateProvider = new FileBasedGovernedChannelStateProvider(fileBasedStorage);\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): GovernedChannelState[] {\r\n\t\tconst statesFromHost: GovernedChannelState[] = this.getStatesFromHost();\r\n\r\n\t\tlet statesFromFile: GovernedChannelState[];\r\n\t\tif (this.fileBasedStateProvider) {\r\n\t\t\tstatesFromFile = this.fileBasedStateProvider.load();\r\n\t\t}\r\n\r\n\t\tconst StateCollections = StateProviderHelpers.MergeAndUpdateGovernedChannelStates(statesFromFile, statesFromHost);\r\n\t\treturn StateCollections.find(StateListType.Merged);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(states: GovernedChannelState[]): void {\r\n\t\tif (!states) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst statesFromHost: GovernedChannelState[] = this.getStatesFromHost();\r\n\t\tconst StateCollections = StateProviderHelpers.MergeAndUpdateGovernedChannelStates(states, statesFromHost);\r\n\t\tconst toBeUpdatedStates: GovernedChannelState[] = StateCollections.find(StateListType.ToBeUpdated);\r\n\t\tconst mergedStates: GovernedChannelState[] = StateCollections.find(StateListType.Merged);\r\n\r\n\t\t// write delta_data to Host\r\n\t\tif (toBeUpdatedStates) {\r\n\t\t\ttoBeUpdatedStates.forEach((state) => {\r\n\t\t\t\tconst stateValue: string = StateProviderHelpers.makeSettingItemValue(JSON.stringify(state));\r\n\t\t\t\tthis.hostBasedStorage.upsertSettingItem(FileType[FileType.GovernedChannelStates], String(state.getType()), stateValue);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Write merged data to File\r\n\t\tif (this.fileBasedStateProvider) {\r\n\t\t\tthis.fileBasedStateProvider.save(mergedStates);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getStatesFromHost(): GovernedChannelState[] {\r\n\t\tconst states: GovernedChannelState[] = [];\r\n\t\tconst settings: IFloodgateSetting = this.hostBasedStorage.readSettingList(FileType[FileType.GovernedChannelStates]);\r\n\r\n\t\tfor (const key in settings) {\r\n\t\t\tif (!settings.hasOwnProperty(key)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst value = settings[key];\r\n\t\t\tconst dataString: string = StateProviderHelpers.extractSettingItemValueSubString(value);\r\n\r\n\t\t\tlet itemObject: any = {};\r\n\t\t\ttry {\r\n\t\t\t\titemObject = JSON.parse(dataString);\r\n\r\n\t\t\t\tconst newState: GovernedChannelState = GovernedChannelState.deserialize(itemObject);\r\n\t\t\t\tif (newState) {\r\n\t\t\t\t\tstates.push(newState);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\t\tTelemetryEvent.HostBasedGovernedChannelStateProvider.GetStatesFromHost.Failed,\r\n\t\t\t\t\t{ ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + dataString });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn states;\r\n\t}\r\n}\r\n\r\nexport class FileBasedGovernedChannelStateProvider implements IGovernedChannelStateProvider {\r\n\tprivate storage: IFloodgateStorageProvider;\r\n\r\n\tpublic constructor(storage: IFloodgateStorageProvider) {\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error(\"storage must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.storage = storage;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic load(): GovernedChannelState[] {\r\n\t\t// Load channel state from file using _storageProvider (get back string)\r\n\t\tconst readString: string = this.storage.read(FileType.GovernedChannelStates);\r\n\t\tif (!readString) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet fileData: FileData;\r\n\t\ttry {\r\n\t\t\tfileData = JSON.parse(readString);\r\n\r\n\t\t\tconst result: GovernedChannelState[] = [];\r\n\r\n\t\t\tif (fileData && fileData.ChannelStates) {\r\n\t\t\t\tfileData.ChannelStates.forEach((state) => {\r\n\t\t\t\t\tconst newState: GovernedChannelState = GovernedChannelState.deserialize(state);\r\n\r\n\t\t\t\t\tif (newState) {\r\n\t\t\t\t\t\tresult.push(newState);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.FileBasedGovernedChannelStateProvider.Load.Failed,\r\n\t\t\t\t{ ErrorMessage: \"Json parsing/deserializing failed. \" + e.toString() + \".  Input:\" + readString });\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic save(states: GovernedChannelState[]): void {\r\n\t\tif (!states) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst fileData = new FileData();\r\n\t\tfileData.ChannelStates = states;\r\n\t\tconst writeString: string = JSON.stringify(fileData);\r\n\r\n\t\tthis.storage.write(FileType.GovernedChannelStates, writeString);\r\n\t}\r\n}\r\n","import { IDictionary, ISerializable } from \"./Common\";\r\nimport { TelemetryEvent } from \"./Constants\";\r\nimport { FloodgateEngine } from \"./FloodgateEngine\";\r\nimport { SurveyStatCollection } from \"./SurveyStatCollection\";\r\nimport * as Utils from \"./Utils\";\r\n\r\n/**\r\n * StatCollection for EventActivity counts.  Should be used to store/merge\r\n * aggregate values between sessions tracking the same surveys/events\r\n * E.g. A survey that activates after 3 boots.\r\n */\r\n// TODO (gachoi) check the following - VSOBug: 1443010 One bad Stat object fails the entire serialization\r\nexport class SurveyStatCollectionEventActivity extends SurveyStatCollection<SurveyEventActivityStats> implements ISerializable {\r\n\r\n\t/**\r\n\t * Load from Json\r\n\t */\r\n\tpublic static fromJson(json: string): SurveyStatCollectionEventActivity {\r\n\t\tconst statCollection = new SurveyStatCollectionEventActivity();\r\n\r\n\t\tif (!json) {\r\n\t\t\treturn statCollection;\r\n\t\t}\r\n\r\n\t\tlet readStats: SurveyStatCollectionEventActivity;\r\n\t\ttry {\r\n\t\t\treadStats = JSON.parse(json);\r\n\t\t} catch (e) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.SurveyStatCollectionEventActivity.FromJson.Failed,\r\n\t\t\t\t{ ErrorMessage: \"Json parsing failed. \" + e.toString() });\r\n\t\t\treturn statCollection;\r\n\t\t}\r\n\r\n\t\tif (!statCollection.deserialize(readStats)) {\r\n\t\t\treturn new SurveyStatCollectionEventActivity();\r\n\t\t}\r\n\r\n\t\treturn statCollection;\r\n\t}\r\n\r\n\t/**\r\n\t * Convert to Json\r\n\t */\r\n\tpublic static toJson(object: SurveyStatCollectionEventActivity): string {\r\n\t\tif (!object) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.SurveyStatCollectionEventActivity.ToJson.Failed,\r\n\t\t\t\t{ ErrorMessage: \"Input json is null or empty.\" });\r\n\t\t\tobject = new SurveyStatCollectionEventActivity();\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(object);\r\n\t}\r\n\r\n\t/**\r\n\t * Add another SurveyStatCollectionEventActivity object\r\n\t */\r\n\tpublic accumulate(other: SurveyStatCollectionEventActivity): void {\r\n\t\tif (!other) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst stats: IDictionary<SurveyEventActivityStats> = other.getStats();\r\n\t\t// SurveyEventActivityStats accumulation simply overwrites any keys from 'other' into our collection\r\n\t\tfor (const key in stats) {\r\n\t\t\tif (stats.hasOwnProperty(key)) {\r\n\t\t\t\tlet ourStats: SurveyEventActivityStats = this.getBySurveyId(key);\r\n\r\n\t\t\t\t// If it does not already exist\r\n\t\t\t\tif (!ourStats) {\r\n\t\t\t\t\tourStats = new SurveyEventActivityStats();\r\n\t\t\t\t\tourStats.Counts = [];\r\n\t\t\t\t\tthis.addStats(key, ourStats);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tourStats.ExpirationTimeUtc = stats[key].ExpirationTimeUtc;\r\n\r\n\t\t\t\t// If for some reason the other counts array is larger, resize ourStats.counts\r\n\t\t\t\tif (ourStats.Counts.length < stats[key].Counts.length) {\r\n\t\t\t\t\tconst resizedCounts: number[] = ourStats.Counts.slice();\r\n\t\t\t\t\tourStats.Counts = resizedCounts;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = 0; i < stats[key].Counts.length; i++) {\r\n\t\t\t\t\tif (!ourStats.Counts[i]) {\r\n\t\t\t\t\t\tourStats.Counts[i] = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tourStats.Counts[i] += stats[key].Counts[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Method to deserialize SurveyStatCollectionEventActivity\r\n\t * @param input: collection of SurveyStatCollectionEventActivity\r\n\t * Returns result of validation check\r\n\t */\r\n\tpublic deserialize(input: any): boolean {\r\n\t\tconst rawStats: IDictionary<SurveyEventActivityStats> = input.Surveys;\r\n\t\tconst now = new Date();\r\n\r\n\t\tfor (const key in rawStats) {\r\n\t\t\tif (rawStats.hasOwnProperty(key)) {\r\n\t\t\t\tconst newStat = new SurveyEventActivityStats();\r\n\r\n\t\t\t\tif (newStat.deserialize(rawStats[key]) && newStat.ExpirationTimeUtc > now) {\r\n\t\t\t\t\tthis.addStats(key, newStat);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validate the Surveys\r\n\t * Returns false if validation fails\r\n\t */\r\n\tpublic validate(): boolean {\r\n\t\treturn Utils.isObject(this.getStats());\r\n\t}\r\n}\r\n\r\nexport class SurveyEventActivityStats implements ISerializable {\r\n\t// The following property names match JSON property names for proper serialization/deserialization\r\n\tpublic ExpirationTimeUtc: Date;\r\n\tpublic Counts: number[];\r\n\r\n\t/**\r\n\t * Method to deserialize a JSON object to class object\r\n\t * @param input: JSON object\r\n\t * Returns result of validation check\r\n\t */\r\n\tpublic deserialize(input: any): boolean {\r\n\t\tthis.ExpirationTimeUtc = input.ExpirationTimeUtc;\r\n\t\tthis.Counts = input.Counts;\r\n\r\n\t\treturn this.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Method to call after deserialization to validate generated object.\r\n\t * Returns false if not valid.\r\n\t */\r\n\tpublic validate(): boolean {\r\n\t\tif (!this.Counts) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.Counts.length; i++) {\r\n\t\t\tconst val: number = this.Counts[i];\r\n\r\n\t\t\tif (!Utils.isNumber(val)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (val < 0) {\r\n\t\t\t\tthis.Counts[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// make it a date object if it's a valid UTC date time value\r\n\t\tif (Utils.isUtcDatetimeString(this.ExpirationTimeUtc)) {\r\n\t\t\tthis.ExpirationTimeUtc = Utils.stringToDate(this.ExpirationTimeUtc);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n","/**\r\n * Localization.ts\r\n *\r\n * Module for Localization\r\n */\r\n\r\n/**\r\n * List of supported Locales\r\n * REMINDER: update readme to match the list below if change is made\r\n */\r\nlet supportedLocales: string[] = [\r\n\t\"af\",\r\n\t\"am\",\r\n\t\"ar\",\r\n\t\"as\",\r\n\t\"az\",\r\n\t\"be\",\r\n\t\"bg\",\r\n\t\"bn-BD\",\r\n\t\"bn-IN\",\r\n\t\"bs\",\r\n\t\"ca\",\r\n\t\"ca-Es-VALENCIA\",\r\n\t\"chr-Cher\",\r\n\t\"cs\",\r\n\t\"cy\",\r\n\t\"da\",\r\n\t\"de\",\r\n\t\"el\",\r\n\t\"en-GB\",\r\n\t\"es\",\r\n\t\"es-MX\",\r\n\t\"et\",\r\n\t\"eu\",\r\n\t\"fa\",\r\n\t\"fi\",\r\n\t\"fil\",\r\n\t\"fr\",\r\n\t\"fr-CA\",\r\n\t\"ga\",\r\n\t\"gd\",\r\n\t\"gl\",\r\n\t\"gu\",\r\n\t\"ha-Latn-NG\",\r\n\t\"he\",\r\n\t\"hi\",\r\n\t\"hr\",\r\n\t\"hu\",\r\n\t\"hy\",\r\n\t\"id\",\r\n\t\"is\",\r\n\t\"it\",\r\n\t\"ja\",\r\n\t\"ka\",\r\n\t\"kk\",\r\n\t\"km-KH\",\r\n\t\"kn\",\r\n\t\"ko\",\r\n\t\"kok\",\r\n\t\"ky\",\r\n\t\"lb\",\r\n\t\"lo\",\r\n\t\"lt\",\r\n\t\"lv\",\r\n\t\"mi\",\r\n\t\"mk\",\r\n\t\"ml\",\r\n\t\"mn\",\r\n\t\"mr\",\r\n\t\"ms\",\r\n\t\"mt\",\r\n\t\"nb-NO\",\r\n\t\"ne\",\r\n\t\"nl\",\r\n\t\"nn-NO\",\r\n\t\"or\",\r\n\t\"pa\",\r\n\t\"pl\",\r\n\t\"prs\",\r\n\t\"pt-BR\",\r\n\t\"pt-PT\",\r\n\t\"quz\",\r\n\t\"ro\",\r\n\t\"ru\",\r\n\t\"sd\",\r\n\t\"si\",\r\n\t\"sk\",\r\n\t\"sl\",\r\n\t\"sq\",\r\n\t\"sr-Cyrl-BA\",\r\n\t\"sr-Cyrl-RS\",\r\n\t\"sr-Latn-RS\",\r\n\t\"sv\",\r\n\t\"sw\",\r\n\t\"ta\",\r\n\t\"te\",\r\n\t\"th\",\r\n\t\"tk\",\r\n\t\"tr\",\r\n\t\"tt\",\r\n\t\"ug\",\r\n\t\"uk\",\r\n\t\"ur\",\r\n\t\"uz-Latn-UZ\",\r\n\t\"vi\",\r\n\t\"zh-Hans\",\r\n\t\"zh-Hant\",\r\n];\r\n\r\nconst localeVariantToSupportedlocaleMap: { [key: string]: string } = {\r\n\t\"ZH-CN\": \"zh-Hans\",\r\n\t\"ZH-HK\": \"zh-Hant\",\r\n\t\"ZH-MO\": \"zh-Hant\",\r\n\t\"ZH-SG\": \"zh-Hans\",\r\n\t\"ZH-TW\": \"zh-Hant\",\r\n};\r\n\r\nexport function validate(locale: string): string {\r\n\tlet localeUpperCase = locale.toLocaleUpperCase();\r\n\r\n\t// support for Chinese ll-cc, VSO Bug 1583389\r\n\tif (localeUpperCase in localeVariantToSupportedlocaleMap) {\r\n\t\treturn localeVariantToSupportedlocaleMap[localeUpperCase];\r\n\t}\r\n\r\n\t// return supported locale if exact match found\r\n\tfor (let supportedLocale of supportedLocales) {\r\n\t\tif (supportedLocale.toUpperCase() === localeUpperCase) {\r\n\t\t\treturn supportedLocale;\r\n\t\t}\r\n\t}\r\n\r\n\tlet localePartOne = localeUpperCase.split(\"-\")[0];\r\n\t// return supported \"ll\" if exact match not found, but \"ll\" matches\r\n\tfor (let supportedLocale of supportedLocales) {\r\n\t\tif (supportedLocale.toUpperCase() === localePartOne) {\r\n\t\t\treturn supportedLocale;\r\n\t\t}\r\n\t}\r\n\r\n\t// default everything else to en\r\n\treturn \"en\";\r\n}\r\n","export * from './annotations';\r\nexport { ItemPathKey, OperationType, IAddOperation, IDeleteOperation, IFocusOperation, IMoveOperation, IOperation, IOperationWithSiblingContext, IPurgeOperation, IUpdateAnnotationMetaDataOperation, IUpdateOperation, IVisibilityOperation, ISignalOperation, Item, ItemPath, ItemWithPath, IItemReference, IItemDelta, ItemOperation, IItemChangesDelta, ItemChanges } from './operations';\r\nexport { ISchemaObject, SchemaObjectHeader } from './schema-object';\r\nexport * from './schema-object-constructor';\r\nexport * from './signals';\r\nexport * from './tiles';\r\nexport * from './generated/annotations.g';\r\nexport * from './generated/operations.g';\r\nexport * from './generated/schema-object.g';\r\nexport * from './generated/signals.g';\r\nexport * from './generated/tiles.g';\r\n","/**\r\n * The main interface to use when instrumenting survey activities in app code\r\n */\r\ninterface IActivityListener {\r\n\t/**\r\n\t * Log an activity to Floodgate, incrementing its occurrence count by the given number if specified,\r\n\t * otherwise incrementing its occurrence count by one as default\r\n\t */\r\n\tlogActivity(activityName: string, increment?: number, context?: IActivityListener.IActivityContext): void;\r\n\r\n\t/**\r\n\t * Start an activity timer (overwriting any previously unclosed start).\r\n\t * NOTE: Does not increment the activity count.\r\n\t */\r\n\tlogActivityStartTime(activityName: string, startTime?: Date): void;\r\n\r\n\t/**\r\n\t * Stop an activity timer and clears the previous start time.\r\n\t * Adds the elapsed seconds between this stop and the previous start into the count for this activity\r\n\t * \\note If no previous start was logged, or start is somehow in the future, results in 0 count increment\r\n\t */\r\n\tlogActivityStopTime(activityName: string, stopTime?: Date): void;\r\n}\r\n\r\nmodule IActivityListener {\r\n\texport interface IActivityContext {\r\n\t\tdata?: unknown;\r\n\t}\r\n\r\n\texport class ActivityName {\r\n\t\tpublic static readonly AppLaunch = \"AppLaunch\";\r\n\t\tpublic static readonly AppUsageTime = \"AppUsageTime\";\r\n\t\tpublic static readonly AppResume = \"AppResume\";\r\n\t}\r\n}\r\n\r\nexport = IActivityListener;\r\n","/**\r\n * Interface for a collection of Floodgate setting names and ids\r\n */\r\ninterface IFloodgateSettingIdMap {\r\n\treadonly [key: string]: number;\r\n}\r\n\r\nmodule IFloodgateSettingIdMap {\r\n\t/**\r\n\t * Collection of setting names and ids\r\n\t */\r\n\texport const RoamingSettingIdMap = {\r\n\t\tCampaignStates: 1258,\r\n\t\tGovernedChannelStates: 1257,\r\n\t\tSurveyActivationStats: 1259,\r\n\t};\r\n}\r\n\r\nexport = IFloodgateSettingIdMap;\r\n","import { IFloodgateEnvironmentProvider } from \"../Api/IFloodgateEnvironmentProvider\";\r\nimport * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport { IDictionary } from \"../Common\";\r\nimport { FloodgateEngine } from \"../FloodgateEngine\";\r\nimport { GovernedChannelType } from \"../GovernedChannel\";\r\nimport { ISurveyClient } from \"../ISurveyClient\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as Utils from \"../Utils\";\r\nimport {\r\n\tCampaignDefinition, CampaignDuration, CampaignDurationSingleBuildChange,\r\n\tCampaignDurationTimeInterval, CampaignScopeEnvironmentCrossProduct, CampaignScopeUserFactAll, CampaignScopeUserFactAny, ICampaignDefinitionProvider,\r\n} from \"./CampaignDefinitionProvider\";\r\nimport { CampaignState, ICampaignStateProvider } from \"./CampaignStateProvider\";\r\nimport { CampaignSurveyFactory } from \"./CampaignSurveyFactory\";\r\n\r\nimport { IUserFact, IUserFactProvider } from \"../Api/Api\";\r\nimport { TelemetryEvent } from \"../Constants\";\r\nimport { BusinessLevel } from \"../ISurveyInfo\";\r\n\r\nconst { getDistantFuture, getDistantPast, isArray, isNOU } = Utils;\r\n\r\n/**\r\n * The CampaignManager is responsible for combining read-only campaign definitions with previously stored campaign state,\r\n * running re-nomination elections, and ultimately generating surveys\r\n */\r\nexport interface ICampaignManager {\r\n\t// Get the list of active surveys targeting this user\r\n\tgetActiveSurveys(): IDictionary<ISurvey>;\r\n\r\n\t// Updates the campaign state based on the fact that the user just took that campaign's survey\r\n\tonCampaignSurveyActivated(campaignId: string, date: Date, isSurveyComplete: boolean): void;\r\n}\r\n\r\n/**\r\n * The standard campaign manager implementation.\r\n */\r\nexport class CampaignManager implements ICampaignManager, ISurveyClient {\r\n\tpublic static isStateUpForNomination(state: CampaignState, definition: CampaignDefinition, date: Date, buildNumber: string): boolean {\r\n\t\tif (!state || !definition) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tdate = date ? date : new Date();\r\n\r\n\t\t// Check manual override\r\n\t\tif (state.ForceCandidacy) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Figure out which duration we're using based on whether or not the user triggered the survey\r\n\t\tconst campaignCooldownDuration: CampaignDuration\r\n\t\t\t= definition.nominationScheme.getCampaignCooldown(state.IsCandidate && state.DidCandidateTriggerSurvey);\r\n\r\n\t\tif (!campaignCooldownDuration) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// First check for build-based rules. Eventually this could get more complex if we supported counting differently seen build numbers\r\n\t\tif (CampaignManager.hasBuildChangeDurationElapsed(campaignCooldownDuration, state.LastNominationBuildNumber, buildNumber)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Next check date rules\r\n\t\treturn CampaignManager.hasTimeIntervalDurationElapsed(campaignCooldownDuration, state.getCooldownStartDate(), date);\r\n\t}\r\n\r\n\tpublic static isDateInRange(date: Date, startDate: Date, endDate: Date): boolean {\r\n\t\tdate = date ? date : new Date();\r\n\t\tstartDate = startDate ? startDate : getDistantPast();\r\n\t\tendDate = endDate ? endDate : getDistantFuture();\r\n\r\n\t\t// Check Start/Expire date range\r\n\t\tif (startDate.getTime() <= date.getTime() && endDate.getTime() >= date.getTime()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic static hasTimeIntervalDurationElapsed(duration: CampaignDuration, startDate: Date, date: Date): boolean {\r\n\t\tif (isNOU(duration) || !(duration instanceof CampaignDurationTimeInterval)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!startDate || !date) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst endDate: Date = Utils.addSecondsWithoutOverflow(startDate, duration.intervalSeconds);\r\n\t\treturn date.getTime() >= endDate.getTime();\r\n\t}\r\n\r\n\tpublic static hasBuildChangeDurationElapsed(duration: CampaignDuration, startBuild: string, build: string): boolean {\r\n\t\tif (isNOU(duration) || !(duration instanceof CampaignDurationSingleBuildChange)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (isNOU(startBuild) || isNOU(build)) {\r\n\t\t\treturn (startBuild === null) !== (build === null);\r\n\t\t}\r\n\r\n\t\treturn !(startBuild === build);\r\n\t}\r\n\r\n\tprivate static isCampaignInScope(\r\n\t\tdefinition: CampaignDefinition,\r\n\t\tdate: Date,\r\n\t\tenvironmentProvider: IFloodgateEnvironmentProvider,\r\n\t\tuserFactsProvider: IUserFactProvider): boolean {\r\n\t\tif (!definition) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tdate = date ? date : new Date();\r\n\r\n\t\t// Check Start/Expire date range\r\n\t\tif (!CampaignManager.isDateInRangeWithDefinition(date, definition)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (definition.scope) {\r\n\t\t\tif (definition.scope instanceof CampaignScopeUserFactAny || definition.scope instanceof CampaignScopeUserFactAll) {\r\n\t\t\t\tdefinition.scope.setUserFactsProvider(userFactsProvider);\r\n\t\t\t}\r\n\t\t\tif (definition.scope instanceof CampaignScopeEnvironmentCrossProduct) {\r\n\t\t\t\tdefinition.scope.setEnvironmentProvider(environmentProvider);\r\n\t\t\t}\r\n\t\t\tif (!definition.scope.isInScope()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If we get here, the definition is relevant\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate static isDateInRangeWithDefinition(date: Date, definition: CampaignDefinition): boolean {\r\n\t\tif (!definition) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tdate = date ? date : new Date();\r\n\r\n\t\treturn CampaignManager.isDateInRange(date,\r\n\t\t\t// null start dates should be impossible, but if set, should mean the campaign is disabled\r\n\t\t\tdefinition.startTime ? definition.startTime : getDistantFuture(),\r\n\t\t\tdefinition.endTime);\r\n\t}\r\n\r\n\tprivate campaignStates: IDictionary<CampaignState>;\r\n\tprivate campaignDefinitions: IDictionary<CampaignDefinition>;\r\n\tprivate userFacts: IUserFact[];\r\n\tprivate currentBuildNumber: string;\r\n\tprivate stateProvider: ICampaignStateProvider;\r\n\tprivate definitionProviders: ICampaignDefinitionProvider[];\r\n\tprivate stringProvider: IFloodgateStringProvider;\r\n\tprivate environmentProvider: IFloodgateEnvironmentProvider;\r\n\tprivate userFactsProvider: IUserFactProvider;\r\n\r\n\tpublic constructor(stateProvider: ICampaignStateProvider,\r\n\t\tdefinitionProviders: ICampaignDefinitionProvider[],\r\n\t\tstringProvider: IFloodgateStringProvider,\r\n\t\tenvironmentProvider: IFloodgateEnvironmentProvider,\r\n\t\tcurrentBuildNumber: string,\r\n\t\tcurrentDate: Date,\r\n\t\tuserFactsProvider?: IUserFactProvider) {\r\n\r\n\t\tif (!stateProvider) {\r\n\t\t\tthrow new Error(\"stateProvider must not be null\");\r\n\t\t}\r\n\r\n\t\tif (!isArray(definitionProviders)) {\r\n\t\t\tthrow new Error(\"definitionProviders is either null or not an array type\");\r\n\t\t}\r\n\r\n\t\tif (!stringProvider) {\r\n\t\t\tthrow new Error(\"stringProvider must not be null\");\r\n\t\t}\r\n\r\n\t\tif (isNOU(currentBuildNumber)) {\r\n\t\t\tthrow new Error(\"currentBuildNumber must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.campaignStates = {};\r\n\t\tthis.campaignDefinitions = {};\r\n\t\tthis.userFacts = [];\r\n\t\tthis.stateProvider = stateProvider;\r\n\t\tthis.definitionProviders = definitionProviders;\r\n\t\tthis.stringProvider = stringProvider;\r\n\t\tthis.userFactsProvider = userFactsProvider;\r\n\t\tthis.environmentProvider = environmentProvider; // Can be null\r\n\t\tthis.currentBuildNumber = currentBuildNumber;\r\n\r\n\t\tcurrentDate = currentDate ? currentDate : new Date();\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getActiveSurveys(): IDictionary<ISurvey> {\r\n\t\tconst surveys: IDictionary<ISurvey> = {};\r\n\t\tconst prioritizedCampaigns = this.getPrioritizedCampaigns();\r\n\r\n\t\tfor (const key in this.campaignStates) {\r\n\t\t\tif (this.campaignStates.hasOwnProperty(key)) {\r\n\t\t\t\tconst state: CampaignState = this.campaignStates[key];\r\n\t\t\t\tif (!state.IsCandidate) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// This is a requirement because we keep some otherwise \"stale\" campaigns around for the save routine\r\n\t\t\t\tconst definition: CampaignDefinition = prioritizedCampaigns[state.CampaignId];\r\n\t\t\t\tif (!definition) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst survey: ISurvey = CampaignSurveyFactory.makeSurvey(state, definition, this.stringProvider);\r\n\t\t\t\tif (!survey) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsurveys[survey.getSurveyInfo().getId()] = survey;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn surveys;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic onCampaignSurveyActivated(campaignId: string, takenDate: Date, isSurveyComplete: boolean): void {\r\n\t\tconst state: CampaignState = this.campaignStates[campaignId];\r\n\t\tif (!state) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttakenDate = takenDate ? takenDate : new Date();\r\n\r\n\t\tconst cooldownSeconds = this.campaignDefinitions[campaignId].nominationScheme.cooldownPeriod.asTimeIntervalSeconds();\r\n\t\tstate.markCurrentSurveyTakenOnDate(takenDate, cooldownSeconds, isSurveyComplete);\r\n\r\n\t\tthis.saveCurrentState();\r\n\t}\r\n\r\n\tpublic getCampaignStates(): IDictionary<CampaignState> {\r\n\t\treturn this.campaignStates;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCampaignDefinitions(): IDictionary<CampaignDefinition> {\r\n\t\treturn this.campaignDefinitions;\r\n\t}\r\n\r\n\tpublic getUserFacts(): IUserFact[] {\r\n\t\treturn this.userFacts;\r\n\t}\r\n\r\n\t// region ISurveyClient methods\r\n\r\n\t// @Override\r\n\tpublic onSurveyActivated(surveyInfo: ISurveyInfo, isSurveyComplete: boolean): void {\r\n\t\tif (!surveyInfo) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.onCampaignSurveyActivated(surveyInfo.getBackEndId(), new Date(), isSurveyComplete);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic refreshSurveyDefinitions(channelTypes?: GovernedChannelType[], date?: Date): void {\r\n\t\tthis.refreshSurveyDefinitionsPrivate(channelTypes, (date ? date : new Date()));\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic refreshSurveyDefinitionsAsync(channelTypes?: GovernedChannelType[], date?: Date): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.refreshSurveyDefinitionsPrivateAsync(channelTypes, (date ? date : new Date())).then(\r\n\t\t\t\tfunction onFulfilled() {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t},\r\n\t\t\t).catch(\r\n\t\t\t\tfunction OnRejected(errReason) {\r\n\t\t\t\t\treject(errReason);\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getAppSurveys(): { [id: string]: ISurvey } {\r\n\t\treturn this.getActiveSurveys();\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic saveCurrentState(): void {\r\n\t\t// Sort by campaignId, ascending for uniformity\r\n\t\tconst states: CampaignState[] = Utils.makeArrayFromObjectValuesSortedByKeyString(this.campaignStates);\r\n\r\n\t\tthis.stateProvider.save(states);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\tprivate refreshSurveyDefinitionsPrivate(channelTypes: GovernedChannelType[], date: Date): void {\r\n\t\tthis.campaignStates = {};\r\n\t\tthis.campaignDefinitions = {};\r\n\t\tthis.userFacts = [];\r\n\r\n\t\tthis.loadAndFilterCampaignData(date, channelTypes);\r\n\t\tthis.evaluateCampaigns(date);\r\n\t}\r\n\r\n\tprivate refreshSurveyDefinitionsPrivateAsync(channelTypes: GovernedChannelType[], date: Date): Promise<void> {\r\n\t\tthis.campaignStates = {};\r\n\t\tthis.campaignDefinitions = {};\r\n\t\tthis.userFacts = [];\r\n\r\n\t\tconst thisCampaignManager = this;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthisCampaignManager.loadAndFilterCampaignDataAsync(date, channelTypes).then(\r\n\t\t\t\tfunction onFulfilled() {\r\n\t\t\t\t\tthisCampaignManager.evaluateCampaigns(date);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t},\r\n\t\t\t).catch(\r\n\t\t\t\tfunction OnRejected(errReason) {\r\n\t\t\t\t\treject(errReason);\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Load and filter the campaigns definitions and states\r\n\t */\r\n\tprivate loadAndFilterCampaignDataAsync(currentDate: Date, channelTypes: GovernedChannelType[]): Promise<void> {\r\n\t\tcurrentDate = currentDate ? currentDate : new Date();\r\n\t\tlet loadedDefinitions: CampaignDefinition[] = [];\r\n\t\tconst promises = [];\r\n\r\n\t\tconst userFactsPromise = this.userFactsProvider && this.userFactsProvider.loadAsync() as Promise<IUserFact[]>;\r\n\r\n\t\tfor (const i of Object.keys(this.definitionProviders)) {\r\n\t\t\tconst provider = this.definitionProviders[i];\r\n\t\t\tlet promise: any = provider && provider.loadAsync();\r\n\t\t\tif (!isNOU(promise)) {\r\n\t\t\t\t// Promise.all fails even if one promise fails.\r\n\t\t\t\t// We want to ignore the promise that failed and continue with the ones\r\n\t\t\t\t// those are succesful, hence overriding the catch to always resolve.\r\n\t\t\t\t// responsibility of logging failures should be with the provider.\r\n\t\t\t\tpromise = promise.catch(() => {\r\n\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider\");\r\n\t\t\t\t\tPromise.resolve();\r\n\t\t\t\t});\r\n\t\t\t\tpromises.push(promise);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst thisCampaignManager = this;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tPromise.all(promises).then(\r\n\t\t\t\tfunction onFulfilled(values) {\r\n\t\t\t\t\tfor (const i of Object.keys(values)) {\r\n\t\t\t\t\t\tconst campaignDefinitions = values[i];\r\n\t\t\t\t\t\tif (isArray(campaignDefinitions)) {\r\n\t\t\t\t\t\t\t// If there are campaign defintions with duplicate campaign Id's\r\n\t\t\t\t\t\t\t// Floodgate will load the last one it found. FilterCampaignData does this filteration\r\n\t\t\t\t\t\t\tloadedDefinitions = loadedDefinitions.concat(campaignDefinitions);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst setUserFacts = (userFacts?: IUserFact[]) => {\r\n\t\t\t\t\t\tthisCampaignManager.userFacts = userFacts || [];\r\n\t\t\t\t\t\tthisCampaignManager.FilterCampaignData(currentDate, channelTypes, loadedDefinitions);\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Before filtering and evaluating the campaign definitions,\r\n\t\t\t\t\t// wait until the user facts are loaded as they will be used in evaluating campaign scopes\r\n\t\t\t\t\tif (!isNOU(userFactsPromise)) {\r\n\t\t\t\t\t\tuserFactsPromise.then((userFacts: IUserFact[]) => {\r\n\t\t\t\t\t\t\tsetUserFacts(userFacts);\r\n\t\t\t\t\t\t}).catch(() => {\r\n\t\t\t\t\t\t\t// this should never happen as user facts promise will always be resolved by the user facts provider\r\n\t\t\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(TelemetryEvent.Floodgate.UserFactsLoad.Failed, \"Failed to load from user facts provider\");\r\n\t\t\t\t\t\t\tsetUserFacts();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetUserFacts();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t).catch(\r\n\t\t\t\tfunction OnRejected(error) {\r\n\t\t\t\t\t// this should never happen as Promise.all will always be resolved\r\n\t\t\t\t\t// because of hack at the top of the function.\r\n\t\t\t\t\tFloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider\");\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate loadAndFilterCampaignData(currentDate: Date, channelTypes: GovernedChannelType[]): void {\r\n\t\tcurrentDate = currentDate ? currentDate : new Date();\r\n\t\tlet loadedDefinitions: CampaignDefinition[] = [];\r\n\r\n\t\tfor (const index of Object.keys(this.definitionProviders)) {\r\n\t\t\ttry {\r\n\t\t\t\tconst definitions = this.definitionProviders[index] && this.definitionProviders[index].load();\r\n\t\t\t\tif (isArray(definitions)) {\r\n\t\t\t\t\t// If there are campaign defintions with duplicate campaign Id's\r\n\t\t\t\t\t// Floodgate will load the last one it found. FilterCampaignData does this filteration\r\n\t\t\t\t\tloadedDefinitions = loadedDefinitions.concat(definitions);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// Log error, but continue with other providers\r\n\t\t\t\t// It should be the responsibility of provider to log detailed errors\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_CampaignLoad_Failed(\"Failed to load from campaign definition provider. \" + error.toString());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Load the user facts before all the campaign definitions are evaluated\r\n\t\ttry {\r\n\t\t\tthis.userFacts = (this.userFactsProvider && this.userFactsProvider.load()) || [];\r\n\t\t} catch (error) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsLoad.Failed, \"Failed to load from user facts provider. \" + error);\r\n\t\t}\r\n\r\n\t\tthis.FilterCampaignData(currentDate, channelTypes, loadedDefinitions);\r\n\t}\r\n\r\n\t/**\r\n\t * Load and filter the campaigns definitions and states\r\n\t */\r\n\tprivate FilterCampaignData(currentDate: Date, channelTypes: GovernedChannelType[], loadedDefinitions: CampaignDefinition[]): void {\r\n\t\tconst loadedDefinitionsMap: IDictionary<CampaignDefinition> = {};\r\n\r\n\t\t// Load filtered campaign definitions\r\n\t\tfor (const key in loadedDefinitions) {\r\n\t\t\tif (loadedDefinitions.hasOwnProperty(key)) {\r\n\t\t\t\tconst definition: CampaignDefinition = loadedDefinitions[key];\r\n\r\n\t\t\t\tloadedDefinitionsMap[definition.campaignId] = definition;\r\n\r\n\t\t\t\tif (channelTypes &&\r\n\t\t\t\t\t(channelTypes.indexOf(definition.governedChannelType) < 0) &&\r\n\t\t\t\t\t(definition.businessLevel !== BusinessLevel.Critical)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!CampaignManager.isCampaignInScope(definition, currentDate, this.environmentProvider, this.userFactsProvider)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.campaignDefinitions[definition.campaignId] = definition;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Load campaign state, filtering out the expired definitions\r\n\t\tconst loadedStates: CampaignState[] = this.stateProvider.load();\r\n\t\tconst staleLoadedStates: CampaignState[] = [];\r\n\r\n\t\tfor (const key in loadedStates) {\r\n\t\t\tif (loadedStates.hasOwnProperty(key)) {\r\n\t\t\t\tconst state: CampaignState = loadedStates[key];\r\n\r\n\t\t\t\tif (!this.campaignDefinitions.hasOwnProperty(state.CampaignId)) {\r\n\t\t\t\t\tstaleLoadedStates.push(state);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.campaignStates[state.CampaignId] = state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Stale State data cleanup\r\n\t\t * State needs to be cleaned up when:\r\n\t\t * 1) The campaign has expired\r\n\t\t * 2) The campaign is no longer present in the definitions (think ECS or other outages or very old expirations)\r\n\t\t *    In this case the state should still be cleaned up on it's reelection date\r\n\t\t * 3) When the user is out of scope (for an otherwise active campaign) and is up for nomination\r\n\r\n\t\t * This optimizes the user experience in case the campaign pops up or gets renewed when we would have preferred the user remain in cool down\r\n\r\n\t\t * 2&3 are basically the same, and 1 is a special case optimization on top of 2&3 for earlier clean up\r\n\r\n\t\t * To do 2 & 3, we just look at states with no matching definition (after filtering), and reject them if they are past their nomination period\r\n\t\t * To do 1, we just need to keep a list/hash of the definitions that we filtered out this load cycle, specifically for expiration dates, and bypass\r\n\t\t * the cool down \"wait\" for these specifically\r\n\r\n\t\t * For now, allowing some \"grace\" for \"missing\"/\"blippy\" campaign definitions (in case they pop in and out of ECS) by deferring missing\r\n\t\t * deletion by a delay-time specified by the original campaign.\r\n\t\t */\r\n\t\tfor (const key in staleLoadedStates) {\r\n\t\t\tif (staleLoadedStates.hasOwnProperty(key)) {\r\n\t\t\t\tconst state: CampaignState = staleLoadedStates[key];\r\n\t\t\t\tif (!state) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst definition: CampaignDefinition = loadedDefinitionsMap[state.CampaignId];\r\n\t\t\t\tlet shouldRemove = false;\r\n\r\n\t\t\t\tif (!definition) {\r\n\t\t\t\t\tif (state.LastNominationTimeUtc.getTime() <= Utils.subtractSecondsWithoutOverflow(currentDate, state.DeleteAfterSecondsWhenStale).getTime()) {\r\n\t\t\t\t\t\tshouldRemove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (CampaignManager.isStateUpForNomination(state, definition, currentDate, this.currentBuildNumber)) {\r\n\t\t\t\t\tshouldRemove = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// The next time we write to storage, these will be removed\r\n\t\t\t\tif (shouldRemove) {\r\n\t\t\t\t\tdelete this.campaignStates[state.CampaignId];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Filter lower priority campaigns that are on same channel and have a matching tag\r\n\tprivate getPrioritizedCampaigns() {\r\n\t\tconst prioritizedCampaigns: IDictionary<CampaignDefinition> = {};\r\n\r\n\t\t// build <tagId_channel, campaign[]> map\r\n\t\tconst matchingTagCampaigns: IDictionary<CampaignDefinition[]> = {};\r\n\t\tObject.keys(this.campaignDefinitions || []).forEach((key) => {\r\n\t\t\tconst definition: CampaignDefinition = this.campaignDefinitions[key];\r\n\t\t\tprioritizedCampaigns[key] = definition;\r\n\r\n\t\t\t// if tags are not defined, use empty tag to fallback to channel level aggregation\r\n\t\t\tconst definitionTags = definition.tags && definition.tags.length > 0 ? definition.tags : [\"\"];\r\n\t\t\tdefinitionTags.forEach((tagId) => {\r\n\t\t\t\tconst mapKey = `${tagId}_${definition.governedChannelType}`;\r\n\t\t\t\tmatchingTagCampaigns[mapKey] = matchingTagCampaigns[mapKey] || [];\r\n\t\t\t\tmatchingTagCampaigns[mapKey].push(definition);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// remove lower priority campaigns\r\n\t\tObject.keys(matchingTagCampaigns).forEach((key) => {\r\n\t\t\tconst definitions = matchingTagCampaigns[key];\r\n\t\t\tif (definitions.length <= 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get definition that has max priority value (0/null/undefined has highest prioirty)\r\n\t\t\tconst maxPriorityDefinition = definitions.reduce((prev, cur) => {\r\n\t\t\t\tconst curPriority = cur.primaryPriority || 0;\r\n\t\t\t\tconst prevPriority = prev.primaryPriority || 0;\r\n\r\n\t\t\t\treturn curPriority < prevPriority ? cur : prev;\r\n\t\t\t}, definitions[0]);\r\n\r\n\t\t\tconst maxPriority = maxPriorityDefinition.primaryPriority;\r\n\t\t\tif (isNOU(maxPriority)) {\r\n\t\t\t\t// nothing to filter because all priorities are null/undefined\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// delete lower priority campaigns while preserving all the matching higher priority items\r\n\t\t\tdefinitions.forEach((current) => {\r\n\t\t\t\tconst currentPriority = current.primaryPriority;\r\n\r\n\t\t\t\t// for mso compatability ignore campaigns without priority set so that they are always considered\r\n\t\t\t\tif (!isNOU(current.primaryPriority) && currentPriority > maxPriority) {\r\n\t\t\t\t\tdelete prioritizedCampaigns[current.campaignId];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn prioritizedCampaigns;\r\n\t}\r\n\r\n\t/**\r\n\t * Given the loaded campaign definitions and states from previous sessions, run anything up for nomination\r\n\t */\r\n\tprivate evaluateCampaigns(currentDate: Date): void {\r\n\t\t// Loop through campaigns definitions, and update their state if necessary\r\n\t\tcurrentDate = currentDate ? currentDate : new Date();\r\n\r\n\t\tfor (const key in this.campaignDefinitions) {\r\n\t\t\tif (this.campaignDefinitions.hasOwnProperty(key)) {\r\n\t\t\t\tconst definition: CampaignDefinition = this.campaignDefinitions[key];\r\n\t\t\t\tconst state: CampaignState = this.campaignStates[definition.campaignId];\r\n\r\n\t\t\t\tif (!state || CampaignManager.isStateUpForNomination(state, definition, currentDate, this.currentBuildNumber)) {\r\n\t\t\t\t\tlet lastSurveyId: string = state ? state.LastSurveyId : \"\";\r\n\t\t\t\t\tlet lastSurveyStartTime: Date = state ? state.LastSurveyStartTimeUtc : getDistantPast();\r\n\t\t\t\t\tlet lastSurveyExpirationTime: Date = state ? state.LastSurveyExpirationTimeUtc : getDistantPast();\r\n\t\t\t\t\tconst lastSurveyActivatedTime: Date = state ? state.LastSurveyActivatedTimeUtc : getDistantPast();\r\n\t\t\t\t\tconst lastCooldownEndTimeUtc: Date = state ? state.LastCooldownEndTimeUtc : getDistantPast();\r\n\r\n\t\t\t\t\t// Run the nomination\r\n\t\t\t\t\tconst isCandidate: boolean = (state && state.ForceCandidacy) || definition.nominationScheme.evaluateNominationRules();\r\n\t\t\t\t\tif (isCandidate) {\r\n\t\t\t\t\t\t// Make new survey properties for the next call to get the active surveys\r\n\t\t\t\t\t\tlastSurveyId = Utils.guid();\r\n\t\t\t\t\t\tlastSurveyStartTime = definition.nominationScheme.calculateSurveyStartTimeFromDate(currentDate);\r\n\t\t\t\t\t\tlastSurveyExpirationTime = definition.nominationScheme.calculateSurveyExpirationTimeFromSurveyStartTime(lastSurveyStartTime);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst newState: CampaignState = new CampaignState(\r\n\t\t\t\t\t\tdefinition.campaignId,\r\n\t\t\t\t\t\tcurrentDate,\r\n\t\t\t\t\t\tthis.currentBuildNumber,\r\n\t\t\t\t\t\tdefinition.nominationScheme.getActiveSurveyTimeIntervalSeconds(),\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\tisCandidate,\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\tlastSurveyActivatedTime,\r\n\t\t\t\t\t\tlastSurveyId,\r\n\t\t\t\t\t\tlastSurveyStartTime,\r\n\t\t\t\t\t\tlastSurveyExpirationTime,\r\n\t\t\t\t\t\tlastCooldownEndTimeUtc,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Save the new state to our local cache\r\n\t\t\t\t\tthis.campaignStates[newState.CampaignId] = newState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport { GovernedChannelType } from \"../GovernedChannel\";\r\nimport * as ISurveyEvent from \"../ISurveyEvent\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport { ISurveyMetadata } from \"../ISurveyMetadata\";\r\nimport {\r\n\tCountedActivityEvent, CountedActivityEventData, CountedActivitySequenceEvent, CountedActivitySequenceEventData,\r\n\tICountedActivityEvent, ICountedActivitySequenceEvent,\r\n} from \"../SurveyEvents\";\r\nimport { Metadata, SurveyMetadata } from \"../SurveyMetadata\";\r\nimport * as FpsSurvey from \"../Surveys/FpsSurvey\";\r\nimport * as GenericMessagingSurfaceSurvey from \"../Surveys/GenericMessagingSurfaceSurvey\";\r\nimport * as InterceptSurvey from \"../Surveys/InterceptSurvey\";\r\nimport * as NlqsSurvey from \"../Surveys/NlqsSurvey\";\r\nimport * as NpsSurvey from \"../Surveys/NpsSurvey\";\r\nimport * as SurveyDataSource from \"../Surveys/SurveyDataSource\";\r\nimport * as Utils from \"../Utils\";\r\nimport {\r\n\tCampaignDefinition,\r\n\tCampaignSurveyEvent, CampaignSurveyEventCountedActivity, CampaignSurveyEventCountedActivitySequence, CampaignSurveyMetadata,\r\n\tCampaignSurveyTemplate, CampaignSurveyTemplateFps, CampaignSurveyTemplateGenericMessagingSurface, CampaignSurveyTemplateIntercept,\r\n\tCampaignSurveyTemplateNlqs, CampaignSurveyTemplateNps, CampaignSurveyTemplateNps11PointStatic, CampaignSurveyTemplateNps5PointStatic,\r\n} from \"./CampaignDefinitionProvider\";\r\nimport { CampaignState } from \"./CampaignStateProvider\";\r\n\r\nconst { dateToShortUtcString, isNOU } = Utils;\r\n\r\n/**\r\n * Contains methods to take a campaign definition + state and generate an ISurvey\r\n */\r\nexport class CampaignSurveyFactory {\r\n\tpublic static makeSurvey(state: CampaignState, definition: CampaignDefinition, stringProvider: IFloodgateStringProvider): ISurvey {\r\n\t\tif (!state || !definition || !definition.surveyTemplate || !stringProvider) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst surveyDataSource = CampaignSurveyFactory.makeSurveyDataSourceData(state, definition);\r\n\t\tconst surveyModel = definition.surveyTemplate;\r\n\t\tif (surveyModel instanceof CampaignSurveyTemplateNps5PointStatic) {\r\n\t\t\treturn NpsSurvey.make5Point(surveyDataSource, stringProvider);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateNps11PointStatic) {\r\n\t\t\treturn NpsSurvey.make11Point(surveyDataSource, stringProvider);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateFps) {\r\n\t\t\treturn FpsSurvey.makeFps(surveyDataSource, stringProvider, surveyModel);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateNlqs) {\r\n\t\t\treturn NlqsSurvey.makeNlqs(surveyDataSource, stringProvider, surveyModel);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateNps) {\r\n\t\t\treturn NpsSurvey.makeCustom(surveyDataSource, stringProvider, surveyModel);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateGenericMessagingSurface) {\r\n\t\t\treturn GenericMessagingSurfaceSurvey.makeCustom(surveyDataSource);\r\n\t\t} else if (surveyModel instanceof CampaignSurveyTemplateIntercept) {\r\n\t\t\treturn InterceptSurvey.makeIntercept(surveyDataSource, stringProvider, surveyModel);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static makeSurveyDataSourceData(state: CampaignState, definition: CampaignDefinition): SurveyDataSource.SurveyDataSourceData {\r\n\t\tif (!state || !definition || !definition.surveyTemplate) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst surveyModel = definition.surveyTemplate;\r\n\t\tconst surveyData = new SurveyDataSource.SurveyDataSourceData();\r\n\t\tsurveyData.activationEvent = CampaignSurveyFactory.makeEvent(state, surveyModel.activationEvent);\r\n\t\tsurveyData.metadata = CampaignSurveyFactory.makeMetadata(surveyModel.metadata);\r\n\t\tsurveyData.id = state.LastSurveyId;\r\n\t\tsurveyData.backEndIdentifier = state.CampaignId;\r\n\t\tsurveyData.expirationTimeUtc = dateToShortUtcString(state.LastSurveyExpirationTimeUtc);\r\n\t\tsurveyData.governedChannelType = definition.governedChannelType;\r\n\t\tsurveyData.startTimeUtc = dateToShortUtcString(state.LastSurveyStartTimeUtc);\r\n\t\tsurveyData.additionalDataRequested = definition.additionalDataRequested  || [];\r\n\t\tsurveyData.launcherType = definition.launcherType || ISurvey.LAUNCHER_TYPE_DEFAULT;\r\n\t\tsurveyData.preferredLaunchType = definition.surveyTemplate.preferredLaunchType || ISurveyInfo.LaunchType.Default;\r\n\t\tsurveyData.businessLevel = definition.businessLevel;\r\n\r\n\t\tif (!isNOU(surveyModel.maxLaunches)) {\r\n\t\t\tsurveyData.maxLaunches = surveyModel.maxLaunches;\r\n\t\t}\r\n\r\n\t\tif (!isNOU(surveyModel.maxLaunchesPerSession)) {\r\n\t\t\tsurveyData.maxLaunchesPerSession = surveyModel.maxLaunchesPerSession;\r\n\t\t}\r\n\r\n\t\treturn surveyData;\r\n\t}\r\n\r\n\tprivate static makeCountedActivityEventData(eventModel: CampaignSurveyEventCountedActivity): CountedActivityEventData {\r\n\t\tif (!eventModel) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst eventData = new CountedActivityEventData();\r\n\t\teventData.activity = eventModel.activity;\r\n\t\teventData.count = eventModel.count;\r\n\t\teventData.isAggregate = eventModel.isAggregate;\r\n\r\n\t\treturn eventData;\r\n\t}\r\n\r\n\tprivate static makeCountedActivityEvent(state: CampaignState, eventModel: CampaignSurveyEventCountedActivity): ICountedActivityEvent {\r\n\t\tif (!state || !eventModel) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst eventData: CountedActivityEventData = CampaignSurveyFactory.makeCountedActivityEventData(eventModel);\r\n\t\tif (!eventData) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn new CountedActivityEvent(eventData);\r\n\t}\r\n\r\n\tprivate static makeCountedActivitySequenceEvent(state: CampaignState,\r\n\t\teventModel: CampaignSurveyEventCountedActivitySequence): ICountedActivitySequenceEvent {\r\n\r\n\t\tif (!state || !eventModel) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst sequenceEventData = new CountedActivitySequenceEventData();\r\n\t\tsequenceEventData.sequence = [];\r\n\r\n\t\tfor (const event of eventModel.sequence) {\r\n\t\t\tconst eventData: CountedActivityEventData = CampaignSurveyFactory.makeCountedActivityEventData(event);\r\n\t\t\tif (!eventData) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tsequenceEventData.sequence.push(eventData);\r\n\t\t}\r\n\r\n\t\treturn new CountedActivitySequenceEvent(sequenceEventData);\r\n\t}\r\n\r\n\tprivate static makeEvent(state: CampaignState, eventModel: CampaignSurveyEvent): ISurveyEvent {\r\n\t\tif (eventModel instanceof CampaignSurveyEventCountedActivity) {\r\n\t\t\treturn CampaignSurveyFactory.makeCountedActivityEvent(state, eventModel as CampaignSurveyEventCountedActivity);\r\n\t\t} else if (eventModel instanceof CampaignSurveyEventCountedActivitySequence) {\r\n\t\t\treturn CampaignSurveyFactory.makeCountedActivitySequenceEvent(state, eventModel as CampaignSurveyEventCountedActivitySequence);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static makeMetadata(metadataModel: CampaignSurveyMetadata): ISurveyMetadata {\r\n\t\tif (isNOU(metadataModel) || isNOU(metadataModel.contentMetadata)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst metadata = new Metadata();\r\n\t\tmetadata.contentMetadata = metadataModel.contentMetadata;\r\n\r\n\t\treturn new SurveyMetadata(metadata);\r\n\t}\r\n}\r\n","import { ActivityTrackingData } from \"./ActivityTrackingData\";\r\nimport { ActivityTrackingSet } from \"./ActivityTrackingSet\";\r\nimport * as ISurveyEvent from \"./ISurveyEvent\";\r\n\r\n/**\r\n * A SurveyEvent that counts occurrences of a literal string logged by the product.\r\n * Survey is activated once the activity occurs Count times.\r\n */\r\nexport interface ICountedActivityEvent extends ISurveyEvent {\r\n\t/**\r\n\t * Name of the activity to listen for\r\n\t */\r\n\tgetActivity(): string;\r\n\r\n\t/**\r\n\t * Number of times the named activity must be logged to activate\r\n\t */\r\n\tgetCount(): number;\r\n\r\n\t/**\r\n\t * Whether or not the count should be persisted across app sessions\r\n\t */\r\n\tisAggregate(): boolean;\r\n}\r\n\r\nexport interface ICountedActivitySequenceEvent extends ISurveyEvent {\r\n\tgetSequence(): ICountedActivityEvent[];\r\n}\r\n\r\nexport class CountedActivityEvent implements ICountedActivityEvent {\r\n\tpublic static make(data: CountedActivityEventData): ICountedActivityEvent {\r\n\t\ttry {\r\n\t\t\treturn new CountedActivityEvent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: CountedActivityEventData;\r\n\r\n\tpublic constructor(data: CountedActivityEventData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (data.count <= 0) {\r\n\t\t\tthrow new Error(\"count must be greater than 0\");\r\n\t\t}\r\n\t\tif (!data.activity || data.activity.length === 0) {\r\n\t\t\tthrow new Error(\"activity must not be null or an empty string\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tpublic getActivity(): string {\r\n\t\treturn this.data.activity;\r\n\t}\r\n\r\n\tpublic getCount(): number {\r\n\t\treturn this.data.count;\r\n\t}\r\n\r\n\tpublic isAggregate(): boolean {\r\n\t\treturn this.data.isAggregate;\r\n\t}\r\n\r\n\tpublic getType(): ISurveyEvent.Type {\r\n\t\treturn ISurveyEvent.Type.CountedActivity;\r\n\t}\r\n\r\n\tpublic getTrackingSet(): ActivityTrackingSet {\r\n\t\tconst trackingDataList = new Array<ActivityTrackingData>();\r\n\t\ttrackingDataList.push(new ActivityTrackingData(this.data.activity, this.data.count, this.data.isAggregate));\r\n\t\treturn new ActivityTrackingSet(false, trackingDataList);\r\n\t}\r\n}\r\n\r\n/**\r\n * Data class for serialization and deserialization. Do not add logic in here.\r\n */\r\nexport class CountedActivityEventData {\r\n\tpublic activity: string;\r\n\tpublic count: number;\r\n\tpublic isAggregate: boolean;\r\n}\r\n\r\nexport class CountedActivitySequenceEvent implements ICountedActivitySequenceEvent {\r\n\tpublic static make(data: CountedActivitySequenceEventData): ICountedActivitySequenceEvent {\r\n\t\ttry {\r\n\t\t\treturn new CountedActivitySequenceEvent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: ICountedActivityEvent[];\r\n\r\n\tpublic constructor(data: CountedActivitySequenceEventData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.sequence) {\r\n\t\t\tthrow new Error(\"data.sequence must not be null\");\r\n\t\t}\r\n\t\tif (data.sequence.length === 0) {\r\n\t\t\tthrow new Error(\"data.sequence size must be greater than 0\");\r\n\t\t}\r\n\r\n\t\tthis.data = [];\r\n\t\tfor (const countedActivityEventData of data.sequence) {\r\n\t\t\tthis.data.push(new CountedActivityEvent(countedActivityEventData));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSequence(): ICountedActivityEvent[] {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\tpublic getType(): ISurveyEvent.Type {\r\n\t\treturn ISurveyEvent.Type.CountedActivitySequence;\r\n\t}\r\n\r\n\tpublic getTrackingSet(): ActivityTrackingSet {\r\n\t\tconst trackingDataList = new Array<ActivityTrackingData>();\r\n\r\n\t\tfor (const countedActivityEvent of this.data) {\r\n\t\t\ttrackingDataList.push(new ActivityTrackingData(countedActivityEvent.getActivity(), countedActivityEvent.getCount(),\r\n\t\t\t\tcountedActivityEvent.isAggregate()));\r\n\t\t}\r\n\r\n\t\treturn new ActivityTrackingSet(true, trackingDataList);\r\n\t}\r\n}\r\n\r\n/**\r\n * Data class for serialization and deserialization. Do not add logic in here.\r\n */\r\nexport class CountedActivitySequenceEventData {\r\n\tpublic sequence: CountedActivityEventData[];\r\n\r\n\t/**\r\n\t * No args constructor needed for serialization.\r\n\t */\r\n\tpublic CountedActivitySequenceEventData() {\r\n\t}\r\n}\r\n","/**\r\n * Basic structure used to configure an ActivityTracker\r\n */\r\nexport class ActivityTrackingData {\r\n\tprivate activity: string;\r\n\tprivate count: number;\r\n\tprivate isAggregate: boolean;\r\n\r\n\tpublic constructor(activity: string, count: number, isAggregate: boolean) {\r\n\t\tthis.activity = activity;\r\n\t\tthis.count = count;\r\n\t\tthis.isAggregate = isAggregate;\r\n\t}\r\n\r\n\tpublic getActivity(): string {\r\n\t\treturn this.activity;\r\n\t}\r\n\r\n\tpublic getCount(): number {\r\n\t\treturn this.count;\r\n\t}\r\n\r\n\tpublic setCount(count: number): void {\r\n\t\tthis.count = count;\r\n\t}\r\n\r\n\tpublic getIsAggregate(): boolean {\r\n\t\treturn this.isAggregate;\r\n\t}\r\n}\r\n","import { ActivityTrackingData } from \"./ActivityTrackingData\";\r\nimport SurveyActivityListener = require(\"./SurveyActivityListener\");\r\nimport { isNOU } from \"./Utils\";\r\n\r\n/**\r\n * Class to hold a collection of Activity Tracking Data\r\n */\r\nexport class ActivityTrackingSet {\r\n\tprivate isOrdered: boolean;\r\n\tprivate list: ActivityTrackingData[];\r\n\r\n\tpublic constructor(isOrdered: boolean, list: ActivityTrackingData[]) {\r\n\t\tthis.isOrdered = isOrdered;\r\n\t\tthis.list = list;\r\n\t}\r\n\r\n\tpublic getIsOrdered(): boolean {\r\n\t\treturn this.isOrdered;\r\n\t}\r\n\r\n\tpublic getList(): ActivityTrackingData[] {\r\n\t\treturn this.list;\r\n\t}\r\n\r\n\t// returns a stringified json with the list and isOrdered info.\r\n\tpublic getActivityTrackingInfo(activityListener: SurveyActivityListener, surveyId: string): string {\r\n\r\n\t\tlet activitiesInfoObject: {\r\n\t\t\tActivities: Array<{ Activity: string, Count: number, IsAggregate: boolean }>,\r\n\t\t\tIsListOrdered: boolean,\r\n\t\t};\r\n\r\n\t\tif (this.list.length === 0) {\r\n\t\t\tactivitiesInfoObject = {\r\n\t\t\t\tActivities: [],\r\n\t\t\t\tIsListOrdered: this.isOrdered,\r\n\t\t\t};\r\n\r\n\t\t\treturn JSON.stringify(activitiesInfoObject);\r\n\t\t}\r\n\r\n\t\tfor (const trackingData of this.list) {\r\n\r\n\t\t\tconst actualCount = activityListener.getCount(trackingData.getActivity(), surveyId);\r\n\t\t\tconst tempActivities = {\r\n\t\t\t\t\t\tActivity: trackingData.getActivity(),\r\n\t\t\t\t\t\tActualCount: actualCount,\r\n\t\t\t\t\t\tCount: trackingData.getCount(),\r\n\t\t\t\t\t\tIsAggregate: trackingData.getIsAggregate(),\r\n\t\t\t\t\t\tIsDiscrete: actualCount % 1 === 0,\r\n\t\t\t\t\t};\r\n\r\n\t\t\tif (isNOU(activitiesInfoObject)) {\r\n\t\t\t\tactivitiesInfoObject = {\r\n\t\t\t\t\t\t\t\tActivities: [tempActivities],\r\n\t\t\t\t\t\t\t\tIsListOrdered: this.isOrdered,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tactivitiesInfoObject.Activities.push(tempActivities);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(activitiesInfoObject);\r\n\t}\r\n}\r\n","import { ISurveyMetadata } from \"./ISurveyMetadata\";\r\nimport * as Utils from \"./Utils\";\r\n\r\nexport class SurveyMetadata implements ISurveyMetadata {\r\n\tpublic static make(data: Metadata): ISurveyMetadata {\r\n\t\ttry {\r\n\t\t\treturn new SurveyMetadata(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: Metadata;\r\n\r\n\tpublic constructor(data: Metadata) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.contentMetadata) {\r\n\t\t\tthrow new Error(\"content metadata must not be null\");\r\n\t\t}\r\n\t\tif (!Utils.isObject(data.contentMetadata)) {\r\n\t\t\tthrow new Error(\"content metadata must be of object type\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tpublic getContentMetadata(): object {\r\n\t\treturn this.data.contentMetadata;\r\n\t}\r\n}\r\n\r\n/**\r\n * Data class for serialization and deserialization. Do not add logic in here.\r\n */\r\nexport class Metadata {\r\n\tpublic contentMetadata: object;\r\n}\r\n","import * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport { IFpsSurvey } from \"../Api/IFpsSurvey\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { CampaignSurveyContent, CampaignSurveyTemplate } from \"../Campaign/CampaignDefinitionProvider\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as CommentComponent from \"../SurveyComponents/CommentComponent\";\r\nimport * as CVSurveyComponent from \"../SurveyComponents/CVSurveyComponent\";\r\nimport * as MultipleChoiceComponent from \"../SurveyComponents/MultipleChoiceComponent\";\r\nimport * as PromptComponent from \"../SurveyComponents/PromptComponent\";\r\nimport * as RatingComponent from \"../SurveyComponents/RatingComponent\";\r\nimport * as Utils from \"../Utils\";\r\nimport { Survey } from \"./Survey\";\r\nimport * as SurveyDataSource from \"./SurveyDataSource\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nclass FpsSurvey extends Survey implements IFpsSurvey {\r\n\tpublic static make(data: FpsSurvey.FpsSurveyData): IFpsSurvey {\r\n\t\ttry {\r\n\t\t\treturn new FpsSurvey(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeFps(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider,\r\n\t\tsurveyModel: CampaignSurveyTemplate): IFpsSurvey {\r\n\r\n\t\tif (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst ratingValuesAscending: string[] = [];\r\n\t\tconst availableOptions: string[] = [];\r\n\t\tconst content: CampaignSurveyContent = surveyModel.content;\r\n\r\n\t\t// Prompt is required and at least one of the other components are required\r\n\t\tif (isNOU(content) || isNOU(content.prompt) ||\r\n\t\t\t(isNOU(content.rating) && isNOU(content.multipleChoice) &&\r\n\t\t\tisNOU(content.comment))) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new FpsSurvey.FpsSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\t\tdata.promptData = new PromptComponent.PromptComponentData();\r\n\t\tdata.promptData.title = sp.getCustomString(content.prompt.title);\r\n\t\tdata.promptData.question = sp.getCustomString(content.prompt.question);\r\n\t\tdata.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\r\n\t\tdata.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\r\n\r\n\t\tif ( isNOU(data.promptData.title)\r\n\t\t\t|| isNOU(data.promptData.question)\r\n\t\t\t|| isNOU(data.promptData.yesButtonLabel)\r\n\t\t\t|| isNOU(data.promptData.noButtonLabel)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (content.rating) {\r\n\t\t\tdata.ratingData = new RatingComponent.RatingComponentData();\r\n\t\t\tdata.ratingData.question = sp.getCustomString(content.rating.question);\r\n\t\t\tdata.ratingData.isZeroBased = content.rating.isZeroBased;\r\n\r\n\t\t\tfor (const value of content.rating.ratingValuesAscending) {\r\n\t\t\t\tconst customString: string = sp.getCustomString(value);\r\n\r\n\t\t\t\tif (isNOU(customString)) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tratingValuesAscending.push(customString);\r\n\t\t\t}\r\n\r\n\t\t\tdata.ratingData.ratingValuesAscending = ratingValuesAscending;\r\n\r\n\t\t\tif (isNOU(data.ratingData.question)\r\n\t\t\t\t|| isNOU(data.ratingData.ratingValuesAscending)) {\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (content.multipleChoice) {\r\n\t\t\tdata.multipleChoiceData = new MultipleChoiceComponent.MultipleChoiceComponentData();\r\n\t\t\tdata.multipleChoiceData.question = sp.getCustomString(content.multipleChoice.question);\r\n\t\t\tdata.multipleChoiceData.minNumberOfSelectedOptions = content.multipleChoice.minNumberOfSelectedOptions;\r\n\t\t\tdata.multipleChoiceData.maxNumberOfSelectedOptions = content.multipleChoice.maxNumberOfSelectedOptions;\r\n\r\n\t\t\tfor (const value of content.multipleChoice.availableOptions) {\r\n\t\t\t\tconst customString: string = sp.getCustomString(value);\r\n\r\n\t\t\t\tif (isNOU(customString)) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tavailableOptions.push(customString);\r\n\t\t\t}\r\n\r\n\t\t\tdata.multipleChoiceData.availableOptions = availableOptions;\r\n\r\n\t\t\tif (isNOU(data.multipleChoiceData.question)\r\n\t\t\t\t|| isNOU(data.multipleChoiceData.availableOptions)) {\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (content.comment) {\r\n\t\t\tdata.commentData = new CommentComponent.CommentComponentData();\r\n\t\t\tdata.commentData.question = sp.getCustomString(content.comment.question);\r\n\r\n\t\t\tif (isNOU(data.commentData.question)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// cvsurvey data is not required on all surveys.\r\n\t\tif (content.cvSurvey) {\r\n\t\t\tdata.cvSurveyData = new CVSurveyComponent.CVSurveyComponentData();\r\n\t\t\tdata.cvSurveyData.customerVoiceFormId =  content.cvSurvey.customerVoiceFormId;\r\n\r\n\t\t\tif (isNOU(data.cvSurveyData.customerVoiceFormId)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tprivate surveyInfo: SurveyDataSource;\r\n\tprivate question: CommentComponent;\r\n\tprivate prompt: PromptComponent;\r\n\tprivate rating: RatingComponent;\r\n\tprivate multipleChoice: MultipleChoiceComponent;\r\n\tprivate cvSurvey: CVSurveyComponent;\r\n\r\n\tprivate constructor(data: FpsSurvey.FpsSurveyData) {\r\n\t\tsuper();\r\n\t\tif (isNOU(data)) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyInfo = new SurveyDataSource(data.baseData);\r\n\t\tthis.prompt = new PromptComponent(data.promptData);\r\n\t\tthis.question = data.commentData ? (new CommentComponent(data.commentData)) : null;\r\n\t\tthis.rating = data.ratingData ? (new RatingComponent(data.ratingData)) : null;\r\n\t\tthis.multipleChoice = data.multipleChoiceData ? (new MultipleChoiceComponent(data.multipleChoiceData)) : null;\r\n\t\tthis.cvSurvey = data.cvSurveyData ? (new CVSurveyComponent(data.cvSurveyData)) : null;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurvey.Type {\r\n\t\treturn ISurvey.Type.Fps;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSurveyInfo(): ISurveyInfo {\r\n\t\treturn this.surveyInfo;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCommentComponent(): CommentComponent {\r\n\t\treturn this.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getPromptComponent(): PromptComponent {\r\n\t\treturn this.prompt;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getRatingComponent(): RatingComponent {\r\n\t\treturn this.rating;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getMultipleChoiceComponent(): MultipleChoiceComponent {\r\n\t\treturn this.multipleChoice;\r\n\t}\r\n\r\n\tpublic getCVSurveyComponent(): CVSurveyComponent {\r\n\t\treturn this.cvSurvey;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponent(componentType: ISurveyComponent.Type): ISurveyComponent {\r\n\t\tswitch (componentType) {\r\n\t\t\tcase ISurveyComponent.Type.Comment:\r\n\t\t\t\treturn this.getCommentComponent();\r\n\t\t\tcase ISurveyComponent.Type.Prompt:\r\n\t\t\t\treturn this.getPromptComponent();\r\n\t\t\tcase ISurveyComponent.Type.Rating:\r\n\t\t\t\treturn this.getRatingComponent();\r\n\t\t\tcase ISurveyComponent.Type.MultipleChoice:\r\n\t\t\t\treturn this.getMultipleChoiceComponent();\r\n\t\t\tcase ISurveyComponent.Type.CVSurvey:\r\n\t\t\t\treturn this.getCVSurveyComponent();\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (isNOU(doc)) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurvey.DOM_FPS_TAGNAME);\r\n\r\n\t\tthis.getSurveyInfo().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (!isNOU(child)) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.getCommentComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (!isNOU(child)) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.getRatingComponent()) {\r\n\t\t\tthis.getRatingComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\t\tif (!isNOU(child)) {\r\n\t\t\t\t\telement.appendChild(child);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.getMultipleChoiceComponent()) {\r\n\t\t\tthis.getMultipleChoiceComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\t\tif (!isNOU(child)) {\r\n\t\t\t\t\telement.appendChild(child);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tlet result: object = {};\r\n\r\n\t\tresult = Utils.overrideValues(this.getSurveyInfo().getJsonElements(), result);\r\n\t\tresult[ISurveyComponent.JSON_APPLICATION_KEYNAME] = {};\r\n\r\n\t\tresult[ISurveyComponent.JSON_APPLICATION_KEYNAME][ISurveyComponent.JSON_EXTENDEDMANIFESTDATA_KEYNAME] =\r\n\t\t\tJSON.stringify({\r\n\t\t\t\t[ISurveyComponent.JSON_SURVEYSTRINGS_KEYNAME]: this.makeSurveyStrings(),\r\n\t\t\t\t[ISurveyComponent.JSON_SURVEYSPECIFICDATA_KEYNAME]: this.makeResponseString(),\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Makes the string to send to Manifest respecting the components present in the survey\r\n\tprivate makeResponseString(): string {\r\n\t\tconst response: object = {};\r\n\r\n\t\tif (this.question) {\r\n\t\t\tresponse[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.getCommentComponent().getSubmittedText()];\r\n\t\t}\r\n\r\n\t\tif (this.multipleChoice) {\r\n\t\t\tresponse[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] =\r\n\t\t\t\t[this.getMultipleChoiceComponent().getOptionSelectedStates()];\r\n\t\t}\r\n\r\n\t\tif (this.rating) {\r\n\t\t\tresponse[ISurveyComponent.JSON_RATING_KEYNAME] = [\r\n\t\t\t\t{numberOfOptions: this.getRatingComponent().getRatingValuesAscending().length,\r\n\t\t\tselectedRating: this.getRatingComponent().getSelectedRatingIndex() }];\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(response);\r\n\t}\r\n\r\n\t// Makes the string to send to Manifest respecting the components present in the survey\r\n\tprivate makeSurveyStrings(): string {\r\n\t\tconst actualStrings: object = {};\r\n\r\n\t\tif (this.prompt) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.prompt.getComponentJson();\r\n\t\t}\r\n\r\n\t\tif (this.rating) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_RATING_KEYNAME] = [this.rating.getComponentJson()];\r\n\t\t}\r\n\r\n\t\tif (this.question) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.question.getComponentJson()];\r\n\t\t}\r\n\r\n\t\tif (this.multipleChoice) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] = [this.multipleChoice.getComponentJson()];\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(actualStrings);\r\n\t}\r\n}\r\nmodule FpsSurvey {\r\n\t/**\r\n\t * Data required for a Fps Survey\r\n\t */\r\n\texport class FpsSurveyData {\r\n\t\tpublic baseData: SurveyDataSource.SurveyDataSourceData;\r\n\t\tpublic commentData: CommentComponent.CommentComponentData;\r\n\t\tpublic promptData: PromptComponent.PromptComponentData;\r\n\t\tpublic ratingData: RatingComponent.RatingComponentData;\r\n\t\tpublic multipleChoiceData: MultipleChoiceComponent.MultipleChoiceComponentData;\r\n\t\tpublic cvSurveyData: CVSurveyComponent.CVSurveyComponentData;\r\n\t}\r\n}\r\n\r\nexport = FpsSurvey;\r\n","import * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { IMultipleChoiceComponent } from \"./../Api/IMultipleChoiceComponent\";\r\n\r\nclass MultipleChoiceComponent implements IMultipleChoiceComponent {\r\n\tpublic static make(data: MultipleChoiceComponent.MultipleChoiceComponentData): IMultipleChoiceComponent {\r\n\t\ttry {\r\n\t\t\treturn new MultipleChoiceComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: MultipleChoiceComponent.MultipleChoiceComponentData;\r\n\tprivate optionStates: boolean[];\r\n\r\n\tpublic constructor(data: MultipleChoiceComponent.MultipleChoiceComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.question) {\r\n\t\t\tthrow new Error(\"data.question must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.availableOptions || data.availableOptions.length < 2) {\r\n\t\t\tthrow new Error(\"data.availableOptions must not be null or have less than two choices\");\r\n\t\t}\r\n\r\n\t\tdata.availableOptions.forEach((option) => {\r\n\t\t\tif (!option) {\r\n\t\t\t\tthrow new Error(\"Option values must not contain null or empty\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.optionStates = new Array<boolean>(data.availableOptions.length);\r\n\t\t// Initialize with all false values\r\n\t\tfor (let i = 0; i < this.optionStates.length; i++) {\r\n\t\t\tthis.optionStates[i] = false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.MultipleChoice;\r\n\t}\r\n\r\n\tpublic getQuestion(): string {\r\n\t\treturn this.data.question;\r\n\t}\r\n\r\n\tpublic getAvailableOptions(): string[] {\r\n\t\treturn this.data.availableOptions;\r\n\t}\r\n\r\n\tpublic getOptionSelectedStates(): boolean[] {\r\n\t\treturn this.optionStates;\r\n\t}\r\n\r\n\tpublic getMinNumberofSelectedOptions(): number {\r\n\t\treturn this.data.minNumberOfSelectedOptions;\r\n\t}\r\n\r\n\tpublic getMaxNumberofSelectedOptions(): number {\r\n\t\treturn this.data.maxNumberOfSelectedOptions;\r\n\t}\r\n\r\n\tpublic setOptionSelectedStates(selectedStates: boolean[]): void {\r\n\t\tfor (let i = 0; i < selectedStates.length; i ++) {\r\n\t\t\tthis.optionStates[i] = selectedStates[i];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic ValidateMinNumberofSelectedOptions(): boolean {\r\n\t\tlet result: number = 0;\r\n\t\tthis.optionStates.forEach((element) => {\r\n\t\t\tif (element) {\r\n\t\t\t\tresult++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (result >= this.getMinNumberofSelectedOptions());\r\n\t}\r\n\r\n\tpublic ValidateMaxNumberofSelectedOptions(): boolean {\r\n\t\tlet result: number = 0;\r\n\t\tthis.optionStates.forEach((element) => {\r\n\t\t\tif (element) {\r\n\t\t\t\tresult++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (result <= this.getMaxNumberofSelectedOptions());\r\n\t}\r\n\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurveyComponent.DOM_MULTIPLECHOICE_TAGNAME);\r\n\r\n\t\telement.appendChild(doc.createTextNode(this.getOptionSelectedStates().toString()));\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tconst result: object = {};\r\n\t\tresult[ISurveyComponent.JSON_MULTIPLECHOICE_KEYNAME] = this.getOptionSelectedStates().toString();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_QUESTION_KEYNAME]: this.getQuestion(),\r\n\t\t\t[ISurveyComponent.JSON_RATINGOPTIONS_KEYNAME]: this.getAvailableOptions(),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule MultipleChoiceComponent {\r\n\texport class MultipleChoiceComponentData {\r\n\t\tpublic question: string;\r\n\t\tpublic availableOptions: string[];\r\n\t\tpublic minNumberOfSelectedOptions: number;\r\n\t\tpublic maxNumberOfSelectedOptions: number;\r\n\t}\r\n}\r\n\r\nexport = MultipleChoiceComponent;\r\n","import * as ISurvey from \"../Api/ISurvey\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as Utils from \"../Utils\";\r\nimport { Survey } from \"./Survey\";\r\nimport * as SurveyDataSource from \"./SurveyDataSource\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nclass GenericMessagingSurfaceSurvey extends Survey {\r\n\tpublic static make(data: GenericMessagingSurfaceSurvey.GenericMessagingSurfaceSurveyData): ISurvey {\r\n\t\ttry {\r\n\t\t\treturn new GenericMessagingSurfaceSurvey(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeCustom(baseData: SurveyDataSource.SurveyDataSourceData): ISurvey {\r\n\t\tif (isNOU(baseData)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new GenericMessagingSurfaceSurvey.GenericMessagingSurfaceSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tprivate surveyInfo: SurveyDataSource;\r\n\r\n\tprivate constructor(data: GenericMessagingSurfaceSurvey.GenericMessagingSurfaceSurveyData) {\r\n\t\tsuper();\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyInfo = new SurveyDataSource(data.baseData);\r\n\r\n\t\t// This check cannot be done in survey info constructor\r\n\t\t// as metadata is specific to this survey type.\r\n\t\tif (isNOU(this.surveyInfo.getMetadata())) {\r\n\t\t\tthrow new Error(\"metadata must not be null\");\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurvey.Type {\r\n\t\treturn ISurvey.Type.GenericMessagingSurface;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSurveyInfo(): ISurveyInfo {\r\n\t\treturn this.surveyInfo;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponent(componentType: ISurveyComponent.Type): ISurveyComponent {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\nmodule GenericMessagingSurfaceSurvey {\r\n\t/**\r\n\t * Data required for a Generic Surface Survey\r\n\t */\r\n\texport class GenericMessagingSurfaceSurveyData {\r\n\t\tpublic baseData: SurveyDataSource.SurveyDataSourceData;\r\n\t}\r\n}\r\n\r\nexport = GenericMessagingSurfaceSurvey;\r\n","import * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport { IInterceptSurvey } from \"../Api/IInterceptSurvey\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { CampaignSurveyContent, CampaignSurveyTemplate } from \"../Campaign/CampaignDefinitionProvider\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as InterceptComponent from \"../SurveyComponents/InterceptComponent\";\r\nimport * as Utils from \"../Utils\";\r\nimport { Survey } from \"./Survey\";\r\nimport * as SurveyDataSource from \"./SurveyDataSource\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nclass InterceptSurvey extends Survey implements IInterceptSurvey {\r\n\tpublic static make(data: InterceptSurvey.InterceptSurveyData): IInterceptSurvey {\r\n\t\ttry {\r\n\t\t\treturn new InterceptSurvey(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeIntercept(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider,\r\n\t\tsurveyModel: CampaignSurveyTemplate): IInterceptSurvey {\r\n\r\n\t\tif (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst content: CampaignSurveyContent = surveyModel.content;\r\n\r\n\t\t// Intercept component is required.\r\n\t\tif (isNOU(content) || isNOU(content.intercept)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new InterceptSurvey.InterceptSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\r\n\t\tdata.interceptData = new InterceptComponent.InterceptComponentData();\r\n\r\n\t\tdata.interceptData.title = sp.getCustomString(content.intercept.title);\r\n\t\tdata.interceptData.question = sp.getCustomString(content.intercept.question);\r\n\t\tdata.interceptData.url = sp.getCustomString(content.intercept.url);\r\n\r\n\t\tif ( isNOU(data.interceptData.title)\r\n\t\t\t|| isNOU(data.interceptData.question)\r\n\t\t\t|| isNOU(data.interceptData.url)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tprivate surveyInfo: SurveyDataSource;\r\n\tprivate intercept: InterceptComponent;\r\n\r\n\tprivate constructor(data: InterceptSurvey.InterceptSurveyData) {\r\n\t\tsuper();\r\n\t\tif (isNOU(data)) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyInfo = new SurveyDataSource(data.baseData);\r\n\t\tthis.intercept = new InterceptComponent(data.interceptData);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurvey.Type {\r\n\t\treturn ISurvey.Type.Intercept;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSurveyInfo(): ISurveyInfo {\r\n\t\treturn this.surveyInfo;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getInterceptComponent(): InterceptComponent {\r\n\t\treturn this.intercept;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponent(componentType: ISurveyComponent.Type): ISurveyComponent {\r\n\t\treturn (componentType === ISurveyComponent.Type.Intercept) ? this.getInterceptComponent() : null;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\treturn {};\r\n\t}\r\n}\r\nmodule InterceptSurvey {\r\n\t/**\r\n\t * Data required for an Intercept Survey\r\n\t */\r\n\texport class InterceptSurveyData {\r\n\t\tpublic baseData: SurveyDataSource.SurveyDataSourceData;\r\n\t\tpublic interceptData: InterceptComponent.InterceptComponentData;\r\n\t}\r\n}\r\n\r\nexport = InterceptSurvey;\r\n","import * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { IInterceptComponent } from \"./../Api/IInterceptComponent\";\r\n\r\nclass InterceptComponent implements IInterceptComponent {\r\n\tpublic static make(data: InterceptComponent.InterceptComponentData): IInterceptComponent {\r\n\t\ttry {\r\n\t\t\treturn new InterceptComponent(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate data: InterceptComponent.InterceptComponentData;\r\n\r\n\tpublic constructor(data: InterceptComponent.InterceptComponentData) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\t\tif (!data.question) {\r\n\t\t\tthrow new Error(\"data.question must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.title) {\r\n\t\t\tthrow new Error(\"data.title must not be null or empty\");\r\n\t\t}\r\n\t\tif (!data.url) {\r\n\t\t\tthrow new Error(\"data.url must not be null or empty\");\r\n\t\t}\r\n\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurveyComponent.Type {\r\n\t\treturn ISurveyComponent.Type.Intercept;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getTitle(): string {\r\n\t\treturn this.data.title;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getQuestion(): string {\r\n\t\treturn this.data.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getUrl(): string {\r\n\t\treturn this.data.url;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[]  {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\t\treturn [doc.createElement(ISurveyComponent.DOM_INTERCEPT_TAGNAME)];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\treturn {[ISurveyComponent.JSON_INTERCEPT_KEYNAME]: \"\"};\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponentJson(): object {\r\n\t\treturn {\r\n\t\t\t[ISurveyComponent.JSON_TITLE_KEYNAME]: this.getTitle(),\r\n\t\t\t[ISurveyComponent.JSON_QUESTION_KEYNAME]: this.getQuestion(),\r\n\t\t\t[ISurveyComponent.JSON_INTERCEPTURL_KEYNAME]: this.getUrl(),\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule InterceptComponent {\r\n\texport class InterceptComponentData {\r\n\t\tpublic question: string;\r\n\t\tpublic title: string;\r\n\t\tpublic url: string;\r\n\t}\r\n}\r\n\r\nexport = InterceptComponent;\r\n","import * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport { INlqsSurvey } from \"../Api/INlqsSurvey\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { CampaignSurveyContent, CampaignSurveyTemplate } from \"../Campaign/CampaignDefinitionProvider\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as CommentComponent from \"../SurveyComponents/CommentComponent\";\r\nimport * as PromptComponent from \"../SurveyComponents/PromptComponent\";\r\nimport * as RatingComponent from \"../SurveyComponents/RatingComponent\";\r\nimport * as Utils from \"../Utils\";\r\nimport { Survey } from \"./Survey\";\r\nimport * as SurveyDataSource from \"./SurveyDataSource\";\r\n\r\nconst { isNOU, overrideValues } = Utils;\r\n\r\nclass NlqsSurvey extends Survey implements INlqsSurvey {\r\n\tpublic static make(data: NlqsSurvey.NlqsSurveyData): INlqsSurvey {\r\n\t\ttry {\r\n\t\t\treturn new NlqsSurvey(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeNlqs(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider,\r\n\t\tsurveyModel: CampaignSurveyTemplate): INlqsSurvey {\r\n\r\n\t\tif (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst ratingValuesAscending: string[] = [];\r\n\t\tconst content: CampaignSurveyContent = surveyModel.content;\r\n\r\n\t\tif (isNOU(content) || isNOU(content.comment)\r\n\t\t\t|| isNOU(content.prompt) || isNOU(content.rating)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new NlqsSurvey.NlqsSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\t\tdata.promptData = new PromptComponent.PromptComponentData();\r\n\t\tdata.ratingData = new RatingComponent.RatingComponentData();\r\n\t\tdata.commentData = new CommentComponent.CommentComponentData();\r\n\r\n\t\tdata.promptData.title = sp.getCustomString(content.prompt.title);\r\n\t\tdata.promptData.question = sp.getCustomString(content.prompt.question);\r\n\t\tdata.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\r\n\t\tdata.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\r\n\t\tdata.ratingData.question = sp.getCustomString(content.rating.question);\r\n\t\tdata.ratingData.isZeroBased = content.rating.isZeroBased;\r\n\t\tdata.commentData.question = sp.getCustomString(content.comment.question);\r\n\r\n\t\tfor (const value of content.rating.ratingValuesAscending) {\r\n\t\t\tconst customString: string = sp.getCustomString(value);\r\n\r\n\t\t\tif (isNOU(customString)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tratingValuesAscending.push(customString);\r\n\t\t}\r\n\r\n\t\tdata.ratingData.ratingValuesAscending = ratingValuesAscending;\r\n\r\n\t\tif (isNOU(data.ratingData.question)\r\n\t\t\t|| isNOU(data.commentData.question)\r\n\t\t\t|| isNOU(data.promptData.title)\r\n\t\t\t|| isNOU(data.promptData.question)\r\n\t\t\t|| isNOU(data.promptData.yesButtonLabel)\r\n\t\t\t|| isNOU(data.promptData.noButtonLabel)\r\n\t\t\t|| isNOU(data.ratingData.ratingValuesAscending)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tprivate surveyInfo: SurveyDataSource;\r\n\tprivate question: CommentComponent;\r\n\tprivate prompt: PromptComponent;\r\n\tprivate rating: RatingComponent;\r\n\r\n\tprivate constructor(data: NlqsSurvey.NlqsSurveyData) {\r\n\t\tsuper();\r\n\t\tif (isNOU(data)) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyInfo = new SurveyDataSource(data.baseData);\r\n\t\tthis.prompt = new PromptComponent(data.promptData);\r\n\t\tthis.question = new CommentComponent(data.commentData);\r\n\t\tthis.rating = new RatingComponent(data.ratingData);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurvey.Type {\r\n\t\treturn ISurvey.Type.Nlqs;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSurveyInfo(): ISurveyInfo {\r\n\t\treturn this.surveyInfo;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCommentComponent(): CommentComponent {\r\n\t\treturn this.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getPromptComponent(): PromptComponent {\r\n\t\treturn this.prompt;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getRatingComponent(): RatingComponent {\r\n\t\treturn this.rating;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponent(componentType: ISurveyComponent.Type): ISurveyComponent {\r\n\t\tswitch (componentType) {\r\n\t\t\tcase ISurveyComponent.Type.Comment:\r\n\t\t\t\treturn this.getCommentComponent();\r\n\t\t\tcase ISurveyComponent.Type.Prompt:\r\n\t\t\t\treturn this.getPromptComponent();\r\n\t\t\tcase ISurveyComponent.Type.Rating:\r\n\t\t\t\treturn this.getRatingComponent();\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (isNOU(doc)) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurvey.DOM_NLQS_TAGNAME);\r\n\r\n\t\tthis.getSurveyInfo().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (!isNOU(child)) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.getCommentComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (!isNOU(child)) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.getRatingComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (!isNOU(child)) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tlet result: object = {};\r\n\r\n\t\tresult = overrideValues(this.getSurveyInfo().getJsonElements(), result);\r\n\t\tresult = overrideValues(this.getCommentComponent().getJsonElements(), result);\r\n\t\tresult = overrideValues(this.getRatingComponent().getJsonElements(), result);\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nmodule NlqsSurvey {\r\n\t/**\r\n\t * Data required for a Nlqs Survey\r\n\t */\r\n\texport class NlqsSurveyData {\r\n\t\tpublic baseData: SurveyDataSource.SurveyDataSourceData;\r\n\t\tpublic commentData: CommentComponent.CommentComponentData;\r\n\t\tpublic promptData: PromptComponent.PromptComponentData;\r\n\t\tpublic ratingData: RatingComponent.RatingComponentData;\r\n\t}\r\n}\r\n\r\nexport = NlqsSurvey;\r\n","import * as IFloodgateStringProvider from \"../Api/IFloodgateStringProvider\";\r\nimport { INpsSurvey } from \"../Api/INpsSurvey\";\r\nimport * as ISurvey from \"../Api/ISurvey\";\r\nimport * as ISurveyComponent from \"../Api/ISurveyComponent\";\r\nimport { CampaignSurveyContent, CampaignSurveyTemplate } from \"../Campaign/CampaignDefinitionProvider\";\r\nimport * as ISurveyInfo from \"../ISurveyInfo\";\r\nimport * as CommentComponent from \"../SurveyComponents/CommentComponent\";\r\nimport * as CVSurveyComponent from \"../SurveyComponents/CVSurveyComponent\";\r\nimport * as PromptComponent from \"../SurveyComponents/PromptComponent\";\r\nimport * as RatingComponent from \"../SurveyComponents/RatingComponent\";\r\nimport * as Utils from \"../Utils\";\r\nimport { Survey } from \"./Survey\";\r\nimport * as SurveyDataSource from \"./SurveyDataSource\";\r\n\r\nconst { isNOU, overrideValues } = Utils;\r\n\r\nclass NpsSurvey extends Survey implements INpsSurvey {\r\n\tpublic static make(data: NpsSurvey.NpsSurveyData): INpsSurvey {\r\n\t\ttry {\r\n\t\t\treturn new NpsSurvey(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeCustom(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider,\r\n\t\tsurveyModel: CampaignSurveyTemplate): INpsSurvey {\r\n\r\n\t\tif (isNOU(baseData) || isNOU(sp) || isNOU(surveyModel)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst ratingValuesAscending: string[] = [];\r\n\t\tconst content: CampaignSurveyContent = surveyModel.content;\r\n\r\n\t\tif (isNOU(content) || isNOU(content.comment)\r\n\t\t\t|| isNOU(content.prompt) || isNOU(content.rating)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new NpsSurvey.NpsSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\t\tdata.promptData = new PromptComponent.PromptComponentData();\r\n\t\tdata.ratingData = new RatingComponent.RatingComponentData();\r\n\t\tdata.commentData = new CommentComponent.CommentComponentData();\r\n\r\n\t\tdata.promptData.title = sp.getCustomString(content.prompt.title);\r\n\t\tdata.promptData.question = sp.getCustomString(content.prompt.question);\r\n\t\tdata.promptData.yesButtonLabel = sp.getCustomString(content.prompt.yesLabel);\r\n\t\tdata.promptData.noButtonLabel = sp.getCustomString(content.prompt.noLabel);\r\n\t\tdata.ratingData.question = sp.getCustomString(content.rating.question);\r\n\t\tdata.ratingData.isZeroBased = content.rating.isZeroBased;\r\n\t\tdata.commentData.question = sp.getCustomString(content.comment.question);\r\n\r\n\t\tfor (const value of content.rating.ratingValuesAscending) {\r\n\t\t\tconst customString: string = sp.getCustomString(value);\r\n\r\n\t\t\tif (isNOU(customString)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tratingValuesAscending.push(customString);\r\n\t\t}\r\n\r\n\t\tdata.ratingData.ratingValuesAscending = ratingValuesAscending;\r\n\r\n\t\tif (isNOU(data.ratingData.question)\r\n\t\t\t|| isNOU(data.commentData.question)\r\n\t\t\t|| isNOU(data.promptData.title)\r\n\t\t\t|| isNOU(data.promptData.question)\r\n\t\t\t|| isNOU(data.promptData.yesButtonLabel)\r\n\t\t\t|| isNOU(data.promptData.noButtonLabel)\r\n\t\t\t|| isNOU(data.ratingData.ratingValuesAscending)) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// cvsurvey data is not required on all surveys.\r\n\t\tif (content.cvSurvey) {\r\n\t\t\tdata.cvSurveyData = new CVSurveyComponent.CVSurveyComponentData();\r\n\t\t\tdata.cvSurveyData.customerVoiceFormId =  content.cvSurvey.customerVoiceFormId;\r\n\r\n\t\t\tif (isNOU(data.cvSurveyData.customerVoiceFormId)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tpublic static make5Point(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider): INpsSurvey {\r\n\t\tif (!baseData || !sp) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new NpsSurvey.NpsSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\t\tdata.ratingData = new RatingComponent.RatingComponentData();\r\n\t\tdata.ratingData.isZeroBased = false;\r\n\t\tdata.commentData = new CommentComponent.CommentComponentData();\r\n\t\tdata.promptData = new PromptComponent.PromptComponentData();\r\n\t\tdata.ratingData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsRatingQuestion);\r\n\t\tdata.commentData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsCommentQuestion);\r\n\t\tdata.promptData.title = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptTitle);\r\n\t\tdata.promptData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptQuestion);\r\n\t\tdata.promptData.yesButtonLabel = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptYesLabel);\r\n\t\tdata.promptData.noButtonLabel = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptNotNowLabel);\r\n\t\tconst ratingValuesAscending: string[] = new Array(5);\r\n\t\tratingValuesAscending[0] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps5RatingValue1);\r\n\t\tratingValuesAscending[1] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps5RatingValue2);\r\n\t\tratingValuesAscending[2] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps5RatingValue3);\r\n\t\tratingValuesAscending[3] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps5RatingValue4);\r\n\t\tratingValuesAscending[4] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps5RatingValue5);\r\n\r\n\t\tif (!data.ratingData.question\r\n\t\t\t|| !data.commentData.question\r\n\t\t\t|| !data.promptData.title\r\n\t\t\t|| !data.promptData.question\r\n\t\t\t|| !data.promptData.yesButtonLabel\r\n\t\t\t|| !data.promptData.noButtonLabel\r\n\t\t\t|| !ratingValuesAscending[0]\r\n\t\t\t|| !ratingValuesAscending[1]\r\n\t\t\t|| !ratingValuesAscending[2]\r\n\t\t\t|| !ratingValuesAscending[3]\r\n\t\t\t|| !ratingValuesAscending[4]) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tdata.ratingData.ratingValuesAscending = ratingValuesAscending;\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tpublic static make11Point(baseData: SurveyDataSource.SurveyDataSourceData, sp: IFloodgateStringProvider): INpsSurvey {\r\n\t\tif (!baseData || !sp) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst data = new NpsSurvey.NpsSurveyData();\r\n\t\tdata.baseData = baseData;\r\n\t\tdata.ratingData = new RatingComponent.RatingComponentData();\r\n\t\tdata.ratingData.isZeroBased = true;\r\n\t\tdata.commentData = new CommentComponent.CommentComponentData();\r\n\t\tdata.promptData = new PromptComponent.PromptComponentData();\r\n\t\tdata.ratingData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsRatingQuestion);\r\n\t\tdata.commentData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsCommentQuestion);\r\n\t\tdata.promptData.title = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptTitle);\r\n\t\tdata.promptData.question = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptQuestion);\r\n\t\tdata.promptData.yesButtonLabel = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptYesLabel);\r\n\t\tdata.promptData.noButtonLabel = sp.loadStringResource(IFloodgateStringProvider.StringType.NpsPromptNotNowLabel);\r\n\r\n\t\tconst ratingValuesAscending: string[] = new Array(11);\r\n\t\tratingValuesAscending[0] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue0);\r\n\t\tratingValuesAscending[1] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue1);\r\n\t\tratingValuesAscending[2] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue2);\r\n\t\tratingValuesAscending[3] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue3);\r\n\t\tratingValuesAscending[4] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue4);\r\n\t\tratingValuesAscending[5] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue5);\r\n\t\tratingValuesAscending[6] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue6);\r\n\t\tratingValuesAscending[7] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue7);\r\n\t\tratingValuesAscending[8] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue8);\r\n\t\tratingValuesAscending[9] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue9);\r\n\t\tratingValuesAscending[10] = sp.loadStringResource(IFloodgateStringProvider.StringType.Nps11RatingValue10);\r\n\r\n\t\tif (!data.ratingData.question\r\n\t\t\t|| !data.commentData.question\r\n\t\t\t|| !data.promptData.title\r\n\t\t\t|| !data.promptData.question\r\n\t\t\t|| !data.promptData.yesButtonLabel\r\n\t\t\t|| !data.promptData.noButtonLabel\r\n\t\t\t|| !ratingValuesAscending[0]\r\n\t\t\t|| !ratingValuesAscending[1]\r\n\t\t\t|| !ratingValuesAscending[2]\r\n\t\t\t|| !ratingValuesAscending[3]\r\n\t\t\t|| !ratingValuesAscending[4]\r\n\t\t\t|| !ratingValuesAscending[5]\r\n\t\t\t|| !ratingValuesAscending[6]\r\n\t\t\t|| !ratingValuesAscending[7]\r\n\t\t\t|| !ratingValuesAscending[8]\r\n\t\t\t|| !ratingValuesAscending[9]\r\n\t\t\t|| !ratingValuesAscending[10]) {\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tdata.ratingData.ratingValuesAscending = ratingValuesAscending;\r\n\t\treturn this.make(data);\r\n\t}\r\n\r\n\tprivate surveyInfo: SurveyDataSource;\r\n\tprivate question: CommentComponent;\r\n\tprivate prompt: PromptComponent;\r\n\tprivate rating: RatingComponent;\r\n\tprivate cvSurvey: CVSurveyComponent;\r\n\r\n\tprivate constructor(data: NpsSurvey.NpsSurveyData) {\r\n\t\tsuper();\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error(\"data must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.surveyInfo = new SurveyDataSource(data.baseData);\r\n\t\tthis.prompt = new PromptComponent(data.promptData);\r\n\t\tthis.question = new CommentComponent(data.commentData);\r\n\t\tthis.rating = new RatingComponent(data.ratingData);\r\n\t\tthis.cvSurvey = data.cvSurveyData ? (new CVSurveyComponent(data.cvSurveyData)) : null;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getType(): ISurvey.Type {\r\n\t\treturn ISurvey.Type.Nps;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getSurveyInfo(): ISurveyInfo {\r\n\t\treturn this.surveyInfo;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCommentComponent(): CommentComponent {\r\n\t\treturn this.question;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getPromptComponent(): PromptComponent {\r\n\t\treturn this.prompt;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getRatingComponent(): RatingComponent {\r\n\t\treturn this.rating;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getCVSurveyComponent(): CVSurveyComponent {\r\n\t\treturn this.cvSurvey;\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getComponent(componentType: ISurveyComponent.Type): ISurveyComponent {\r\n\t\tswitch (componentType) {\r\n\t\t\tcase ISurveyComponent.Type.Comment:\r\n\t\t\t\treturn this.getCommentComponent();\r\n\t\t\tcase ISurveyComponent.Type.Prompt:\r\n\t\t\t\treturn this.getPromptComponent();\r\n\t\t\tcase ISurveyComponent.Type.Rating:\r\n\t\t\t\treturn this.getRatingComponent();\r\n\t\t\tcase ISurveyComponent.Type.CVSurvey:\r\n\t\t\t\treturn this.getCVSurveyComponent();\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getDomElements(doc: Document): Element[] {\r\n\t\tif (!doc) {\r\n\t\t\tthrow new Error(\"Document must not be null\");\r\n\t\t}\r\n\r\n\t\tconst element: Element = doc.createElement(ISurvey.DOM_NPS_TAGNAME);\r\n\r\n\t\tthis.getSurveyInfo().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (child) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.getCommentComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (child) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.getRatingComponent().getDomElements(doc).forEach((child) => {\r\n\t\t\tif (child) {\r\n\t\t\t\telement.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn [element];\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic getJsonElements(): object {\r\n\t\tlet result: object = {};\r\n\r\n\t\tresult = overrideValues(this.getSurveyInfo().getJsonElements(), result);\r\n\t\tresult = overrideValues(this.getCommentComponent().getJsonElements(), result);\r\n\t\tresult = overrideValues(this.getRatingComponent().getJsonElements(), result);\r\n\r\n\t\tresult[ISurveyComponent.JSON_APPLICATION_KEYNAME] = {};\r\n\t\tresult[ISurveyComponent.JSON_APPLICATION_KEYNAME][ISurveyComponent.JSON_EXTENDEDMANIFESTDATA_KEYNAME] =\r\n\t\t\tJSON.stringify({[ISurveyComponent.JSON_SURVEYSTRINGS_KEYNAME]: this.makeSurveyStrings()});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Makes the string to send to Manifest respecting the components present in the survey\r\n\tprivate makeSurveyStrings(): string {\r\n\t\tconst actualStrings: object = {};\r\n\r\n\t\tif (this.prompt) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_PROMPT_KEYNAME] = this.prompt.getComponentJson();\r\n\t\t}\r\n\r\n\t\tif (this.rating) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_RATING_KEYNAME] = [this.rating.getComponentJson()];\r\n\t\t}\r\n\r\n\t\tif (this.question) {\r\n\t\t\tactualStrings[ISurveyComponent.JSON_COMMENT_KEYNAME] = [this.question.getComponentJson()];\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(actualStrings);\r\n\t}\r\n}\r\n\r\nmodule NpsSurvey {\r\n\t/**\r\n\t * Data required for a Nps Survey\r\n\t */\r\n\texport class NpsSurveyData {\r\n\t\tpublic baseData: SurveyDataSource.SurveyDataSourceData;\r\n\t\tpublic commentData: CommentComponent.CommentComponentData;\r\n\t\tpublic promptData: PromptComponent.PromptComponentData;\r\n\t\tpublic ratingData: RatingComponent.RatingComponentData;\r\n\t\tpublic cvSurveyData: CVSurveyComponent.CVSurveyComponentData;\r\n\t}\r\n}\r\n\r\nexport = NpsSurvey;\r\n","/**\r\n * General floodgate settings\r\n */\r\nexport class FloodgateSettings {\r\n\t/**\r\n\t * Convert to Json\r\n\t */\r\n\tpublic static toJson(object: FloodgateSettings): string {\r\n\t\treturn JSON.stringify(object);\r\n\t}\r\n\r\n\t/**\r\n\t * Load from Json\r\n\t */\r\n\tpublic static fromJson(json: string): FloodgateSettings {\r\n\t\treturn JSON.parse(json);\r\n\t}\r\n}\r\n","import { ActivityTrackingData } from \"./ActivityTrackingData\";\r\nimport { ActivityTrackingSet } from \"./ActivityTrackingSet\";\r\nimport { IndexedTracker } from \"./IndexedTracker\";\r\n\r\n/**\r\n * Class to track ticks against a list of expected counts in a thread-safe way\r\n * Main API of interest is incrementActivity, which returns an enumerated value indicating\r\n * whether or not the increment resulted in no thresholds crossed, a single activity threshold crossed,\r\n * or the final activity threshold crossed.\r\n */\r\nclass ActivityTracker {\r\n\tprivate isOrdered: boolean;\r\n\tprivate trackedActivities: ActivityTrackingData[];\r\n\tprivate currentIndex: number;\r\n\tprivate activationMask: number;\r\n\tprivate currentActivationFlags: number;\r\n\tprivate isActivationByInitPending: boolean;\r\n\tprivate currentCounts: number[];\r\n\tprivate currentSessionCounts: number[];\r\n\tprivate currentStartTimes: Date[];\r\n\r\n\tpublic constructor(trackingSet: ActivityTrackingSet) {\r\n\t\tif (!trackingSet) {\r\n\t\t\tthrow new Error(\"trackingSet must not be null\");\r\n\t\t}\r\n\t\tif (trackingSet.getList().length > 32) {\r\n\t\t\tthrow new Error(\"trackingSet list size must be less than 32\");\r\n\t\t}\r\n\r\n\t\tthis.isOrdered = trackingSet.getIsOrdered();\r\n\t\tthis.trackedActivities = trackingSet.getList();\r\n\r\n\t\t/**\r\n\t\t * For ordered sets, the current index.\r\n\t\t */\r\n\t\tthis.currentIndex = 0;\r\n\t\tthis.activationMask = 0;\r\n\t\tthis.currentActivationFlags = 0;\r\n\t\tthis.isActivationByInitPending = false;\r\n\r\n\t\tthis.currentCounts = new Array<number>(this.trackedActivities.length);\r\n\t\tthis.currentStartTimes = new Array<Date>(this.trackedActivities.length);\r\n\t\tthis.currentSessionCounts = new Array<number>(this.trackedActivities.length);\r\n\r\n\t\tfor (let i = 0; i < this.trackedActivities.length; i++) {\r\n\t\t\tthis.currentCounts[i] = 0;\r\n\t\t\tthis.currentSessionCounts[i] = 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.trackedActivities.length; i++) {\r\n\t\t\tthis.activationMask |= 0x1 << i;\r\n\r\n\t\t\tif (this.trackedActivities[i].getCount() < 1) {\r\n\t\t\t\tthis.trackedActivities[i].setCount(1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the count for the activity at the specified index. Returns 0 for out-of-range indices\r\n\t *\r\n\t * @param index index\r\n\t */\r\n\tpublic getCount(index: number): number {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn this.currentCounts[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Get the count for the activity at the specified index, as tracked only for this session.\r\n\t * Returns 0 for out-of-range indices\r\n\t *\r\n\t * @param index index\r\n\t */\r\n\tpublic getSessionCount(index: number): number {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn this.currentSessionCounts[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Get the StartTime for the activity at the specified index. Returns null for out-of-range indices\r\n\t *\r\n\t * @param index index\r\n\t */\r\n\tpublic getStartTime(index: number): Date {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn this.currentStartTimes[index];\r\n\t}\r\n\r\n\t/**\r\n\t * A get-and-set method. Returns the current SessionCount, resetting it to zero and adding it into\r\n\t * the established baseline.\r\n\t *\r\n\t * @param index index\r\n\t */\r\n\tpublic moveSessionCountIntoBaseCount(index: number): number {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tconst sessionCount: number = this.currentSessionCounts[index];\r\n\t\tthis.currentSessionCounts[index] = 0;\r\n\r\n\t\treturn sessionCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Forcibly set the counts for the activities in the trackingSet.\r\n\t * Unlike other APIs, this expects vector indices to match the order\r\n\t * of the ActivityTrackingSet.List initially used to construct this tracker.\r\n\t * (When data is copied from a different IndexedTracker, it will properly use the IndexedTracker.Index to query internals)\r\n\t * Note:\r\n\t * 1) Assumes a count of 0 for any missing index in undersized arrays.\r\n\t * 2) Respects and enforces ordered list initialization (i.e. all init values are ignored once a unfinished activity is\r\n\t * encountered in an ordered tracking list).\r\n\t * 3) If the tracker is fully Activated as a result of this call, the next call to IncrementActivity will raise the\r\n\t * IncrementEdgeResult.AllActivitiesActivated, for any valid index accepted by IsPermittedIndexForActivationByInit().\r\n\t */\r\n\tpublic initCounts(baselineCounts: number[], otherTrackers: IndexedTracker[], wasAlreadyActivatedThisSession: boolean = false): void {\r\n\t\t// NOTE: baselineIncrements and sessionIncrements are sorted the same as the initial trackedActivity set, which\r\n\t\t// for this class is the same as trackedActivities\r\n\r\n\t\tfor (let i = 0; i < this.trackedActivities.length; i++) {\r\n\t\t\t// Only accept values up to the current index, when ordered\r\n\t\t\tif (this.isOrdered && i > this.currentIndex) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Start off by pulling values from this session\r\n\t\t\tif (i < otherTrackers.length && otherTrackers[i]) {\r\n\t\t\t\tthis.currentSessionCounts[i] = this.currentCounts[i] = otherTrackers[i].tracker.getSessionCount(otherTrackers[i].index);\r\n\t\t\t\tthis.currentStartTimes[i] = otherTrackers[i].tracker.getStartTime(otherTrackers[i].index);\r\n\t\t\t}\r\n\r\n\t\t\t// If we've got a baseline from previous sessions, add it in as well\r\n\t\t\tif (this.trackedActivities[i].getIsAggregate() && i < baselineCounts.length) {\r\n\t\t\t\tthis.currentCounts[i] += baselineCounts[i];\r\n\t\t\t}\r\n\r\n\t\t\tif (this.hasCountCrossedThreshold(i)) {\r\n\t\t\t\tthis.finishActivityAtIndex(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isActivated() && !wasAlreadyActivatedThisSession) {\r\n\t\t\t// Mark this object so that the next time any permitted activation event is logged, the survey will activate\r\n\t\t\tthis.isActivationByInitPending = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic generateActivityIndexList(): ActivityTracker.ActivityIndex[] {\r\n\t\tconst indexList = new Array<ActivityTracker.ActivityIndex>();\r\n\t\tfor (let i = 0; i < this.trackedActivities.length; i++) {\r\n\t\t\tconst current = new ActivityTracker.ActivityIndex();\r\n\t\t\tcurrent.activity = this.trackedActivities[i].getActivity();\r\n\t\t\tcurrent.index = i;\r\n\t\t\tindexList.push(current);\r\n\t\t}\r\n\r\n\t\treturn indexList;\r\n\t}\r\n\r\n\t/**\r\n\t * Increments the count at the specified index by the given increment.  Returns a value indicating whether\r\n\t * or not this call triggered a transition edge (activating the activity at 'index', or finishing the activation\r\n\t * of the final pending activity)\r\n\t */\r\n\tpublic incrementActivity(index: number, increment: number): ActivityTracker.IncrementResult {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn ActivityTracker.IncrementResult.Pending;\r\n\t\t}\r\n\r\n\t\tif (increment < 0) {\r\n\t\t\tthrow new Error(\"increment must be non-negative\");\r\n\t\t}\r\n\r\n\t\t// Ordered sets must be triggered in order.  We can only track at the current index, or before\r\n\t\tif (this.isOrdered && index > this.currentIndex) {\r\n\t\t\treturn ActivityTracker.IncrementResult.Pending;\r\n\t\t}\r\n\r\n\t\t// Add to our counts after storing off our current state\r\n\t\tconst startedLessThanThreshold = !this.hasCountCrossedThreshold(index);\r\n\t\tthis.currentCounts[index] += increment;\r\n\t\tthis.currentSessionCounts[index] += increment;\r\n\r\n\t\tif (this.isActivationByInitPending) {\r\n\t\t\tif (this.isPermittedIndexForActivationByInit(index)) {\r\n\t\t\t\t// This tracker was completed due to the initialization from previous increment data\r\n\t\t\t\t// now that we've store this activities increments, raise the AllActivitiesActivated signal\r\n\t\t\t\treturn this.commitActivation();\r\n\t\t\t} else {\r\n\t\t\t\t// Still waiting for a valid re-activation activity\r\n\t\t\t\treturn ActivityTracker.IncrementResult.Pending;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!(startedLessThanThreshold && this.hasCountCrossedThreshold(index))) {\r\n\t\t\t// Still waiting for this activity to finish\r\n\t\t\treturn ActivityTracker.IncrementResult.Pending;\r\n\t\t}\r\n\r\n\t\t// Mark this activity as complete in our flag collection\r\n\t\tthis.finishActivityAtIndex(index);\r\n\r\n\t\tif (this.isActivated()) {\r\n\t\t\treturn this.commitActivation();\r\n\t\t}\r\n\r\n\t\treturn ActivityTracker.IncrementResult.SingleActivityActivated;\r\n\t}\r\n\r\n\t/**\r\n\t * Explicitly sets a start timestamp (now if startTime is null) for the specified activity index. Overwrites any previous StartTime.\r\n\t */\r\n\tpublic startTime(index: number, startTime?: Date): void {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.currentStartTimes[index] = (!startTime) ? new Date() : startTime;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the \"count\" delta (delta in whatever units are appropriate for a subsequent call to IncrementActivity)\r\n\t * elapsed between now and a previously logged StartTime for this activity index.\r\n\t * Always clears the previous StartTime.\r\n\t * Returns 0 if no previous StartTime was logged, or if StartTime > StopTime\r\n\t */\r\n\tpublic stopTime(index: number, stopTime?: Date): number {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tconst startTime = this.currentStartTimes[index];\r\n\t\tthis.currentStartTimes[index] = null;\r\n\r\n\t\tif (!startTime) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tstopTime = (!stopTime) ? new Date() : stopTime;\r\n\t\tif (startTime > stopTime) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tconst deltaMS = stopTime.getTime() - startTime.getTime();\r\n\t\t// Currently all timer activities return seconds as the increment unit\r\n\t\tlet diff = deltaMS / 1000;\r\n\r\n\t\t// Adding 1ms to the count so it can have the decimal place\r\n\t\t// So that we can distinguish the Time activity\r\n\t\tif (diff % 1 === 0) {\r\n\t\t\tdiff += 0.001;\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the index is valid for accessing the stored activity counts, false otherwise\r\n\t */\r\n\tpublic isValidIndex(index: number): boolean {\r\n\t\treturn index < this.trackedActivities.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets whether or not the full set of activities for this tracker have exceeded their trigger thresholds\r\n\t */\r\n\tpublic isActivated(): boolean {\r\n\t\treturn (this.currentActivationFlags & this.activationMask) === this.activationMask;\r\n\t}\r\n\r\n\t/**\r\n\t\t* Marks the activity at the index as finished. Includes setting the proper\r\n\t\t* activation flags and potentially advancing the current index for ordered tracking sets\r\n\t\t*/\r\n\tprivate finishActivityAtIndex(index: number): void {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\tthrow new Error(\"Index is not valid\");\r\n\t\t}\r\n\r\n\t\tthis.currentActivationFlags |= 0x1 << index;\r\n\r\n\t\tif (index + 1 < this.trackedActivities.length) {\r\n\t\t\tthis.currentIndex = index + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param index index\r\n\t * @return true if the counts for the activity at the specified index have met or exceeded the threshold count.\r\n\t */\r\n\tprivate hasCountCrossedThreshold(index: number): boolean {\r\n\t\tif (!this.isValidIndex(index)) {\r\n\t\t\tthrow new Error(\"Index is not valid\");\r\n\t\t}\r\n\r\n\t\treturn this.currentCounts[index] >= this.trackedActivities[index].getCount();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the index refers to an activity that can re-activate a tracked object (aka return AllActivitiesActivated)\r\n\t * that was initialized as \"complete\" via initCounts.\r\n\t * Note: For unordered sets, any activity is valid. For ordered sequences, only the final activity is valid\r\n\t */\r\n\tprivate isPermittedIndexForActivationByInit(index: number): boolean {\r\n\t\treturn !this.isOrdered || ((index + 1) === this.currentCounts.length);\r\n\t}\r\n\r\n\tprivate commitActivation(): ActivityTracker.IncrementResult {\r\n\t\tthis.isActivationByInitPending = false;\r\n\t\treturn ActivityTracker.IncrementResult.AllActivitiesActivated;\r\n\t}\r\n}\r\n\r\nmodule ActivityTracker {\r\n\t/**\r\n\t * Structure returned by an ActivityTracker to call back into\r\n\t * IncrementActivity with valid index values\r\n\t */\r\n\texport class ActivityIndex {\r\n\t\tpublic activity: string;\r\n\t\tpublic index: number;\r\n\t}\r\n\r\n\texport const enum IncrementResult {\r\n\t\t/**\r\n\t\t * No thresholds crossed as a result of this increment operation\r\n\t\t */\r\n\t\tPending,\r\n\r\n\t\t/**\r\n\t\t * The threshold for the targeted activity index was crossed as a result of this increment operation\r\n\t\t */\r\n\t\tSingleActivityActivated,\r\n\r\n\t\t/**\r\n\t\t * The threshold for the targeted activity index was crossed as a result of this increment operation\r\n\t\t * and this was the final activity being tracked\r\n\t\t */\r\n\t\tAllActivitiesActivated,\r\n\t}\r\n}\r\n\r\nexport = ActivityTracker;\r\n","import ActivityTracker = require(\"./ActivityTracker\");\r\nimport ISurvey = require(\"./Api/ISurvey\");\r\n\r\nexport class IndexedTracker {\r\n\tpublic index: number;\r\n\tpublic surveyId: string;\r\n\tpublic tracker: ActivityTracker;\r\n}\r\n","import { ActivityTrackingSet } from \"./ActivityTrackingSet\";\r\n\r\nexport class ActivityTrackingContract {\r\n\tpublic surveyId: string;\r\n\tpublic trackingSet: ActivityTrackingSet;\r\n\r\n\tpublic constructor(surveyId: string, trackingSet: ActivityTrackingSet) {\r\n\t\tthis.surveyId = surveyId;\r\n\t\tthis.trackingSet = trackingSet;\r\n\t}\r\n}\r\n","import { ISurveyInfo } from \"./Api/Api\";\r\nimport { IDictionary } from \"./Common\";\r\nimport { SurveyActivationStats } from \"./SurveyStatCollectionActivation\";\r\nimport { isNOU, isNumber } from \"./Utils\";\r\n\r\nexport function isMultiLaunchSurvey(surveyInfo: ISurveyInfo): boolean {\r\n\tconst maxLaunches = surveyInfo?.getMaxLaunches();\r\n\treturn isNumber(maxLaunches) && maxLaunches > 1;\r\n}\r\n\r\nexport function isBusinessCriticalSurvey(surveyInfo: ISurveyInfo): boolean {\r\n\tconst businessLevel = surveyInfo?.getBusinessLevel();\r\n\treturn !isNOU(businessLevel) && businessLevel === ISurveyInfo.BusinessLevel.Critical;\r\n}\r\n\r\nexport function isCriticalSurvey(surveyInfo: ISurveyInfo): boolean {\r\n\treturn isMultiLaunchSurvey(surveyInfo) || isBusinessCriticalSurvey(surveyInfo);\r\n}\r\n\r\nexport function hasSurveyReachedMaxLaunchesPerSession(surveyInfo: ISurveyInfo, surveyActivationStats: IDictionary<number>): boolean {\r\n\tif (isMultiLaunchSurvey(surveyInfo) && isNumber(surveyInfo.getMaxLaunchesPerSession())) {\r\n\t\tconst surveyLaunchCountInSession = surveyActivationStats[surveyInfo.getId()] ?? 0;\r\n\t\tconst maxLaunchesPerSession = surveyInfo.getMaxLaunchesPerSession();\r\n\t\treturn surveyLaunchCountInSession >= maxLaunchesPerSession;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexport function hasSurveyReachedMaxLaunches(surveyInfo: ISurveyInfo, surveyActivationStats: SurveyActivationStats): boolean {\r\n\tif (isMultiLaunchSurvey(surveyInfo)) {\r\n\t\tconst surveyLaunchCount = surveyActivationStats?.SurveyLaunchCount || 0;\r\n\t\treturn surveyLaunchCount >= surveyInfo.getMaxLaunches();\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n","import { UserFact } from \"./UserFact\";\r\n\r\nexport const deserializeUserFacts = (input: any): UserFact[] => {\r\n\tlet userFacts: UserFact[] = [];\r\n\tfor (const key in input.UserFacts) {\r\n\t\tif (input.UserFacts.hasOwnProperty(key)) {\r\n\t\t\tconst userFactInput = input.UserFacts[key];\r\n\r\n\t\t\tif (userFactInput) {\r\n\t\t\t\tuserFacts.push(UserFact.deserialize(userFactInput));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (userFacts.length === 0) {\r\n\t\tuserFacts = null;\r\n\t}\r\n\r\n\treturn userFacts;\r\n\r\n};\r\n\r\nexport const validateUserFacts = (userFacts: UserFact[]): boolean => {\r\n\tif (userFacts) {\r\n\t\tfor (const key in userFacts) {\r\n\t\t\tif (userFacts.hasOwnProperty(key) && !userFacts[key]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n","import { TelemetryEvent } from \"../Constants\";\r\nimport { FloodgateEngine } from \"../FloodgateEngine\";\r\nimport * as Utils from \"../Utils\";\r\nimport { IUserFact } from \"./IUserFact\";\r\nimport { ComparatorType, CurrentTimeIntervalType, IUserFactInput, UserFactLatencyType, UserFactType } from \"./UserFactModel\";\r\n\r\nconst { isNOU, isNumber, isArray } = Utils;\r\nconst commonComparatorTypes: ComparatorType[] = [\r\n\tComparatorType.Equal,\r\n\tComparatorType.NotEqual,\r\n\tComparatorType.GreaterThan,\r\n\tComparatorType.GreaterThanOrEqual,\r\n\tComparatorType.LessThan,\r\n\tComparatorType.LessThanOrEqual,\r\n];\r\n\r\nexport class UserFact {\r\n\tpublic static deserialize(rawUserFactSpec: any): UserFact {\r\n\t\treturn this.validate(rawUserFactSpec) ? new UserFact(rawUserFactSpec) : null;\r\n\t}\r\n\r\n\tprivate static validate(input: any) {\r\n\t\tif (!input) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t\"Input is null or undefined for user fact\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Values is used for type UserFactType.ListOfStrings\r\n\t\tif (!input.Value && input.Values) {\r\n\t\t\tinput.Value = input.Values;\r\n\t\t}\r\n\r\n\t\tif (isNOU(input.Name) || isNOU(input.Type) || isNOU(input.Value)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Either of the required parameters Name: ${input.Name}, Type: ${input.Type} or Value: ${input.Value} are not provided for the user fact`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.validateUserFactType(input.Type)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Invalid UserFactType value ${input.Type} is provided for user fact`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (input.Type === UserFactType.ListFile) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Unsupported UserFactType value ${input.Type} is provided for user fact`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (input.LatencyType && !this.validateLatencyType(input.LatencyType)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Invalid LatencyType value ${input.LatencyType} is provided for user fact of type ${input.Type}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (input.LatencyType && input.LatencyType !== UserFactLatencyType.None && isNOU(input.LatencyDurationInSeconds)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`LatencyDurationInSeconds value ${input.LatencyDurationInSeconds} is not provided for user fact of type ${input.Type}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (input.LatencyDurationInSeconds && !isNumber(input.LatencyDurationInSeconds)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Invalid LatencyDurationInSeconds value ${input.LatencyDurationInSeconds} is provided for user fact of type ${input.Type}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (input.Type === UserFactType.TimeIntervalInSeconds && isNOU(input.IntervalType)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecDeserialization.Failed,\r\n\t\t\t\t`Required parameter intervalType is not provided for user fact of type ${input.Type}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst supportedComparatorTypes = this.getComparatorTypes(input.Type);\r\n\t\tif (input.Comparator && !isComparatorTypeSupported(input.Comparator, supportedComparatorTypes)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed,\r\n\t\t\t\t`Unsupported comparator type for user fact of type ${input.Type}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate static getComparatorTypes(userFactType: UserFactType): ComparatorType[]  {\r\n\t\tswitch (userFactType) {\r\n\t\t\tcase UserFactType.Boolean:\r\n\t\t\t\treturn [ComparatorType.Equal, ComparatorType.NotEqual];\r\n\t\t\tcase UserFactType.String:\r\n\t\t\t\treturn [ComparatorType.Equal,\r\n\t\t\t\t\t\tComparatorType.NotEqual,\r\n\t\t\t\t\t\tComparatorType.In,\r\n\t\t\t\t\t\tComparatorType.NotIn,\r\n\t\t\t\t\t\tComparatorType.InverseIn,\r\n\t\t\t\t\t\tComparatorType.InverseNotIn];\r\n\t\t\tcase UserFactType.ListOfStrings:\r\n\t\t\t\treturn [ComparatorType.In, ComparatorType.NotIn, ComparatorType.InverseIn, ComparatorType.InverseNotIn];\r\n\t\t\tcase UserFactType.TimeIntervalInSeconds:\r\n\t\t\tcase UserFactType.DateTimeUTC:\r\n\t\t\tcase UserFactType.Number:\r\n\t\t\tcase UserFactType.ListFile:\r\n\t\t\t\treturn commonComparatorTypes;\r\n\t\t\tdefault:\r\n\t\t\t\tassertNever(userFactType);\r\n\t\t}\r\n\r\n\t\treturn commonComparatorTypes;\r\n\t}\r\n\r\n\tprivate static validateLatencyType(latency: UserFactLatencyType) {\r\n\t\treturn (\r\n\t\t\tlatency === UserFactLatencyType.None ||\r\n\t\t\tlatency === UserFactLatencyType.ClientIngestionDateTime ||\r\n\t\t\tlatency === UserFactLatencyType.SourceDateTime ||\r\n\t\t\tlatency === UserFactLatencyType.StorageDateTime\r\n\t\t) ? true : assertNever(latency);\r\n\t}\r\n\r\n\tprivate static validateUserFactType(factType: UserFactType) {\r\n\t\treturn (\r\n\t\t\tfactType === UserFactType.Boolean ||\r\n\t\t\tfactType === UserFactType.DateTimeUTC ||\r\n\t\t\tfactType === UserFactType.Number ||\r\n\t\t\tfactType === UserFactType.String ||\r\n\t\t\tfactType === UserFactType.TimeIntervalInSeconds ||\r\n\t\t\tfactType === UserFactType.ListOfStrings ||\r\n\t\t\tfactType === UserFactType.ListFile\r\n\t\t) ? true : assertNever(factType);\r\n\t}\r\n\r\n\tprivate input: IUserFactInput;\r\n\r\n\tconstructor(input: IUserFactInput) {\r\n\t\tthis.input = input;\r\n\t}\r\n\r\n\tpublic isAMatch(rawUserFact: IUserFact): boolean {\r\n\t\tif (!rawUserFact || !rawUserFact.userFactValue) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.isLatencyAcceptable(rawUserFact)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst factType = this.getType();\r\n\t\t\tif (factType === UserFactType.Boolean) {\r\n\t\t\t\treturn compareBooleanValues(this.getValue(), rawUserFact, this.getComparator());\r\n\t\t\t} else if (factType === UserFactType.DateTimeUTC) {\r\n\t\t\t\treturn compareDateTimeUTCValues(this.getValue() as string, rawUserFact, this.getComparator());\r\n\t\t\t} else if (factType === UserFactType.Number) {\r\n\t\t\t\treturn compareNumberValues(this.getValue() as number, rawUserFact, this.getComparator());\r\n\t\t\t} else if (factType === UserFactType.String) {\r\n\t\t\t\treturn compareStringValues(this.getValue() as string, rawUserFact, this.getComparator());\r\n\t\t\t} else if (factType === UserFactType.TimeIntervalInSeconds) {\r\n\t\t\t\treturn compareTimeIntervalValues(this.getValue() as number, rawUserFact, this.getComparator(), this.getIntervalType());\r\n\t\t\t} else if (factType === UserFactType.ListOfStrings) {\r\n\t\t\t\treturn compareListValues(this.getValue() as unknown as string[], rawUserFact, this.getComparator());\r\n\t\t\t} else {\r\n\t\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed,\r\n\t\t\t\t\t`Unsupported type of user fact was provided ${factType}`);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed,\r\n\t\t\t\terror);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getType() {\r\n\t\treturn this.input.Type;\r\n\t}\r\n\r\n\tpublic getName() {\r\n\t\treturn this.input.Name;\r\n\t}\r\n\r\n\tpublic getValue() {\r\n\t\treturn this.input.Value;\r\n\t}\r\n\r\n\tpublic getComparator() {\r\n\t\treturn this.input.Comparator || ComparatorType.Equal;\r\n\t}\r\n\r\n\tpublic getLatencyType() {\r\n\t\treturn this.input.LatencyType || UserFactLatencyType.None;\r\n\t}\r\n\r\n\tpublic getLatencyDurationInSeconds() {\r\n\t\treturn this.input.LatencyDurationInSeconds;\r\n\t}\r\n\r\n\tpublic getIntervalType() {\r\n\t\treturn this.input.IntervalType;\r\n\t}\r\n\r\n\tprivate isLatencyAcceptable(rawUserFact: IUserFact) {\r\n\t\tconst factType = this.getType();\r\n\r\n\t\tif (!isNOU(this.getLatencyDurationInSeconds()) &&\r\n\t\t\t!evaluateFactCandidacy(this.getLatencyType(), this.getLatencyDurationInSeconds(), rawUserFact)) {\r\n\t\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Mismatch, {\r\n\t\t\t\t\tErrorMessage: `Latency duration not acceptable - { Name: \"${rawUserFact.userFactName}\" }`,\r\n\t\t\t\t\tTimeMilliseconds: this.getLatencyDurationInSeconds(),\r\n\t\t\t\t\tType: `${factType}`,\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nfunction evaluateFactCandidacy(latencyType: UserFactLatencyType, latencyDurationInSeconds: number, userFact: IUserFact) {\r\n\tlet userFactTime: string;\r\n\tswitch (latencyType) {\r\n\t\tcase UserFactLatencyType.None:\r\n\t\t\tbreak;\r\n\t\tcase UserFactLatencyType.SourceDateTime:\r\n\t\t\tuserFactTime = userFact.sourceDateTime;\r\n\t\t\tbreak;\r\n\t\tcase UserFactLatencyType.StorageDateTime:\r\n\t\t\tuserFactTime = userFact.storageDateTime;\r\n\t\t\tbreak;\r\n\t\tcase UserFactLatencyType.ClientIngestionDateTime:\r\n\t\t\tuserFactTime = userFact.clientIngestionDateTime;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tassertNever(latencyType);\r\n\t\t}\r\n\r\n\tif (!isNOU(userFactTime)) {\r\n\t\tconst userFactTimeInMilliseconds = Date.parse(userFactTime);\r\n\t\tconst currentTimeInMilliseconds = Date.now();\r\n\r\n\t\treturn currentTimeInMilliseconds - userFactTimeInMilliseconds <= (latencyDurationInSeconds * 1000);\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction compareBooleanValues(userFactSpecValue: any, rawUserFact: IUserFact, comparator: ComparatorType) {\r\n\tconst rawUserFactValueInBoolean = JSON.parse(rawUserFact.userFactValue.toLowerCase());\r\n\treturn compareValues(!!userFactSpecValue, !!rawUserFactValueInBoolean, comparator);\r\n}\r\n\r\nfunction compareDateTimeUTCValues(userFactSpecValue: string, rawUserFact: IUserFact, comparator: ComparatorType) {\r\n\tconst rawUserFactValueInMilliseconds = Date.parse(rawUserFact.userFactValue);\r\n\tif (!isAValidNumber(rawUserFactValueInMilliseconds, rawUserFact.userFactValue, rawUserFact.userFactName)) {\r\n\t\treturn false;\r\n\t}\r\n\tconst userFactSpecValueInMilliseconds = Date.parse(userFactSpecValue);\r\n\tif (!isAValidNumber(userFactSpecValueInMilliseconds, userFactSpecValue, null, UserFactType.DateTimeUTC)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn compareValues(userFactSpecValueInMilliseconds, rawUserFactValueInMilliseconds, comparator);\r\n}\r\n\r\nfunction compareNumberValues(userFactSpecValue: number, rawUserFact: IUserFact, comparator: ComparatorType) {\r\n\tconst rawUserFactValueInNumber = parseInt(rawUserFact.userFactValue, 10);\r\n\tif (!isAValidNumber(rawUserFactValueInNumber, rawUserFact.userFactValue, rawUserFact.userFactName)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn compareValues(userFactSpecValue, rawUserFactValueInNumber, comparator);\r\n}\r\n\r\nfunction compareStringValues(userFactSpecValue: string, rawUserFact: IUserFact, comparator: ComparatorType) {\r\n\treturn compareValues(userFactSpecValue.toLowerCase(), rawUserFact.userFactValue.toLowerCase(), comparator);\r\n}\r\n\r\nfunction compareTimeIntervalValues(\r\n\tuserFactSpecValue: number, rawUserFact: IUserFact, comparator: ComparatorType, intervalType: CurrentTimeIntervalType) {\r\n\tconst rawUserFactValueInMilliseconds = Date.parse(rawUserFact.userFactValue);\r\n\tif (!isAValidNumber(rawUserFactValueInMilliseconds, rawUserFact.userFactValue, rawUserFact.userFactName)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Diff from now and users input date\r\n\t// IntervalTo - Internval to current date from fact date (fact date is expected to be before current date)\r\n\t// IntervalFrom - Interval from current date to fact date (fact date is expected to be after current date)\r\n\tconst currentTimeInMilliseconds = Date.now();\r\n\tconst currentDateDiff = intervalType === CurrentTimeIntervalType.IntervalTo ?\r\n\t\t(currentTimeInMilliseconds - rawUserFactValueInMilliseconds) : (rawUserFactValueInMilliseconds - currentTimeInMilliseconds);\r\n\tif (currentDateDiff < 0) {\r\n\t\tFloodgateEngine.getTelemetryLogger().log_Event(\r\n\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Mismatch, {\r\n\t\t\t\tErrorMessage: `Interval type not acceptable - { Spec: ${userFactSpecValue}, Name: \"${rawUserFact.userFactName}\" }`,\r\n\t\t\t\tTimeMilliseconds: currentDateDiff,\r\n\t\t\t\tType: `${intervalType}`,\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst dayInMilliseconds = 86400000;\r\n\tconst userFactSpecValueInMilliseconds = userFactSpecValue * dayInMilliseconds;\r\n\r\n\t// check if the above diff satisfies the comparison criteria\r\n\treturn compareValues(userFactSpecValueInMilliseconds, currentDateDiff, comparator);\r\n}\r\n\r\nfunction compareListValues<T extends string | boolean | number>(userFactSpecValue: T[], rawUserFact: IUserFact, comparator: ComparatorType) {\r\n\treturn compareValues(userFactSpecValue, rawUserFact.userFactValue as T, comparator);\r\n}\r\n\r\nfunction isComparatorTypeSupported(comparator: ComparatorType, supportedComparatorTypes: ComparatorType[]) {\r\n\treturn supportedComparatorTypes.indexOf(comparator) !== -1;\r\n}\r\n\r\nfunction compareValues<T extends string | boolean | number>(\r\n\tuserFactSpecValue: T | T[], userFactRawValue: T, comparator: ComparatorType): boolean {\r\n\tswitch (comparator) {\r\n\t\tcase ComparatorType.Equal:\r\n\t\t\treturn userFactRawValue === userFactSpecValue;\r\n\t\tcase ComparatorType.NotEqual:\r\n\t\t\treturn userFactRawValue !== userFactSpecValue;\r\n\t\tcase ComparatorType.GreaterThan:\r\n\t\t\treturn userFactRawValue > userFactSpecValue;\r\n\t\tcase ComparatorType.GreaterThanOrEqual:\r\n\t\t\treturn userFactRawValue >= userFactSpecValue;\r\n\t\tcase ComparatorType.LessThan:\r\n\t\t\treturn userFactRawValue < userFactSpecValue;\r\n\t\tcase ComparatorType.LessThanOrEqual:\r\n\t\t\treturn userFactRawValue <= userFactSpecValue;\r\n\t\tcase ComparatorType.In:\r\n\t\t\treturn isFactValueInTargetItem(userFactSpecValue, userFactRawValue);\r\n\t\tcase ComparatorType.NotIn:\r\n\t\t\treturn !isFactValueInTargetItem(userFactSpecValue, userFactRawValue);\r\n\t\tcase ComparatorType.InverseIn:\r\n\t\t\treturn isFactValueInTargetItem(userFactRawValue, userFactSpecValue as T);\r\n\t\tcase ComparatorType.InverseNotIn:\r\n\t\t\treturn !isFactValueInTargetItem(userFactRawValue, userFactSpecValue as T);\r\n\t\tdefault:\r\n\t\t\tassertNever(comparator);\r\n\t}\r\n}\r\n\r\nfunction assertNever(_: never) {\r\n\treturn false;\r\n}\r\n\r\nfunction isFactValueInTargetItem<T>(userFactTargetValues: T | T[], userFactRawValue: T): boolean {\r\n\tif (typeof userFactRawValue === \"string\") {\r\n\t\tconst factValue = userFactRawValue.toLowerCase();\r\n\t\tif (typeof userFactTargetValues === \"string\") {\r\n\t\t\t// both the inputs are strings, do a plain indexOf\r\n\t\t\treturn (userFactTargetValues as string).toLowerCase().indexOf(factValue) !== -1;\r\n\t\t}\r\n\r\n\t\tif (isArray(userFactTargetValues)) {\r\n\t\t\tconst specValues = userFactTargetValues as T[];\r\n\t\t\treturn specValues.some((specValue) => specValue && specValue.toString().toLowerCase() === factValue);\r\n\t\t}\r\n\t}\r\n\r\n\tif (isArray(userFactTargetValues)) {\r\n\t\treturn (userFactTargetValues as T[]).indexOf(userFactRawValue) !== -1;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\nfunction isAValidNumber(numberValue: number, value: string, rawUserFactName: string, factType?: UserFactType) {\r\n\tif (!isNumber(numberValue)) {\r\n\t\tlet errorMessage = `User fact ${rawUserFactName} has invalid value ${value}`;\r\n\t\tif (factType) {\r\n\t\t\terrorMessage = `Invalid value ${value} was provided for user fact of type ${factType}`;\r\n\t\t}\r\n\r\n\t\tFloodgateEngine.getTelemetryLogger().log_Error(\r\n\t\t\tTelemetryEvent.Floodgate.UserFactsSpecIsAMatch.Failed,\r\n\t\t\terrorMessage);\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse {\r\n\t\tvar a = factory();\r\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\r\n\t}\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// identity function for calling harmony imports with the correct context\r\n/******/ \t__webpack_require__.i = function(value) { return value; };\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 15);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    // BUG!!: need implement, currently, just handle 32bits number\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype.Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    // BUG!!: need implement, currently, just handle 32bits number\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype.Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number.ToByte = function (value) {\r\n        return this.ToUInt8(value);\r\n    };\r\n    Number.ToInt16 = function (value) {\r\n        var signMask = (value & 0x8000) << 16 >> 16;\r\n        return (value & 0x7fff) | signMask;\r\n    };\r\n    Number.ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number.ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number.ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* Enums.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Common enum values used in the SDK.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    // Supports scrubbing of the last octet in a IPV4 address. E.g. 10.121.227.147 becomes 10.121.227.*\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* AWTBondSerializer.ts\r\n* Author: Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class to handler bond serialization.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Bond = __webpack_require__(9);\r\nvar Enums_1 = __webpack_require__(1);\r\nvar Utils = __webpack_require__(3);\r\nvar AWTBondSerializer = /** @class */ (function () {\r\n    function AWTBondSerializer() {\r\n    }\r\n    AWTBondSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // Begin ClientCollector request\r\n        //Write TokenToDataPackagesMap\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 3);\r\n        writer.WriteMapContainerBegin(tokenCount, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_LIST);\r\n        Object.keys(requestDictionary).forEach(function (token) {\r\n            //write token\r\n            writer.WriteString(token);\r\n            var dataPackage = requestDictionary[token];\r\n            // Write list of DataPackages\r\n            writer.WriteContainerBegin(1, Bond.BondDataType.BT_STRUCT);\r\n            // Source\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 2);\r\n            writer.WriteString('act_default_source');\r\n            // DataPackageId\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 5);\r\n            writer.WriteString(Utils.newGuid());\r\n            // Timestamp\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_INT64, 6);\r\n            writer.WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n            // Records\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_LIST, 8);\r\n            writer.WriteContainerBegin(dataPackage.length, Bond.BondDataType.BT_STRUCT);\r\n            for (var i = 0; i < dataPackage.length; ++i) {\r\n                writer.WriteBlob(dataPackage[i]);\r\n            }\r\n            writer.WriteStructEnd(false);\r\n        });\r\n        // End ClientCollector\r\n        writer.WriteStructEnd(false);\r\n        return stream.GetBuffer();\r\n    };\r\n    // As per mappings at https://skype.visualstudio.com/SCC/F.S4L.FUNDAMENTALS/_git/infrastructure_data_clienttelemetry?\r\n    // path=%2Fclienttelemetry%2Fsrc%2Fbond%2FDataPackage.bond&version=GBdev2&_a=contents\r\n    // Requires that the values of AWTEventData.properties must all be AWTEventProperty\r\n    AWTBondSerializer.getEventBlob = function (eventData) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // ID\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 1);\r\n        writer.WriteString(eventData.id);\r\n        // Timestamp\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_INT64, 3);\r\n        writer.WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 5);\r\n        writer.WriteString(eventData.type);\r\n        // Event Type\r\n        writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 6);\r\n        writer.WriteString(eventData.name);\r\n        var propsString = [];\r\n        var piiProps = [];\r\n        // Iterate across event data properties and separate based on pii\r\n        Object.keys(eventData.properties).forEach(function (key) {\r\n            var property = eventData.properties[key];\r\n            if (property.pii === Enums_1.AWTPiiKind.NotSet) {\r\n                propsString.push(key);\r\n            }\r\n            else {\r\n                piiProps.push(key);\r\n            }\r\n        });\r\n        //Extension map\r\n        if (propsString.length) {\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 13);\r\n            writer.WriteMapContainerBegin(propsString.length, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_STRING);\r\n            propsString.forEach(function (name) {\r\n                writer.WriteString(name);\r\n                writer.WriteString(eventData.properties[name].value);\r\n            });\r\n        }\r\n        // Pii\r\n        if (piiProps.length) {\r\n            writer.WriteFieldBegin(Bond.BondDataType.BT_MAP, 30);\r\n            writer.WriteMapContainerBegin(piiProps.length, Bond.BondDataType.BT_STRING, Bond.BondDataType.BT_STRUCT);\r\n            piiProps.forEach(function (name) {\r\n                writer.WriteString(name);\r\n                // PII Data\r\n                // O365 scrubber type\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_INT32, 1);\r\n                writer.WriteInt32(1);\r\n                // PII Kind\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_INT32, 2);\r\n                writer.WriteInt32(eventData.properties[name].pii);\r\n                // Value\r\n                writer.WriteFieldBegin(Bond.BondDataType.BT_STRING, 3);\r\n                writer.WriteString(eventData.properties[name].value);\r\n                writer.WriteStructEnd(false);\r\n            });\r\n        }\r\n        writer.WriteStructEnd(false);\r\n        return stream.GetBuffer();\r\n    };\r\n    AWTBondSerializer.base64Encode = function (data) {\r\n        return Bond.Encoding.Base64.GetString(data);\r\n    };\r\n    return AWTBondSerializer;\r\n}());\r\nexports.default = AWTBondSerializer;\r\n\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* Author: Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Common functions used in the SDK.\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar GuidRegex = /[xy]/g;\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\nfunction isPii(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPii = isPii;\r\n\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class for SDK version.\r\n*/\r\nexports.Version = '1.2.2';\r\nexports.FullVersionString = 'AWT-Web-CJS-' + exports.Version;\r\n\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar Enums_1 = __webpack_require__(1);\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nvar AWT_1 = __webpack_require__(13);\r\nexports.AWT = AWT_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\n\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar BondDataType;\r\n(function (BondDataType) {\r\n    BondDataType[BondDataType[\"BT_STOP\"] = 0] = \"BT_STOP\";\r\n    BondDataType[BondDataType[\"BT_STOP_BASE\"] = 1] = \"BT_STOP_BASE\";\r\n    BondDataType[BondDataType[\"BT_UINT8\"] = 3] = \"BT_UINT8\";\r\n    BondDataType[BondDataType[\"BT_UINT32\"] = 5] = \"BT_UINT32\";\r\n    BondDataType[BondDataType[\"BT_UINT64\"] = 6] = \"BT_UINT64\";\r\n    BondDataType[BondDataType[\"BT_STRING\"] = 9] = \"BT_STRING\";\r\n    BondDataType[BondDataType[\"BT_STRUCT\"] = 10] = \"BT_STRUCT\";\r\n    BondDataType[BondDataType[\"BT_LIST\"] = 11] = \"BT_LIST\";\r\n    BondDataType[BondDataType[\"BT_MAP\"] = 13] = \"BT_MAP\";\r\n    BondDataType[BondDataType[\"BT_INT32\"] = 16] = \"BT_INT32\";\r\n    BondDataType[BondDataType[\"BT_INT64\"] = 17] = \"BT_INT64\";\r\n    BondDataType[BondDataType[\"BT_UNAVAILABLE\"] = 127] = \"BT_UNAVAILABLE\";\r\n})(BondDataType = exports.BondDataType || (exports.BondDataType = {}));\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar Utf8 = /** @class */ (function () {\r\n    function Utf8() {\r\n    }\r\n    Utf8.GetBytes = function (value) {\r\n        var array = [];\r\n        for (var i = 0; i < value.length; ++i) {\r\n            var char = value.charCodeAt(i);\r\n            if (char < 0x80) {\r\n                array.push(char);\r\n            }\r\n            else if (char < 0x800) {\r\n                array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n            }\r\n            else if (char < 0xd800 || char >= 0xe000) {\r\n                array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n            }\r\n            else {\r\n                char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n                array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n            }\r\n        }\r\n        return array;\r\n    };\r\n    return Utf8;\r\n}());\r\nexports.Utf8 = Utf8;\r\nvar Base64 = /** @class */ (function () {\r\n    function Base64() {\r\n    }\r\n    Base64.GetString = function (inArray) {\r\n        var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n        var output = [];\r\n        var paddingBytes = inArray.length % 3;\r\n        var toBase64 = function (num) {\r\n            return [lookup.charAt((num >> 18) & 0x3F),\r\n                lookup.charAt((num >> 12) & 0x3F),\r\n                lookup.charAt((num >> 6) & 0x3F),\r\n                lookup.charAt(num & 0x3F)].join('');\r\n        };\r\n        for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n            var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n            output.push(toBase64(temp));\r\n        }\r\n        switch (paddingBytes) {\r\n            case 1:\r\n                var temp = inArray[inArray.length - 1];\r\n                output.push(lookup.charAt(temp >> 2));\r\n                output.push(lookup.charAt((temp << 4) & 0x3F));\r\n                output.push('==');\r\n                break;\r\n            case 2:\r\n                var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n                output.push(lookup.charAt(temp2 >> 10));\r\n                output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n                output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n                output.push('=');\r\n                break;\r\n        }\r\n        return output.join('');\r\n    };\r\n    return Base64;\r\n}());\r\nexports.Base64 = Base64;\r\nvar Varint = /** @class */ (function () {\r\n    function Varint() {\r\n    }\r\n    Varint.GetBytes = function (value) {\r\n        var array = [];\r\n        while (value & 0xffffff80) {\r\n            array.push((value & 0x7f) | 0x80);\r\n            value >>>= 7;\r\n        }\r\n        array.push(value & 0x7f);\r\n        return array;\r\n    };\r\n    return Varint;\r\n}());\r\nexports.Varint = Varint;\r\nvar Varint64 = /** @class */ (function () {\r\n    function Varint64() {\r\n    }\r\n    Varint64.GetBytes = function (value) {\r\n        var low = value.low;\r\n        var high = value.high;\r\n        var array = [];\r\n        while (high || (0xffffff80 & low)) {\r\n            array.push((low & 0x7f) | 0x80);\r\n            low = ((high & 0x7f) << 25) | (low >>> 7);\r\n            high >>>= 7;\r\n        }\r\n        array.push(low & 0x7f);\r\n        return array;\r\n    };\r\n    return Varint64;\r\n}());\r\nexports.Varint64 = Varint64;\r\nvar Zigzag = /** @class */ (function () {\r\n    function Zigzag() {\r\n    }\r\n    Zigzag.EncodeZigzag32 = function (value) {\r\n        value = microsoft_bond_primitives_1.Number.ToInt32(value);\r\n        return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n    };\r\n    Zigzag.EncodeZigzag64 = function (value) {\r\n        var low = value.low;\r\n        var high = value.high;\r\n        var tmpH = (high << 1) | (low >>> 31);\r\n        var tmpL = low << 1;\r\n        if (high & 0x80000000) {\r\n            tmpH = ~tmpH;\r\n            tmpL = ~tmpL;\r\n        }\r\n        var res = new microsoft_bond_primitives_1.UInt64('0');\r\n        res.low = tmpL;\r\n        res.high = tmpH;\r\n        return res;\r\n    };\r\n    return Zigzag;\r\n}());\r\nexports.Zigzag = Zigzag;\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype.WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number.ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype.Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this.WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype.GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = __webpack_require__(6);\r\nexports.BondDataType = bond_const_1.BondDataType;\r\nvar Encoding = __webpack_require__(7);\r\nexports.Encoding = Encoding;\r\nvar IO = __webpack_require__(8);\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = __webpack_require__(0);\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteBlob = function (blob) {\r\n        this._stream.Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteContainerBegin = function (size, elementType) {\r\n        this.WriteUInt8(elementType);\r\n        this.WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this.WriteUInt8(keyType);\r\n        this.WriteUInt8(valueType);\r\n        this.WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteFieldBegin = function (type, id) {\r\n        if (id <= 5) {\r\n            this._stream.WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream.WriteByte(type | (6 << 5));\r\n            this._stream.WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream.WriteByte(type | (7 << 5));\r\n            this._stream.WriteByte(id);\r\n            this._stream.WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteInt32 = function (value) {\r\n        value = Encoding.Zigzag.EncodeZigzag32(value);\r\n        this.WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteInt64 = function (value) {\r\n        this.WriteUInt64(Encoding.Zigzag.EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteString = function (value) {\r\n        if (value === '') {\r\n            this.WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = Encoding.Utf8.GetBytes(value);\r\n            this.WriteUInt32(array.length);\r\n            this._stream.Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteStructEnd = function (isBase) {\r\n        this.WriteUInt8(isBase ? bond_const_1.BondDataType.BT_STOP_BASE : bond_const_1.BondDataType.BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt32 = function (value) {\r\n        var array = Encoding.Varint.GetBytes(microsoft_bond_primitives_1.Number.ToUInt32(value));\r\n        this._stream.Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt64 = function (value) {\r\n        var array = Encoding.Varint64.GetBytes(value);\r\n        this._stream.Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype.WriteUInt8 = function (value) {\r\n        this._stream.WriteByte(microsoft_bond_primitives_1.Number.ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        var _this = this;\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs_1 = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                killedTokens.forEach(function (token) {\r\n                    _this._killedTokenDictionary[token] = Date.now() + durationMs_1;\r\n                });\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTBondSerializer_1 = __webpack_require__(2);\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_maxRequestSize, _outboundQueue) {\r\n        this._maxRequestSize = _maxRequestSize;\r\n        this._outboundQueue = _outboundQueue;\r\n        this._currentBatch = {};\r\n        this._currentBatchSize = 0;\r\n    }\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        var serializedEvent = AWTBondSerializer_1.default.getEventBlob(event);\r\n        if (serializedEvent.length > this._maxRequestSize) {\r\n            //single event too big\r\n            return;\r\n        }\r\n        if (this._currentBatchSize + serializedEvent.length > this._maxRequestSize) {\r\n            this.flushBatch();\r\n        }\r\n        else {\r\n            if (this._currentBatch[event.tenantToken] === undefined) {\r\n                this._currentBatch[event.tenantToken] = [];\r\n            }\r\n            this._currentBatch[event.tenantToken].push(serializedEvent);\r\n            this._currentBatchSize += serializedEvent.length;\r\n        }\r\n    };\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentBatchSize > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentBatchSize = 0;\r\n        }\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* Author: Abhilash Panwar (abpanwar)\r\n* Copyright: Microsoft 2016\r\n* Class for retry policy.\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* The below expression reads that we should only retry for:\r\n            - HttpStatusCodes that are smaller than 300.\r\n            - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n              and 505-HttpVersionNotSupport).\r\n            - HttpStatusCode 408-RequestTimeout.\r\n           This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(1);\r\nvar AWTTransmissionManager_1 = __webpack_require__(14);\r\nvar Utils = __webpack_require__(3);\r\nvar Version = __webpack_require__(4);\r\nvar AllTokens = 'allTkns';\r\nvar EventNameAndTypeRegex = /^[a-zA-Z0-9]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nvar EventNameDotRegex = /\\./g;\r\nvar PropertyNameRegex = /^[a-zA-Z0-9](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nvar AWT = /** @class */ (function () {\r\n    function AWT() {\r\n    }\r\n    AWT.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            // tslint:disable-next-line\r\n            throw 'Already Initialized';\r\n        }\r\n        this._defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        //Create sender\r\n        AWTTransmissionManager_1.default.initialize(this._config);\r\n        this._isInitialized = true;\r\n    };\r\n    AWT.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManager_1.default.flush(callback);\r\n        }\r\n    };\r\n    AWT.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            this._isDestroyed = true;\r\n            AWTTransmissionManager_1.default.flushAndTeardown();\r\n        }\r\n    };\r\n    AWT.setContext = function (name, property, tenantToken) {\r\n        if (tenantToken === void 0) { tenantToken = AllTokens; }\r\n        property = this._sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            return;\r\n        }\r\n        if (!this._contextProperties[tenantToken]) {\r\n            this._contextProperties[tenantToken] = {};\r\n        }\r\n        this._contextProperties[tenantToken][name] = property;\r\n    };\r\n    AWT.logEvent = function (event) {\r\n        var _this = this;\r\n        if (this._isInitialized) {\r\n            if (!event.name || !event.properties) {\r\n                return;\r\n            }\r\n            event.name = event.name.toLowerCase();\r\n            event.name.replace(EventNameDotRegex, '_');\r\n            var typePrefix = '';\r\n            if (!event.type) {\r\n                event.type = 'custom';\r\n            }\r\n            else {\r\n                event.type.toLowerCase();\r\n                typePrefix = 'custom.';\r\n            }\r\n            if (!EventNameAndTypeRegex.test(event.name) || !EventNameAndTypeRegex.test(event.type)) {\r\n                return;\r\n            }\r\n            event.type = typePrefix + event.type;\r\n            if (isNaN(event.timestamp)) {\r\n                event.timestamp = (new Date()).getTime();\r\n            }\r\n            if (!event.tenantToken) {\r\n                event.tenantToken = this._defaultTenantToken;\r\n            }\r\n            event.id = Utils.newGuid();\r\n            Object.keys(event.properties).forEach(function (name) {\r\n                event.properties[name] = _this._sanitizeProperty(name, event.properties[name]);\r\n                if (event.properties[name] === null) {\r\n                    delete event.properties[name];\r\n                }\r\n            });\r\n            this._addContextIfAbsent(event, event.tenantToken);\r\n            this._addContextIfAbsent(event, AllTokens);\r\n            if (Object.keys(event.properties).length === 0) {\r\n                return;\r\n            }\r\n            this._setDefaultProperty(event, 'EventInfo.InitId', this._getInitId(event.tenantToken));\r\n            this._setDefaultProperty(event, 'EventInfo.Sequence', this._getSequenceId(event.tenantToken));\r\n            this._setDefaultProperty(event, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n            this._setDefaultProperty(event, 'EventInfo.Name', event.name);\r\n            this._setDefaultProperty(event, 'EventInfo.Time', (new Date(event.timestamp)).toISOString());\r\n            AWTTransmissionManager_1.default.sendEvent(event);\r\n        }\r\n    };\r\n    AWT._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUrl) {\r\n            this._config.collectorUrl = config.collectorUrl;\r\n        }\r\n        if (config.sendingTimer > 1000) {\r\n            this._config.sendingTimer = config.sendingTimer;\r\n        }\r\n    };\r\n    AWT._getInitId = function (tenantToken) {\r\n        if (this._initIdMap[tenantToken] === undefined) {\r\n            this._initIdMap[tenantToken] = Utils.newGuid();\r\n        }\r\n        return this._initIdMap[tenantToken];\r\n    };\r\n    AWT._getSequenceId = function (tenantToken) {\r\n        if (this._sequenceIdMap[tenantToken] === undefined) {\r\n            this._sequenceIdMap[tenantToken] = 0;\r\n        }\r\n        return (++this._sequenceIdMap[tenantToken]).toString();\r\n    };\r\n    AWT._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet };\r\n    };\r\n    AWT._addContextIfAbsent = function (event, tenantToken) {\r\n        if (this._contextProperties[tenantToken]) {\r\n            var context_1 = this._contextProperties[tenantToken];\r\n            Object.keys(context_1).forEach(function (name) {\r\n                if (!event.properties[name]) {\r\n                    event.properties[name] = context_1[name];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    AWT._sanitizeProperty = function (name, property) {\r\n        if (typeof property === 'string' || typeof property === 'number' || typeof property === 'boolean') {\r\n            property = { value: property };\r\n        }\r\n        if (!PropertyNameRegex.test(name) || property === undefined || property === null\r\n            || property.value === null || property.value === undefined || property.value === '') {\r\n            return null;\r\n        }\r\n        if (typeof property.pii === 'undefined') {\r\n            property.pii = Enums_1.AWTPiiKind.NotSet;\r\n        }\r\n        property.value = property.value.toString();\r\n        return Utils.isPii(property.pii) ? property : null;\r\n    };\r\n    AWT._isInitialized = false;\r\n    AWT._isDestroyed = false;\r\n    AWT._contextProperties = {};\r\n    AWT._sequenceIdMap = {};\r\n    AWT._initIdMap = {};\r\n    AWT._config = {\r\n        collectorUrl: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        sendingTimer: 1000\r\n    };\r\n    return AWT;\r\n}());\r\nexports.default = AWT;\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTRecordBatcher_1 = __webpack_require__(11);\r\nvar AWTBondSerializer_1 = __webpack_require__(2);\r\nvar AWTRetryPolicy_1 = __webpack_require__(12);\r\nvar AWTKillSwitch_1 = __webpack_require__(10);\r\nvar Version = __webpack_require__(4);\r\nvar FlushCheckTimer = 250;\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\nvar MaxRetries = 4;\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    AWTTransmissionManager.initialize = function (config) {\r\n        this._inboundQueues.push([]);\r\n        this._recordBatcher = new AWTRecordBatcher_1.default(RequestSizeLimitBytes, this._outboundQueue);\r\n        this._newEventsAllowed = true;\r\n        if (typeof Uint8Array === 'undefined') {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._sendingTimer = config.sendingTimer;\r\n        this._urlString = config.collectorUrl + this._urlString + '&x-apikey=';\r\n    };\r\n    //Push the event into the inbound queue and return\r\n    AWTTransmissionManager.sendEvent = function (event) {\r\n        var _this = this;\r\n        if (this._newEventsAllowed) {\r\n            //Add event to the last inbound queue\r\n            this._inboundQueues[this._inboundQueues.length - 1].push(event);\r\n            if (!this._running && this._timeout < 0 && !this._isCurrentlyFlushing) {\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, this._sendingTimer);\r\n            }\r\n        }\r\n    };\r\n    AWTTransmissionManager.flushAndTeardown = function () {\r\n        this._newEventsAllowed = false;\r\n        this._batchAndSendEvents(true);\r\n    };\r\n    AWTTransmissionManager.flush = function (callback) {\r\n        this._inboundQueues.push([]);\r\n        if (!this._isCurrentlyFlushing) {\r\n            this._isCurrentlyFlushing = true;\r\n            this._flush(callback);\r\n        }\r\n        else {\r\n            this._flushQueue.push(callback);\r\n        }\r\n    };\r\n    AWTTransmissionManager._batchAndSendEvents = function (isTeardown) {\r\n        this._running = true;\r\n        while (this._inboundQueues[0].length > 0 && this._outboundQueue.length < 1) {\r\n            this._recordBatcher.addEventToBatch(this._inboundQueues[0].pop());\r\n        }\r\n        if (this._outboundQueue.length === 0) {\r\n            this._recordBatcher.flushBatch();\r\n        }\r\n        this._sendRequest(this._outboundQueue.pop(), 0, isTeardown);\r\n    };\r\n    AWTTransmissionManager._retryRequestIfNeeded = function (conn, request, tokenCount, apikey, retryCount) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (conn && typeof conn.status !== 'undefined') {\r\n            var killedTokens = this._killSwitch.setKillSwitchTenants(conn.getResponseHeader('kill-tokens'), conn.getResponseHeader('kill-duration-seconds'));\r\n            killedTokens.forEach(function (key) {\r\n                delete request[key];\r\n                tokenCount--;\r\n            });\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(conn.status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry && retryCount < MaxRetries) {\r\n            setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n        }\r\n        else {\r\n            this._handleRequestFinished(null);\r\n        }\r\n    };\r\n    AWTTransmissionManager._sendRequest = function (request, retryCount, isTeardown) {\r\n        var _this = this;\r\n        try {\r\n            var conn_1 = new XMLHttpRequest();\r\n            var tokenCount_1 = 0;\r\n            var apikey_1 = '';\r\n            Object.keys(request).forEach(function (token) {\r\n                if (!_this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey_1.length > 0) {\r\n                        apikey_1 += ',';\r\n                    }\r\n                    apikey_1 += token;\r\n                    tokenCount_1++;\r\n                }\r\n                else {\r\n                    delete request[token];\r\n                }\r\n            });\r\n            conn_1.open('POST', this._urlString + apikey_1, !isTeardown);\r\n            if (!isTeardown) {\r\n                conn_1.ontimeout = function () {\r\n                    _this._retryRequestIfNeeded(conn_1, request, tokenCount_1, apikey_1, retryCount);\r\n                };\r\n                conn_1.onerror = function () {\r\n                    _this._retryRequestIfNeeded(conn_1, request, tokenCount_1, apikey_1, retryCount);\r\n                };\r\n                conn_1.onload = function () {\r\n                    _this._handleRequestFinished(conn_1);\r\n                };\r\n            }\r\n            if (tokenCount_1 > 0) {\r\n                var blob = AWTBondSerializer_1.default.getPayloadBlob(request, tokenCount_1);\r\n                if (typeof Uint8Array === 'undefined') {\r\n                    conn_1.send(AWTBondSerializer_1.default.base64Encode(blob));\r\n                }\r\n                else {\r\n                    conn_1.send(new Uint8Array(blob));\r\n                }\r\n            }\r\n            else if (isTeardown) {\r\n                this._handleRequestFinished(null);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._handleRequestFinished(null);\r\n        }\r\n    };\r\n    AWTTransmissionManager._handleRequestFinished = function (conn) {\r\n        var _this = this;\r\n        if (conn) {\r\n            this._killSwitch.setKillSwitchTenants(conn.getResponseHeader('kill-tokens'), conn.getResponseHeader('kill-duration-seconds'));\r\n        }\r\n        if (this._inboundQueues[0].length > 0) {\r\n            this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, this._sendingTimer);\r\n        }\r\n        else {\r\n            this._timeout = -1;\r\n            this._running = false;\r\n        }\r\n    };\r\n    AWTTransmissionManager._flush = function (callback) {\r\n        var _this = this;\r\n        if (!this._running) {\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            if (this._inboundQueues[0].length > 0) {\r\n                this._batchAndSendEvents(false);\r\n            }\r\n        }\r\n        this._checkPrimaryInboundQueueEmpty(function () {\r\n            //Move the next queue to be primary\r\n            _this._inboundQueues.shift();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._flushQueue.length > 0) {\r\n                setTimeout(function () { return _this._flush(_this._flushQueue.shift()); }, _this._sendingTimer);\r\n            }\r\n            else {\r\n                _this._isCurrentlyFlushing = false;\r\n                if (_this._inboundQueues[0].length > 0) {\r\n                    _this._timeout = setTimeout(function () { return _this._batchAndSendEvents(false); }, _this._sendingTimer);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTTransmissionManager._checkPrimaryInboundQueueEmpty = function (callback) {\r\n        var _this = this;\r\n        if (this._inboundQueues[0].length === 0) {\r\n            this._checkOutboundQueueEmptyAndSent(callback);\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkPrimaryInboundQueueEmpty(callback); }, FlushCheckTimer);\r\n        }\r\n    };\r\n    AWTTransmissionManager._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (!this._running) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, FlushCheckTimer);\r\n        }\r\n    };\r\n    AWTTransmissionManager._outboundQueue = [];\r\n    AWTTransmissionManager._inboundQueues = [];\r\n    AWTTransmissionManager._newEventsAllowed = false;\r\n    AWTTransmissionManager._killSwitch = new AWTKillSwitch_1.default();\r\n    AWTTransmissionManager._isCurrentlyFlushing = false;\r\n    AWTTransmissionManager._flushQueue = [];\r\n    AWTTransmissionManager._running = false;\r\n    AWTTransmissionManager._timeout = -1;\r\n    AWTTransmissionManager._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n        + Version.FullVersionString;\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\nmodule.exports = __webpack_require__(5);\r\n\r\n\r\n/***/ })\r\n/******/ ]);\r\n});\r\n//# sourceMappingURL=aria-webjs-compact-sdk-1.2.2.js.map","import { ISchemaObject } from './schema-object';\r\n\r\nexport enum AnnotationState {\r\n    Undefined = 0,\r\n    //only dealt with on server side\r\n    Created = 10,\r\n    Sent = 20,\r\n    Duplicated = 30, //only to be used for logs -- annotation should never be assigned this state\r\n    //dealt with on client side and server side\r\n    Seen = 40,\r\n    Tried = 50,\r\n    Kept = 60,\r\n    Rejected = 70\r\n}\r\n\r\nexport interface AnnotationMetaData {\r\n    state?: AnnotationState;\r\n    /**\r\n     * Whether this annotation can be shared with coauthors,\r\n     * i.e., an annotation that is not personalized to a given user.\r\n     */\r\n    shareable?: boolean;\r\n    /**\r\n     * This field is intended to be extended by workflow authors\r\n     * that want to use custom metadata for their annotations.\r\n     */\r\n    customMetadata?: ISchemaObject;\r\n}\r\n\r\nexport interface IAnnotationActivationConfigs {\r\n    /**\r\n     * The type name of annotation.\r\n     */\r\n    annotationType: string;\r\n\r\n    /**\r\n     * This field contains all configs of given annotation type.\r\n     * The later config arrives, the later it appears in the array.\r\n     */\r\n    configs: ISchemaObject[];\r\n}\r\n\r\n/**\r\n * Base class for all annotations. May have other annotations as children.\r\n */\r\nexport interface IAnnotation extends ISchemaObject {\r\n    /**\r\n     * Unique ID of this annotation. Must not be re-used for an annotation on a\r\n     * different parent (similarly, annotations may be updated or deleted, but\r\n     * may not be moved to a different parent). If this is not set by the workflow\r\n     * that produced the annotation, it will be set to a random GUID by the\r\n     * runtime. If a workflow produces an annotation identical to an existing\r\n     * annotation that differs only by ID, the newer annotation will be discarded\r\n     * and no update will be sent to the client.\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * The ID of the owner of the annotation (i.e. the service or the engine that\r\n     * produced the annotation)\r\n     */\r\n    ownerId?: string;\r\n\r\n    /**\r\n     * Stable but not necessarily unique identifier representing the range of content covered\r\n     * by this annotation. The method by which this is generated is unspecified\r\n     * and will sometimes vary across different types of annotations, but it\r\n     * should generally be thought of as a hash over all the content within the\r\n     * \"invalidation range\" of the annotation (that is, the parts of the user content\r\n     * in which any edit will render the annotation stale, possibly including formatting\r\n     * and other metadata in addition to basic content such as text).\r\n     *\r\n     * These may be shared by multiple annotations covering exactly the same content.\r\n     * Random collisions between different regions must be avoided. This hash should\r\n     * have a minimum of 8 bytes of entropy.\r\n     *\r\n     * This is used by Office clients to implement persistence features. If left\r\n     * unset, some features may be turned off for this annotation.\r\n     */\r\n    invalidationHash?: string;\r\n\r\n    /**\r\n     * Information about how the user has interacted with the annotation\r\n     * (sent, seen, tried, kept). The property name is deliberately\r\n     * obfuscated to reduce the size of the serialized object and is\r\n     * intended for internal use, whereas the metadata property is intended\r\n     * for external use by workflow authors.\r\n     *\r\n     * This property will have the following names in our target languages:\r\n     * @cppname Metadata\r\n     */\r\n    M_?: AnnotationMetaData;\r\n\r\n    /**\r\n     * Information about how the user has interacted with the annotation\r\n     * (sent, seen, tried, kept). This is backed by the M_ field, but\r\n     * provides a better property name for workflow authors to use.\r\n     */\r\n    metadata?: AnnotationMetaData;\r\n}\r\n\r\n/**\r\n * Represents a simple true/false classification annotation.\r\n */\r\nexport interface IBinaryClassificationAnnotation extends IAnnotation {\r\n    /**\r\n     * The name of the classification\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * The value of the classification\r\n     */\r\n    readonly value: boolean;\r\n}\r\n","import { ISchemaObject } from './schema-object';\r\nimport { AnnotationMetaData } from './annotations';\r\n\r\n/**\r\n * The path to an item in the session. Each element must be unique within its\r\n * parent (similar to a file path). Case-sensitive.\r\n */\r\nexport type ItemPath = string[];\r\n\r\nexport type ItemPathKey = string;\r\n\r\nexport type OperationType = string;\r\n\r\n/**\r\n * Represents a single item in the session (such as a tile or an annotation)\r\n */\r\nexport interface Item {\r\n    /**\r\n     * The identifier of this item (unique within its parent). Case-sensitive.\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Optional identity of the source this item (used to group related items)\r\n     */\r\n    source?: string;\r\n\r\n    /**\r\n     * The revision that identifies the current state of this item (must be\r\n     * unique for this item). Optional for operations that do not change the\r\n     * state of existing items (such as focus and visible).\r\n     */\r\n    revId?: string;\r\n\r\n    /**\r\n     * The identifier of the scope item from which this item was originally\r\n     * generated. This attribute groups item related to an execution of the\r\n     * JoinWorkflow that the scope item is related. Optional for items that\r\n     * do not belong to a JoinWorkflow scope.\r\n     */\r\n    contextId?: string;\r\n\r\n    /**\r\n     * The contents of the item. Optional for operations that do not change\r\n     * the state of existing items (such as focus and visible).\r\n     */\r\n    body?: ISchemaObject;\r\n}\r\n\r\nexport interface IItemReference {\r\n    /**\r\n     * Fully qualified path to the referenced tile.\r\n     * Example: ['session', 'docId', 'referencedTileId']\r\n     */\r\n    readonly referencedPath: ItemPath;\r\n}\r\n\r\nexport enum ItemOperation {\r\n    None,\r\n    Added,\r\n    Updated,\r\n    Deleted\r\n}\r\n\r\n/**\r\n * Item deltas are diffs between a current revision of a tile and the expected new revision.\r\n * Deltas contain all the information required to transform the current tile revision to the\r\n * new one and are self contained.\r\n */\r\nexport interface IItemDelta extends ISchemaObject { }\r\n\r\n/**\r\n * Types of changes for tiles.\r\n * What each change means depends on specific scenario.\r\n */\r\n export enum ItemChanges {\r\n    /**\r\n     * TextTile: Content of tile has changed.\r\n     */\r\n    ContentChanged,\r\n    /**\r\n     * TextTile: Content was previously empty (null, undefined, only white spaces).\r\n     */\r\n    ContentWasEmpty,\r\n    /**\r\n     * FormattedTextTile: Formatting has changed.\r\n     */\r\n    FormattingChanged,\r\n}\r\n\r\n/**\r\n * Delta containing information about tile changes since last workflow execution.\r\n */\r\nexport interface IItemChangesDelta extends IItemDelta {\r\n    changes: ItemChanges[];\r\n}\r\n\r\nexport interface ItemWithPath extends Item {\r\n    parentPath: ItemPath;\r\n    delta?: IItemDelta;\r\n    op?: ItemOperation;\r\n}\r\n\r\n/**\r\n * Base class for all operations (atomic modifications to the session state)\r\n */\r\nexport interface IOperation extends ISchemaObject {\r\n    /**\r\n     * The path to the parent of the items involved in the operation. Empty if this operation\r\n     * applies to the root item.\r\n     */\r\n    parentPath: ItemPath;\r\n\r\n    /**\r\n     * The optional expected revision of the parent item in order for this operation to be\r\n     * consistent with the state of the parent. Typically used by operations modifying\r\n     * annotations.\r\n     */\r\n    parentRevId?: string;\r\n\r\n    /**\r\n     * The set of items involved in the operation. If multiple items are provided, they must\r\n     * be contiguous siblings. Each item is modified in sequence (so order matters) and the\r\n     * overall operation is considered atomic; a session that has modified only some of the\r\n     * items is not in a valid state.\r\n     */\r\n    items: Item[];\r\n}\r\n\r\n/**\r\n * Base class for Add/Move operations\r\n */\r\nexport interface IOperationWithSiblingContext extends IOperation {\r\n    /**\r\n     * Previous sibling (reserved string '#head#' indicates this is the first sibling), identified\r\n     * by its Item.id field. If not supplied, ordering WRT items not included in this operation is\r\n     * determined by operation sequence order (items are added to the end by default).\r\n     */\r\n    prevId?: string;\r\n\r\n    /**\r\n     * Next sibling (reserved string '#tail#' indicates this is the last sibling), identified\r\n     * by its Item.id field. If not supplied, ordering WRT items not included in this operation is\r\n     * determined by operation sequence order (items are added to the end by default).\r\n     */\r\n    nextId?: string;\r\n}\r\n\r\n/**\r\n * Adds one or more items to the session state. See base class for sibling context.\r\n */\r\nexport interface IAddOperation extends IOperationWithSiblingContext { }\r\n\r\n/**\r\n * Moves one or more items to a different parent. See base class for sibling context.\r\n */\r\nexport interface IMoveOperation extends IOperationWithSiblingContext {\r\n    /**\r\n     * The parent path from which the items are moving\r\n     */\r\n    prevParentPath: ItemPath;\r\n}\r\n\r\nexport interface IUpdateAnnotationMetaDataOperation extends IOperation {\r\n    /**\r\n     * @cppname Metadata\r\n     */\r\n    M_: AnnotationMetaData;\r\n}\r\n\r\n/**\r\n * Updates the entire content of one or more items.\r\n */\r\nexport interface IUpdateOperation extends IOperation { }\r\n\r\n/**\r\n * Deletes one or more items, and their children, from the session state.\r\n */\r\nexport interface IDeleteOperation extends IOperation { }\r\n\r\n/**\r\n * Purges an item (and its subtree), keeping everything else.\r\n * This is an efficient way to remove a large portion of the model.\r\n * Use only when the portion removed is much larger than what will\r\n * be left. For example deleting the whole document.\r\n *\r\n * Side effects of this operations is canceling all notifications\r\n * to workflows and not triggering any notifications for the removed\r\n * portion. Use at your own risk.\r\n */\r\nexport interface IPurgeOperation extends IOperation { }\r\n\r\n/**\r\n * Indicates that one or more items have gained or lost user focus.\r\n */\r\nexport interface IFocusOperation extends IOperation {\r\n    /**\r\n     * The new focus state\r\n     */\r\n    isFocused: boolean;\r\n}\r\n\r\n/**\r\n * Indicates that one or more items have gained or lost user visibility.\r\n */\r\nexport interface IVisibilityOperation extends IOperation {\r\n    /**\r\n     * The new visibility state\r\n     */\r\n    isVisible: boolean;\r\n}\r\n\r\n/**\r\n * A more efficient update operation that uses deltas instead of full tiles for\r\n * hosts that support producing tile deltas.\r\n */\r\nexport interface IDeltaUpdateOperation extends IOperation { }\r\n\r\n\r\n/**\r\n * An operation used by the client to send a MicroSyncMessage to the server.\r\n */\r\nexport interface IMicroSyncOperation extends IOperation {\r\n    /**\r\n     * Sequence number (message is applied on receipt if omitted).\r\n     * Not yet implemented by server\r\n     */\r\n    readonly seq?: number;\r\n\r\n    /**\r\n     * One of 'Add', 'Update', 'Delete' (defaults to 'Add' if omitted).\r\n     * Not yet implemented by server\r\n     */\r\n    readonly opType?: string;\r\n}\r\n\r\n/**\r\n * Contains any signals that occurred during the session.\r\n * @typeprefix AugLoop_Signals\r\n */\r\nexport interface ISignalOperation extends IOperation {\r\n}\r\n","import { ISchemaObject } from './schema-object';\r\n\r\n// Binary\r\n// Below types are allowing us to send one or more binary contents contained in other schema objects\r\n// Will be sent more efficiently over the network\r\nexport enum BlobRefType {\r\n    // If this is set then there is no way to get the binary data\r\n    None = 0,\r\n    // When this is set value is URL we can simply call HTTPS GET to fetch binary data. This URL must be on the AL service allow-list.\r\n    HttpsGetDownloadUrl,\r\n    // When this is set value is a blob coded location that can be used to retrieve the data from the Azure Blob Storage.\r\n    // It is only valid for one pair of session key and userId.\r\n    AlCodedLocation\r\n}\r\n\r\nexport interface IBlobRef {\r\n    readonly refType: BlobRefType;\r\n    readonly value: string;\r\n}\r\n\r\nexport interface IBlob extends ISchemaObject {\r\n    // Unique Id set for the content when uploading it. This is set by client and must be unique for the whole session.\r\n    readonly id: string;\r\n\r\n    // Size of data in bytes\r\n    readonly sizeBytes: number;\r\n\r\n    // Actual data or AL internal Id used for fetching data. Optional if data is not delivered at this point in time.\r\n    // If it is internal Id it is created and maintained by AL.\r\n    readonly data?: Uint8Array;\r\n\r\n    // Reference to data. Optional if data/reference is not delivered at this point in time.\r\n    readonly dataPointer?: IBlobRef;\r\n}\r\n\r\n// Binary\r\n// The base class for all schema objects that have large binary portions\r\n// Will be sent more efficiently over the network\r\nexport interface IBinary extends ISchemaObject {\r\n    data?: Uint8Array;\r\n}\r\n\r\n// TileGroup\r\n// Represents a group of tiles. This can be used by hosts to\r\n// provide any arbitrary grouping of tiles at any level.\r\nexport interface ITileGroup extends ISchemaObject { }\r\n\r\n// Session\r\n// Represents a user session. A user session can have more than one document.\r\n// It is the root of the whole content tree\r\nexport interface ISession extends ITileGroup {\r\n    // The current active user ID\r\n    readonly activeUserId: string;\r\n\r\n    // DPIs of client screen\r\n    readonly widthDpi?: number;\r\n    readonly heightDpi?: number;\r\n}\r\n\r\n// Document Open Type\r\n// Represents the method with which the document was opened at the client\r\nexport enum OpenType {\r\n    // the document was newly created\r\n    NewDocument = 0,\r\n    // an old document opened for editing\r\n    EditDocument = 1,\r\n    // document to be viewed\r\n    ViewOnlyDocument = 2\r\n}\r\n\r\n// Document\r\n// Represents a document node\r\nexport interface IDocument extends ITileGroup {\r\n    // whether the document is readonly or not\r\n    readonly isReadonly: boolean;\r\n\r\n    // document title\r\n    readonly title?: string;\r\n\r\n    // document url\r\n    readonly url?: string;\r\n\r\n    // determines the OpenType of the document\r\n    readonly openType?: OpenType;\r\n}\r\n\r\n// Represents an interface for sub-document nodes\r\nexport interface ISubDocument extends ISchemaObject {}\r\n\r\nexport class GridConstants {\r\n    static readonly lowerIndexBound = 1;\r\n    static readonly maxNumberOfRows = 1048576;\r\n    static readonly maxNumberOfColumns = 16384;\r\n    static readonly firstColumnName = 'A';\r\n    static readonly lastColumnName = 'XFD';\r\n}\r\n\r\n// Represents any cell within a table. This can be used by both Word and Excel tables.\r\nexport interface IGridCell extends ISchemaObject {\r\n    // The column number of this cell\r\n    readonly column: number;\r\n\r\n    // The row number of this cell\r\n    readonly row: number;\r\n}\r\n\r\n// Represents the context of the grid neighborhood for when a grid is passed to\r\n// execute workflow as an array. Used by the workflow to reconstruct the neighborhood\r\nexport interface IGridNeighborhoodContext extends ISchemaObject {\r\n    // The width of the neighborhood\r\n    readonly width: number;\r\n\r\n    // The height of the neighborhood\r\n    readonly height: number;\r\n\r\n    // The width of the retrieved part of neighborhood\r\n    readonly retrievedWidth: number;\r\n\r\n    // The height of the retrieved part of neighborhood\r\n    readonly retrievedHeight: number;\r\n\r\n    // The row of the cell at the top left of the neighborhood\r\n    readonly neighborhoodTopRow: number;\r\n\r\n    // The column of the cell at the top left of the neighborhood\r\n    readonly neighborhoodLeftColumn: number;\r\n\r\n    // The row of the cell at the top left of the grid inside the neighborhood\r\n    readonly targetGridTopRow: number;\r\n\r\n    // The column of the cell at the top left of the grid inside the neighborhood\r\n    readonly targetGridLeftColumn: number;\r\n\r\n    /**\r\n     * relative location of top row of target grid in the neighborhood\r\n     */\r\n    readonly targetGridRelativeTopRow: number;\r\n\r\n    /**\r\n     * relative location of left column of target grid in the neighborhood\r\n     */\r\n    readonly targetGridRelativeLeftColumn: number;\r\n\r\n    /**\r\n     * The number of non-empty cells of the neighborhood\r\n     */\r\n    readonly numberOfNonEmptyCells: number;\r\n}\r\n\r\n/**\r\n * Base interface represents all the context information for dynamic workflow execution.\r\n */\r\nexport interface IDynamicContext extends ISchemaObject { }\r\n\r\n/**\r\n * Base interface representing session context holder.\r\n */\r\nexport interface IContextHolder extends ISchemaObject { }\r\n\r\n/**\r\n * Interface representing User within the session.\r\n */\r\nexport interface IUserContextHolder extends IContextHolder {\r\n    // Currently empty, in future should probably take some user related properties from session.\r\n}\r\n\r\nexport interface ITenantContextHolder extends IContextHolder {\r\n    // Currently empty, in future should probably take some tenant related properties from session.\r\n}\r\n","// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fannotations.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\n\r\nimport { AnnotationMetaData, IAnnotation, IBinaryClassificationAnnotation } from '../annotations';\r\nimport { SchemaObject } from './schema-object.g';\r\nimport { ISchemaObject, SchemaObjectHeader } from '../schema-object';\r\n\r\nexport class Annotation implements IAnnotation {\r\n    public id?: string;\r\n    public ownerId?: string;\r\n    public invalidationHash?: string;\r\n    public M_?: AnnotationMetaData;\r\n    public get metadata(): AnnotationMetaData | undefined { return this.M_; }\r\n    public set metadata(value: AnnotationMetaData | undefined) { this.M_ = value; }\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IAnnotation) {\r\n        SchemaObject.assign(Annotation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Annotation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: Annotation.getTypeName(), B_: Annotation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Annotation type or its inheritor and implements {@link IAnnotation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IAnnotation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Annotation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class BinaryClassificationAnnotation implements IBinaryClassificationAnnotation {\r\n    public readonly name: string;\r\n    public readonly value: boolean;\r\n    public id?: string;\r\n    public ownerId?: string;\r\n    public invalidationHash?: string;\r\n    public M_?: AnnotationMetaData;\r\n    public get metadata(): AnnotationMetaData | undefined { return this.M_; }\r\n    public set metadata(value: AnnotationMetaData | undefined) { this.M_ = value; }\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IBinaryClassificationAnnotation) {\r\n        SchemaObject.assign(BinaryClassificationAnnotation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_BinaryClassificationAnnotation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Annotation'];\r\n    }\r\n    public static readonly H_ = { T_: BinaryClassificationAnnotation.getTypeName(), B_: BinaryClassificationAnnotation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of BinaryClassificationAnnotation type or its inheritor and implements {@link IBinaryClassificationAnnotation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IBinaryClassificationAnnotation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [BinaryClassificationAnnotation.getTypeName()]);\r\n    }\r\n}\r\n\r\n","// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Foperations.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\n\r\nimport { IAddOperation, IDeleteOperation, IDeltaUpdateOperation, IFocusOperation, IItemChangesDelta, IItemDelta, IMicroSyncOperation, IMoveOperation, IOperation, IOperationWithSiblingContext, IPurgeOperation, ISignalOperation, IUpdateAnnotationMetaDataOperation, IUpdateOperation, IVisibilityOperation, Item, ItemChanges, ItemPath } from '../operations';\r\nimport { SchemaObject } from './schema-object.g';\r\nimport { ISchemaObject, SchemaObjectHeader } from '../schema-object';\r\nimport { AnnotationMetaData } from '../annotations';\r\n\r\nexport class ItemDelta implements IItemDelta {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IItemDelta) {\r\n        SchemaObject.assign(ItemDelta, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_ItemDelta';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: ItemDelta.getTypeName(), B_: ItemDelta.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of ItemDelta type or its inheritor and implements {@link IItemDelta}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IItemDelta {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [ItemDelta.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class ItemChangesDelta implements IItemChangesDelta {\r\n    public changes: ItemChanges[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IItemChangesDelta) {\r\n        SchemaObject.assign(ItemChangesDelta, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_ItemChangesDelta';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_ItemDelta'];\r\n    }\r\n    public static readonly H_ = { T_: ItemChangesDelta.getTypeName(), B_: ItemChangesDelta.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of ItemChangesDelta type or its inheritor and implements {@link IItemChangesDelta}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IItemChangesDelta {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [ItemChangesDelta.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class Operation implements IOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IOperation) {\r\n        SchemaObject.assign(Operation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Operation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: Operation.getTypeName(), B_: Operation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Operation type or its inheritor and implements {@link IOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Operation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class OperationWithSiblingContext implements IOperationWithSiblingContext {\r\n    public prevId?: string;\r\n    public nextId?: string;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IOperationWithSiblingContext) {\r\n        SchemaObject.assign(OperationWithSiblingContext, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_OperationWithSiblingContext';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: OperationWithSiblingContext.getTypeName(), B_: OperationWithSiblingContext.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of OperationWithSiblingContext type or its inheritor and implements {@link IOperationWithSiblingContext}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IOperationWithSiblingContext {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [OperationWithSiblingContext.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class AddOperation implements IAddOperation {\r\n    public prevId?: string;\r\n    public nextId?: string;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IAddOperation) {\r\n        SchemaObject.assign(AddOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_AddOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: AddOperation.getTypeName(), B_: AddOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of AddOperation type or its inheritor and implements {@link IAddOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IAddOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [AddOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class MoveOperation implements IMoveOperation {\r\n    public prevParentPath: ItemPath;\r\n    public prevId?: string;\r\n    public nextId?: string;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IMoveOperation) {\r\n        SchemaObject.assign(MoveOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_MoveOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: MoveOperation.getTypeName(), B_: MoveOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of MoveOperation type or its inheritor and implements {@link IMoveOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IMoveOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [MoveOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class UpdateAnnotationMetaDataOperation implements IUpdateAnnotationMetaDataOperation {\r\n    public M_: AnnotationMetaData;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IUpdateAnnotationMetaDataOperation) {\r\n        SchemaObject.assign(UpdateAnnotationMetaDataOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_UpdateAnnotationMetaDataOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: UpdateAnnotationMetaDataOperation.getTypeName(), B_: UpdateAnnotationMetaDataOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of UpdateAnnotationMetaDataOperation type or its inheritor and implements {@link IUpdateAnnotationMetaDataOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IUpdateAnnotationMetaDataOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [UpdateAnnotationMetaDataOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class UpdateOperation implements IUpdateOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IUpdateOperation) {\r\n        SchemaObject.assign(UpdateOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_UpdateOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: UpdateOperation.getTypeName(), B_: UpdateOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of UpdateOperation type or its inheritor and implements {@link IUpdateOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IUpdateOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [UpdateOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class DeleteOperation implements IDeleteOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IDeleteOperation) {\r\n        SchemaObject.assign(DeleteOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_DeleteOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: DeleteOperation.getTypeName(), B_: DeleteOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of DeleteOperation type or its inheritor and implements {@link IDeleteOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IDeleteOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [DeleteOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class PurgeOperation implements IPurgeOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IPurgeOperation) {\r\n        SchemaObject.assign(PurgeOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_PurgeOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: PurgeOperation.getTypeName(), B_: PurgeOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of PurgeOperation type or its inheritor and implements {@link IPurgeOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IPurgeOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [PurgeOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class FocusOperation implements IFocusOperation {\r\n    public isFocused: boolean;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IFocusOperation) {\r\n        SchemaObject.assign(FocusOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_FocusOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: FocusOperation.getTypeName(), B_: FocusOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of FocusOperation type or its inheritor and implements {@link IFocusOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IFocusOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [FocusOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class VisibilityOperation implements IVisibilityOperation {\r\n    public isVisible: boolean;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IVisibilityOperation) {\r\n        SchemaObject.assign(VisibilityOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_VisibilityOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: VisibilityOperation.getTypeName(), B_: VisibilityOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of VisibilityOperation type or its inheritor and implements {@link IVisibilityOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IVisibilityOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [VisibilityOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class DeltaUpdateOperation implements IDeltaUpdateOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IDeltaUpdateOperation) {\r\n        SchemaObject.assign(DeltaUpdateOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_DeltaUpdateOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: DeltaUpdateOperation.getTypeName(), B_: DeltaUpdateOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of DeltaUpdateOperation type or its inheritor and implements {@link IDeltaUpdateOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IDeltaUpdateOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [DeltaUpdateOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class MicroSyncOperation implements IMicroSyncOperation {\r\n    public readonly seq?: number;\r\n    public readonly opType?: string;\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IMicroSyncOperation) {\r\n        SchemaObject.assign(MicroSyncOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_MicroSyncOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: MicroSyncOperation.getTypeName(), B_: MicroSyncOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of MicroSyncOperation type or its inheritor and implements {@link IMicroSyncOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IMicroSyncOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [MicroSyncOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class SignalOperation implements ISignalOperation {\r\n    public parentPath: ItemPath;\r\n    public parentRevId?: string;\r\n    public items: Item[];\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ISignalOperation) {\r\n        SchemaObject.assign(SignalOperation, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Signals_SignalOperation';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_Operation'];\r\n    }\r\n    public static readonly H_ = { T_: SignalOperation.getTypeName(), B_: SignalOperation.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of SignalOperation type or its inheritor and implements {@link ISignalOperation}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ISignalOperation {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [SignalOperation.getTypeName()]);\r\n    }\r\n}\r\n\r\n","// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fsignals.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\n\r\nimport { ISignal } from '../signals';\r\nimport { SchemaObject } from './schema-object.g';\r\nimport { ISchemaObject, SchemaObjectHeader } from '../schema-object';\r\n\r\nexport class Signal implements ISignal {\r\n    public targetObject?: ISchemaObject;\r\n    public timestamp?: number;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ISignal) {\r\n        SchemaObject.assign(Signal, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Signals_Signal';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: Signal.getTypeName(), B_: Signal.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Signal type or its inheritor and implements {@link ISignal}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ISignal {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Signal.getTypeName()]);\r\n    }\r\n}\r\n\r\n","// ------------------------------------------------------------------------------\r\n// <auto-generated>\r\n// This code was generated by the @augloop/code-gen tool.\r\n// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Ftiles.ts\r\n// Changes to this file may cause incorrect behavior and will be lost upon regeneration.\r\n// </auto-generated>\r\n// ------------------------------------------------------------------------------\r\n\r\nimport { IBinary, IBlob, IBlobRef, IContextHolder, IDocument, IDynamicContext, IGridCell, IGridNeighborhoodContext, ISession, ISubDocument, ITenantContextHolder, ITileGroup, IUserContextHolder, OpenType } from '../tiles';\r\nimport { SchemaObject } from './schema-object.g';\r\nimport { ISchemaObject, SchemaObjectHeader } from '../schema-object';\r\n\r\nexport class Blob implements IBlob {\r\n    public readonly id: string;\r\n    public readonly sizeBytes: number;\r\n    public readonly data?: Uint8Array;\r\n    public readonly dataPointer?: IBlobRef;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IBlob) {\r\n        SchemaObject.assign(Blob, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Blob';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: Blob.getTypeName(), B_: Blob.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Blob type or its inheritor and implements {@link IBlob}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IBlob {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Blob.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class Binary implements IBinary {\r\n    public data?: Uint8Array;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IBinary) {\r\n        SchemaObject.assign(Binary, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Binary';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: Binary.getTypeName(), B_: Binary.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Binary type or its inheritor and implements {@link IBinary}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IBinary {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Binary.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class TileGroup implements ITileGroup {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ITileGroup) {\r\n        SchemaObject.assign(TileGroup, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_TileGroup';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: TileGroup.getTypeName(), B_: TileGroup.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of TileGroup type or its inheritor and implements {@link ITileGroup}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ITileGroup {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [TileGroup.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class Session implements ISession {\r\n    public readonly activeUserId: string;\r\n    public readonly widthDpi?: number;\r\n    public readonly heightDpi?: number;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ISession) {\r\n        SchemaObject.assign(Session, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Session';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_TileGroup'];\r\n    }\r\n    public static readonly H_ = { T_: Session.getTypeName(), B_: Session.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Session type or its inheritor and implements {@link ISession}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ISession {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Session.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class Document implements IDocument {\r\n    public readonly isReadonly: boolean;\r\n    public readonly title?: string;\r\n    public readonly url?: string;\r\n    public readonly openType?: OpenType;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IDocument) {\r\n        SchemaObject.assign(Document, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_Document';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_TileGroup'];\r\n    }\r\n    public static readonly H_ = { T_: Document.getTypeName(), B_: Document.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of Document type or its inheritor and implements {@link IDocument}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IDocument {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [Document.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class SubDocument implements ISubDocument {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ISubDocument) {\r\n        SchemaObject.assign(SubDocument, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_SubDocument';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: SubDocument.getTypeName(), B_: SubDocument.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of SubDocument type or its inheritor and implements {@link ISubDocument}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ISubDocument {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [SubDocument.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class GridCell implements IGridCell {\r\n    public readonly column: number;\r\n    public readonly row: number;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IGridCell) {\r\n        SchemaObject.assign(GridCell, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_GridCell';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: GridCell.getTypeName(), B_: GridCell.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of GridCell type or its inheritor and implements {@link IGridCell}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IGridCell {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [GridCell.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class GridNeighborhoodContext implements IGridNeighborhoodContext {\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n    public readonly retrievedWidth: number;\r\n    public readonly retrievedHeight: number;\r\n    public readonly neighborhoodTopRow: number;\r\n    public readonly neighborhoodLeftColumn: number;\r\n    public readonly targetGridTopRow: number;\r\n    public readonly targetGridLeftColumn: number;\r\n    public readonly targetGridRelativeTopRow: number;\r\n    public readonly targetGridRelativeLeftColumn: number;\r\n    public readonly numberOfNonEmptyCells: number;\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IGridNeighborhoodContext) {\r\n        SchemaObject.assign(GridNeighborhoodContext, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_GridNeighborhoodContext';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: GridNeighborhoodContext.getTypeName(), B_: GridNeighborhoodContext.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of GridNeighborhoodContext type or its inheritor and implements {@link IGridNeighborhoodContext}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IGridNeighborhoodContext {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [GridNeighborhoodContext.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class DynamicContext implements IDynamicContext {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IDynamicContext) {\r\n        SchemaObject.assign(DynamicContext, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_DynamicContext';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: DynamicContext.getTypeName(), B_: DynamicContext.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of DynamicContext type or its inheritor and implements {@link IDynamicContext}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IDynamicContext {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [DynamicContext.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class ContextHolder implements IContextHolder {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IContextHolder) {\r\n        SchemaObject.assign(ContextHolder, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_ContextHolder';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return [];\r\n    }\r\n    public static readonly H_ = { T_: ContextHolder.getTypeName(), B_: ContextHolder.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of ContextHolder type or its inheritor and implements {@link IContextHolder}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IContextHolder {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [ContextHolder.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class UserContextHolder implements IUserContextHolder {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: IUserContextHolder) {\r\n        SchemaObject.assign(UserContextHolder, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_UserContextHolder';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_ContextHolder'];\r\n    }\r\n    public static readonly H_ = { T_: UserContextHolder.getTypeName(), B_: UserContextHolder.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of UserContextHolder type or its inheritor and implements {@link IUserContextHolder}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is IUserContextHolder {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [UserContextHolder.getTypeName()]);\r\n    }\r\n}\r\n\r\nexport class TenantContextHolder implements ITenantContextHolder {\r\n    public readonly H_: SchemaObjectHeader;\r\n    public constructor(obj?: ITenantContextHolder) {\r\n        SchemaObject.assign(TenantContextHolder, this, obj);\r\n    }\r\n    public static getTypeName(): string {\r\n        return 'AugLoop_Core_TenantContextHolder';\r\n    }\r\n    public static getBaseTypes(): string[] {\r\n        return ['AugLoop_Core_ContextHolder'];\r\n    }\r\n    public static readonly H_ = { T_: TenantContextHolder.getTypeName(), B_: TenantContextHolder.getBaseTypes() };\r\n    /**\r\n     * Checks if passed schema object is of TenantContextHolder type or its inheritor and implements {@link ITenantContextHolder}\r\n     */\r\n    public static typeGuard(schemaObject: ISchemaObject): schemaObject is ITenantContextHolder {\r\n        return SchemaObject.matchesTypesFor(schemaObject, [TenantContextHolder.getTypeName()]);\r\n    }\r\n}\r\n\r\n","/**\r\n * Version.ts\r\n *\r\n * Module for package version\r\n */\r\nexport default \"0.0.0\";\r\n","/**\r\n * Window.ts\r\n *\r\n * Module wrapping around the global window object\r\n */\r\n\r\nimport * as Configuration from \"./../Configuration/Configuration\";\r\nimport { ILaunchOptionsInAppFeedback } from \"./../Configuration/ILaunchOptions\";\r\nimport ICustomSurvey from \"./../FloodgateCore/ICustomSurvey\";\r\nimport IUISurvey from \"./../FloodgateCore/UISurvey/IUISurvey\";\r\nimport { FloodgateEngine } from \"@ms-ofb/officefloodgatecore\";\r\nimport { IFloodgateSettingIdMap } from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { FeedbackStatus } from \"./../Constants\";\r\n\r\nconst w = window as any;\r\nconst officeBrowserFeedback = w.OfficeBrowserFeedback = w.OfficeBrowserFeedback || {};\r\nconst floodgate = officeBrowserFeedback.floodgate = officeBrowserFeedback.floodgate || {};\r\n\r\n/**\r\n * Get the IWindow object\r\n */\r\nexport function get(): IWindow { return w; }\r\n\r\n/**\r\n * Get the IWindow object\r\n */\r\nexport function getGlobal(): IWindow { return w; }\r\n\r\n/**\r\n * Set the setUiStrings() method\r\n * @param setUiStrings the method\r\n */\r\nexport function setSetUiStrings(setUiStrings: (data: any) => void) {\r\n\tofficeBrowserFeedback.setUiStrings = setUiStrings;\r\n}\r\n\r\n/**\r\n * Set the singleFeedback() method\r\n * @param singleFeedback the method\r\n */\r\nexport function setSingleFeedback(\r\n\tsingleFeedback: (feedbackType: string, launchOptions: ILaunchOptionsInAppFeedback) => Promise<any>) {\r\n\t\tofficeBrowserFeedback.singleFeedback = singleFeedback;\r\n}\r\n\r\n/**\r\n * Set the multiFeedback() method\r\n * @param multiFeedback the method\r\n */\r\nexport function setMultiFeedback(\r\n\tmultiFeedback: (launchOptions: ILaunchOptionsInAppFeedback) => Promise<any>) {\r\n\t\tofficeBrowserFeedback.multiFeedback = multiFeedback;\r\n}\r\n\r\n/**\r\n * Set the getFeedbackStatus() method\r\n * @param getFeedbackStatus the method\r\n */\r\nexport function setFeedbackStatus(\r\n\tgetFeedbackStatus: () => FeedbackStatus) {\r\n\t\tofficeBrowserFeedback.getFeedbackStatus = getFeedbackStatus;\r\n}\r\n\r\n/**\r\n * Set the createScreenshot() method\r\n * @param createScreenshot the method\r\n */\r\nexport function setCreateScreenshot(\r\n\tcreateScreenshot: (domElement?: object, options?: any) => Promise<any>) {\r\n\t\tofficeBrowserFeedback.createScreenshot = createScreenshot;\r\n}\r\n\r\n/**\r\n * Set the isFeedbackSurveyEnabledByAADC() method\r\n * @param isFeedbackSurveyEnabledByAADC the method\r\n */\r\nexport function setIsFeedbackSurveyEnabledByAADC(\r\n\tisFeedbackSurveyEnabledByAADC: () => boolean) {\r\n\t\tofficeBrowserFeedback.isFeedbackSurveyEnabledByAADC = isFeedbackSurveyEnabledByAADC;\r\n}\r\n\r\n/**\r\n * Set the floodgate showSurvey() method\r\n * @param floodgateShowSurvey the method\r\n */\r\nexport function setFloodgateShowSurvey(floodgateShowSurvey: (survey: IUISurvey) => Promise<any>) {\r\n\tfloodgate.showSurvey = floodgateShowSurvey;\r\n}\r\n\r\n/**\r\n * Set the floodgate showCustomSurvey() method\r\n * @param floodgateShowSurvey the method\r\n */\r\nexport function setFloodgateShowCustomSurvey(floodgateShowCustomSurvey: (survey: ICustomSurvey) => Promise<any>) {\r\n\tfloodgate.showCustomSurvey = floodgateShowCustomSurvey;\r\n}\r\n\r\n/**\r\n * Set the floodgate initialize() method\r\n * @param floodgateInitialize the method\r\n */\r\nexport function setFloodgateInitialize(floodgateInitialize: () => Promise<any>) {\r\n\tfloodgate.initialize = floodgateInitialize;\r\n}\r\n\r\n/**\r\n * Set the floodgate start() method\r\n * @param floodgateStart the method\r\n */\r\nexport function setFloodgateStart(floodgateStart: () => Promise<any>) {\r\n\tfloodgate.start = floodgateStart;\r\n}\r\n\r\n/**\r\n * Set the floodgate stop() method\r\n * @param floodgateStop the method\r\n */\r\nexport function setFloodgateStop(floodgateStop: () => void) {\r\n\tfloodgate.stop = floodgateStop;\r\n}\r\n\r\n/**\r\n * Set the floodgate getEngine() method\r\n * @param floodgateGetEngine the method\r\n */\r\nexport function setFloodgateGetEngine(floodgateGetEngine: () => FloodgateEngine) {\r\n\tfloodgate.getEngine = floodgateGetEngine;\r\n}\r\n\r\n/**\r\n * Set the floodgate getSettingIdMap() method\r\n * @param floodgateSettingIdMap the method\r\n */\r\nexport function getSettingIdMap(floodgateSettingIdMap: () => IFloodgateSettingIdMap) {\r\n\tfloodgate.getSettingIdMap = floodgateSettingIdMap;\r\n}\r\n\r\nexport interface IInitOptions extends Configuration.IInitOptionsCommon, Configuration.IInitOptionsInAppFeedback {\r\n}\r\n\r\nexport interface IFloodgate {\r\n\tinitOptions: Configuration.IInitOptionsFloodgate;\r\n\tshowSurvey: (survey: IUISurvey) => Promise<any>;\r\n\tinitialize: () => Promise<any>;\r\n\tstart: () => Promise<any>;\r\n\tstop: () => void;\r\n\tgetEngine: () => FloodgateEngine;\r\n}\r\n\r\nexport interface IWindow extends WindowLocalStorage {\r\n\tOfficeBrowserFeedback: {\r\n\t\tinitOptions: IInitOptions;\r\n\t\tmultiFeedback: (launchOptions: ILaunchOptionsInAppFeedback) => Promise<any>;\r\n\t\tsdkVersion: string;\r\n\t\tsingleFeedback: (feedbackType: string, launchOptions: ILaunchOptionsInAppFeedback) => Promise<any>;\r\n\t\tsetUiStrings: (data: any) => void;\r\n\t\thtml2canvas: () => ((domElement?: object, options?: any) => Promise<HTMLCanvasElement>);\r\n\t\tcreateScreenshot: (domElement?: object, options?: any) => Promise<HTMLCanvasElement>;\r\n\t\tfloodgate: IFloodgate;\r\n\t\tisFeedbackSurveyEnabledByAADC: () => boolean;\r\n\t\tgetFeedbackStatus: () => FeedbackStatus;\r\n\t};\r\n}\r\n","/**\r\n * Contracts enforced by OfficeEventSchema (OES)\r\n */\r\n\r\nexport class App {\r\n\tprivate static PLATFORM: string = \"Web\";\r\n\r\n\tprivate name: string;\r\n\tprivate version: string;\r\n\r\n\tpublic constructor(name: string, version: string) {\r\n\t\tif (!name) {\r\n\t\t\tthrow new Error(\"name must not be null\");\r\n\t\t}\r\n\t\tif (!version) {\r\n\t\t\tthrow new Error(\"version must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.version = version;\r\n\t}\r\n\r\n\tpublic getName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tpublic getPlatform(): string {\r\n\t\treturn App.PLATFORM;\r\n\t}\r\n\r\n\tpublic getVersion(): string {\r\n\t\treturn this.version;\r\n\t}\r\n}\r\n\r\nexport class Session {\r\n\tprivate id: string;\r\n\r\n\tpublic constructor(id: string) {\r\n\t\tif (!id) {\r\n\t\t\tthrow new Error(\"id must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic getId(): string {\r\n\t\treturn this.id;\r\n\t}\r\n}\r\n\r\nexport class Host {\r\n\tprivate id: string;\r\n\tprivate locale: string;\r\n\tprivate sessionId: string;\r\n\tprivate version: string;\r\n\r\n\tconstructor(id: string, locale: string, sessionId: string, version: string) {\r\n\t\tthis.id = id;\r\n\t\tthis.locale = locale;\r\n\t\tthis.sessionId = sessionId;\r\n\t\tthis.version = version;\r\n\t}\r\n\r\n\tpublic getId(): string {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tpublic getLocale(): string {\r\n\t\treturn this.locale;\r\n\t}\r\n\r\n\tpublic getSessionId(): string {\r\n\t\treturn this.sessionId;\r\n\t}\r\n\r\n\tpublic getVersion(): string {\r\n\t\treturn this.version;\r\n\t}\r\n}\r\n\r\nexport class Event {\r\n\t// Id is set to sessionId<DELIMITER>sequence\r\n\tprivate static ID_DELIMITER = \".\";\r\n\tprivate static SOURCE: string = \"MsoThin\";\r\n\tprivate static SCHEMA_VERSION: number = 1;\r\n\r\n\tprivate name: string;\r\n\tprivate id: string;\r\n\tprivate sequence: number;\r\n\tprivate sampleRate: number;\r\n\r\n\tpublic constructor(name: string, sessionId: string, sequence: number, sampleRate: number) {\r\n\t\tif (!name) {\r\n\t\t\tthrow new Error(\"name must not be null\");\r\n\t\t}\r\n\t\tif (!sessionId) {\r\n\t\t\tthrow new Error(\"sessionId must not be null\");\r\n\t\t}\r\n\t\tif ((!sequence && sequence !== 0) || sequence < 0) {\r\n\t\t\tthrow new Error(\"sequence must not be negative\");\r\n\t\t}\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.id = sessionId + Event.ID_DELIMITER + sequence;\r\n\t\tthis.sequence = sequence;\r\n\t\tthis.sampleRate = sampleRate;\r\n\t}\r\n\r\n\tpublic getName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tpublic getId(): string {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tpublic getSource(): string {\r\n\t\treturn Event.SOURCE;\r\n\t}\r\n\r\n\tpublic getSchemaVersion(): number {\r\n\t\treturn Event.SCHEMA_VERSION;\r\n\t}\r\n\r\n\tpublic getSequence(): number {\r\n\t\treturn this.sequence;\r\n\t}\r\n\r\n\tpublic getSampleRate(): number {\r\n\t\treturn this.sampleRate;\r\n\t}\r\n}\r\n\r\nexport class Release {\r\n\tprivate audienceGroup: string;\r\n\r\n\tpublic constructor(audienceGroup: string) {\r\n\t\tthis.audienceGroup = audienceGroup;\r\n\t}\r\n\r\n\tpublic getAudienceGroup(): string {\r\n\t\treturn this.audienceGroup;\r\n\t}\r\n}\r\n\r\nexport class Browser {\r\n\tprivate name: string;\r\n\tprivate version: string;\r\n\r\n\tpublic constructor(name: string, version: string) {\r\n\t\tthis.name = name;\r\n\t\tthis.version = version;\r\n\t}\r\n\r\n\tpublic getName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tpublic getVersion(): string {\r\n\t\treturn this.version;\r\n\t}\r\n}\r\n\r\nexport class Device {\r\n\tprivate id: string;\r\n\r\n\tpublic constructor(id: string) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic getId(): string {\r\n\t\treturn this.id;\r\n\t}\r\n}\r\n\r\nexport class User {\r\n\tprivate primaryIdentityHash: string;\r\n\tprivate primaryIdentitySpace: string;\r\n\tprivate tenantId: string;\r\n\r\n\tpublic constructor(primaryIdentityHash: string, tenantId: string) {\r\n\t\tthis.tenantId = tenantId;\r\n\t\tthis.primaryIdentityHash = primaryIdentityHash ? primaryIdentityHash.trim() : primaryIdentityHash;\r\n\t\tthis.primaryIdentitySpace = this.generatePrimaryIdentitySpace();\r\n\t}\r\n\r\n\tpublic getTenantId(): string {\r\n\t\treturn this.tenantId;\r\n\t}\r\n\r\n\tpublic getPrimaryIdentityHash(): string {\r\n\t\treturn this.primaryIdentityHash;\r\n\t}\r\n\r\n\tpublic getPrimaryIdentitySpace(): string {\r\n\t\treturn this.primaryIdentitySpace;\r\n\t}\r\n\r\n\tprivate generatePrimaryIdentitySpace(): string {\r\n\t\tif (this.primaryIdentityHash) {\r\n\t\t\tif (this.primaryIdentityHash.startsWith(\"a:\")) {\r\n\t\t\t\treturn \"UserObjectId\";\r\n\t\t\t}\r\n\t\t\tif (this.primaryIdentityHash.startsWith(\"p:\")) {\r\n\t\t\t\treturn \"MsaPuid\";\r\n\t\t\t}\r\n\t\t\tif (this.primaryIdentityHash.startsWith(\"ap:\")) {\r\n\t\t\t\treturn \"OrgIdPuid\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n","/**\r\n * Aria.ts\r\n *\r\n * Module for wrapper around Aria\r\n */\r\n\r\nlet aria: any = require(\"./../../thirdparty/aria-webjs-compact-sdk-1.2.2\");\r\n\r\nexport function AWT() { return aria.AWT; };\r\n","/**\r\n * An Aria-based logger\r\n */\r\n\r\nimport * as Aria from \"./Aria\";\r\nimport { App, Browser, Device, Event, Host, Release, Session, User } from \"./Contracts\";\r\nimport ITelemetryLogger from \"./ITelemetryLogger\";\r\n\r\nexport default class AriaTelemetryLogger implements ITelemetryLogger {\r\n\t// Event.name is set as namespace<DELIMITER>eventName\r\n\tprivate static EVENT_NAME_DELIMITER: string = \"_\";\r\n\tprivate static CUSTOM_PROPERTIES_FIELD_PREFIX: string = \"Data.\";\r\n\r\n\tprivate static setApp(properties: any, app: App): void {\r\n\t\tproperties[\"App.Name\"] = app.getName();\r\n\t\tproperties[\"App.Platform\"] = app.getPlatform();\r\n\t\tproperties[\"App.Version\"] = app.getVersion();\r\n\t}\r\n\r\n\tprivate static setSession(properties: any, session: Session) {\r\n\t\tproperties[\"Session.Id\"] = session.getId();\r\n\t}\r\n\r\n\tprivate static setHost(properties: any, host: Host) {\r\n\t\tif (host) {\r\n\t\t\tproperties[\"Host.Id\"] = host.getId();\r\n\t\t\tproperties[\"Host.SessionId2\"] = host.getSessionId();\r\n\t\t\tproperties[\"Host.Version\"] = host.getVersion();\r\n\t\t\tproperties[\"Host.Locale\"] = host.getLocale();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static setEvent(properties: any, event: Event) {\r\n\t\tproperties[\"Event.Name\"] = event.getName();\r\n\t\tproperties[\"Event.Id\"] = event.getId();\r\n\t\tproperties[\"Event.Source\"] = event.getSource();\r\n\t\tproperties[\"Event.SchemaVersion\"] = event.getSchemaVersion();\r\n\t\tproperties[\"Event.Sequence\"] = event.getSequence();\r\n\t\tproperties[\"Event.SampleRate\"] = event.getSampleRate();\r\n\t}\r\n\r\n\tprivate static setRelease(properties: any, release: Release) {\r\n\t\tif (release) {\r\n\t\t\tproperties[\"Release.AudienceGroup\"] = release.getAudienceGroup();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static setBrowser(properties: any, browser: Browser) {\r\n\t\tif (browser) {\r\n\t\t\tproperties[\"Browser.Name\"] = browser.getName();\r\n\t\t\tproperties[\"Browser.Version\"] = browser.getVersion();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static setDevice(properties: any, device: Device) {\r\n\t\tif (device) {\r\n\t\t\tproperties[\"Device.Id\"] = device.getId();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static setUser(properties: any, user: User) {\r\n\t\tif (user) {\r\n\t\t\tproperties[\"User.PrimaryIdentityHash\"] = user.getPrimaryIdentityHash();\r\n\t\t\tproperties[\"User.PrimaryIdentitySpace\"] = user.getPrimaryIdentitySpace();\r\n\t\t\tproperties[\"User.TenantId\"] = user.getTenantId();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate oesApp: App;\r\n\tprivate oesSession: Session;\r\n\tprivate oesHost: Host;\r\n\tprivate oesRelease: Release;\r\n\tprivate oesBrowser: Browser;\r\n\tprivate oesDevice: Device;\r\n\tprivate oesUser: User;\r\n\r\n\tprivate namespace: string;\r\n\tprivate sequence: number;\r\n\r\n\tconstructor(tenantToken: string, namespace: string, app: App, session: Session, host?: Host, release?: Release,\r\n\t\tbrowser?: Browser, device?: Device, user?: User) {\r\n\r\n\t\tif (!tenantToken) {\r\n\t\t\tthrow new Error(\"tenantToken must not be null\");\r\n\t\t}\r\n\t\tif (!namespace) {\r\n\t\t\tthrow new Error(\"namespace must not be null\");\r\n\t\t}\r\n\t\tif (!app) {\r\n\t\t\tthrow new Error(\"app must not be null\");\r\n\t\t}\r\n\t\tif (!session) {\r\n\t\t\tthrow new Error(\"session must not be null\");\r\n\t\t}\r\n\r\n\t\tAria.AWT().initialize(tenantToken);\r\n\t\tthis.namespace = namespace;\r\n\t\tthis.oesApp = app;\r\n\t\tthis.oesSession = session;\r\n\t\tthis.oesHost = host;\r\n\t\tthis.oesRelease = release;\r\n\t\tthis.oesBrowser = browser;\r\n\t\tthis.oesDevice = device;\r\n\t\tthis.oesUser = user;\r\n\t\tthis.sequence = 1; // Sequence starts at 1 not 0\r\n\t}\r\n\r\n\tpublic logEvent(eventName: string, customProperties?: { [customField: string]: any }, sampleRate: number = 1) {\r\n\t\tif (!eventName) {\r\n\t\t\tthrow new Error(\"eventName must not be null\");\r\n\t\t}\r\n\r\n\t\tlet oesEvent: Event = new Event(\r\n\t\t\tthis.namespace + AriaTelemetryLogger.EVENT_NAME_DELIMITER + eventName,\r\n\t\t\tthis.oesSession.getId(),\r\n\t\t\tthis.sequence,\r\n\t\t\tsampleRate\r\n\t\t);\r\n\r\n\t\tlet ariaProperties: any = {};\r\n\r\n\t\tif (customProperties != null) {\r\n\t\t\tfor (const key in customProperties) {\r\n\t\t\t\tif (customProperties.hasOwnProperty(key)) {\r\n\t\t\t\t\tariaProperties[AriaTelemetryLogger.CUSTOM_PROPERTIES_FIELD_PREFIX + key] = customProperties[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tAriaTelemetryLogger.setApp(ariaProperties, this.oesApp);\r\n\t\tAriaTelemetryLogger.setSession(ariaProperties, this.oesSession);\r\n\t\tAriaTelemetryLogger.setHost(ariaProperties, this.oesHost);\r\n\t\tAriaTelemetryLogger.setRelease(ariaProperties, this.oesRelease);\r\n\t\tAriaTelemetryLogger.setEvent(ariaProperties, oesEvent);\r\n\t\tAriaTelemetryLogger.setBrowser(ariaProperties, this.oesBrowser);\r\n\t\tAriaTelemetryLogger.setDevice(ariaProperties, this.oesDevice);\r\n\t\tAriaTelemetryLogger.setUser(ariaProperties, this.oesUser);\r\n\r\n\t\tAria.AWT().logEvent({\r\n\t\t\tname: oesEvent.getName(),\r\n\t\t\tproperties: ariaProperties,\r\n\t\t});\r\n\r\n\t\tthis.sequence++;\r\n\t}\r\n}\r\n","/**\r\n * Implementation of IFloodgateStorageProvider for Web SDK\r\n */\r\n\r\nimport { IFloodgateStorageProvider } from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport * as Window from \"./../Window/Window\";\r\nimport * as Logging from \"./../Logging/Logging\";\r\nimport FileType = IFloodgateStorageProvider.FileType;\r\n\r\nconst fileTypeToKeyMap: { [k in FileType]: string } = {\r\n\t[FileType.CampaignDefinitions]: \"obf-CampaignDefinitions\",\r\n\t[FileType.CampaignStates]: \"obf-CampaignStates\",\r\n\t[FileType.FloodgateSettings]: \"obf-FloodgateSettings\",\r\n\t[FileType.GovernedChannelStates]: \"obf-GovernedChannelStates\",\r\n\t[FileType.SurveyActivationStats]: \"obf-SurveyActivationStats\",\r\n\t[FileType.SurveyEventActivityStats]: \"obf-SurveyEventActivityStats\",\r\n\t[FileType.TmsCache_CampaignContent]: \"obf-TmsCampaignContent\",\r\n\t[FileType.TmsCache_MessageMetadata]: \"obf-TmsMessageMetadata\",\r\n\t[FileType.TmsCache_UserGovernance]: \"obf-TmsUserGovernance\",\r\n\t[FileType.Tms_DynamicSettings]: \"obf-TmsDynamicSettings\",\r\n\t[FileType.LogLevelSettings]: \"obf-LogLevelSettings\",\r\n\t[FileType.UserFacts]: \"obf-UserFacts\",\r\n\t[FileType.DebugOverrides]: \"obf-DebugOverrides\",\r\n};\r\n\r\nexport default class FloodgateStorageProvider implements IFloodgateStorageProvider {\r\n\t/**\r\n\t * Code to detect localStorage presence.\r\n\t * Copied from MDN: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n\t */\r\n\tpublic static isStorageAvailable(): boolean {\r\n\t\ttry {\r\n\t\t\tlet x = \"__storage_test__\";\r\n\t\t\tWindow.getGlobal().localStorage.setItem(x, x);\r\n\t\t\tWindow.getGlobal().localStorage.removeItem(x);\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\treturn e instanceof DOMException && (\r\n\t\t\t\t// everything except Firefox\r\n\t\t\t\te.code === 22 ||\r\n\t\t\t\t// Firefox\r\n\t\t\t\te.code === 1014 ||\r\n\t\t\t\t// test name field too, because code might not be present\r\n\t\t\t\t// everything except Firefox\r\n\t\t\t\te.name === \"QuotaExceededError\" ||\r\n\t\t\t\t// Firefox\r\n\t\t\t\te.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\r\n\t\t\t\t// acknowledge QuotaExceededError only if there's something already stored\r\n\t\t\t\tWindow.getGlobal().localStorage.length !== 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Safely read an object\r\n\t */\r\n\tpublic static safeReadObject<T>(fileType: FileType, defaultValue: T = undefined): T {\r\n\t\tif (!(fileType in FileType)) {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet storageKey = fileTypeToKeyMap[fileType];\r\n\t\t\tconst result = Window.getGlobal().localStorage.getItem(storageKey);\r\n\t\t\tconst parsedObject = result && (result[0] === \"{\" || result[0] === \"[\") ? JSON.parse(result) : result;\r\n\t\t\treturn parsedObject ?? defaultValue;\r\n\t\t} catch (e) {\r\n\t\t\t// ignore\r\n\t\t}\r\n\r\n\t\treturn defaultValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Lock the file to prevent access from another process.\r\n\t */\r\n\tpublic fileLock(fileType: FileType): void {\r\n\t\t// JS runs on a single thread in the browser.\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Unlock the file.\r\n\t */\r\n\tpublic fileUnlock(fileType: FileType): void {\r\n\t\t// JS runs on a single thread in the browser.\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Read the file\r\n\t */\r\n\tpublic read(fileType: FileType): string {\r\n\t\tif (!(fileType in FileType)) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\tlet storageKey = fileTypeToKeyMap[fileType];\r\n\t\tlet result: string;\r\n\t\ttry {\r\n\t\t\tresult = Window.getGlobal().localStorage.getItem(storageKey);\r\n\t\t} catch (e) {\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.SURVEY_FLOODGATE_FILEREAD_FAILED,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: e.toString(),\r\n\t\t\t\t\tFileName: storageKey,\r\n\t\t\t\t});\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Write to the file\r\n\t */\r\n\tpublic write(fileType: FileType, content: string): void {\r\n\t\tif (!(fileType in FileType)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet storageKey = fileTypeToKeyMap[fileType];\r\n\t\ttry {\r\n\t\t\tWindow.getGlobal().localStorage.setItem(storageKey, content);\r\n\t\t} catch (e) {\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.SURVEY_FLOODGATE_FILEWRITE_FAILED,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: e.toString(),\r\n\t\t\t\t\tFileName: storageKey,\r\n\t\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n","/**\r\n * Constants.ts\r\n *\r\n * Module to hold logging-related constants\r\n */\r\n\r\nexport interface ICustomProperties {\r\n\tCampaignId?: string;\r\n\tCorrelationId?: string;\r\n\tCount?: number;\r\n\tData?: string;\r\n\tErrorMessage?: string;\r\n\tFeedbackType?: number;\r\n\tPanelType?: number;\r\n\tFileName?: string;\r\n\tFlights?: string;\r\n\tHttpStatusCode?: number;\r\n\tHttpStatusText?: string;\r\n\tIsBugEnabled?: boolean;\r\n\tIsDiagnosticsIncluded?: boolean;\r\n\tIsEmailIncluded?: boolean;\r\n\tIsEmailPolicyEnabled?: boolean;\r\n\tIsIdeaEnabled?: boolean;\r\n\tIsScreenshotIncluded?: boolean;\r\n\tMessage?: string;\r\n\tSessionId?: string;\r\n\tSurveyId?: string;\r\n\tSurveyType?: number;\r\n\tTimeMilliseconds?: number;\r\n\tType?: string;\r\n\tClientFeedbackId?: string;\r\n\tPromptAutoDismiss?: string;\r\n\tAdditionalSurveyInfo?: string;\r\n\tSurveyActivityInfo?: string;\r\n\tPersonalizerUserAction?: number;\r\n\tPersonalizerEventId?: string;\r\n\tGovernanceRequestBody?: string;\r\n\tGovernanceResponseText?: string;\r\n\tActualSetAutoDismissValue?: number;\r\n\tCVFormId?: string;\r\n}\r\n\r\nexport interface IEventId {\r\n\tname: string;\r\n}\r\n\r\nexport class EventIds {\r\n\tpublic static InApp = class {\r\n\t\tpublic static UI = class {\r\n\t\t\tpublic static Picker = class {\r\n\t\t\t\tpublic static Shown = class {\r\n\t\t\t\t\tpublic static VALUE: IEventId = { name: \"InApp_UI_Picker_Shown\" };\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tpublic static Form = class {\r\n\t\t\t\tpublic static Shown = class {\r\n\t\t\t\t\tpublic static VALUE: IEventId = { name: \"InApp_UI_Form_Shown\" };\r\n\t\t\t\t};\r\n\r\n\t\t\t\tpublic static Submit = class {\r\n\t\t\t\t\tpublic static VALUE: IEventId = { name: \"InApp_UI_Form_Submit\" };\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\r\n\t// This saves ~400 bytes (minified) vs nested classes\r\n\tpublic static SURVEY_FLOODGATE_CAMPAIGNLOAD_FAILED: IEventId = { name: \"Survey_Floodgate_CampaignLoad_Failed\" };\r\n\tpublic static SURVEY_FLOODGATE_FILEREAD_FAILED: IEventId = { name: \"Survey_Floodgate_FileRead_Failed\" };\r\n\tpublic static SURVEY_FLOODGATE_FILEWRITE_FAILED: IEventId = { name: \"Survey_Floodgate_FileWrite_Failed\" };\r\n\tpublic static SURVEY_FLOODGATE_TRIGGERMET: IEventId = { name: \"Survey_Floodgate_TriggerMet\" };\r\n\tpublic static SURVEY_FLOODGATE_USERSELECTED: IEventId = { name: \"Survey_Floodgate_UserSelected\" };\r\n\tpublic static SURVEY_UI_FORM_SHOWN: IEventId = { name: \"Survey_UI_Form_Shown\" };\r\n\tpublic static SURVEY_UI_FORM_SUBMIT: IEventId = { name: \"Survey_UI_Form_Submit\" };\r\n\tpublic static SURVEY_UI_FORM_SECONDARY_SUBMIT: IEventId = { name: \"Survey_UI_Form_Secondary_Submit\" };\r\n\tpublic static SURVEY_UI_FORM_SUBMIT_ERROR: IEventId = { name: \"Survey_UI_Form_Submit_Error\" };\r\n\tpublic static SURVEY_UI_FORM_USERCLOSED: IEventId = { name: \"Survey_UI_Form_UserClosed\" };\r\n\tpublic static SURVEY_UI_FORM_NO_RETURN_TYPE: IEventId = { name: \"Survey_UI_Form_No_Return_Type\"};\r\n\r\n\tpublic static SURVEY_UI_PROMPT_AUTODISMISSED: IEventId = { name: \"Survey_UI_Prompt_AutoDismissed\" };\r\n\tpublic static SURVEY_UI_PROMPT_SHOWN: IEventId = { name: \"Survey_UI_Prompt_Shown\" };\r\n\tpublic static SURVEY_UI_PROMPT_USERCLOSED: IEventId = { name: \"Survey_UI_Prompt_UserClosed\" };\r\n\tpublic static SURVEY_UI_PROMPT_CLICKED: IEventId = { name: \"Survey_UI_Prompt_Clicked\" };\r\n\tpublic static SURVEY_UI_REDIRECTIONFAILURE: IEventId = { name: \"Survey_UI_RedirectionFailure\" };\r\n\tpublic static GOVERNANCE_SERVICEFAILURE: IEventId = { name: \"Gorvenance_ServiceFailure\" };\r\n\tpublic static GOVERNANCE_SERVICERESULT: IEventId = { name: \"Gorvenance_ServiceResult\" };\r\n\tpublic static DYNAMICTRANSPORT_POST_ERROR: IEventId = { name: \"DynamicTransport_Post_Error\" };\r\n\tpublic static FEEDBACK_SURVEYSDISABLED_AADC: IEventId = {name: \"Feedback_SurveysDisabled_AADC\"};\r\n\tpublic static SURVEY_UI_DISABLED_AADC: IEventId = { name: \"Survey_UI_Prevented_AADC\" };\r\n\tpublic static PERSONALIZER_SERVICEREWARDRESULT: IEventId = { name: \"Personalizer_ServiceRewardResult\" };\r\n\tpublic static PERSONALIZER_CLIENTFAILURE: IEventId = { name: \"Personalizer_ClientFailure\" };\r\n\r\n\tpublic static Shared = class {\r\n\t\tpublic static Upload = class {\r\n\t\t\tpublic static Failed = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"Shared_Upload_Failed\" };\r\n\t\t\t};\r\n\t\t\tpublic static Prevented = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"Shared_Upload_Prevented_AADC\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static Screenshot = class {\r\n\t\t\tpublic static Render = class {\r\n\t\t\t\tpublic static Failed = class {\r\n\t\t\t\t\tpublic static VALUE: IEventId = { name: \"Shared_Screenshot_Render_Failed\" };\r\n\t\t\t\t};\r\n\t\t\t\tpublic static Success = class {\r\n\t\t\t\t\tpublic static VALUE: IEventId = { name: \"Shared_Screenshot_Render_Success\" };\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tpublic static GetContent = class {\r\n\t\t\t\tpublic static Failed = class {\r\n\t\t\t\t\tpublic static DefaultImage = class {\r\n\t\t\t\t\t\tpublic static Returned = class {\r\n\t\t\t\t\t\t\tpublic static VALUE: IEventId = { name: \"Shared_Screenshot_GetContent_Failed_DefaultImage_Returned\" };\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static WebSurfaces = class {\r\n\t\tpublic static Common = class {\r\n\t\t\tpublic static Error = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"WebSurfaces_Common_Error\" };\r\n\t\t\t};\r\n\t\t\tpublic static Info = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"WebSurfaces_Common_Info\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static Messaging = class {\r\n\t\t\tpublic static Requests = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"WebSurfaces_Messaging_Requests\" };\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static UserFacts = class {\r\n\t\tpublic static Common = class {\r\n\t\t\tpublic static Error = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_Common_Error\" };\r\n\t\t\t};\r\n\t\t\tpublic static Info = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_Common_Info\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static LocalFact = class {\r\n\t\t\tpublic static Error = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_LocalFact_Error\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static Messaging = class {\r\n\t\t\tpublic static Requests = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_Messaging_Requests\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static AugLoop = class {\r\n\t\t\tpublic static Requests = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_AugLoop_Requests\" };\r\n\t\t\t};\r\n\t\t\tpublic static Error = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_AugLoop_Error\" };\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tpublic static Provider = class {\r\n\t\t\tpublic static Info = class {\r\n\t\t\t\tpublic static VALUE: IEventId = { name: \"UserFacts_Provider_Summary\" };\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\r\n\tpublic static Common = class {\r\n\t\tpublic static Error = class {\r\n\t\t\tpublic static VALUE: IEventId = { name: \"Common_Error\" };\r\n\t\t};\r\n\t\tpublic static Info = class {\r\n\t\t\tpublic static VALUE: IEventId = { name: \"Common_Info\" };\r\n\t\t};\r\n\t};\r\n}\r\n","import { ContentType } from \"./TargetedMessagingContentType\";\r\nimport FloodgateStorageProvider from \"../FloodgateCore/FloodgateStorageProvider\";\r\nimport * as Utils from \"../Utils\";\r\nimport { FileType } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport interface ICacheItem {\r\n\tcontentType: ContentType;\r\n\tcontent: any;\r\n\texpiryDate: Date;\r\n\tlastRetrievedDate: Date;\r\n}\r\n\r\nexport class TargetedMessagingCache {\r\n\tprivate useLocalStorage: boolean = false;\r\n\tprivate cachedItems: { [key: string]: ICacheItem } = {};\r\n\tprivate floodgateStorage: FloodgateStorageProvider;\r\n\r\n\tconstructor(items: Array<ContentType>) {\r\n\t\tthis.initialize(items);\r\n\t}\r\n\r\n\tpublic setContentItem(contentType: ContentType, content: any, expiryTime: number): ICacheItem {\r\n\t\tconst cacheItem = this.createItem(contentType, content, expiryTime);\r\n\t\tthis.setItem(cacheItem);\r\n\t\treturn cacheItem;\r\n\t}\r\n\r\n\tpublic getItemContent<T>(contentType: ContentType): T {\r\n\t\tconst cacheItem = this.getItem(contentType);\r\n\t\treturn cacheItem && cacheItem.content;\r\n\t}\r\n\r\n\tpublic has(contentType: ContentType): boolean {\r\n\t\treturn contentType in this.cachedItems;\r\n\t}\r\n\r\n\tpublic isItemExpired(contentType: ContentType): boolean {\r\n\t\tconst cacheItem = this.getItem(contentType);\r\n\t\treturn !cacheItem\r\n\t\t\t|| !cacheItem.expiryDate\r\n\t\t\t|| cacheItem.expiryDate < new Date();\r\n\t}\r\n\r\n\tprivate createItem(contentType: ContentType, content: any, expiryTime: number): ICacheItem {\r\n\t\tconst cacheItem: ICacheItem = {\r\n\t\t\tcontentType,\r\n\t\t\tcontent,\r\n\t\t\texpiryDate:  new Date(Date.now() + expiryTime),\r\n\t\t\tlastRetrievedDate: new Date(),\r\n\t\t};\r\n\r\n\t\treturn cacheItem;\r\n\t}\r\n\r\n\tprivate setItem(cacheItem: ICacheItem): void {\r\n\t\tthis.cachedItems[cacheItem.contentType] = cacheItem;\r\n\t\tthis.updateItemInLocalStorage(cacheItem);\r\n\t}\r\n\r\n\tprivate getItem(contentType: ContentType): ICacheItem {\r\n\t\treturn this.cachedItems[contentType];\r\n\t}\r\n\r\n\tprivate initialize(items: Array<ContentType>): void {\r\n\t\tthis.cachedItems = {};\r\n\t\tif (FloodgateStorageProvider.isStorageAvailable()) {\r\n\t\t\tthis.floodgateStorage = new FloodgateStorageProvider();\r\n\t\t\tthis.useLocalStorage = true;\r\n\r\n\t\t\t// try to fetch items from local storage if available from prior sessions\r\n\t\t\tthis.initCachedItemsFromLocalStorage(items);\r\n\t\t} else {\r\n\t\t\t// no LocalStorage support, only active object cache only\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initCachedItemsFromLocalStorage(items: Array<ContentType>): void {\r\n\t\tif (this.useLocalStorage) {\r\n\t\t\tif (!isNOU(items)) {\r\n\t\t\t\tfor (let contentKey of items) {\r\n\t\t\t\t\tlet tempStorageItem: string = this.floodgateStorage.read(this.mapContentTypeToFloodgateProviderKey(contentKey));\r\n\t\t\t\t\tif (!isNOU(tempStorageItem)) {\r\n\t\t\t\t\t\tconst tempCacheItem: ICacheItem = this.parseObjectFromCache(tempStorageItem);\r\n\t\t\t\t\t\tif (!isNOU(tempCacheItem)) {\r\n\t\t\t\t\t\t\ttempCacheItem.expiryDate = typeof tempCacheItem.expiryDate === \"string\" ?\r\n\t\t\t\t\t\t\t\tnew Date(tempCacheItem.expiryDate) : tempCacheItem.expiryDate;\r\n\t\t\t\t\t\t\tthis.cachedItems[tempCacheItem.contentType] = tempCacheItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateItemInLocalStorage(cacheItem: ICacheItem): void {\r\n\t\tif (this.useLocalStorage) {\r\n\t\t\tthis.floodgateStorage.write(\r\n\t\t\t\tthis.mapContentTypeToFloodgateProviderKey(cacheItem.contentType),\r\n\t\t\t\tJSON.stringify(cacheItem));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseObjectFromCache(tempItem: string): ICacheItem {\r\n\t\ttry {\r\n\t\t\tconst tempCacheItem: ICacheItem = JSON.parse(tempItem);\r\n\t\t\treturn tempCacheItem;\r\n\t\t} catch (e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate mapContentTypeToFloodgateProviderKey(contentType: ContentType): FileType {\r\n\t\tswitch (contentType) {\r\n\t\t\tcase ContentType.campaignContent:\r\n\t\t\t\treturn FileType.TmsCache_CampaignContent;\r\n\t\t\tcase ContentType.messageMetadata:\r\n\t\t\t\treturn FileType.TmsCache_MessageMetadata;\r\n\t\t\tcase ContentType.userGovernanceRules:\r\n\t\t\t\treturn FileType.TmsCache_UserGovernance;\r\n\t\t\tcase ContentType.dynamicSettings:\r\n\t\t\t\treturn FileType.Tms_DynamicSettings;\r\n\t\t\tcase ContentType.logLevelSettings:\r\n\t\t\t\treturn FileType.LogLevelSettings;\r\n\t\t\tcase ContentType.userFacts:\r\n\t\t\t\treturn FileType.UserFacts;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unmapped ContentType in TmsCache\");\r\n\t\t}\r\n\t}\r\n}\r\n","import * as Utils from \"../Utils\";\r\nimport FloodgateStorageProvider from \"../FloodgateCore/FloodgateStorageProvider\";\r\nimport { TargetedMessagingCache } from \"../TargetedMessaging/TargetedMessagingCache\";\r\nimport { ContentType } from \"../TargetedMessaging/TargetedMessagingContentType\";\r\n\r\nimport * as Logging from \"../Logging/Logging\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport const enum SettingKey {\r\n\t// General\r\n\tlogLevelSettings = \"LogLevelSettings\",\r\n\r\n\t// Web surfaces\r\n\tteachingMessageCooldown = \"TeachingMessageCooldown\",\r\n\twebSurfacesIntLink = \"WebSurfacesIntLink\",\r\n\twebSurfacesProdLink = \"WebSurfacesProdLink\",\r\n\r\n\t// TMS settings\r\n\ttmsAppId = \"TmsAppId\",\r\n\ttmsServiceUrl = \"TmsServiceUrl\",\r\n\ttmsActionUrl = \"TmsActionUrl\",\r\n\ttmsLoadTimeout = \"TmsLoadTimeout\",\r\n\ttmsMessageMetadataExpiry = \"TmsMessageMetadataExpiry\",\r\n\ttmsUserGovernanceRulesExpiry = \"TmsUserGovernanceRulesExpiry\",\r\n\ttmsCampaignContentExpiry = \"TmsCampaignContentExpiry\",\r\n\ttmsDynamicSettingsExpiry = \"TmsDynamicSettingsExpiry\",\r\n\ttmsLogLevelSettingsExpiry = \"TmsLogLevelSettingsExpiry\",\r\n\ttmsUserFactsExpiry = \"TmsUserFactsExpiry\",\r\n\r\n\t// Tulips\r\n\ttulipsAppId = \"TulipsAppId\",\r\n\ttulipsLoadTimeout = \"TulipsLoadTimeout\",\r\n\ttulipsServiceUrl = \"TulipsServiceUrl\",\r\n\ttulipsIngestionTimeInterval = \"TulipsIngestionTimeInterval\",\r\n\r\n\t// AugLoop\r\n\ttulipsAugLoopAnnotationName = \"TulipsAugLoopAnnotationName\",\r\n\ttulipsAugLoopPackageDelayLoad = \"TulipsAugLoopPackageDelayLoad\",\r\n\ttulipsAugLoopLoadRetryTimes = \"TulipsAugLoopLoadRetryTimes\",\r\n\ttulipsAugLoopLoadTimeout = \"TulipsAugLoopLoadTimeout\",\r\n}\r\n\r\nlet dynamicSettingsTmsgCache: TargetedMessagingCache = null;\r\n\r\nexport function getDynamicSetting<T>(key: SettingKey, defaultValue: T): T {\r\n\ttry\t{\r\n\t\tif (!dynamicSettingsTmsgCache && FloodgateStorageProvider.isStorageAvailable()) {\r\n\t\t\tdynamicSettingsTmsgCache =  new TargetedMessagingCache([ContentType.dynamicSettings]);\r\n\t\t}\r\n\r\n\t\tif (!dynamicSettingsTmsgCache) {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\tconst settingsObj = dynamicSettingsTmsgCache.getItemContent<Record<string, T>>(ContentType.dynamicSettings);\r\n\t\tif (!isNOU(settingsObj)\r\n\t\t\t&& settingsObj.hasOwnProperty(key)\r\n\t\t\t&& !isNOU(settingsObj[key])) {\r\n\t\t\tconst settingValue = settingsObj[key];\r\n\r\n\t\t\t// parse types\r\n\t\t\tif (typeof defaultValue === \"number\" && typeof settingValue !== \"number\") {\r\n\t\t\t\tif (typeof settingValue === \"string\") {\r\n\t\t\t\t\tconst returnValue = settingValue.indexOf(\".\") === -1 ? parseInt(settingValue, 10) : parseFloat(settingValue);\r\n\t\t\t\t\treturn isNaN(returnValue) ? defaultValue : returnValue as unknown as T;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\r\n\t\t\treturn settingValue;\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tLogging.getLogger().logEvent(\r\n\t\t\tLogging.EventIds.Common.Error.VALUE,\r\n\t\t\tLogging.LogLevel.Error,\r\n\t\t\t{\r\n\t\t\t\tErrorMessage: `Error reading dynamic setting ${error && error.message}`,\r\n\t\t\t\tType: key,\r\n\t\t\t});\r\n\t}\r\n\r\n\treturn defaultValue;\r\n}\r\n\r\nexport function resetDynamicSettingsTmsgCache() {\r\n\tdynamicSettingsTmsgCache = null;\r\n}\r\n","import { IInitOptionsCommon, ISamplingInitOption } from \"./../Configuration/IInitOptions\";\r\nimport { IEventId, ICustomProperties } from \"./Constants\";\r\nimport { Environment } from \"./../Constants\";\r\nimport { App, Browser, Device, Host, Release, Session, User } from \"./Telemetry/Contracts\";\r\nimport * as Utils from \"./../Utils\";\r\nimport ITelemetryLogger from \"./Telemetry/ITelemetryLogger\";\r\nimport TelemetryLoggerFactory from \"./Telemetry/TelemetryLoggerFactory\";\r\nimport FloodgateStorageProvider from \"../FloodgateCore/FloodgateStorageProvider\";\r\nimport { FileType } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider\";\r\n\r\nexport { ICustomProperties, IEventId, EventIds } from \"./Constants\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\n\r\nconst { isNOU } = Utils;\r\nconst NAMESPACE: string = \"Office_Feedback\";\r\n\r\nlet logger: ILogger;\r\nlet env: Environment;\r\n\r\n/**\r\n * Initialize the logging module\r\n * @param initOptionsCommon object contains common init options\r\n * @param appName app name\r\n * @param appVersion app version\r\n * @param logSessionId local SDK session id\r\n */\r\nexport function initialize(initOptionsCommon: IInitOptionsCommon, appName: string, appVersion: string,\r\n\tlogSessionId: string, samplingOption: ISamplingInitOption): void {\r\n\r\n\tconst telemetryGroup = initOptionsCommon.telemetryGroup ? initOptionsCommon.telemetryGroup : {};\r\n\tconst webGroup = initOptionsCommon.webGroup ? initOptionsCommon.webGroup : {};\r\n\r\n\tlogger = new Logger(\r\n\t\tTelemetryLoggerFactory.create(\r\n\t\t\tTokenManager.getTenantToken(initOptionsCommon.environment),\r\n\t\t\tNAMESPACE,\r\n\t\t\tnew App(appName, appVersion),\r\n\t\t\tnew Session(logSessionId),\r\n\t\t\tnew Host(initOptionsCommon.appId.toString(), initOptionsCommon.originalLocale, initOptionsCommon.sessionId, initOptionsCommon.build),\r\n\t\t\tnew Release(telemetryGroup.audienceGroup),\r\n\t\t\tnew Browser(webGroup.browser, webGroup.browserVersion),\r\n\t\t\tnew Device(telemetryGroup.deviceId),\r\n\t\t\tnew User(telemetryGroup.loggableUserId ? telemetryGroup.loggableUserId : initOptionsCommon.cid, telemetryGroup.tenantId)\r\n\t\t),\r\n\t\tsamplingOption,\r\n\t\tinitOptionsCommon\r\n\t);\r\n\r\n\tenv = initOptionsCommon.environment;\r\n}\r\n\r\n/**\r\n * Get the logger object\r\n */\r\nexport function getLogger(): ILogger {\r\n\treturn logger;\r\n}\r\n\r\n/**\r\n * Interface for a logger\r\n */\r\nexport interface ILogger {\r\n\tlogEvent(eventId: IEventId, logSeverity: LogLevel, customProperties?: ICustomProperties, internalSampleRate?: number): void;\r\n\tlogLocal?(logSeverity: LogLevel, ...others: any[]): void;\r\n}\r\n\r\n/**\r\n * Log level settings\r\n */\r\nexport const enum LogLevel {\r\n\tNone,\r\n\tCritical,\r\n\tError,\r\n\tInfo\r\n}\r\n\r\ninterface ILogSettings {\r\n\tconsoleLog?: boolean;\r\n\tisEnabled?: boolean;\r\n\tlogLevel?: LogLevel;\r\n};\r\n\r\ninterface ILogLevelSettings {\r\n\tcontent: ILogSettings;\r\n};\r\n\r\n/**\r\n * Class representing a logger for the feedback SDK\r\n */\r\nexport class Logger implements ILogger {\r\n\tprivate static EVENT_NAME: string = \"SDK\";\r\n\tprivate static EVENT_ID: string = \"EventId\";\r\n\tprivate static DEFAULT_SAMPLE_RATE: number = 1;\r\n\r\n\tprivate telemetryLogger: ITelemetryLogger;\r\n\tprivate logLevel: LogLevel;\r\n\tprivate isConsoleLogEnabled: boolean;\r\n\tprivate dynamicLogSettings: ILogLevelSettings;\r\n\r\n\tprivate eventSampling: ISamplingInitOption;\r\n\tprivate initOptionsCommon: IInitOptionsCommon;\r\n\r\n\tprivate readonly SAMPLING_RESULT = Math.random();\r\n\r\n\tconstructor(telemetryLogger: ITelemetryLogger, samplingOptions: ISamplingInitOption, initOptionsCommon?: IInitOptionsCommon) {\r\n\t\tif (!telemetryLogger) {\r\n\t\t\tthrow new Error(\"telemetryLogger must not be null\");\r\n\t\t}\r\n\r\n\t\tthis.telemetryLogger = telemetryLogger;\r\n\t\tthis.eventSampling = samplingOptions;\r\n\t\tthis.initOptionsCommon = initOptionsCommon;\r\n\t}\r\n\r\n\t/**\r\n\t * Log an event\r\n\t * @param eventId event Id\r\n\t * @param logSeverity the log level severity for the message\r\n\t * @param customProperties custom properties to add to the log\r\n\t * @param internalSampleRate sample rate for this event in decimal (example: 0.05 for 5%). (Does not override host set sampleRate)\r\n\t */\r\n\tpublic logEvent(eventId: IEventId, logSeverity: LogLevel, customProperties?: ICustomProperties, internalSampleRate?: number): boolean {\r\n\t\tif (!eventId) {\r\n\t\t\tthrow new Error(\"eventId must not be null\");\r\n\t\t}\r\n\r\n\t\tlet sampleRate = Logger.DEFAULT_SAMPLE_RATE;\r\n\r\n\t\t// Host set sample rate has precedence over internalSampleRate.\r\n\t\tif (this.isEventSampled(eventId.name)) {\r\n\t\t\tsampleRate = this.getEventSamplingRate(eventId.name);\r\n\t\t} else if (internalSampleRate !== undefined) {\r\n\t\t\tsampleRate = internalSampleRate;\r\n\t\t}\r\n\r\n\t\tif (isNOU(logSeverity) || logSeverity === LogLevel.None) {\r\n\t\t\tif (env === Environment.Production) {\r\n\t\t\t\tconst errorMessage = \"logSeverity must not be null or none\";\r\n\t\t\t\tif (this.isConsoleLogEnabled && console) {\r\n\t\t\t\t\t// tslint:disable:no-console\r\n\t\t\t\t\tconsole.log(\"Floodgate event: \", Logger.EVENT_NAME, errorMessage);\r\n\t\t\t\t}\r\n\t\t\t\tthis.telemetryLogger.logEvent(Logger.EVENT_NAME, { ErrorMessage: errorMessage }, sampleRate);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tcustomProperties = customProperties || {};\r\n\t\t(<any> customProperties)[Logger.EVENT_ID] = eventId.name;\r\n\r\n\t\tif (this.isLoggingEnabled(logSeverity, sampleRate) || this.isEventTelemetryEnabled(eventId.name)) {\r\n\t\t\tthis.telemetryLogger.logEvent(Logger.EVENT_NAME, customProperties, sampleRate);\r\n\t\t}\r\n\r\n\t\tif (this.isConsoleLogEnabled && console) {\r\n\t\t\t// tslint:disable:no-console\r\n\t\t\tconsole.log(\"Floodgate event: \", Logger.EVENT_NAME, logSeverity, customProperties);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic logLocal?(logSeverity: LogLevel, ...others: any[]): void {\r\n\t\tif (this.isLoggingEnabled(logSeverity) && this.isConsoleLogEnabled && console) {\r\n\t\t\t// tslint:disable:no-console\r\n\t\t\tconsole.log(\"LPP FG: \", logSeverity, others);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getUserSamplingRate(): number {\r\n\t\treturn this.SAMPLING_RESULT;\r\n\t}\r\n\r\n\tpublic isEventTelemetryEnabled(eventName: string): boolean {\r\n\t\ttry {\r\n\t\t\tif (!this.dynamicLogSettings) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconst appId = this.initOptionsCommon?.appId?.toString();\r\n\t\t\tconst locale = this.initOptionsCommon?.originalLocale?.toLowerCase();\r\n\t\t\tconst settingName = `content_${eventName}`;\r\n\r\n\t\t\t// try settings from more specific to generic order\r\n\t\t\tconst overrideSettings =\r\n\t\t\t\tthis.dynamicLogSettings[`${settingName}_${appId}_${locale}` as keyof ILogLevelSettings] ||\r\n\t\t\t\tthis.dynamicLogSettings[`${settingName}_${appId}` as keyof ILogLevelSettings] ||\r\n\t\t\t\tthis.dynamicLogSettings[`${settingName}_${locale}` as keyof ILogLevelSettings] ||\r\n\t\t\t\tthis.dynamicLogSettings[settingName as keyof ILogLevelSettings];\r\n\r\n\t\t\treturn overrideSettings?.isEnabled;\r\n\t\t} catch (e) {\r\n\t\t\tif (this.isConsoleLogEnabled) {\r\n\t\t\t\t// tslint:disable:no-console\r\n\t\t\t\tconsole.log(\"FG: Error checking for dynamic log settings: \", e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * This method enables logging only if the log severity of the event is less than or equal to the\r\n\t * current log level set and within the sample rate. For example, if the log severity of the event is \r\n\t * LogLevel.Error and the current log level is set as LogLevel.Critical, then isLoggingEnabled will \r\n\t * return false since the condition LogLevel.Error <= LogLevel.Critical is false. Because, the log severity \r\n\t * follows the order defined in the LogLevel enum (None < Critical < Error < Info). The sample rate is the\r\n\t * percentage of users allow to send the event back. If the random genarated number is less than the sample rate\r\n\t * and the sample rate is not full blocking (0 value)\r\n\t * If no current log level is set, then the default log level is set as LogLevel.Error so that all events\r\n\t * marked with critical and error log severity get logged.\r\n\t * @param inputLogLevel the log severity of the event\r\n\t */\r\n\tprivate isLoggingEnabled(inputLogLevel: LogLevel, sampleRate: number = 1): boolean {\r\n\t\tif (isNOU(this.logLevel)) {\r\n\t\t\tconst currentLogLevel = this.getCurrentLogLevel();\r\n\t\t\tthis.logLevel = isNOU(currentLogLevel) ? LogLevel.Error : currentLogLevel;\r\n\t\t}\r\n\r\n\t\treturn (inputLogLevel <= this.logLevel && this.SAMPLING_RESULT <= sampleRate && sampleRate !== 0);\r\n\t}\r\n\r\n\t/**\r\n\t * This method returns the current log level if it is set in either url query parameters or floodgate local storage.\r\n\t * Following table summarizes whether the log event calls with a log severity will log the events or not according\r\n\t * to the current log level set. For example, the first row in the table demonstrates that when the current log level\r\n\t * enabled is critical, then the log event will log the events only if the log severity is critical.\r\n\t *\r\n\t * Current Log Level Enabled | LogSeverity: Critical\t| LogSeverity: Error\t| LogSeverity: Info\r\n\t * --------------------------------------------------------------------------------------------\r\n\t * Critical Enabled\t\t\t | yes      \t\t\t\t| no    \t\t\t \t| no\r\n\t * Error Enabled       \t\t | yes      \t\t\t\t| yes   \t\t\t \t| no\r\n\t * Info Enabled        \t\t | yes      \t\t\t\t| yes   \t\t\t \t| yes\r\n\t * None Enabled        \t\t | no       \t\t\t\t| no    \t\t\t \t| no\r\n\t *\r\n\t * Console logging will be enabled when the current log level is set through the url query parameters or\r\n\t * when the url query parameter \"obfconsolelog\" is explicitly set to true.\r\n\t */\r\n\tprivate getCurrentLogLevel(): LogLevel {\r\n\t\ttry {\r\n\t\t\t// Check if console log is enabled in local browser session with query parameter overrides\r\n\t\t\tconst urlParams = typeof URLSearchParams !== \"undefined\" && new URLSearchParams(window.location.search) || undefined;\r\n\t\t\tlet consoleLogParam: string | boolean = urlParams && urlParams.get(\"obfconsolelog\");\r\n\t\t\tif (!consoleLogParam) {\r\n\t\t\t\t// for getting iframe host url - eg: WAC\r\n\t\t\t\tconst documentReferrer = typeof document !== \"undefined\" && document.referrer;\r\n\t\t\t\tconsoleLogParam = documentReferrer && documentReferrer.indexOf(\"obfconsolelog\") !== -1;\r\n\t\t\t}\r\n\r\n\t\t\tif (consoleLogParam) {\r\n\t\t\t\tthis.isConsoleLogEnabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if log level is set in local browser session with query parameter overrides\r\n\t\t\tconst logLevelParam = urlParams && urlParams.get(\"obfloglevel\");\r\n\t\t\tif (!isNOU(logLevelParam)) {\r\n\t\t\t\tthis.isConsoleLogEnabled = true;\r\n\t\t\t\treturn parseInt(logLevelParam, 10);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if log level is set in floodgate local storage (manually or with remotely fetched settings)\r\n\t\t\tif (FloodgateStorageProvider.isStorageAvailable()) {\r\n\t\t\t\tconst floodgateStorageProvider: FloodgateStorageProvider = new FloodgateStorageProvider();\r\n\t\t\t\tlet tempStorageItem: string = floodgateStorageProvider.read(FileType.LogLevelSettings);\r\n\t\t\t\tif (!tempStorageItem) {\r\n\t\t\t\t\ttempStorageItem = getDynamicSetting(SettingKey.logLevelSettings, \"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst settingsObj = tempStorageItem && this.parseObject(tempStorageItem);\r\n\t\t\t\tif (settingsObj) {\r\n\t\t\t\t\tthis.dynamicLogSettings = settingsObj;\r\n\t\t\t\t\tlet logSettings = settingsObj.content as ILogSettings;\r\n\r\n\t\t\t\t\tif (this.initOptionsCommon) {\r\n\t\t\t\t\t\tconst appId = this.initOptionsCommon.appId && this.initOptionsCommon.appId.toString();\r\n\t\t\t\t\t\tconst locale =  this.initOptionsCommon.originalLocale && this.initOptionsCommon.originalLocale.toLowerCase();\r\n\r\n\t\t\t\t\t\t// log settings from more specific to generic order\r\n\t\t\t\t\t\tlogSettings = settingsObj[`content_${appId}_${locale}`] ||\r\n\t\t\t\t\t\t\t\t\t\tsettingsObj[`content_${appId}`] ||\r\n\t\t\t\t\t\t\t\t\t\tsettingsObj[`content_${locale}`] ||\r\n\t\t\t\t\t\t\t\t\t\tsettingsObj[`content`];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (logSettings) {\r\n\t\t\t\t\t\tif (logSettings.consoleLog) {\r\n\t\t\t\t\t\t\tthis.isConsoleLogEnabled = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn logSettings.logLevel;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tif (this.isConsoleLogEnabled) {\r\n\t\t\t\t// tslint:disable:no-console\r\n\t\t\t\tconsole.log(\"Error while getting the current log level: \", e);\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate parseObject(tempItem: string): any {\r\n\t\ttry {\r\n\t\t\treturn JSON.parse(tempItem);\r\n\t\t} catch (e) {\r\n\t\t\tif (this.isConsoleLogEnabled) {\r\n\t\t\t\t// tslint:disable:no-console\r\n\t\t\t\tconsole.log(\"Error while parsing the json string for log level: \", e);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getEventSamplingRate(eventId: string): number {\r\n\t\tlet sampleRate = 1;\r\n\t\tif (this.eventSampling.event) {\r\n\t\t\t// If the event is init with sample rate\r\n\t\t\t// check the sampling result against the sample rate\r\n\t\t\tif (eventId in this.eventSampling.event) {\r\n\t\t\t\tsampleRate = this.eventSampling.event[eventId];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sampleRate;\r\n\t}\r\n\r\n\tprivate isEventSampled(eventId: string): boolean {\r\n\t\tif (this.eventSampling.event) {\r\n\t\t\tif (eventId in this.eventSampling.event) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nclass TokenManager {\r\n\tpublic static getTenantToken(environment: Environment): string {\r\n\t\tif (environment === Environment.Production) {\r\n\t\t\treturn TokenManager.TENANT_TOKEN_PRODUCTION;\r\n\t\t} else {\r\n\t\t\treturn TokenManager.TENANT_TOKEN_PRE_PRODUCTION;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static TENANT_TOKEN_PRODUCTION: string =\r\n\t\"d79e824386c4441cb8c1d4ae15690526-bd443309-5494-444a-aba9-0af9eef99f84-7360\"; // \"Office Feedback\" Prod Aria tenant\r\n\tprivate static TENANT_TOKEN_PRE_PRODUCTION: string =\r\n\t\"2bf6a2ffddca4a80a892a0b182132961-625cb102-8b0c-480e-af53-92e48695d08d-7736\"; // \"Office Feedback\" Sandbox Aria tenant\r\n}\r\n","/**\r\n * Factory to return ITelemetryLogger objects\r\n */\r\n\r\nimport { App, Browser, Device, Host, Release, Session, User } from \"./Contracts\";\r\nimport ITelemetryLogger from \"./ITelemetryLogger\";\r\nimport AriaTelemetryLogger from \"./AriaTelemetryLogger\";\r\n\r\nexport default class TelemetryLoggerFactory {\r\n\tpublic static create(tenantToken: string, namespace: string, app: App, session: Session,\r\n\t\thost: Host, release: Release, browser: Browser, device: Device, user: User): ITelemetryLogger {\r\n\t\t\treturn new AriaTelemetryLogger(tenantToken, namespace, app, session, host, release, browser, device, user);\r\n\t\t}\r\n}\r\n","/**\r\n * CommonApp.ts\r\n *\r\n * Common logic for entrypoints.\r\n */\r\n\r\nimport \"./Polyfills/Promise\";\r\n\r\nimport Version from \"./Version\";\r\nimport * as Configuration from \"./Configuration/Configuration\";\r\nimport * as Window from \"./Window/Window\";\r\nimport * as Logging from \"./Logging/Logging\";\r\n\r\nconst APP_NAME: string = \"OfficeFeedbackSDK\";\r\n\r\n/**\r\n * Has the SDK been initialized\r\n */\r\nlet initialized: boolean = false;\r\n\r\n/**\r\n * Has the SDK allow AADC\r\n */\r\nlet commonPolicyAllowAADC: boolean = false;\r\n\r\n/**\r\n * Initialize\r\n */\r\nexport function initialize(): void {\r\n\tif (initialized) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!Window.get().OfficeBrowserFeedback.initOptions) {\r\n\t\tthrow new Error(\"Window.OfficeBrowserFeedback.initOptions not set\");\r\n\t}\r\n\r\n\tWindow.get().OfficeBrowserFeedback.sdkVersion = Version;\r\n\tConfiguration.get().setCommonInitOptions(Window.get().OfficeBrowserFeedback.initOptions);\r\n\tcommonPolicyAllowAADC = Configuration.get().isFeedbackSurveyEnabledByAADC();\r\n\r\n\tLogging.initialize(\r\n\t\tConfiguration.get().getCommonInitOptions(),\r\n\t\tAPP_NAME,\r\n\t\tVersion,\r\n\t\tConfiguration.get().getSdkSessionId(),\r\n\t\tConfiguration.get().getEventSampling()\r\n\t);\r\n\r\n\tinitialized = true;\r\n\r\n\tif (!commonPolicyAllowAADC) {\r\n\t\tLogging.getLogger().logEvent(Logging.EventIds.FEEDBACK_SURVEYSDISABLED_AADC,\r\n\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t{\r\n\t\t\t\tData: JSON.stringify({\r\n\t\t\t\t\tageGroup: Configuration.get().getCommonInitOptions().ageGroup,\r\n\t\t\t\t\tauthenticationType: Configuration.get().getCommonInitOptions().authenticationType,\r\n\t\t\t\t}),\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Reset the module. Used in unit tests.\r\n */\r\nexport function reset() {\r\n\tinitialized = false;\r\n}\r\n\r\n/**\r\n * Return Flag to determine whether Feedback and Survey is enabled by AADC.\r\n * Return true if Feedback and Survey is enabled.\r\n * Otherwise, return false.\r\n */\r\nexport function isFeedbackSurveyEnabledByAADC(): boolean {\r\n\treturn commonPolicyAllowAADC;\r\n}\r\n\r\nWindow.setIsFeedbackSurveyEnabledByAADC(isFeedbackSurveyEnabledByAADC);\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import \"../Polyfills/Fetch\";\r\nimport * as TmsConstants from \"./TargetedMessagingConstants\";\r\nimport * as Utils from \"../Utils\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport class TargetedMessagingTransport {\r\n\tconstructor(private sessionId?: string) {\r\n\t}\r\n\r\n\tpublic async sendGetRequest(requestUrl: string, token?: string, useTimeout?: boolean, timeout?: number): Promise<Response> {\r\n\t\tconst requestInit = {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: this.createHeaders(token),\r\n\t\t};\r\n\r\n\t\treturn useTimeout ?\r\n\t\t\tthis.timeoutFetch(requestUrl, requestInit, timeout ?? TmsConstants.TMS_FETCH_TIMEOUT) :\r\n\t\t\tfetch(requestUrl, requestInit);\r\n\t}\r\n\r\n\tpublic async sendPostRequest(\r\n\t\trequestUrl: string, requestBody: string, token?: string, useTimeout?: boolean, timeout?: number): Promise<Response> {\r\n\t\tconst requestInit = {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: this.createHeaders(token),\r\n\t\t\tbody: requestBody,\r\n\t\t};\r\n\r\n\t\treturn useTimeout ?\r\n\t\t\tthis.timeoutFetch(requestUrl, requestInit, timeout ?? TmsConstants.TMS_FETCH_TIMEOUT) :\r\n\t\t\tfetch(requestUrl, requestInit);\r\n\t}\r\n\r\n\tprotected createHeaders(token?: string): Headers {\r\n\t\tconst headers: Headers = typeof Headers !== \"undefined\" && new Headers();\r\n\t\tif (headers) {\r\n\t\t\tif (!isNOU(token)) {\r\n\t\t\t\theaders.append(\"Authorization\", \"Bearer \" + token);\r\n\t\t\t}\r\n\r\n\t\t\theaders.append(\"X-CorrelationId\", Utils.guid());\r\n\t\t\tif (this.sessionId) {\r\n\t\t\t\theaders.append(\"X-UserSessionId\", this.sessionId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate timeoutFetch(input: RequestInfo, init: RequestInit = {}, timeout: number): Promise<Response> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tfetch(input, init).then(resolve, reject);\r\n\t\t\tsetTimeout(() => reject(\r\n\t\t\t\tnew Error(\"Service request timed out\")),\r\n\t\t\t\ttimeout);\r\n\t\t});\r\n\t}\r\n}\r\n","export const CACHE_EXPIRY_MESSAGEMETADATA = 14400000; // expiry in ms - 4hrs\r\nexport const CACHE_EXPIRY_USERGOVERNANCERULES = 14400000; // expiry in ms - 4hrs\r\nexport const CACHE_EXPIRY_CAMPAIGNCONTENT = 14400000; // expiry in ms - 4hrs\r\nexport const CACHE_EXPIRY_DYNAMICSETTINGS = 14400000; // expiry in ms - 4hrs\r\nexport const CACHE_EXPIRY_LOGLEVELSETTINGS = 14400000; // expiry in ms - 4hrs\r\nexport const CACHE_EXPIRY_USERFACTS = 86400000; // expiry in ms - 24hrs\r\n\r\nexport const TMS_BASEURL_PREFIX_EDOG = \"https://messaging.officeppe.com/lifecycle/\";\r\nexport const TMS_BASEURL_PREFIX_PROD = \"https://messaging.office.com/lifecycle/\";\r\nexport const TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT = \"CampaignMetadataAggregator\";\r\nexport const TMS_SETCAMPAIGNACTION_ENDPOINT = \"SetCampaignAction\";\r\nexport const TMS_CAMPAIGN_LOAD_TIMEOUT = 1000;\r\n\r\nexport const TMS_FETCH_TIMEOUT = 5000; // timeout for fetching tms service requests\r\n\r\nexport const TULIPS_SERVICEURL =\r\n\t\"https://substrate.office.com/OfficePersonalizationUserLifecycle/api/facts\";\r\n\r\nexport const TULIPS_LOAD_TIMEOUT = 1000;\r\n\r\nexport const TULIPS_FETCH_TIMEOUT = 5000; // timeout for fetching tulips service requests\r\n\r\nexport const TULIPS_INGESTION_TIME = 24 * 60 * 60 * 1000; // Tulips ingestion time\r\n\r\nexport const AUGLOOP_INIT_CHECK_RETRY_TIMES = 5;\r\n","/*\r\n * UrlUtils.ts\r\n */\r\n\r\nexport interface IQueryParams {\r\n\t[key: string]: any;\r\n}\r\n\r\nexport function buildQueryParameters(keyAndValues: IQueryParams, encodeValueAsURI: boolean = true): string {\r\n\tlet queryParamsString = \"\";\r\n\tfor (const key in keyAndValues || []) {\r\n\t\tif (keyAndValues.hasOwnProperty(key)) {\r\n\t\t\tconst value = keyAndValues[key];\r\n\t\t\tif (value !== null && value !== undefined && typeof value !== \"object\") {\r\n\t\t\t\tconst prefix = !queryParamsString ? \"\" : \"&\";\r\n\t\t\t\tconst encodedValue = encodeValueAsURI ? encodeURIComponent(value) : value;\r\n\t\t\t\tconst queryParamItem = `${key}=${encodedValue}`;\r\n\t\t\t\tqueryParamsString += prefix + queryParamItem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn queryParamsString;\r\n}\r\n","/*\r\n * AugLoopHelper.ts\r\n */\r\n\r\nimport { ISession } from \"@augloop/runtime-client\";\r\nimport { IOperation, ISchemaObject, SchemaObject } from \"@augloop/types-core\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\nimport { AUGLOOP_INIT_CHECK_RETRY_TIMES } from \"./TargetedMessagingConstants\";\r\n\r\nexport interface IAugLoopResponse extends ISchemaObject {\r\n\terror?: any;\r\n}\r\n\r\nfunction sleep(milliseconds: number): Promise<void> {\r\n\treturn new Promise<void>(resolve => {\r\n\t\tsetTimeout(resolve, milliseconds);\r\n\t});\r\n}\r\n\r\nfunction getObjectProperty<T>(targetObject: any, propertyName: string): T {\r\n\tconst propertyValue = targetObject && targetObject[propertyName];\r\n\treturn (propertyValue || Object.getOwnPropertyDescriptor(targetObject, propertyName)) ? propertyValue : undefined;\r\n}\r\n\r\n// listen to property change on targetObject and return the value when it is set\r\nfunction getDelayDefinedObjectValue<T>(targetObject: any, propertyName: string): Promise<T> {\r\n\tif (!targetObject) {\r\n\t\treturn Promise.resolve(null);\r\n\t}\r\n\r\n\tconst currentPropertyValue = getObjectProperty<T>(targetObject, propertyName);\r\n\tif (currentPropertyValue) {\r\n\t\treturn Promise.resolve(currentPropertyValue);\r\n\t}\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tlet propertyValue: T;\r\n\t\tObject.defineProperty(targetObject, propertyName, {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tget: () => propertyValue,\r\n\t\t\tset: (newValue: T) => {\r\n\t\t\t\tpropertyValue = newValue;\r\n\t\t\t\tresolve(propertyValue);\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n}\r\n\r\nasync function getDelayDefinedValueWithWait<T>(targetObject: any, propertyName: string, retryTimes: number, delay = 100): Promise<T> {\r\n\tconst definedProperty = getObjectProperty(targetObject, propertyName) as T;\r\n\tif (definedProperty || retryTimes === 0) {\r\n\t\treturn definedProperty;\r\n\t}\r\n\r\n\tawait sleep(delay);\r\n\treturn getDelayDefinedValueWithWait(targetObject, propertyName, retryTimes - 1, delay);\r\n}\r\n\r\n// Invoke AL calls and get the data\r\nfunction getAnnotationData(augLoopSession: ISession, annotationName: string): Promise<IAugLoopResponse> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taugLoopSession.activateAnnotation(annotationName, {\r\n\t\t\tcallback: (operation: IOperation) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst operationItems = operation && operation.items ? operation.items : [];\r\n\t\t\t\t\tconst schemaObjects = operationItems.filter(item => annotationName === SchemaObject.getTypeNameFor(item.body));\r\n\t\t\t\t\tresolve(schemaObjects && schemaObjects[0] && schemaObjects[0].body);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tresolve({error: error} as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// Get the Augloop global object - window.augLoop\r\nasync function getGlobalAugLoopRuntime(loadDelay = 100) {\r\n\t// try to get the augloop global runtime window.augLoop\r\n\tlet augLoopRuntime = getObjectProperty(window, \"augLoop\");\r\n\tif (!augLoopRuntime) {\r\n\t\tconst delayLoadTime = getDynamicSetting(SettingKey.tulipsAugLoopPackageDelayLoad, -1);\r\n\t\tif (delayLoadTime > 0) {\r\n\t\t\t// wait for augloop to load after sometime\r\n\t\t\tawait sleep(delayLoadTime);\r\n\t\t\taugLoopRuntime = getObjectProperty(window, \"augLoop\");\r\n\t\t} else {\r\n\t\t\tconst retryTimes = getDynamicSetting(SettingKey.tulipsAugLoopLoadRetryTimes, AUGLOOP_INIT_CHECK_RETRY_TIMES);\r\n\t\t\taugLoopRuntime = await getDelayDefinedValueWithWait(window, \"augLoop\", retryTimes, loadDelay);\r\n\t\t\tif (!augLoopRuntime) {\r\n\t\t\t\t// Wait for augloop to mount on window\r\n\t\t\t\taugLoopRuntime = await getDelayDefinedObjectValue(window, \"augLoop\");\r\n\t\t\t}\r\n\r\n\t\t\tif (loadDelay > 0) {\r\n\t\t\t\tawait sleep(loadDelay);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn augLoopRuntime;\r\n}\r\n\r\nexport async function getAugLoopAnnotationData(\r\n\tannotationName: string,\r\n\tgetRuntimeSession?: () => Promise<ISession>,\r\n\tloadDelay = 100): Promise<ISchemaObject> {\r\n\tlet augLoopSession = getRuntimeSession && await getRuntimeSession();\r\n\tif (!augLoopSession) {\r\n\t\tconst augLoopRuntime = await getGlobalAugLoopRuntime(loadDelay);\r\n\t\tif (!augLoopRuntime) {\r\n\t\t\tthrow new Error(\"Unable to get AL runtime\");\r\n\t\t}\r\n\r\n\t\tconst augLoopSessionPromise = (window as any).augLoop.ALFactoryGlobal.getAugLoopRuntimeManager().getSession() as Promise<ISession>;\r\n\t\tif (!augLoopSessionPromise) {\r\n\t\t\tthrow new Error(\"Unable to get AL session promise\");\r\n\t\t}\r\n\r\n\t\taugLoopSession = await augLoopSessionPromise;\r\n\t\tif (!augLoopSession) {\r\n\t\t\tthrow new Error(\"Unable to get AL session\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn getAnnotationData(augLoopSession, annotationName);\r\n}\r\n","import { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { FileType } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateStorageProvider\";\r\nimport { IAugLoopCallback } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IAugLoopCallback\";\r\nimport { IFloodgateAuthTokenCallback } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IFloodgateAuthTokenCallback\";\r\nimport { MessageSpec } from \"@ms-ofb/officefloodgatecore/dist/src/Governance/MessageMetadata\";\r\n\r\nimport { TargetedMessagingTransport } from \"./TargetedMessagingTransport\";\r\nimport { ContentType } from \"./TargetedMessagingContentType\";\r\nimport { buildQueryParameters, IQueryParams } from \"../Common/UrlUtils\";\r\nimport { TargetedMessagingCache } from \"./TargetedMessagingCache\";\r\n\r\nimport * as Constants from \"../Constants\";\r\nimport * as Logging from \"../Logging/Logging\";\r\nimport * as TmsgConstants from \"./TargetedMessagingConstants\";\r\n\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\nimport FloodgateStorageProvider from \"../FloodgateCore/FloodgateStorageProvider\";\r\nimport { IBeaconParameters } from \"../FloodgateCore/CoachingUXLauncherFactory\";\r\n\r\nimport { getAugLoopAnnotationData, IAugLoopResponse } from \"./AugLoopHelper\";\r\nimport { ISession } from \"@augloop/runtime-client\";\r\nimport { AgeGroup, AuthenticationType, IMessagingServiceSettings} from \"../Configuration/IInitOptions\";\r\n\r\nexport class ContentResponse {\r\n\tpublic contentType: ContentType;\r\n\tpublic content: any;\r\n}\r\n\r\ninterface ITmsServiceResponse {\r\n\tMessageMetadata: MessageSpec;\r\n\tUserGovernanceRules: any;\r\n\tCampaignContent: any;\r\n\tDynamicSettings: any;\r\n\tLogLevelSettings: ILogLevelSettings;\r\n}\r\n\r\ninterface IUserFactsAugLoopResponse {\r\n\tpuid: string;\r\n\tuserFacts: Api.IUserFact[];\r\n}\r\n\r\ninterface ILogLevelSettings {\r\n\tlogLevel: Logging.LogLevel;\r\n}\r\n\r\ninterface IDebugOverrides {\r\n\taddTmsQueryParams?: Record<string, string>;\r\n\treplaceTmsQueryParams?: Record<string, string>;\r\n\ttmsResponse?: ITmsServiceResponse;\r\n\tuserFactsResponse?: ITmsServiceResponse;\r\n}\r\n\r\nexport function getDebugCampaignDefinitions(): ContentResponse {\r\n\tconst debugOverrides = FloodgateStorageProvider.safeReadObject<IDebugOverrides>(FileType.DebugOverrides, {});\r\n\treturn debugOverrides && debugOverrides.tmsResponse && debugOverrides.tmsResponse.CampaignContent && {\r\n\t\tcontentType: ContentType.campaignContent,\r\n\t\tcontent: debugOverrides.tmsResponse.CampaignContent,\r\n\t};\r\n}\r\n\r\nexport function getDebugUserFacts(): ContentResponse {\r\n\tconst debugOverrides = FloodgateStorageProvider.safeReadObject<IDebugOverrides>(FileType.DebugOverrides, {});\r\n\treturn debugOverrides && debugOverrides.userFactsResponse && {\r\n\t\tcontentType: ContentType.userFacts,\r\n\t\tcontent: debugOverrides.userFactsResponse,\r\n\t};\r\n}\r\n\r\nexport class TargetedMessagingClient {\r\n\tprivate locale: string = \"en-us\";\r\n\tprivate country: string = \"US\";\r\n\tprivate authTokenCallback: IFloodgateAuthTokenCallback;\r\n\tprivate augLoopCallback: IAugLoopCallback<ISession>;\r\n\tprivate app: string;\r\n\tprivate platform: string;\r\n\tprivate version: string;\r\n\tprivate sessionId: string;\r\n\tprivate campaignFlights: string;\r\n\tprivate campaignParameters: string;\r\n\tprivate ageGroup: AgeGroup;\r\n\tprivate authenticationType: AuthenticationType;\r\n\tprivate tmsBaseUrlPrefix: string;\r\n\tprivate messagingServiceSettings: IMessagingServiceSettings;\r\n\r\n\tprivate tmsgCache: TargetedMessagingCache;\r\n\tprivate tmsgTransport: TargetedMessagingTransport;\r\n\r\n\tconstructor(\r\n\t\tapp: string,\r\n\t\tplatform: string,\r\n\t\tversion: string,\r\n\t\tlocale: string,\r\n\t\tcountry: string,\r\n\t\tsessionId: string,\r\n\t\tauthTokenCallback: IFloodgateAuthTokenCallback,\r\n\t\taugLoopCallback: IAugLoopCallback<ISession>,\r\n\t\tcampaignFlights?: string,\r\n\t\tcampaignParameters?: string,\r\n\t\tageGroup?: AgeGroup,\r\n\t\tauthenticationType?: AuthenticationType,\r\n\t\taudience?: string,\r\n\t\tmessagingServiceSettings?: IMessagingServiceSettings,\r\n\t\ttmsgCacheIn?: TargetedMessagingCache) {\r\n\t\tthis.locale = locale;\r\n\t\tthis.country = country;\r\n\t\tthis.authTokenCallback = authTokenCallback;\r\n\t\tthis.augLoopCallback = augLoopCallback;\r\n\t\tthis.app = app;\r\n\t\tthis.platform = platform;\r\n\t\tthis.version = version;\r\n\t\tthis.sessionId = sessionId;\r\n\t\tthis.campaignFlights = campaignFlights;\r\n\t\tthis.campaignParameters = campaignParameters;\r\n\t\tthis.ageGroup = ageGroup;\r\n\t\tthis.authenticationType = authenticationType;\r\n\t\tthis.messagingServiceSettings = messagingServiceSettings;\r\n\r\n\t\tconst internalEnvs = [\"dogfood\", \"edog\", \"int\", \"microsoft\"];\r\n\t\tconst isInternalEnv = audience && internalEnvs.indexOf(audience.toLowerCase()) !== -1;\r\n\t\tconst tmsConfigBaseUrlPrefix = isInternalEnv ? this.messagingServiceSettings?.messagingServiceIntUrl\r\n\t\t: this.messagingServiceSettings?.messagingServiceProdUrl;\r\n\t\tconst tmsDefaultBaseUrlPrefix = isInternalEnv ? TmsgConstants.TMS_BASEURL_PREFIX_EDOG : TmsgConstants.TMS_BASEURL_PREFIX_PROD;\r\n\t\tthis.tmsBaseUrlPrefix = tmsConfigBaseUrlPrefix || tmsDefaultBaseUrlPrefix;\r\n\r\n\t\tthis.tmsgCache = this.tmsgCache || tmsgCacheIn || new TargetedMessagingCache([\r\n\t\t\tContentType.messageMetadata,\r\n\t\t\tContentType.userGovernanceRules,\r\n\t\t\tContentType.campaignContent,\r\n\t\t\tContentType.dynamicSettings,\r\n\t\t\tContentType.logLevelSettings,\r\n\t\t\tContentType.userFacts,\r\n\t\t]);\r\n\t}\r\n\r\n\tpublic async getContent(\r\n\t\trequestedContent: ContentType): Promise<ContentResponse> {\r\n\t\tif (this.tmsgCache.isItemExpired(requestedContent)) {\r\n\t\t\tawait this.refreshItemsInCacheFromTmsService([requestedContent]);\r\n\t\t}\r\n\r\n\t\tconst response: ContentResponse = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tpublic async getMultipleContents(\r\n\t\trequestedContent: Array<ContentType>): Promise<ContentResponse[]> {\r\n\t\tawait this.refreshItemsInCacheFromTmsService(requestedContent);\r\n\r\n\t\tconst contentResponses: ContentResponse[] = new Array<ContentResponse>();\r\n\t\tconst bulkRefreshList: ContentType[] = new Array<ContentType>();\r\n\t\tfor (let contentType of requestedContent) {\r\n\t\t\tconst responseItem = this.createCachedContentResponse(contentType);\r\n\t\t\tcontentResponses.push(responseItem);\r\n\t\t}\r\n\r\n\t\tthis.refreshItemsInCacheFromTmsService(bulkRefreshList);\r\n\r\n\t\treturn contentResponses;\r\n\t}\r\n\r\n\tpublic async getUserFactsContent(\r\n\t\trequestedContent: ContentType): Promise<ContentResponse> {\r\n\t\tawait this.refreshItemsInCacheFromTulipsService(requestedContent);\r\n\t\tconst response: ContentResponse = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tpublic async sendBeaconRequestToService(\r\n\t\tapp: string,\r\n\t\tbeaconParameters: IBeaconParameters,\r\n\t\tplatform: string,\r\n\t\tversion: string,\r\n\t\tlocale: string,\r\n\t\tcountry: string,\r\n\t\tsessionId: string,\r\n\t\tauthTokenCallback: IFloodgateAuthTokenCallback\r\n\t\t): Promise<boolean> {\r\n\t\tthis.sessionId = sessionId;\r\n\t\tthis.authTokenCallback = authTokenCallback;\r\n\r\n\t\tconst tmsAppId = getDynamicSetting(SettingKey.tmsAppId, Constants.GUIDs.TMSAppID);\r\n\t\tconst authToken = await this.getAuthToken(tmsAppId);\r\n\t\tlet puid: string = undefined;\r\n\t\tif (!authToken) {\r\n\t\t\tpuid = this.authTokenCallback.getUserPuid && await this.authTokenCallback.getUserPuid();\r\n\t\t}\r\n\r\n\t\tconst requestStartTime = +new Date();\r\n\t\ttry {\r\n\t\t\tconst tmsQueryParams: IQueryParams = {\r\n\t\t\t\tapp,\r\n\t\t\t\tcountry,\r\n\t\t\t\tlocale,\r\n\t\t\t\tplatform,\r\n\t\t\t\tpuid,\r\n\t\t\t\tversion,\r\n\t\t\t};\r\n\r\n\t\t\tconst requestBody = JSON.stringify({\r\n\t\t\t\tactionName: beaconParameters.actionName,\r\n\t\t\t\tactionUrl: beaconParameters.actionUrl,\r\n\t\t\t});\r\n\r\n\t\t\tconst response: Response = await this.sendRequest(\r\n\t\t\t\ttmsQueryParams,\r\n\t\t\t\tauthToken,\r\n\t\t\t\tSettingKey.tmsActionUrl,\r\n\t\t\t\tthis.tmsBaseUrlPrefix + TmsgConstants.TMS_SETCAMPAIGNACTION_ENDPOINT + \"?\",\r\n\t\t\t\trequestBody,\r\n\t\t\t\t\"POST\");\r\n\r\n\t\t\tif (!response || response.status !== 200) {\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t\tthis.createTelemetryData(requestStartTime, response, `Beacon${beaconParameters.actionName}`));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage:\r\n\t\t\t\t\t\t\"Error fetching from TMS SetCampaignAction endpoint\" + (error && error.message ? \": \" + error.message : \"\"),\r\n\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, `Beacon${beaconParameters.actionName}`),\r\n\t\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCachedContent<T>(requestedContent: ContentType): T {\r\n\t\treturn this.tmsgCache.getItemContent(requestedContent);\r\n\t}\r\n\r\n\tpublic async getAugLoopUserFactsContent(requestedContent: ContentType): Promise<ContentResponse> {\r\n\t\tif (this.tmsgCache.isItemExpired(ContentType.userFacts)) {\r\n\t\t\tawait this.refreshUserFactsInCacheFromAugLoop();\r\n\t\t}\r\n\r\n\t\tconst response: ContentResponse = this.retrieveCacheItemAndCreateContentResponse(requestedContent);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tprivate async refreshUserFactsInCacheFromAugLoop(): Promise<Api.IUserFact[]> {\r\n\t\tif (!this.tmsgCache.isItemExpired(ContentType.userFacts)) {\r\n\t\t\tconst cachedUserFacts = this.tmsgCache.getItemContent(ContentType.userFacts) as Api.IUserFact[];\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.UserFacts.AugLoop.Requests.VALUE,\r\n\t\t\t\tLogging.LogLevel.Info,\r\n\t\t\t\t{\r\n\t\t\t\t\tCount: cachedUserFacts ? cachedUserFacts.length : -1,\r\n\t\t\t\t\tType: \"AugLoopUserFactsCached\",\r\n\t\t\t\t\tFlights: this.campaignFlights,\r\n\t\t\t\t});\r\n\r\n\t\t\treturn cachedUserFacts;\r\n\t\t}\r\n\r\n\t\tconst requestStartTime = +new Date();\r\n\t\tlet userFacts: Api.IUserFact[];\r\n\t\ttry {\r\n\t\t\tconst annotationName = getDynamicSetting(SettingKey.tulipsAugLoopAnnotationName, \"AugLoop_User_UserLifecycleFactsAnnotation\");\r\n\t\t\tconst augLoopSessionPromise = this.augLoopCallback.getRuntimeSession;\r\n\t\t\tconst response = await getAugLoopAnnotationData(annotationName, augLoopSessionPromise) as IUserFactsAugLoopResponse;\r\n\t\t\tif (response && response.userFacts) {\r\n\t\t\t\tuserFacts = this.addClientIngestionTimeAndNormalizeKeysInArray(response.userFacts);\r\n\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.userFacts,\r\n\t\t\t\t\t\tuserFacts,\r\n\t\t\t\t\t\tTmsgConstants.CACHE_EXPIRY_USERFACTS);\r\n\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.UserFacts.AugLoop.Requests.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Info,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tCount: userFacts ? userFacts.length : -1,\r\n\t\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\"),\r\n\t\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst augLoopError = response && (response as IAugLoopResponse).error;\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.UserFacts.AugLoop.Error.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tErrorMessage: \"Error getting augloop facts \" + (augLoopError && augLoopError.toString()),\r\n\t\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\"),\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.UserFacts.AugLoop.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: \"Error getting facts \" + (error && error.message),\r\n\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, \"AugLoopUserFacts\"),\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn userFacts;\r\n\t}\r\n\r\n\tprivate createTelemetryData(requestStartTimestamp: number, response: Response, type: string): Logging.ICustomProperties {\r\n\t\tconst { headers, status, statusText } = response || {} as Response;\r\n\t\tconst serverSessionId = headers && headers.get(\"X-UserSessionId\");\r\n\t\tconst serverCorrelationId = headers && headers.get(\"X-CorrelationId\");\r\n\t\treturn {\r\n\t\t\tType: type,\r\n\t\t\tTimeMilliseconds: +new Date() - requestStartTimestamp,\r\n\t\t\tSessionId: serverSessionId || this.sessionId,\r\n\t\t\tCorrelationId: serverCorrelationId || undefined,\r\n\t\t\tHttpStatusCode: status || undefined,\r\n\t\t\tHttpStatusText: statusText || undefined,\r\n\r\n\t\t\tFlights: this.campaignFlights,\r\n\t\t};\r\n\t}\r\n\r\n\tprivate sendRequest(\r\n\t\ttmsgQueryParams: IQueryParams,\r\n\t\tauthToken: string,\r\n\t\tkey: SettingKey,\r\n\t\tdefaultBaseUrl: string,\r\n\t\trequestBody?: string,\r\n\t\tverb?: string): Promise<Response> {\r\n\t\tthis.tmsgTransport = this.tmsgTransport || new TargetedMessagingTransport(this.sessionId);\r\n\t\tconst queryParamStr = buildQueryParameters(tmsgQueryParams);\r\n\t\tconst tmsgBaseUrl = getDynamicSetting(key, defaultBaseUrl);\r\n\t\tconst requestPromise = verb === \"POST\" ?\r\n\t\t\tthis.tmsgTransport.sendPostRequest(tmsgBaseUrl + queryParamStr, requestBody, authToken) :\r\n\t\t\tthis.tmsgTransport.sendGetRequest(tmsgBaseUrl + queryParamStr, authToken);\r\n\t\treturn requestPromise;\r\n\t}\r\n\r\n\tprivate retrieveCacheItemAndCreateContentResponse(contentType: ContentType): ContentResponse {\r\n\t\tconst responseItem: ContentResponse = this.createCachedContentResponse(contentType);\r\n\t\tif (this.tmsgCache.isItemExpired(contentType)) {\r\n\t\t\tif (contentType === ContentType.userFacts) {\r\n\t\t\t\tthis.refreshItemsInCacheFromTulipsService(contentType);\r\n\t\t\t} else {\r\n\t\t\t\tthis.refreshItemsInCacheFromTmsService([contentType]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn responseItem;\r\n\t}\r\n\r\n\tprivate createCachedContentResponse(requestedContent: ContentType): ContentResponse {\r\n\t\tconst contentResponse: ContentResponse = new ContentResponse();\r\n\t\tcontentResponse.content = this.tmsgCache.getItemContent(requestedContent);\r\n\t\tcontentResponse.contentType = requestedContent;\r\n\r\n\t\treturn contentResponse;\r\n\t}\r\n\r\n\tprivate async getAuthToken(appIdOrUri: string): Promise<string> {\r\n\t\tif (!this.authTokenCallback || !this.authTokenCallback.getAuthToken) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst startTime = +new Date();\r\n\t\tconst getDuration = () => +new Date() - startTime;\r\n\t\tconst createAuthTelemetryData = (errorMessage: string = undefined): Logging.ICustomProperties => {\r\n\t\t\treturn {\r\n\t\t\t\tErrorMessage: errorMessage,\r\n\t\t\t\tSessionId: this.sessionId,\r\n\t\t\t\tTimeMilliseconds: getDuration(),\r\n\t\t\t\tType: appIdOrUri,\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst retVal = await this.authTokenCallback.getAuthToken(appIdOrUri);\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.WebSurfaces.Common.Info.VALUE,\r\n\t\t\t\tLogging.LogLevel.Info,\r\n\t\t\t\tcreateAuthTelemetryData());\r\n\r\n\t\t\treturn retVal;\r\n\t\t} catch (error) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\tcreateAuthTelemetryData(\"Error getting token \" + (error && error.message ? \": \" + error.message : \"\")));\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate async refreshItemsInCacheFromTmsService(contentTypes: Array<ContentType>): Promise<void> {\r\n\t\tif (contentTypes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// check if touched items are actually due for refresh or are still valid\r\n\t\tconst bulkRefreshList: ContentType[] = new Array<ContentType>();\r\n\t\tfor (let contentType of contentTypes) {\r\n\t\t\tif (this.tmsgCache.isItemExpired(contentType)) {\r\n\t\t\t\tbulkRefreshList.push(contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (bulkRefreshList.length === 0) {\r\n\t\t\t// exit out if all items in cache are still valid to avoid unnecessary service roundtrips \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// always request for dynamic settings\r\n\t\tif (contentTypes.indexOf(ContentType.dynamicSettings) === -1) {\r\n\t\t\tcontentTypes.push(ContentType.dynamicSettings);\r\n\t\t}\r\n\r\n\t\t// get auth token or user id\r\n\t\tconst tmsAppId = getDynamicSetting(SettingKey.tmsAppId, Constants.GUIDs.TMSAppID);\r\n\t\tconst authToken = await this.getAuthToken(tmsAppId);\r\n\t\tlet userPuid: string = undefined;\r\n\t\tif (!authToken) {\r\n\t\t\tuserPuid = this.authTokenCallback.getUserPuid && await this.authTokenCallback.getUserPuid();\r\n\t\t}\r\n\r\n\t\tconst requestStartTime = +new Date();\r\n\r\n\t\t// make service call for expired or uncached items\r\n\t\ttry {\r\n\t\t\t// capture browser data to perform additional filters on IRIS\r\n\t\t\t// this is to avoid showing bad UI experience on unsupported browsers/dimensions\r\n\t\t\tconst documentElement = document && (document.documentElement || document.getElementsByTagName(\"body\")[0]);\r\n\t\t\tconst browserParams: IQueryParams = {\r\n\t\t\t\tpageWidth: window.innerWidth || documentElement.clientWidth,\r\n\t\t\t\tpageHeight: window.innerHeight || documentElement.clientHeight,\r\n\t\t\t\tscreenWidth: screen ? screen.width : undefined,\r\n\t\t\t\tscreenHeight: screen ? screen.height : undefined,\r\n\t\t\t\tcolorDepth: screen ? screen.colorDepth : undefined,\r\n\t\t\t};\r\n\r\n\t\t\t// allow testing with query param overrides with key obf-DebugOverrides\r\n\t\t\t// eg: {\"addTmsQueryParams\":{\"key1\":\"key1value\"},\"replaceTmsQueryParams\":{\"key2\":\"key2value\"}, \"tmsResponse\": {}}\r\n\t\t\tconst debugOverrides = FloodgateStorageProvider.safeReadObject<IDebugOverrides>(FileType.DebugOverrides, {});\r\n\t\t\tconst tmsQueryParams: IQueryParams = debugOverrides.replaceTmsQueryParams || {\r\n\t\t\t\tcountry: this.country,\r\n\t\t\t\tlocale: this.locale,\r\n\t\t\t\tapp: this.app,\r\n\t\t\t\tplatform: this.platform,\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tcampaignParams: buildQueryParameters(browserParams) + \"&more=true&\" + (this.campaignParameters || \"\"),\r\n\t\t\t\tcontentType: contentTypes.join(\";\"),\r\n\t\t\t\tpuid: userPuid,\r\n\t\t\t\tOFC_FLIGHTS: this.campaignFlights,\r\n\t\t\t\t...(debugOverrides.addTmsQueryParams || {}),\r\n\t\t\t\tageGroup: this.ageGroup,\r\n\t\t\t\tauthenticationType: this.authenticationType,\r\n\t\t\t};\r\n\r\n\t\t\tconst response: Response = await this.sendRequest(\r\n\t\t\t\ttmsQueryParams,\r\n\t\t\t\tauthToken,\r\n\t\t\t\tSettingKey.tmsServiceUrl,\r\n\t\t\t\tthis.tmsBaseUrlPrefix + TmsgConstants.TMS_CAMPAIGNMETADATAAGGREGATOR_ENDPOINT + \"?\");\r\n\t\t\tif (response.status === 200) {\r\n\t\t\t\tconst tmsServiceResponse: ITmsServiceResponse = await response.json();\r\n\r\n\t\t\t\tif (contentTypes.indexOf(ContentType.messageMetadata) !== -1\r\n\t\t\t\t\t&& tmsServiceResponse.MessageMetadata !== undefined) {\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.messageMetadata,\r\n\t\t\t\t\t\ttmsServiceResponse.MessageMetadata,\r\n\t\t\t\t\t\tgetDynamicSetting(SettingKey.tmsMessageMetadataExpiry, TmsgConstants.CACHE_EXPIRY_MESSAGEMETADATA));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (contentTypes.indexOf(ContentType.userGovernanceRules) !== -1\r\n\t\t\t\t\t&& tmsServiceResponse.UserGovernanceRules !== undefined) {\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.userGovernanceRules,\r\n\t\t\t\t\t\ttmsServiceResponse.UserGovernanceRules,\r\n\t\t\t\t\t\tgetDynamicSetting(SettingKey.tmsUserGovernanceRulesExpiry, TmsgConstants.CACHE_EXPIRY_USERGOVERNANCERULES));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (contentTypes.indexOf(ContentType.campaignContent) !== -1\r\n\t\t\t\t\t&& tmsServiceResponse.CampaignContent !== undefined) {\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.campaignContent,\r\n\t\t\t\t\t\ttmsServiceResponse.CampaignContent,\r\n\t\t\t\t\t\tgetDynamicSetting(SettingKey.tmsCampaignContentExpiry, TmsgConstants.CACHE_EXPIRY_CAMPAIGNCONTENT));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// There is no explicit request for the next set of ContentTypes in the code\r\n\t\t\t\t// If the server responds with these types save and use them later\r\n\t\t\t\tif (tmsServiceResponse.DynamicSettings !== undefined) {\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.dynamicSettings,\r\n\t\t\t\t\t\ttmsServiceResponse.DynamicSettings,\r\n\t\t\t\t\t\tgetDynamicSetting(SettingKey.tmsDynamicSettingsExpiry, TmsgConstants.CACHE_EXPIRY_DYNAMICSETTINGS));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tmsServiceResponse.LogLevelSettings !== undefined) {\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\tContentType.logLevelSettings,\r\n\t\t\t\t\t\ttmsServiceResponse.LogLevelSettings,\r\n\t\t\t\t\t\tgetDynamicSetting(SettingKey.tmsLogLevelSettingsExpiry, TmsgConstants.CACHE_EXPIRY_LOGLEVELSETTINGS));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.WebSurfaces.Messaging.Requests.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Info,\r\n\t\t\t\t\tthis.createTelemetryData(requestStartTime, response, contentTypes.join(\";\")));\r\n\t\t\t} else {\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t\tthis.createTelemetryData(requestStartTime, response, contentTypes.join(\";\")));\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: \"Error fetching from TMS\" + (error && error.message ? \": \" + error.message : \"\"),\r\n\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, contentTypes.join(\";\")),\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async refreshItemsInCacheFromTulipsService(contentType: ContentType): Promise<void> {\r\n\t\t// check if touched item is actually due for refresh or is still valid\r\n\t\tif (!this.tmsgCache.isItemExpired(contentType)) {\r\n\t\t\t// exit out if the cache is still valid to avoid unnecessary service roundtrips\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst tulipsAppId = getDynamicSetting(SettingKey.tulipsAppId, Constants.GUIDs.TULIPSAppID);\r\n\t\tconst authToken = await this.getAuthToken(tulipsAppId);\r\n\t\tif (!authToken) {\r\n\t\t\t// if authToken is null then exit out since service call cannot be made without authToken\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst requestStartTime = +new Date();\r\n\r\n\t\t// make service call for expired or uncached item\r\n\t\ttry {\r\n\t\t\tconst response: Response = await this.sendRequest(\r\n\t\t\t\t{},\r\n\t\t\t\tauthToken,\r\n\t\t\t\tSettingKey.tulipsServiceUrl,\r\n\t\t\t\tTmsgConstants.TULIPS_SERVICEURL);\r\n\t\t\tif (response.status === 200 || response.status === 204) {\r\n\t\t\t\tconst tulipsServiceResponse = await response.json();\r\n\r\n\t\t\t\tif (contentType.indexOf(ContentType.userFacts) !== -1\r\n\t\t\t\t\t&& tulipsServiceResponse !== undefined) {\r\n\t\t\t\t\tconst normalizedUserFacts = this.addClientIngestionTimeAndNormalizeKeys(tulipsServiceResponse);\r\n\t\t\t\t\tthis.tmsgCache.setContentItem(\r\n\t\t\t\t\t\t\tContentType.userFacts,\r\n\t\t\t\t\t\t\tnormalizedUserFacts,\r\n\t\t\t\t\t\t\tTmsgConstants.CACHE_EXPIRY_USERFACTS);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.UserFacts.Messaging.Requests.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Info,\r\n\t\t\t\t\tthis.createTelemetryData(requestStartTime, response, contentType));\r\n\t\t\t} else {\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.UserFacts.Common.Error.VALUE,\r\n\t\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t\tthis.createTelemetryData(requestStartTime, response, contentType));\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.UserFacts.Common.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: \"Error fetching from TULIPS\" + (error && error.message ? \": \" + error.message : \"\"),\r\n\t\t\t\t\t...this.createTelemetryData(requestStartTime, null, contentType),\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate addClientIngestionTimeAndNormalizeKeys(tulipsServiceResponse: Record<string, string>[]): Api.IUserFact[] {\r\n\t\tconst currentDateTime = new Date(Date.now()).toISOString();\r\n\r\n\t\treturn tulipsServiceResponse.map(responseFact => {\r\n\t\t\tconst fact = this.normalizeKeys(responseFact);\r\n\t\t\tfact.clientIngestionDateTime = currentDateTime;\r\n\t\t\treturn fact;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate addClientIngestionTimeAndNormalizeKeysInArray(userFacts: Api.IUserFact[]): Api.IUserFact[] {\r\n\t\tconst currentDateTime = new Date(Date.now()).toISOString();\r\n\r\n\t\treturn userFacts.map(userFact => {\r\n\t\t\tconst fact = this.normalizeKeys(userFact as unknown as Record<string, string>);\r\n\t\t\tfact.clientIngestionDateTime = currentDateTime;\r\n\t\t\treturn fact;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * This method normalizes the keys of the user fact object retrieved from the TULIPS service.\r\n\t * Specifically it converts the first letter of each key in the object to lower case.\r\n\t * For example the key \"UserFactType\" returned from the service will be converted to \"userFactType\".\r\n\t * @param userFact the user fact object\r\n\t */\r\n\tprivate normalizeKeys(userFact: Record<string, string>) {\r\n\t\tconst normalizedUserFact = {} as Api.IUserFact;\r\n\t\tfor (const key of Object.keys(userFact)) {\r\n\t\t\tconst normalizedKey = (key.charAt(0).toLowerCase() + key.substring(1)) as keyof Api.IUserFact;\r\n\t\t\tnormalizedUserFact[normalizedKey] = userFact[key];\r\n\t\t}\r\n\r\n\t\treturn normalizedUserFact;\r\n\t}\r\n}\r\n","/**\r\n * Module that provides campaign definitions,\r\n * governance rules & message metadata from\r\n * targeted messaging service.\r\n */\r\n\r\nimport { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { CampaignDefinitions } from \"@ms-ofb/officefloodgatecore/dist/src/Governance/CampaignDefinitions\";\r\nimport { MessageSpec } from \"@ms-ofb/officefloodgatecore/dist/src/Governance/MessageMetadata\";\r\nimport { UserGovernanceRules } from \"@ms-ofb/officefloodgatecore/dist/src/Governance/UserGovernanceRules\";\r\n\r\nimport * as Configuration from \"../Configuration/Configuration\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\nimport { TULIPS_LOAD_TIMEOUT } from \"./TargetedMessagingConstants\";\r\nimport { ContentType } from \"./TargetedMessagingContentType\";\r\nimport { TargetedMessagingClient, ContentResponse, getDebugCampaignDefinitions, getDebugUserFacts } from \"./TargetedMessagingClient\";\r\n\r\nimport { createTimeoutPromise } from \"../Utils\";\r\nimport { IBeaconParameters } from \"../FloodgateCore/CoachingUXLauncherFactory\";\r\n\r\nexport class AssetsProvider implements Api.IAssetsProvider {\r\n\tprivate configuration: Configuration.Configuration;\r\n\tprivate tmsgClient: TargetedMessagingClient;\r\n\r\n\tpublic constructor() {\r\n\t\tthis.configuration = Configuration.get();\r\n\r\n\t\t// Enable TargetedMessaging client only if authCallback is provided\r\n\t\t// This is for cases where existing Floodgate hosts are not yet on-boarded into web surfaces flow\r\n\t\tconst floodgateInitOptions = this.configuration && this.configuration.getFloodgateInitOptions();\r\n\t\tconst commonInitOptions = this.configuration && this.configuration.getCommonInitOptions();\r\n\t\tconst authTokenCallback = floodgateInitOptions && floodgateInitOptions.authTokenCallback;\r\n\t\tif ((authTokenCallback && (authTokenCallback.getAuthToken || authTokenCallback.getUserPuid)) ||\r\n\t\t\tthis.isAugLoopEnabled()) {\r\n\t\t\tconst initOptions = this.configuration.getCommonInitOptions();\r\n\t\t\tthis.tmsgClient = new TargetedMessagingClient(\r\n\t\t\t\tinitOptions.appId.toString(),\r\n\t\t\t\t\"Web\" /*platform*/,\r\n\t\t\t\tinitOptions.build,\r\n\t\t\t\tinitOptions.originalLocale,\r\n\t\t\t\tthis.extractCountryFromLocale(initOptions.originalLocale),\r\n\t\t\t\tthis.configuration.getSdkSessionId(),\r\n\t\t\t\tfloodgateInitOptions.authTokenCallback,\r\n\t\t\t\tfloodgateInitOptions.augLoopCallback,\r\n\t\t\t\tfloodgateInitOptions.campaignFlights,\r\n\t\t\t\tfloodgateInitOptions.campaignQueryParameters,\r\n\t\t\t\tcommonInitOptions.ageGroup,\r\n\t\t\t\tcommonInitOptions.authenticationType,\r\n\t\t\t\tcommonInitOptions.telemetryGroup?.audienceGroup || commonInitOptions.telemetryGroup?.audience,\r\n\t\t\t\tfloodgateInitOptions.messagingServiceSettings\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get campaign definitions from TMS\r\n\t */\r\n\tpublic getCampaignDefinitions(): Promise<CampaignDefinitions> {\r\n\t\tconst debugResponse = getDebugCampaignDefinitions();\r\n\t\tif (debugResponse && debugResponse.content) {\r\n\t\t\treturn Promise.resolve(debugResponse.content);\r\n\t\t}\r\n\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\treturn this.tmsgClient.getContent(ContentType.campaignContent)\r\n\t\t\t.then(({ content }: ContentResponse) => content);\r\n\t}\r\n\r\n\tpublic getCachedCampaignDefinitions(): CampaignDefinitions {\r\n\t\treturn this.tmsgClient?.getCachedContent(ContentType.campaignContent);\r\n\t}\r\n\r\n\tpublic getUserGovernanceRules(): Promise<UserGovernanceRules> {\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\treturn this.tmsgClient.getContent(ContentType.userGovernanceRules)\r\n\t\t\t.then(({ content }: ContentResponse) => content);\r\n\t}\r\n\r\n\tpublic getMessageMetadata(): Promise<MessageSpec> {\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\treturn this.tmsgClient.getContent(ContentType.messageMetadata)\r\n\t\t\t.then(({ content }: ContentResponse) => content);\r\n\t}\r\n\r\n\t/**\r\n\t * Get TULIPS user facts from AugLoop or GWS endpoint\r\n\t */\r\n\tpublic getUserFacts(): Promise<Api.IUserFact[]> {\r\n\t\tconst debugResponse = getDebugUserFacts();\r\n\t\tif (debugResponse && debugResponse.content) {\r\n\t\t\treturn Promise.resolve(debugResponse.content);\r\n\t\t}\r\n\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\t// Try to get facts from AL first\r\n\t\tif (this.isAugLoopEnabled()) {\r\n\t\t\tconst timeoutMilliseconds = getDynamicSetting(SettingKey.tulipsLoadTimeout, TULIPS_LOAD_TIMEOUT);\r\n\t\t\tconst timeoutPromise = createTimeoutPromise(timeoutMilliseconds, this.getAugLoopUserFacts());\r\n\t\t\treturn timeoutPromise\r\n\t\t\t\t.then(userFacts => userFacts)\r\n\t\t\t\t.catch(() => this.getSubstrateUserFacts());\r\n\t\t}\r\n\r\n\t\treturn this.getSubstrateUserFacts();\r\n\t}\r\n\r\n\tpublic getCachedUserFacts(): Api.IUserFact[] {\r\n\t\treturn this.tmsgClient?.getCachedContent(ContentType.userFacts);\r\n\t}\r\n\r\n\tpublic setCampaignAction(beaconParameters: IBeaconParameters): Promise<boolean> {\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst initOptions = this.configuration.getCommonInitOptions();\r\n\t\tconst floodgateInitOptions = this.configuration.getFloodgateInitOptions();\r\n\t\treturn this.tmsgClient.sendBeaconRequestToService(\r\n\t\t\tinitOptions.appId.toString(),\r\n\t\t\tbeaconParameters,\r\n\t\t\t\"Web\" /*platform*/,\r\n\t\t\tinitOptions.build,\r\n\t\t\tinitOptions.originalLocale,\r\n\t\t\tthis.extractCountryFromLocale(initOptions.originalLocale),\r\n\t\t\tthis.configuration.getSdkSessionId(),\r\n\t\t\tfloodgateInitOptions.authTokenCallback);\r\n\t}\r\n\r\n\t// Floodgate doesn't have country, so we have to use locale as a proxy and extract the country code\r\n\tprivate extractCountryFromLocale(locale?: string): string {\r\n\t\tif (!locale) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst splitLocale = locale.split(\"-\");\r\n\t\tif (splitLocale.length === 2) {\r\n\t\t\treturn splitLocale[1];\r\n\t\t} else {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getSubstrateUserFacts(): Promise<Api.IUserFact[]> {\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\treturn this.tmsgClient.getUserFactsContent(ContentType.userFacts)\r\n\t\t\t.then(({ content }: ContentResponse) => content);\r\n\t}\r\n\r\n\tprivate getAugLoopUserFacts(): Promise<Api.IUserFact[]> {\r\n\t\tif (!this.tmsgClient) {\r\n\t\t\treturn Promise.resolve(null);\r\n\t\t}\r\n\r\n\t\treturn this.tmsgClient.getAugLoopUserFactsContent(ContentType.userFacts)\r\n\t\t\t.then(({ content }: ContentResponse) => content);\r\n\t}\r\n\r\n\tprivate isAugLoopEnabled(): boolean {\r\n\t\treturn this.configuration?.getFloodgateInitOptions()?.augLoopCallback?.isEnabled;\r\n\t}\r\n}\r\n\r\nlet assetsProvider: AssetsProvider;\r\n\r\nexport function get() {\r\n\tif (!assetsProvider) {\r\n\t\tassetsProvider = new AssetsProvider();\r\n\t}\r\n\r\n\treturn assetsProvider;\r\n}\r\n","/**\r\n * CoachingUX launcher factory for Web SDK\r\n */\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\n\r\nimport * as Configuration from \"./../Configuration/Configuration\";\r\nimport { IInitOptionsCommon } from \"./../Configuration/Configuration\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\n\r\nimport * as Constants from \"../Constants\";\r\nimport * as DomUtils from \"../Window/DomUtils\";\r\nimport * as Window from \"../Window/Window\";\r\nimport * as Logging from \"../Logging/Logging\";\r\nimport * as AssetsProvider from \"../TargetedMessaging/AssetsProvider\";\r\nimport { isNOU } from \"../Utils\";\r\n\r\nimport { ISurveyParams } from \"@ms-ofb/officefloodgatecore/dist/src/Api/IOnSurveyActivatedCallback\";\r\n\r\nexport interface IBeaconParameters {\r\n\tactionName: string;\r\n\tactionUrl: string;\r\n}\r\n\r\nexport interface IOfficeWebSurfaces {\r\n\tInitialize(intOptions: IInitOptionsCommon): void;\r\n\tRenderSurface(\r\n\t\tsurfaceParams: any,\r\n\t\ttargetElementId?: string,\r\n\t\tsurfaceId?: string): void;\r\n\tRemoveSurface(): void;\r\n\tGetSurfaceContainerId(): string;\r\n}\r\n\r\ndeclare module \"../Window/Window\" {\r\n\tinterface IWindow {\r\n\t\tOfficeWebSurfaces: IOfficeWebSurfaces;\r\n\t}\r\n}\r\n\r\nexport function getWebSurfacesLink() {\r\n\tconst internalEnvs = [\"dogfood\", \"edog\", \"int\", \"microsoft\"];\r\n\tconst commonInitOptions = Configuration.get().getCommonInitOptions();\r\n\tconst audience = commonInitOptions.telemetryGroup?.audienceGroup || commonInitOptions.telemetryGroup?.audience;\r\n\tconst isInternalEnv = audience && internalEnvs.indexOf(audience.toLowerCase()) !== -1;\r\n\tconst webSurfacesConfigLink = isInternalEnv ?\r\n\t\tcommonInitOptions.webSurfacesSettings?.webSurfacesIntUrl : commonInitOptions.webSurfacesSettings?.webSurfacesProdUrl;\r\n\tconst webSurfacesDefaultLink = isInternalEnv ?\r\n\t\tConstants.DynamicScriptUrls.WebSurfacesIntLink : Constants.DynamicScriptUrls.WebSurfacesProdLink;\r\n\tconst settingKey = isInternalEnv ? SettingKey.webSurfacesIntLink : SettingKey.webSurfacesProdLink;\r\n\tconst webSurfacesLink = webSurfacesConfigLink || getDynamicSetting(settingKey, webSurfacesDefaultLink);\r\n\treturn webSurfacesLink;\r\n}\r\n\r\n// web surfaces script url load promise\r\nlet WebSurfacesScriptPromise: Promise<void>;\r\nfunction createwebSurfacesScriptPromise() {\r\n\tif (!WebSurfacesScriptPromise) {\r\n\t\tWebSurfacesScriptPromise = DomUtils.loadScript(getWebSurfacesLink(), null);\r\n\t}\r\n}\r\n\r\nexport default class CoachingUXLauncherFactory implements Api.ISurveyLauncherFactory {\r\n\tpublic static readonly LAUNCHER_TYPE: string = \"coachingux\";\r\n\r\n\tpublic makeSurveyLauncher(survey: Api.ISurvey): Api.ISurveyLauncher {\r\n\t\tif (this.AcceptsSurvey(survey)) {\r\n\t\t\treturn new CoachingUXLauncher(survey);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic AcceptsSurvey(survey: Api.ISurvey): boolean {\r\n\t\tif (!isNOU(survey) && survey.getType() === Api.ISurvey.Type.GenericMessagingSurface\r\n\t\t\t&& survey.getLauncherType().toLocaleLowerCase() === CoachingUXLauncherFactory.LAUNCHER_TYPE) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport class CoachingUXLauncher implements Api.ISurveyLauncher {\r\n\tprivate survey: Api.ISurvey;\r\n\r\n\tconstructor(survey: Api.ISurvey) {\r\n\t\tthis.survey = survey;\r\n\r\n\t\t// pre-load web surface package if there are any critical campaigns\r\n\t\tif (!WebSurfacesScriptPromise &&\r\n\t\t\tsurvey && survey.getSurveyInfo &&\r\n\t\t\tsurvey.getSurveyInfo()?.getBusinessLevel() === Api.ISurveyInfo.BusinessLevel.Critical) {\r\n\t\t\tsetTimeout(createwebSurfacesScriptPromise, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic launch(surveyParams?: ISurveyParams): void {\r\n\t\tconst surveyInfo = this.survey && this.survey.getSurveyInfo();\r\n\t\tconst surveyMetadata = surveyInfo && surveyInfo.getMetadata();\r\n\t\tconst contentMetadata = surveyMetadata && surveyMetadata.getContentMetadata();\r\n\t\tif (!contentMetadata) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst startTime = new Date();\r\n\t\tconst getWebSurfacesInstance = () => {\r\n\t\t\tconst windowInstance = Window.getGlobal();\r\n\t\t\treturn windowInstance && windowInstance.OfficeWebSurfaces;\r\n\t\t};\r\n\r\n\t\tconst renderWebSurface = (uxInitOptions?: any) => {\r\n\t\t\tconst officeWebSurfaces = getWebSurfacesInstance();\r\n\t\t\tif (uxInitOptions) {\r\n\t\t\t\tofficeWebSurfaces.Initialize(uxInitOptions);\r\n\t\t\t}\r\n\r\n\t\t\tofficeWebSurfaces.RemoveSurface();\r\n\r\n\t\t\tconst surfaceParams = {\r\n\t\t\t\t...contentMetadata,\r\n\t\t\t\tsurfaceContext: {\r\n\t\t\t\t\tsurveyForm: this.survey,\r\n\t\t\t\t\tsurveyParams,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\tofficeWebSurfaces.RenderSurface(\r\n\t\t\t\tsurfaceParams,\r\n\t\t\t\tnull /* targetElementId */,\r\n\t\t\t\tsurveyInfo.getBackEndId());\r\n\t\t};\r\n\r\n\t\tconst logErrorEvent = (error?: Error) => {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.WebSurfaces.Common.Error.VALUE,\r\n\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: \"Error loading websurfaces\" + (error && error.message ? \": \" + error.message : \"\"),\r\n\t\t\t\t\tTimeMilliseconds: Date.now() - (+startTime),\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tif (getWebSurfacesInstance()) {\r\n\t\t\t\trenderWebSurface();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tcreatewebSurfacesScriptPromise();\r\n\r\n\t\t\t// if UX package isn't already loaded, download package and render surface\r\n\t\t\tWebSurfacesScriptPromise\r\n\t\t\t.then(() => {\r\n\t\t\t\tconst initOptions = Configuration.get().getCommonInitOptions();\r\n\t\t\t\tconst floodgateInitOptions = Configuration.get().getFloodgateInitOptions();\r\n\t\t\t\tconst surveyActivatedCallback = floodgateInitOptions && floodgateInitOptions.onSurveyActivatedCallback;\r\n\r\n\t\t\t\tconst beaconCallback = (beaconParameters: IBeaconParameters): Promise<boolean> => {\r\n\t\t\t\t\tif (beaconParameters) {\r\n\t\t\t\t\t\treturn AssetsProvider.get().setCampaignAction(beaconParameters);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst uxOptions = {\r\n\t\t\t\t\t...initOptions,\r\n\t\t\t\t\t...floodgateInitOptions,\r\n\t\t\t\t\tbeaconCallback,\r\n\t\t\t\t\tsurfaceInitTime: startTime,\r\n\t\t\t\t\tsurfaceId: surveyInfo.getBackEndId(),\r\n\t\t\t\t\tlogSessionId: Configuration.get().getSdkSessionId(),\r\n\t\t\t\t\tlogSettings: getDynamicSetting(SettingKey.logLevelSettings, undefined),\r\n\t\t\t\t\trenderer: surveyActivatedCallback,\r\n\t\t\t\t\trenderCallback: surveyActivatedCallback && surveyActivatedCallback.onTeachingCampaignRender,\r\n\t\t\t\t};\r\n\r\n\t\t\t\trenderWebSurface(uxOptions);\r\n\t\t\t}).catch(error => {\r\n\t\t\t\tlogErrorEvent(error);\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tlogErrorEvent(error);\r\n\t\t}\r\n\t}\r\n}\r\n","/*\r\n * DomUtils.ts\r\n *\r\n * Module for page document utility functions\r\n */\r\n\r\n/**\r\n * Load the style sheet\r\n * @param url The url of the stylesheet\r\n */\r\nexport function loadStylesheet(url: string): void {\r\n\tconst link: HTMLLinkElement = document.createElement(\"link\");\r\n\tlink.rel = \"stylesheet\";\r\n\tlink.type = \"text/css\";\r\n\tlink.href = url;\r\n\r\n\tconst entry: HTMLScriptElement = document.getElementsByTagName(\"script\")[0];\r\n\tentry.parentNode.insertBefore(link, entry);\r\n}\r\n\r\n/**\r\n * Load the script and callback after it is loaded\r\n * @param url The url of the script\r\n * @param pageOrigin Optional - Origin of the page\r\n */\r\nexport function loadScript(url: string, pageOrigin: string = (window as any).origin): Promise<void> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst script: any = document.createElement(\"script\");\r\n\t\tscript.async = true;\r\n\r\n\t\tif (script.readyState) { // IE\r\n\t\t\tscript.onreadystatechange = function() {\r\n\t\t\t\tif (script.readyState === \"loaded\" || script.readyState === \"complete\") {\r\n\t\t\t\t\tscript.onreadystatechange = null;\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} else {  // Others\r\n\t\t\tscript.onload = function() {\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tscript.onerror = function() {\r\n\t\t\treject();\r\n\t\t};\r\n\r\n\t\tscript.src = url;\r\n\r\n\t\t// don't add if origin is not available or when containing \"null\". This is to mitigate possible\r\n\t\t// unexpected behavior with Chrome when a page hosting this SDK is being tested as a local file.\r\n\t\t// The behavior depends on Chrome.exe's --allow-file-access-from-files setting.\r\n\t\tif (pageOrigin && pageOrigin !== \"null\") {\r\n\t\t\tscript.crossOrigin = \"anonymous\";\r\n\t\t}\r\n\r\n\t\tconst entry: HTMLScriptElement = document.getElementsByTagName(\"script\")[0];\r\n\t\tentry.parentNode.insertBefore(script, entry);\r\n\t});\r\n}\r\n","/**\r\n * An implementation of IUISurvey based on floodgate.core INpsSurvey\r\n */\r\n\r\nimport IUISurvey from \"./IUISurvey\";\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { GovernedChannelType } from \"@ms-ofb/officefloodgatecore/dist/src/GovernedChannel\";\r\nimport { customerVoiceLauncherType } from \"../../Constants\";\r\n\r\nexport default class UISurvey implements IUISurvey {\r\n\tpublic showPrompt: boolean = true;\r\n\r\n\tpublic showEmailRequest: boolean = false;\r\n\r\n\tprivate isIntercept: boolean;\r\n\r\n\tprivate survey: Api.ISurvey;\r\n\tprivate prompt: Api.IPromptComponent;\r\n\tprivate comment: Api.ICommentComponent;\r\n\tprivate rating: Api.IRatingComponent;\r\n\tprivate intercept: Api.IInterceptComponent;\r\n\tprivate cvSurvey: Api.ICVSurveyComponent;\r\n\r\n\tconstructor(survey: Api.ISurvey) {\r\n\t\tif (!survey) {\r\n\t\t\tthrow Error(\"survey must not be null\");\r\n\t\t} else {\r\n\t\t\tthis.survey = survey;\r\n\t\t}\r\n\r\n\t\tif (survey.getType() === Api.ISurvey.Type.Intercept) {\r\n\t\t\tthis.isIntercept = true;\r\n\r\n\t\t\tlet interceptComponent: Api.ISurveyComponent = survey.getComponent(Api.ISurveyComponent.Type.Intercept);\r\n\r\n\t\t\tif (interceptComponent) {\r\n\t\t\t\tthis.intercept = (interceptComponent as Api.IInterceptComponent);\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"intercept component must not be null\");\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthis.isIntercept = false;\r\n\r\n\t\t\tlet promptComponent: Api.ISurveyComponent = survey.getComponent(Api.ISurveyComponent.Type.Prompt);\r\n\t\t\tlet commentComponent: Api.ISurveyComponent = survey.getComponent(Api.ISurveyComponent.Type.Comment);\r\n\t\t\tlet ratingComponent: Api.ISurveyComponent = survey.getComponent(Api.ISurveyComponent.Type.Rating);\r\n\t\t\tlet cvSurveyComponent: Api.ISurveyComponent = survey.getComponent(Api.ISurveyComponent.Type.CVSurvey);\r\n\r\n\t\t\tif (promptComponent) {\r\n\t\t\t\tthis.prompt = (promptComponent as Api.IPromptComponent);\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"prompt component must not be null\");\r\n\t\t\t}\r\n\r\n\t\t\t// Check for additonalDataRequested options\r\n\t\t\tthis.showEmailRequest = survey.getSurveyInfo().isAdditionalDataRequested(\r\n\t\t\t\tApi.ISurveyInfo.AdditionalDataType.EmailAddress);\r\n\r\n\t\t\tif (commentComponent) {\r\n\t\t\t\tthis.comment = (commentComponent as Api.ICommentComponent);\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"comment component must not be null\");\r\n\t\t\t}\r\n\r\n\t\t\tif (ratingComponent) {\r\n\t\t\t\tthis.rating = (ratingComponent as Api.IRatingComponent);\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"rating component must not be null\");\r\n\t\t\t}\r\n\r\n\t\t\tif (cvSurveyComponent) {\r\n\t\t\t\tthis.cvSurvey = (cvSurveyComponent as Api.ICVSurveyComponent);\r\n\t\t\t\tif (this.getLauncherType() === customerVoiceLauncherType && !this.getCVSurveyFormId()) {\r\n\t\t\t\t\tthrow Error(\"CvSurveyId should not be null\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic getLauncherType(): string {\r\n\t\treturn this.isIntercept ? undefined : this.survey.getLauncherType();\r\n\t}\r\n\r\n\tpublic getCVSurveyFormId(): string {\r\n\t\treturn this.isIntercept ? undefined : this.cvSurvey.getFormId();\r\n\t}\r\n\r\n\tpublic getPreGeneratedClientFeedbackId(): string {\r\n\t\treturn this.survey.getPreGeneratedClientFeedbackId();\r\n\t}\r\n\r\n\tpublic getPromptQuestion(): string {\r\n\t\treturn this.isIntercept ? undefined : this.prompt.getQuestion();\r\n\t}\r\n\r\n\tpublic getTitle(): string {\r\n\t\treturn this.isIntercept ? undefined : this.prompt.getTitle();\r\n\t}\r\n\r\n\tpublic getPromptYesButtonText(): string {\r\n\t\treturn this.isIntercept ? undefined : this.prompt.getYesButtonText();\r\n\t}\r\n\r\n\tpublic getPromptNoButtonText(): string {\r\n\t\treturn this.isIntercept ? undefined : this.prompt.getNoButtonText();\r\n\t}\r\n\r\n\tpublic getRatingValuesAscending(): string[] {\r\n\t\treturn this.isIntercept ? undefined : this.rating.getRatingValuesAscending();\r\n\t}\r\n\r\n\tpublic getRatingQuestion(): string {\r\n\t\treturn this.isIntercept ? undefined : this.rating.getQuestion();\r\n\t}\r\n\r\n\tpublic getCommentQuestion(): string {\r\n\t\treturn this.isIntercept ? undefined : this.comment.getQuestion();\r\n\t}\r\n\r\n\tpublic getInterceptTitle(): string {\r\n\t\treturn this.isIntercept ? this.intercept.getTitle() : undefined;\r\n\t}\r\n\r\n\tpublic getInterceptQuestion(): string {\r\n\t\treturn this.isIntercept ? this.intercept.getQuestion() : undefined;\r\n\t}\r\n\r\n\tpublic getInterceptUrl(): string {\r\n\t\treturn this.isIntercept ? this.intercept.getUrl() : undefined;\r\n\t}\r\n\r\n\tpublic setValues(selectedIndex: number, comment: string): void {\r\n\t\tif (!this.isIntercept) {\r\n\t\t\tthis.rating.setSelectedRatingIndex(selectedIndex);\r\n\t\t\tthis.comment.setSubmittedText(comment);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getJsonElements(): any {\r\n\t\treturn this.survey.getJsonElements();\r\n\t}\r\n\r\n\tpublic getSurveyType(): Api.ISurvey.Type {\r\n\t\treturn this.survey.getType();\r\n\t}\r\n\r\n\tpublic getCampaignId(): string {\r\n\t\treturn this.survey.getSurveyInfo().getBackEndId();\r\n\t}\r\n\r\n\tpublic getId(): string {\r\n\t\treturn this.survey.getSurveyInfo().getId();\r\n\t}\r\n\r\n\tpublic getGoverenedChannelType(): GovernedChannelType {\r\n\t\treturn this.survey.getSurveyInfo().getGovernedChannelType();\r\n\t}\r\n}\r\n","/**\r\n * Rude survey launcher factory for Web SDK\r\n */\r\n\r\nimport UISurvey from \"./../FloodgateCore/UISurvey/UISurvey\";\r\nimport * as Window from \"./../Window/Window\";\r\nimport { Api, Utils } from \"@ms-ofb/officefloodgatecore\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport default class RudeSurveyLauncherFactory implements Api.ISurveyLauncherFactory {\r\n\tpublic static readonly LAUNCHER_TYPE: string = Api.ISurvey.LAUNCHER_TYPE_DEFAULT;\r\n\r\n\tpublic makeSurveyLauncher(survey: Api.ISurvey): Api.ISurveyLauncher {\r\n\t\tif (this.AcceptsSurvey(survey)) {\r\n\t\t\treturn new RudeSurveyLauncher(survey);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic AcceptsSurvey(survey: Api.ISurvey): boolean {\r\n\t\t// This factory should accept any type that is not of type GenericMessagingSurface\r\n\t\t// This will ensure that a rude survey launcher is returned for any survey type old or new\r\n\t\t// as a launcher is needed to invoke survey activated callback\r\n\t\tif (!isNOU(survey)  && survey.getType() !== Api.ISurvey.Type.GenericMessagingSurface) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport class RudeSurveyLauncher implements Api.ISurveyLauncher {\r\n\tprivate survey: Api.ISurvey;\r\n\r\n\tconstructor(survey: Api.ISurvey) {\r\n\t\tthis.survey = survey;\r\n\t}\r\n\r\n\tpublic launch(): void {\r\n\t\tWindow.get().OfficeBrowserFeedback.floodgate.showSurvey(new UISurvey(this.survey));\r\n\t}\r\n}\r\n","/**\r\n * Survey launcher factory for Web SDK\r\n */\r\n\r\nimport { Api, Utils } from \"@ms-ofb/officefloodgatecore\";\r\nimport CoachingUXLauncherFactory from \"./CoachingUXLauncherFactory\";\r\nimport RudeSurveyLauncherFactory from \"./RudeSurveyLauncherFactory\";\r\nimport * as Configuration from \"../Configuration/Configuration\";\r\n\r\nconst { isNOU } = Utils;\r\n\r\nexport default class AdaptiveSurveyLauncherFactory implements Api.ISurveyLauncherFactory {\r\n\tpublic static make(): Api.ISurveyLauncherFactory {\r\n\t\treturn new AdaptiveSurveyLauncherFactory(\r\n\t\t\tnew RudeSurveyLauncherFactory(),\r\n\t\t\tnew CoachingUXLauncherFactory());\r\n\t}\r\n\r\n\tprivate rudeSurveyLauncherFactory: RudeSurveyLauncherFactory;\r\n\tprivate coachingUXLauncherFactory: CoachingUXLauncherFactory;\r\n\r\n\tprivate constructor(rudeSurveyLauncherFactory: RudeSurveyLauncherFactory,\r\n\t\tcoachingUXLauncherFactory: CoachingUXLauncherFactory) {\r\n\t\tthis.rudeSurveyLauncherFactory = rudeSurveyLauncherFactory;\r\n\t\tthis.coachingUXLauncherFactory = coachingUXLauncherFactory;\r\n\t}\r\n\r\n\tpublic makeSurveyLauncher(survey: Api.ISurvey): Api.ISurveyLauncher {\r\n\t\tif (isNOU(survey)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (survey.getLauncherType().toLocaleLowerCase()) {\r\n\t\t\tcase CoachingUXLauncherFactory.LAUNCHER_TYPE:\r\n\t\t\t\treturn this.makeGenericMessagingSurfaceLauncher(survey);\r\n\t\t\tcase RudeSurveyLauncherFactory.LAUNCHER_TYPE:\r\n\t\t\tdefault:\r\n\t\t\t\treturn this.makeRudeSurveyLauncher(survey);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic AcceptsSurvey(survey: Api.ISurvey): boolean {\r\n\t\tif (isNOU(survey)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tswitch (survey.getType()) {\r\n\t\t\tcase Api.ISurvey.Type.GenericMessagingSurface:\r\n\t\t\t\treturn (!isNOU(this.coachingUXLauncherFactory)\r\n\t\t\t\t\t\t&& this.coachingUXLauncherFactory.AcceptsSurvey(survey));\r\n\t\t\tdefault:\r\n\t\t\t\treturn Configuration.get().checkIfSurveysEnabled() &&\r\n\t\t\t\t\t!isNOU(this.rudeSurveyLauncherFactory) &&\r\n\t\t\t\t\tthis.rudeSurveyLauncherFactory.AcceptsSurvey(survey);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate makeGenericMessagingSurfaceLauncher(survey: Api.ISurvey): Api.ISurveyLauncher {\r\n\t\tif (!isNOU(this.coachingUXLauncherFactory)) {\r\n\t\t\treturn this.coachingUXLauncherFactory.makeSurveyLauncher(survey);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate makeRudeSurveyLauncher(survey: Api.ISurvey): Api.ISurveyLauncher {\r\n\t\tif (!isNOU(this.rudeSurveyLauncherFactory)) {\r\n\t\t\treturn this.rudeSurveyLauncherFactory.makeSurveyLauncher(survey);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import * as Configuration from \"../Configuration/Configuration\";\r\n\r\nconst HTTP_TIMEOUT: number = 8000; // timeout in milliseconds\r\n/**\r\n * Make an http request with retries\r\n * @param method the http method \"GET\", \"POST\" etc\r\n * @param url the url\r\n * @param requestBody the request body\r\n * @param maxRetries the maximum number of retries\r\n * @param onLoad the onload handler\r\n */\r\nfunction makeHttpRequest<T>(method: string, url: string, requestBody: any, maxRetries: number,\r\n\tonLoad: (xhr: XMLHttpRequest, resolve: (value?: T) => void, reject: (error?: any) => void) => void\r\n): Promise<T> {\r\n\tlet makeRequest: (retries: number, timeout: number) => Promise<T> =\r\n\t\t(retries: number, timeout: number) => {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tlet xhr: XMLHttpRequest = new XMLHttpRequest();\r\n\t\t\t\txhr.open(method, url, true);\r\n\t\t\t\txhr.timeout = timeout;\r\n\t\t\t\txhr.onload = () => { onLoad(xhr, resolve, reject); };\r\n\t\t\t\txhr.ontimeout = () => {\r\n\t\t\t\t\tif (retries > 0) {\r\n\t\t\t\t\t\t// double the timeout and retry it\r\n\t\t\t\t\t\tmakeRequest(retries - 1, timeout * 2).then(resolve, reject);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new Error(`Request to '${url}' timed out. timeout: ${xhr.timeout}`));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\txhr.onerror = () => {\r\n\t\t\t\t\tif (retries > 0) {\r\n\t\t\t\t\t\tmakeRequest(retries - 1, timeout).then(resolve, reject);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new Error(`Request to '${url}' errored. ${xhr.status} - ${xhr.statusText} : ${xhr.responseText}`));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\txhr.send(requestBody);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t// get the input timeout or using the default value if timeout is not defined\r\n\tconst httpTimeout = Configuration.get().getCommonInitOptions().petrolTimeout\r\n\t\t\t\t\t\t? Configuration.get().getCommonInitOptions().petrolTimeout\r\n\t\t\t\t\t\t: HTTP_TIMEOUT;\r\n\r\n\treturn makeRequest(maxRetries, httpTimeout);\r\n}\r\n\r\nconst uploadEndpointInt: string = \"https://petrol-int.office.microsoft.com/v1/feedback\";\r\nconst uploadEndpointProd: string = \"https://petrol.office.microsoft.com/v1/feedback\";\r\n\r\n/**\r\n * Send a payload to Petrol\r\n * @param isProduction is production?\r\n * @param manifest manifest content\r\n * @param screenshot screenshot content\r\n * @param diagnostics diagnostics content\r\n */\r\nexport function send(isProduction: boolean, manifest: Blob, screenshot?: Blob, diagnostics?: Blob): Promise<any> {\r\n\tif (manifest === undefined) {\r\n\t\treturn Promise.reject(new Error(\"Manifest cannot be undefined\"));\r\n\t}\r\n\r\n\tlet formData = new FormData();\r\n\tformData.append(\"Manifest\", manifest);\r\n\r\n\tif (screenshot) {\r\n\t\tformData.append(\"Screenshot\", screenshot);\r\n\t}\r\n\r\n\tif (diagnostics) {\r\n\t\tformData.append(\"Diagnostics\", diagnostics);\r\n\t}\r\n\r\n\treturn makeHttpRequest<any>(\"POST\", isProduction ? uploadEndpointProd : uploadEndpointInt, formData, 2,\r\n\t\tfunction (\r\n\t\t\txhr: XMLHttpRequest,\r\n\t\t\tresolve: (value?: any) => void,\r\n\t\t\treject: (error?: any) => void\r\n\t\t): void {\r\n\t\t\tif (xhr.status !== 200) {\r\n\t\t\t\treject(new Error(\"Non-200 response with status code: \" + xhr.status + \", response: \" + xhr.responseText));\r\n\t\t\t}\r\n\t\t\tresolve();\r\n\t\t});\r\n}\r\n","/**\r\n * Screenshot.ts\r\n * Module for managing the screenshot file\r\n */\r\n\r\n/* tslint:disable max-line-length */\r\nimport {IFile} from \"./IFile\";\r\nimport * as Logging from \"./../../Logging/Logging\";\r\n\r\nexport class Screenshot implements IFile {\r\n\tprivate screenshot: HTMLCanvasElement;\r\n\r\n\tconstructor (screenshot: HTMLCanvasElement) {\r\n\t\tthis.screenshot = screenshot;\r\n\t}\r\n\r\n\tpublic getContent(): Blob {\r\n\t\tlet imgString: string;\r\n\t\ttry {\r\n\t\t\timgString = this.screenshot.toDataURL(\"image/jpeg\").split(\",\")[1];\r\n\t\t} catch (e) {\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.Shared.Screenshot.GetContent.Failed.DefaultImage.Returned.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error, { ErrorMessage: e.toString() });\r\n\r\n\t\t\t// return an image with \"Screenshot cannot be captured\" message\r\n\t\t\timgString = \"iVBORw0KGgoAAAANSUhEUgAAAN0AAAA+AQMAAACV2ox1AAAABGdBTUEAALGPC/xhBQAAAAZQTFRFAAAA////pdmf3QAAAAlwSFlzAAAOwgAADsIBFShKgAAAAjtJREFUSMfV1M1rE0EUAHDBa5r8A9vkL6giFiI0JH+Ih9KLx8TaukkJugShHgrJzYvkVPQkUqgwSePLEELaU+zBg8JKVvSQQNydlsadwCQzziRZ82ETxYMfc3gD8+MxjzcfV8T80f0vkQ8i68tAPSMSQ0PkI6QDpEPkZBHy1Wp1/zjni2lrZq2T2uikDG17A54Hr0vsvwXIl3WXt02zeIHQBSq3DxHk7VO55zIFgLLrcmaaQBGiqCwQArBVQTbNZODNBB5Ee2EEr5eGiDG4k5mcqcy+Ksh+N8K2+bRI1Z68fRMVoV+XmcFwpQJZGohpkds1WtjppGLaq51a2b8yp310UW9/H8VfRj68CIKRsWCFPCCEM419S4bSAOmPmdb3TBrQ4lmnt9n4/Hiv5fTunsOzXbJfLR2rU3Fd5ugOe9mw0lvNOCNxyDdIHkpHCv0S3a+MS0yT+4wkAKx1gBJeVxeMRhSeNZpXJfY+zqAVl+g0mCFRJMgs6oy9+MCMrWZaJJwiWFjuWcIShf+Wk2W9e59OHu21WPdsswZNLKs9wV77mJiaMVbBQ+/1jGZDofFLuOBU/jzG6OQKnkLOZ5EvwolMX2Q19TAX9MWyy/aNarewfZptechdLn8B3TatB/YXB2j4MKw3jTHKX4AO0CbqaSddMokHUbr0PpSXmFG4O4WIu86asCVihfoM6nUmse5gGkbJOyThVesX4UI0d00LBYMr55VuIZl8MkY1uOiTy9v3c+ShuXj5+NdQdL8B+5gmw8WZuREAAAAASUVORK5CYII=\";\r\n\t\t}\r\n\r\n\t\tlet blobBin = atob(imgString);\r\n\t\tlet array = [];\r\n\t\tfor (let i = 0; i < blobBin.length; i++) {\r\n\t\t\tarray.push(blobBin.charCodeAt(i));\r\n\t\t}\r\n\t\tlet file: Blob = new Blob([new Uint8Array(array)], {type: \"image/jpeg\"});\r\n\r\n\t\treturn file;\r\n\t}\r\n}\r\n","/**\r\n * Manifest.ts\r\n * Module for managing the manifest file\r\n */\r\n\r\nimport { IFile } from \"./IFile\";\r\nimport { FeedbackType, SDK_VERSION_PREFIX } from \"./../../Constants\";\r\nimport * as Utils from \"./../../Utils\";\r\nimport Version from \"./../../Version\";\r\nimport * as Window from \"./../../Window/Window\";\r\n\r\nexport class Manifest implements IFile {\r\n\tprivate manifestData: IManifestData;\r\n\r\n\tpublic constructor(manifestType: string, appId: number, submitTime: string, type: ManifestFeedbackType,\r\n\t\tclientFeedbackId: string, applicationGroup: IManifestDataApplication, telemetryGroup: IManifestDataTelemetry,\r\n\t\twebGroup: IManifestDataWeb) {\r\n\t\tthis.manifestData = {\r\n\t\t\tappId: appId,\r\n\t\t\tapplication: applicationGroup,\r\n\t\t\tclientFeedbackId: clientFeedbackId,\r\n\t\t\tmanifestType: manifestType,\r\n\t\t\tsource: \"Client\",\r\n\t\t\tsubmitTime: submitTime,\r\n\t\t\ttelemetry: telemetryGroup,\r\n\t\t\ttype: sanitizeType(type),\r\n\t\t\tweb: webGroup,\r\n\t\t\tsdkVersion: SDK_VERSION_PREFIX\r\n\t\t\t\t+ (Window.get().OfficeBrowserFeedback.sdkVersion !== undefined ?\r\n\t\t\t\t\tWindow.get().OfficeBrowserFeedback.sdkVersion : Version),\r\n\t\t};\r\n\t}\r\n\r\n\tpublic getExtendedManifestData(): string {\r\n\t\treturn this.manifestData.application.extendedManifestData;\r\n\t}\r\n\r\n\tpublic setComment(comment: string) {\r\n\t\tthis.manifestData.comment = comment;\r\n\t}\r\n\r\n\tpublic setEmail(email: string) {\r\n\t\tthis.manifestData.email = email;\r\n\t}\r\n\r\n\tpublic setCategory(category: string) {\r\n\t\tthis.manifestData.telemetry = this.manifestData.telemetry || {};\r\n\t\tthis.manifestData.telemetry.featureArea = category;\r\n\t}\r\n\r\n\tpublic setAppData(appData: string) {\r\n\t\tthis.manifestData.application = this.manifestData.application || {};\r\n\t\tthis.manifestData.application.appData = appData;\r\n\t}\r\n\r\n\tpublic setExtendedManifestData(extendedManifestData: string) {\r\n\t\tthis.manifestData.application = this.manifestData.application || {};\r\n\t\tthis.manifestData.application.extendedManifestData = extendedManifestData;\r\n\t}\r\n\r\n\tpublic setClientFeedbackId(clientFeedbackId: string) {\r\n\t\tthis.manifestData.clientFeedbackId = clientFeedbackId;\r\n\t}\r\n\r\n\tpublic getClientFeedbackId(): string {\r\n\t\treturn this.manifestData.clientFeedbackId;\r\n\t}\r\n\r\n\tpublic setComplianceInformation(authenticationType: string, ageGroup: string, sendFeedbackPolicyValue: string,\r\n\t\tsendSurveyPolicyValue: string, screenshotPolicyValue: string, emailPolicyValue: string) {\r\n\t\tthis.manifestData.complianceChecks = {\r\n\t\t\tauthenticationType: authenticationType,\r\n\t\t\tageGroup: ageGroup,\r\n\t\t\tpolicyAllowFeedback: sendFeedbackPolicyValue,\r\n\t\t\tpolicyAllowSurvey: sendSurveyPolicyValue,\r\n\t\t\tpolicyAllowScreenshot: screenshotPolicyValue,\r\n\t\t\tpolicyAllowContact: emailPolicyValue,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Set freeform custom values in manifest. Throws if values are already set.\r\n\t * @param values the values as a JS object\r\n\t */\r\n\tpublic setValues(values: object) {\r\n\t\tif (values) {\r\n\t\t\tfor (let field in values) {\r\n\t\t\t\tif (values.hasOwnProperty(field)) {\r\n\t\t\t\t\tif (this.manifestData.hasOwnProperty(field)) {\r\n\t\t\t\t\t\t(<any> this.manifestData)[field] = Utils.overrideValues((<any> values)[field], (<any> this.manifestData)[field]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t(<any> this.manifestData)[field] = (<any> values)[field];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getContent(): Blob {\r\n\t\treturn new Blob([JSON.stringify(this.manifestData)], { type: \"application/json\" });\r\n\t}\r\n}\r\n\r\nfunction sanitizeType(type: ManifestFeedbackType): string {\r\n\tif (type === \"Survey\") {\r\n\t\treturn type;\r\n\t} else {\r\n\t\treturn FeedbackType[type];\r\n\t}\r\n}\r\n\r\nexport type ManifestFeedbackType = FeedbackType | \"Survey\";\r\n\r\n/**\r\n * Interface for the manifest data\r\n */\r\nexport interface IManifestData {\r\n\t// #region \"Required properties\"\r\n\tmanifestType: string;\r\n\tappId: number;\r\n\tsubmitTime: string;\r\n\tsource: string;\r\n\ttype: string;\r\n\tclientFeedbackId: string;\r\n\tsdkVersion: string;\r\n\t// #endregion \"Required properties\"\r\n\tcomment?: string;\r\n\temail?: string;\r\n\trating?: number;\r\n\tsurvey?: IManifestDataSurvey;\r\n\tweb?: IManifestDataWeb;\r\n\tapplication?: IManifestDataApplication;\r\n\ttelemetry?: IManifestDataTelemetry;\r\n\tcomplianceChecks?: IManifestComplianceChecks;\r\n}\r\n\r\n/**\r\n * Interface for survey related properties in manifest\r\n */\r\nexport interface IManifestDataSurvey {\r\n\tsurveyId: string;\r\n}\r\n\r\n/**\r\n * Interface for application related properties in manifest\r\n */\r\nexport interface IManifestDataApplication {\r\n\tappData?: string;\r\n\textendedManifestData?: string;\r\n\tfeedbackTenant?: string;\r\n}\r\n\r\n/**\r\n * Interface for telemetry related properties in manifest\r\n */\r\nexport interface IManifestDataTelemetry {\r\n\taudience?: string;\r\n\taudienceGroup?: string;\r\n\tchannel?: string;\r\n\tdeviceId?: string;\r\n\tdeviceType?: string;\r\n\terrorClassification?: string;\r\n\terrorCode?: string;\r\n\terrorName?: string;\r\n\tfeatureArea?: string;\r\n\tflights?: string;\r\n\tflightSource?: string;\r\n\tfundamentalArea?: string;\r\n\tinstallationType?: string;\r\n\tisLogIncluded?: boolean;\r\n\tisUserSubscriber?: boolean;\r\n\tloggableUserId?: string;\r\n\tofficeArchitecture?: string;\r\n\tofficeBuild?: string;\r\n\tofficeEditingLang?: number;\r\n\tofficeUILang?: number;\r\n\tosBitness?: number;\r\n\tosBuild?: string;\r\n\tosUserLang?: number;\r\n\tplatform?: string;\r\n\tprocessSessionId?: string;\r\n\tringId?: number;\r\n\tsku?: string;\r\n\tsourceContext?: string;\r\n\tsystemProductName?: string;\r\n\tsystemManufacturer?: string;\r\n\ttenantId?: string;\r\n}\r\n\r\n/**\r\n * Interface for web related properties in manifest\r\n */\r\nexport interface IManifestDataWeb {\r\n\tbrowser?: string;\r\n\tbrowserVersion?: string;\r\n\tdataCenter?: string;\r\n\tsourcePageName?: string;\r\n\tsourcePageURI?: string;\r\n}\r\n\r\n/**\r\n * Interface for compliance checks related properties in manifest\r\n */\r\nexport interface IManifestComplianceChecks {\r\n\tauthenticationType?: string;\r\n\tageGroup?: string;\r\n\tpolicyAllowFeedback?: string;\r\n\tpolicyAllowSurvey?: string;\r\n\tpolicyAllowScreenshot?: string;\r\n\tpolicyAllowContact?: string;\r\n}\r\n","/**\r\n * Feedback.ts\r\n *\r\n * Module for payload transport.\r\n */\r\n\r\nimport * as Constants from \"./../Constants\";\r\nimport * as Utils from \"./../Utils\";\r\nimport * as Logging from \"./../Logging/Logging\";\r\nimport * as Petrol from \"./Petrol\";\r\nimport { Screenshot } from \"./Files/Screenshot\";\r\nimport * as Configuration from \"../Configuration/Configuration\";\r\nimport { Manifest, ManifestFeedbackType, IManifestDataApplication, IManifestDataTelemetry, IManifestDataWeb }\r\n\tfrom \"./Files/Manifest\";\r\n\r\nimport { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { AgeGroup, AuthenticationType } from \"../Configuration/Configuration\";\r\n\r\nexport { IManifestDataApplication, IManifestDataTelemetry, IManifestDataWeb } from \"./Files/Manifest\"\r\n\r\nexport class Transporter implements Api.ITransporter {\r\n\tprivate manifest: Manifest;\r\n\tprivate screenshot: Screenshot;\r\n\tprivate environment: Constants.Environment;\r\n\tprivate clientFeedbackId: string;\r\n\r\n\tpublic constructor(environment: Constants.Environment, manifestType: string, appId: number, type: ManifestFeedbackType,\r\n\t\tapplicationGroup: IManifestDataApplication, telemetryGroup: IManifestDataTelemetry, webGroup: IManifestDataWeb) {\r\n\r\n\t\tthis.clientFeedbackId = Utils.guid();\r\n\t\tthis.manifest = new Manifest(manifestType, appId, new Date().toISOString(), type,\r\n\t\t\tthis.clientFeedbackId, { ...applicationGroup }, { ...telemetryGroup }, { ...webGroup });\r\n\t\tthis.environment = environment;\r\n\r\n\t\tthis.manifest.setComplianceInformation(AuthenticationType[(Configuration.get().getCommonInitOptions()?.authenticationType) ??\r\n\t\t\tAuthenticationType.Unauthenticated],\r\n\t\t\tAgeGroup[(Configuration.get().getCommonInitOptions()?.ageGroup) ?? AgeGroup.Undefined],\r\n\t\t\tthis.ocpsEnumToString(Configuration.get().getInAppFeedbackInitOptions()?.sendFeedbackPolicyValue),\r\n\t\t\tthis.ocpsBooleanToString(Configuration.get().getFloodgateInitOptions()?.surveyEnabled),\r\n\t\t\tthis.ocpsEnumToString(Configuration.get().getCommonInitOptions()?.screenshotPolicyValue),\r\n\t\t\tthis.ocpsEnumToString(Configuration.get().getCommonInitOptions()?.emailPolicyValue));\r\n\t}\r\n\r\n\tpublic getClientFeedbackId(): string {\r\n\t\treturn this.clientFeedbackId;\r\n\t}\r\n\r\n\tpublic getExtendedManifestData(): string {\r\n\t\treturn this.manifest.getExtendedManifestData();\r\n\t}\r\n\r\n\tpublic setComment(comment: string) {\r\n\t\tthis.manifest.setComment(comment);\r\n\t}\r\n\r\n\tpublic setEmail(email: string) {\r\n\t\tthis.manifest.setEmail(email);\r\n\t}\r\n\r\n\tpublic setCategory(category: string) {\r\n\t\tthis.manifest.setCategory(category);\r\n\t}\r\n\r\n\tpublic setAppData(appData: string) {\r\n\t\tthis.manifest.setAppData(appData);\r\n\t}\r\n\r\n\tpublic setExtendedManifestData(extendedManifestData: string) {\r\n\t\tthis.manifest.setExtendedManifestData(extendedManifestData);\r\n\t}\r\n\r\n\tpublic setScreenshot(screenshot: HTMLCanvasElement) {\r\n\t\tthis.screenshot = new Screenshot(screenshot);\r\n\t}\r\n\r\n\tpublic setClientFeedbackId(clientFeedbackId: string) {\r\n\t\tthis.manifest.setClientFeedbackId(clientFeedbackId);\r\n\t}\r\n\r\n\tpublic getManifest(): Manifest {\r\n\t\treturn this.manifest;\r\n\t}\r\n\r\n\t/**\r\n\t * Set freeform custom values in manifest. Throws if values are already set.\r\n\t * @param values the values as a JS object\r\n\t */\r\n\tpublic setManifestValues(values: object) {\r\n\t\tthis.manifest.setValues(values);\r\n\t}\r\n\r\n\t/**\r\n\t * Submit the payload\r\n\t */\r\n\tpublic submit(): Promise<any> {\r\n\t\tif (!Configuration.get().isFeedbackSurveyEnabledByAADC()) {\r\n\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\tLogging.EventIds.Shared.Upload.Prevented.VALUE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tData: JSON.stringify({\r\n\t\t\t\t\t\tageGroup: Configuration.get().getCommonInitOptions().ageGroup,\r\n\t\t\t\t\t\tauthenticationType: Configuration.get().getCommonInitOptions().authenticationType,\r\n\t\t\t\t\t}),\r\n\t\t\t\t});\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\tlet manifestContent: Blob = this.manifest.getContent();\r\n\t\tlet screenshotContent: Blob = undefined;\r\n\t\tconst clientFeedbackId: string = this.clientFeedbackId;\r\n\r\n\t\tif (this.screenshot) {\r\n\t\t\tscreenshotContent = this.screenshot.getContent();\r\n\t\t}\r\n\r\n\t\treturn Petrol.send(this.environment === Constants.Environment.Production, manifestContent, screenshotContent)\r\n\t\t\t.catch(\r\n\t\t\t\tfunction onRejected(err: Error) {\r\n\t\t\t\t\tConfiguration.get().setFeedbackSubmitted(false);\r\n\t\t\t\t\tConfiguration.get().getCommonInitOptions().onError(\"Payload submission failed: \" + err.message +\r\n\t\t\t\t\t\t\". ClientFeedbackId: \" + clientFeedbackId);\r\n\t\t\t\t\tLogging.getLogger().logEvent(Logging.EventIds.Shared.Upload.Failed.VALUE,\r\n\t\t\t\t\t\tLogging.LogLevel.Error, { ErrorMessage: err.message, ClientFeedbackId: clientFeedbackId });\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t}\r\n\r\n\tprivate ocpsBooleanToString(policyValue?: boolean) {\r\n\t\tif (policyValue === undefined) {\r\n\t\t\treturn \"Not Configured\";\r\n\t\t}\r\n\r\n\t\tif (policyValue) {\r\n\t\t\treturn \"Enabled\";\r\n\t\t}\r\n\r\n\t\treturn \"Disabled\";\r\n\t}\r\n\r\n\tprivate ocpsEnumToString(policyValue?: Constants.OCPSValues) {\r\n\t\tif (!policyValue) {\r\n\t\t\treturn \"Not Configured\";\r\n\t\t}\r\n\t\tswitch (policyValue) {\r\n\t\t\tcase Constants.OCPSValues.Disabled:\r\n\t\t\t\treturn \"Disabled\";\r\n\t\t\tcase Constants.OCPSValues.Enabled:\r\n\t\t\t\treturn \"Enabled\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"Not Configured\";\r\n\t\t}\r\n\t}\r\n}\r\n","/**\r\n * Implementation of Transporter Factory Interface for calling submit directly to petrol\r\n */\r\n\r\nimport { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { Transporter } from \"./../Transport/Transport\";\r\nimport * as Configuration from \"./../Configuration/Configuration\";\r\n\r\nexport default class TransporterFactory implements Api.ITransporterFactory {\r\n\tpublic makeTransporter(surveyType: string): Api.ITransporter {\r\n\t\treturn new Transporter(\r\n\t\t\tConfiguration.get().getCommonInitOptions().environment,\r\n\t\t\tsurveyType,\r\n\t\t\tConfiguration.get().getCommonInitOptions().appId,\r\n\t\t\t\"Survey\",\r\n\t\t\tConfiguration.get().getCommonInitOptions().applicationGroup,\r\n\t\t\tConfiguration.get().getCommonInitOptions().telemetryGroup,\r\n\t\t\tConfiguration.get().getCommonInitOptions().webGroup,\r\n\t\t);\r\n\t}\r\n}\r\n","/**\r\n * Implementation for IFloodgateEnvironmentProvider for web SDK.\r\n * We pass the SDK's internal locale here and not the one which the host app specifies.\r\n */\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport * as Configuration from \"./../Configuration/Configuration\";\r\n\r\nexport default class FloodgateEnvironmentProvider implements Api.IFloodgateEnvironmentProvider {\r\n\tpublic getLanguage(): string {\r\n\t\treturn Configuration.get().getCommonInitOptions().originalLocale;\r\n\t}\r\n}\r\n","/**\r\n * UIStrings.ts\r\n *\r\n * Module for the strings to display\r\n */\r\n\r\nexport interface IUIStrings {\r\n\tFeedbackSubtitle: string;\r\n\tPrivacyStatement: string;\r\n\r\n\tForm: {\r\n\t\tCommentPlaceholder: string;\r\n\t\tCategoryPlaceholder: string;\r\n\t\tEmailPlaceholder: string;\r\n\t\tRatingLabel: string;\r\n\t\tScreenshotLabel: string;\r\n\t\tEmailCheckBoxLabel: string;\r\n\t\tSubmit: string;\r\n\t\tBasicFormTitle: string;\r\n\t\tCancel: string;\r\n\t\tScreenshotImgAltText: string;\r\n\t\tPrivacyLabel: string;\r\n\t\tPrivacyConsent: string;\r\n\t};\r\n\r\n\tSingleForm: {\r\n\t\tTitle: string;\r\n\t};\r\n\r\n\tSmileForm: {\r\n\t\tAnchor: string;\r\n\t\tTitle: string;\r\n\t};\r\n\r\n\tFrownForm: {\r\n\t\tAnchor: string;\r\n\t\tTitle: string;\r\n\t};\r\n\r\n\tIdeaForm: {\r\n\t\tAnchor: string;\r\n\t\tTitle: string;\r\n\t};\r\n\r\n\tBugForm: {\r\n\t\tAnchor: string;\r\n\t\tTitle: string;\r\n\t};\r\n\r\n\tThanksPanel: {\r\n\t\tTitle: string;\r\n\t\tAppreciateText: string;\r\n\t\tMyFeedbackDescription: string;\r\n\t\tMyFeedbackLinkText: string;\r\n\t\tFeedbackPortalDescription: string;\r\n\t\tFeedbackPortalLinkText: string;\r\n\t\tClose: string;\r\n\t};\r\n\r\n\tFloodgate: {\r\n\t\tNps: {\r\n\t\t\tPrompt: {\r\n\t\t\t\tTitle: string;\r\n\t\t\t\tQuestion: string;\r\n\t\t\t\tYes: string;\r\n\t\t\t\tNo: string;\r\n\t\t\t};\r\n\r\n\t\t\tComment: {\r\n\t\t\t\tQuestion: string;\r\n\t\t\t};\r\n\r\n\t\t\tRating: {\r\n\t\t\t\tQuestion: string;\r\n\t\t\t\tPoints11Value0: string;\r\n\t\t\t\tPoints11Value1: string;\r\n\t\t\t\tPoints11Value2: string;\r\n\t\t\t\tPoints11Value3: string;\r\n\t\t\t\tPoints11Value4: string;\r\n\t\t\t\tPoints11Value5: string;\r\n\t\t\t\tPoints11Value6: string;\r\n\t\t\t\tPoints11Value7: string;\r\n\t\t\t\tPoints11Value8: string;\r\n\t\t\t\tPoints11Value9: string;\r\n\t\t\t\tPoints11Value10: string;\r\n\t\t\t\tPoints5Value1: string;\r\n\t\t\t\tPoints5Value2: string;\r\n\t\t\t\tPoints5Value3: string;\r\n\t\t\t\tPoints5Value4: string;\r\n\t\t\t\tPoints5Value5: string;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tCloseLabel: string;\r\n}\r\n\r\n/**\r\n * Localized UI strings\r\n */\r\nlet uIStrings: IUIStrings;\r\n\r\n/**\r\n * Set UI strings\r\n * @param {string} data List of localized UI strings\r\n */\r\nexport function setUIStrings(data: IUIStrings) {\r\n\tuIStrings = data;\r\n}\r\n\r\n/**\r\n * Get UI strings\r\n * @returns the UIStrings\r\n */\r\nexport function getUIStrings(): IUIStrings {\r\n\treturn uIStrings;\r\n}\r\n","/**\r\n * Implementation of IFloodgateStringProvider for Web SDK\r\n */\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport * as UIStrings from \"./../UIStrings/UIStrings\";\r\nimport * as Configuration from \"./../Configuration/Configuration\";\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\nexport default class FloodgateStringProvider implements Api.IFloodgateStringProvider {\r\n\tpublic loadStringResource(stringId: Api.IFloodgateStringProvider.StringType): string {\r\n\t\tlet uiStrings = UIStrings.getUIStrings();\r\n\r\n\t\tswitch (stringId) {\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue0):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value0;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue1):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value1;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue2):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value2;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue3):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value3;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue4):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value4;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue5):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value5;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue6):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value6;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue7):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value7;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue8):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value8;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue9):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value9;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps11RatingValue10):\t\treturn uiStrings.Floodgate.Nps.Rating.Points11Value10;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps5RatingValue1):\t\treturn uiStrings.Floodgate.Nps.Rating.Points5Value1;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps5RatingValue2):\t\treturn uiStrings.Floodgate.Nps.Rating.Points5Value2;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps5RatingValue3):\t\treturn uiStrings.Floodgate.Nps.Rating.Points5Value3;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps5RatingValue4):\t\treturn uiStrings.Floodgate.Nps.Rating.Points5Value4;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.Nps5RatingValue5):\t\treturn uiStrings.Floodgate.Nps.Rating.Points5Value5;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsRatingQuestion):\t\treturn uiStrings.Floodgate.Nps.Rating.Question;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsCommentQuestion):\t\treturn uiStrings.Floodgate.Nps.Comment.Question;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsPromptNotNowLabel):\treturn uiStrings.Floodgate.Nps.Prompt.No;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsPromptQuestion):\t\treturn uiStrings.Floodgate.Nps.Prompt.Question;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsPromptTitle):\t\t\treturn uiStrings.Floodgate.Nps.Prompt.Title;\r\n\t\t\tcase (Api.IFloodgateStringProvider.StringType.NpsPromptYesLabel):\t\treturn uiStrings.Floodgate.Nps.Prompt.Yes;\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCustomString(str: string): string {\r\n\t\treturn Configuration.get().getFloodgateInitOptions().uIStringGetter(str);\r\n\t}\r\n}\r\n","/**\r\n * TargetedMessagingProvider.ts\r\n *\r\n * Module for targeted messaging campaign definition provider.\r\n */\r\n\r\nimport { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { CampaignDefinitions } from \"@ms-ofb/officefloodgatecore/dist/src/Governance/CampaignDefinitions\";\r\nimport { FilterValidCampaignDefinitions } from\r\n\t\"@ms-ofb/officefloodgatecore/dist/src/Campaign/CampaignDefinitionProvider\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\nimport { TMS_CAMPAIGN_LOAD_TIMEOUT } from \"./TargetedMessagingConstants\";\r\nimport { createTimeoutPromise } from \"../Utils\";\r\n\r\nimport * as AssetsProvider from \"./AssetsProvider\";\r\n\r\nexport class TargetedMessagingCampaignDefinitionProvider implements Api.ICampaignDefinitionProvider {\r\n\tprivate loadAsyncTriggered: boolean = false;\r\n\tprivate campaignDefinitions: Api.CampaignDefinition[] = [];\r\n\r\n\tpublic load(): Api.CampaignDefinition[] {\r\n\t\tif (!this.loadAsyncTriggered) {\r\n\t\t\tthis.loadAsync();\r\n\t\t\tthis.loadAsyncTriggered = true;\r\n\t\t}\r\n\r\n\t\treturn this.campaignDefinitions || [];\r\n\t}\r\n\r\n\tpublic loadAsync(): Promise<Api.CampaignDefinition[]> {\r\n\t\tconst thisObj = this;\r\n\t\tconst campaignDefinitionsPromise = AssetsProvider.get().getCampaignDefinitions();\r\n\t\tcampaignDefinitionsPromise.then((response) => {\r\n\t\t\tthisObj.loadCampaignDefinitions(response);\r\n\t\t\tthisObj.loadAsyncTriggered = true;\r\n\t\t});\r\n\r\n\t\tconst timeoutMilliseconds = getDynamicSetting(SettingKey.tmsLoadTimeout, TMS_CAMPAIGN_LOAD_TIMEOUT);\r\n\t\tconst timeoutPromise = createTimeoutPromise(timeoutMilliseconds, campaignDefinitionsPromise);\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\ttimeoutPromise.then(\r\n\t\t\t\tfunction onFulfilled(response) {\r\n\t\t\t\t\tthisObj.loadCampaignDefinitions(response);\r\n\t\t\t\t\tthisObj.loadAsyncTriggered = true;\r\n\t\t\t\t\tresolve(thisObj.campaignDefinitions);\r\n\t\t\t\t}\r\n\t\t\t).catch(\r\n\t\t\t\t// might have timed out or getCampaignDefinitions might have failed\r\n\t\t\t\t// In either case we resolve with cached content\r\n\t\t\t\tfunction onRejected(error) {\r\n\t\t\t\t\tif (thisObj.campaignDefinitions.length <= 0) {\r\n\t\t\t\t\t\tthisObj.loadCampaignDefinitions(AssetsProvider.get().getCachedCampaignDefinitions());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresolve(thisObj.campaignDefinitions);\r\n\t\t\t\t}\r\n\t\t\t).catch(\r\n\t\t\t\t// handle any errors from catch block\r\n\t\t\t\tfunction onRejected(error) {\r\n\t\t\t\t\tresolve(thisObj.campaignDefinitions);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate loadCampaignDefinitions(response: CampaignDefinitions) {\r\n\t\tconst definitions = response && response.campaigns;\r\n\t\tif (definitions) {\r\n\t\t\tthis.campaignDefinitions = FilterValidCampaignDefinitions(definitions).result;\r\n\t\t}\r\n\t}\r\n}\r\n","/*\r\n * LocalUserFactHelper.ts\r\n */\r\n\r\nimport { Api, Utils } from \"@ms-ofb/officefloodgatecore\";\r\n\r\nimport * as Configuration from \"../Configuration/Configuration\";\r\nimport * as Logging from \"../Logging/Logging\";\r\n\r\nfunction getBrowserSettings() {\r\n\ttry {\r\n\t\t// Screen dimensions\r\n\t\tconst documentElement = document && (document.documentElement || document.getElementsByTagName(\"body\")[0]);\r\n\t\tconst browserSettings = {\r\n\t\t\tpageWidth: window?.innerWidth || documentElement?.clientWidth,\r\n\t\t\tpageHeight: window?.innerHeight || documentElement?.clientHeight,\r\n\t\t\tpageTop: window?.pageYOffset || documentElement?.scrollTop,\r\n\t\t\tpageLeft: window?.pageXOffset || documentElement?.scrollLeft,\r\n\t\t\tscreenWidth: screen ? screen.width : 0,\r\n\t\t\tscreenHeight: screen ? screen.height : 0,\r\n\t\t\tcolorDepth: screen ? screen.colorDepth : 0,\r\n\t\t\tuserAgent: navigator?.userAgent,\r\n\t\t};\r\n\r\n\t\treturn browserSettings;\r\n\t} catch (error) {\r\n\t\t// ignore\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n// Currently used for AADC but can be extended to any other settings\r\nfunction getCustomSettings(): Record<string, any>  {\r\n\t// Custom settings\r\n\tconst customSettings = {\r\n\t\t// AADC related values\r\n\t\tuserConsentGroup: Configuration.get().getUserConsentGroup(),\r\n\t\tfeedbackEnabledByAADC: Configuration.get().isFeedbackSurveyEnabledByAADC(),\r\n\r\n\t\t// Other values\r\n\t};\r\n\r\n\treturn customSettings;\r\n}\r\n\r\n// input userFactName is expected to be of form window__obj1___obj2\r\nfunction getBrowserLocalFact(userFactName: string): Api.IUserFact {\r\n\tconst factNameValues = userFactName && userFactName.split(\"__\");\r\n\tif (!factNameValues || factNameValues.length <= 1) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tlet userFact: Api.IUserFact = null;\r\n\tconst objectName = factNameValues[0];\r\n\tconst propertyName = factNameValues.pop();\r\n\r\n\t// common top level objects eg: window__status\r\n\tif (propertyName && factNameValues.length === 1) {\r\n\t\tuserFact = createUserFact(window[<any> objectName] || window, propertyName);\r\n\t}\r\n\r\n\t// handle names like window__navigator__userAgent__length\r\n\tif (!userFact && propertyName && factNameValues.length > 1) {\r\n\t\tif (objectName === \"window\") {\r\n\t\t\t// remove the window object.. it will be used as first/default\r\n\t\t\tfactNameValues.shift();\r\n\t\t}\r\n\r\n\t\t// try getting target as object path eg: window['navigator']['userAgent']\r\n\t\tconst globalObject = factNameValues.reduce((prev, curr) => prev && prev[<any> curr], window);\r\n\t\tif (globalObject) {\r\n\t\t\t// get the fact value eg: 'length'\r\n\t\t\tuserFact = createUserFact(globalObject, propertyName);\r\n\t\t}\r\n\t}\r\n\r\n\tif (userFact) {\r\n\t\tuserFact.userFactName = userFactName;\r\n\t}\r\n\r\n\treturn userFact;\r\n}\r\n\r\n// For consistency, fact names should match %SRCROOT%\\personalization\\common\\LocalUserFactsDataProvider.cpp\r\nexport function createUserFact(targetObject: Record<string, any>, factName: string): Api.IUserFact {\r\n\tif (!targetObject) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// get fact value\r\n\tlet factValue = targetObject[factName];\r\n\tif (!factValue) {\r\n\t\t// try looking up with case insensitive key\r\n\t\tconst loweCaseFactName = factName.toLowerCase();\r\n\t\tconst caseInsensitiveKey = Object.keys(targetObject).find(key => key.toLowerCase() === loweCaseFactName);\r\n\t\tfactValue = targetObject[caseInsensitiveKey];\r\n\t}\r\n\r\n\tif (Utils.isNOU(factValue)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// ignore object and function type values\r\n\tif (!Utils.isArray(factValue) && (Utils.isObject(factValue) || Utils.isFunction(factValue))) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Handle serialized values\r\n\tconst currentDateTime = new Date().toISOString();\r\n\treturn {\r\n\t\tuserFactType: \"Local\",\r\n\t\tuserFactName: factName,\r\n\t\tuserFactValue: factValue.toString(),\r\n\t\tsourceDateTime: currentDateTime,\r\n\t\tstorageDateTime: currentDateTime,\r\n\t\tclientIngestionDateTime: currentDateTime,\r\n\t};\r\n}\r\n\r\nlet localFactTargetObjects: Record<string, any>[];\r\nexport function getLocalUserFact(userFactName: string): Api.IUserFact {\r\n\ttry {\r\n\t\tif (!localFactTargetObjects) {\r\n\t\t\tconst commonInitOptions = Configuration.get().getCommonInitOptions();\r\n\t\t\tlocalFactTargetObjects = [\r\n\t\t\t\tcommonInitOptions,\r\n\t\t\t\tcommonInitOptions?.applicationSettings,\r\n\t\t\t\tcommonInitOptions?.telemetryGroup,\r\n\t\t\t\tcommonInitOptions?.applicationGroup,\r\n\t\t\t\tcommonInitOptions?.webGroup,\r\n\t\t\t\tConfiguration.get().getFloodgateInitOptions(),\r\n\t\t\t\tConfiguration.get(),\r\n\t\t\t\tgetBrowserSettings(),\r\n\t\t\t\tgetCustomSettings(),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t// lookup in target objects and create fact\r\n\t\tlet userFact = localFactTargetObjects.reduce<Api.IUserFact>(\r\n\t\t\t(generatedFact, targetObject) => generatedFact || createUserFact(targetObject, userFactName), null);\r\n\r\n\t\t// lookup global browser objects for names like navigator__userAgent or location__href\r\n\t\tif (!userFact) {\r\n\t\t\tuserFact = getBrowserLocalFact(userFactName);\r\n\t\t}\r\n\r\n\t\treturn userFact;\r\n\t} catch (error) {\r\n\t\tLogging.getLogger().logEvent(\r\n\t\t\tLogging.EventIds.UserFacts.LocalFact.Error.VALUE,\r\n\t\t\tLogging.LogLevel.Error,\r\n\t\t\t{\r\n\t\t\t\tErrorMessage: `Error getting local fact - ${userFactName} ${error && error.message ? \": \" + error.message : \"\"} `,\r\n\t\t\t});\r\n\r\n\t\treturn null;\r\n\t}\r\n}\r\n","/**\r\n * UserFactsProvider.ts\r\n *\r\n * Module for user facts provider.\r\n */\r\n\r\nimport { Api } from \"@ms-ofb/officefloodgatecore\";\r\nimport { getDynamicSetting, SettingKey } from \"../Configuration/DynamicConfiguration\";\r\nimport { TULIPS_INGESTION_TIME, TULIPS_LOAD_TIMEOUT } from \"./TargetedMessagingConstants\";\r\n\r\nimport * as AssetsProvider from \"./AssetsProvider\";\r\nimport * as Logging from \"../Logging/Logging\";\r\n\r\nimport { createTimeoutPromise } from \"../Utils\";\r\nimport { getLocalUserFact } from \"./LocalUserFactHelper\";\r\n\r\nexport class UserFactsProvider implements Api.IUserFactProvider {\r\n\tprivate loadAsyncTriggered: boolean = false;\r\n\tprivate userFacts: Api.IUserFact[] = [];\r\n\tprivate nameAndUserFactMap: Record<string, Api.IUserFact> = {};\r\n\r\n\tpublic load(): Api.IUserFact[] {\r\n\t\tif (!this.loadAsyncTriggered) {\r\n\t\t\tthis.loadAsync();\r\n\t\t\tthis.loadAsyncTriggered = true;\r\n\t\t}\r\n\r\n\t\treturn this.userFacts || [];\r\n\t}\r\n\r\n\tpublic loadAsync(): Promise<Api.IUserFact[]> {\r\n\t\tconst userFactsPromise = AssetsProvider.get().getUserFacts().then(userFacts => {\r\n\t\t\tthis.loadUserFacts(userFacts);\r\n\t\t});\r\n\r\n\t\tconst timeoutMilliseconds = getDynamicSetting(SettingKey.tulipsLoadTimeout, TULIPS_LOAD_TIMEOUT);\r\n\t\tconst timeoutPromise = createTimeoutPromise(timeoutMilliseconds, userFactsPromise);\r\n\t\treturn timeoutPromise.then(() => this.userFacts).catch(() => {\r\n\t\t\tif (!this.userFacts || this.userFacts.length <= 0) {\r\n\t\t\t\tthis.loadUserFacts(AssetsProvider.get().getCachedUserFacts());\r\n\t\t\t}\r\n\r\n\t\t\treturn this.userFacts;\r\n\t\t}).catch(() => this.userFacts);\r\n\t}\r\n\r\n\tpublic getUserFact(userFactName: string) {\r\n\t\tlet userFact = this.nameAndUserFactMap[userFactName];\r\n\t\tif (userFact || this.nameAndUserFactMap.hasOwnProperty(userFactName)) {\r\n\t\t\treturn userFact;\r\n\t\t}\r\n\r\n\t\tuserFact = this.nameAndUserFactMap[userFactName] = getLocalUserFact(userFactName);\r\n\t\treturn userFact;\r\n\t}\r\n\r\n\tprivate loadUserFacts(response: Api.IUserFact[]) {\r\n\t\tif (response) {\r\n\t\t\tthis.userFacts = response || [];\r\n\t\t\tthis.userFacts.map((userFact) => {\r\n\t\t\t\tthis.nameAndUserFactMap[userFact.userFactName] = userFact;\r\n\t\t\t});\r\n\t\t\tthis.loadAsyncTriggered = true;\r\n\t\t\tthis.logUserFactInfo(this.userFacts);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate logUserFactInfo(userFacts: Api.IUserFact[]) {\r\n\t\tif (!userFacts || userFacts.length <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst tulipsIngestionTimeInterval = getDynamicSetting(SettingKey.tulipsIngestionTimeInterval, TULIPS_INGESTION_TIME);\r\n\t\tif (tulipsIngestionTimeInterval <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet userFactProperties: Logging.ICustomProperties;\r\n\t\ttry {\r\n\t\t\tconst nowDate = Date.now();\r\n\t\t\tconst isExpired = (rawItemDate: string): boolean => {\r\n\t\t\t\tconst itemDate = Date.parse(rawItemDate);\r\n\t\t\t\treturn !isNaN(itemDate) ? nowDate - itemDate > tulipsIngestionTimeInterval : true;\r\n\t\t\t};\r\n\r\n\t\t\tconst factInfo = {\r\n\t\t\t\tCount: userFacts.length,\r\n\t\t\t\tRefreshTime: tulipsIngestionTimeInterval,\r\n\t\t\t\tIngestionTime: userFacts[0].clientIngestionDateTime,\r\n\t\t\t\tSourcesExpired: userFacts.filter(userFact => userFact && isExpired(userFact.sourceDateTime)).length || undefined,\r\n\t\t\t\tStoragesExpired: userFacts.filter(userFact => userFact && isExpired(userFact.storageDateTime)).length || undefined,\r\n\t\t\t\tIngestionsExpired: userFacts.filter(userFact => userFact && isExpired(userFact.clientIngestionDateTime)).length || undefined,\r\n\t\t\t};\r\n\r\n\t\t\tuserFactProperties = {\r\n\t\t\t\tMessage: \"UserFacts\",\r\n\t\t\t\tData: JSON.stringify(factInfo),\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tuserFactProperties = {\r\n\t\t\t\tErrorMessage: \"Error getting UserFact info\",\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tLogging.getLogger().logEvent(\r\n\t\t\tLogging.EventIds.UserFacts.Provider.Info.VALUE,\r\n\t\t\tLogging.LogLevel.Info,\r\n\t\t\tuserFactProperties);\r\n\t}\r\n}\r\n","import * as Logging from \"../Logging/Logging\";\r\nimport { isNOU, guid } from \"@ms-ofb/officefloodgatecore/dist/src/Utils\";\r\nimport \"../Polyfills/Fetch\";\r\nimport { TargetedMessagingTransport } from \"../TargetedMessaging/TargetedMessagingTransport\";\r\n\r\nexport class DynamicContentTransport extends TargetedMessagingTransport {\r\n\tpublic requestId: string;\r\n\tprivate simpleRequestEnabled: boolean = false;\r\n\r\n\tconstructor(simpleRequestEnabled?: boolean) {\r\n\t\tsuper();\r\n\r\n\t\t// Default to use the normal request\r\n\t\tthis.simpleRequestEnabled = simpleRequestEnabled ?? false;\r\n\t}\r\n\r\n\tpublic postRequestWithRetry(requestUrl: string, body: string, retry: number, timeout: number): Promise<Response> {\r\n\t\tconst thisDynamicContentTransport = this;\r\n\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\tthisDynamicContentTransport.sendPostRequest(requestUrl, body, undefined, true, timeout)\r\n\t\t\t.then(resolve)\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tLogging.getLogger().logEvent(\r\n\t\t\t\t\tLogging.EventIds.DYNAMICTRANSPORT_POST_ERROR,\r\n\t\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tErrorMessage: error.toString(),\r\n\t\t\t\t\t\tTimeMilliseconds: timeout,\r\n\t\t\t\t\t\tCount: retry,\r\n\t\t\t\t\t\tCorrelationId: thisDynamicContentTransport.requestId,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif (retry <= 1) {\r\n\t\t\t\t\treturn reject(error);\r\n\t\t\t\t}\r\n\t\t\t\tthisDynamicContentTransport.postRequestWithRetry(requestUrl, body, retry - 1, timeout)\r\n\t\t\t\t.then(resolve)\r\n\t\t\t\t.catch(reject);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tprotected createHeaders(token?: string): Headers {\r\n\t\tconst headers: Headers = typeof Headers !== \"undefined\" && new Headers();\r\n\r\n\t\tif (headers) {\r\n\t\t\t// Create header based on the request\r\n\t\t\tif (this.simpleRequestEnabled) {\r\n\t\t\t\tthis.createSimpleHeaders(headers);\r\n\t\t\t} else {\r\n\t\t\t\tthis.createNormalHeaders(headers);\r\n\t\t\t}\r\n\r\n\t\t\t// Governance Service doesn't need to use token for now\r\n\t\t\tif (!isNOU(token)) {\r\n\t\t\t\theaders.append(\"Authorization\", \"Bearer \" + token);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate createNormalHeaders(headers: Headers) {\r\n\t\tthis.requestId = guid();\r\n\t\theaders.append(\"X-Request-ID\", this.requestId);\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t}\r\n\r\n\tprivate createSimpleHeaders(headers: Headers) {\r\n\t\theaders.append(\"Content-Type\", \"text/plain\");\r\n\t}\r\n}\r\n","import * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { Configuration } from \"../Configuration/Configuration\";\r\nimport * as Constants from \"../Constants\";\r\nimport { Utils } from \"@ms-ofb/officefloodgatecore\";\r\nimport * as Logging from \"../Logging/Logging\";\r\nimport { DynamicContentTransport } from \"../DynamicContent/DynamicContentTransport\";\r\nimport { IActionPayload, IPersonalizerClient, EndUserActions, SupportedOverrides, AutoDismissTimes, IPersonalizerRewardResponse }\r\nfrom \"@ms-ofb/officefloodgatecore/dist/src/Api/IPersonalizerClient\";\r\nimport { GovernedChannelType } from \"@ms-ofb/officefloodgatecore/dist/src/GovernedChannel\";\r\n\r\nconst govServiceIntReward: string = \"https://onessppe.microsoft.com/api/v1.0/Reward\";\r\nconst govServiceProdReward: string = \"https://oness.microsoft.com/api/v1.0/Reward\";\r\n\r\ninterface IPersonalizerSurveyInformation {\r\n\t// variables to track the user's action and personalizer service recommendation\r\n\teventId: string; // Unique ID variable to match rank and reward\r\n\trecommendedAutoDismissValue: Constants.AutoDismissValues;\r\n\tuserAction: EndUserActions | undefined;\r\n}\r\n\r\nexport class PersonalizerClient implements IPersonalizerClient {\r\n\r\n\tpublic dynamicTransport: DynamicContentTransport;\r\n\tprivate personalizerEnabled: boolean;\r\n\r\n\t// --- State Data ---------------\r\n\t// -------\r\n\r\n\t// map of surveyId to IPersonalizerSurveyInformation instance.\r\n\tprivate personalizerSurveyInformationMap: {\r\n\t\t[surveyId: string]: IPersonalizerSurveyInformation,\r\n\t};\r\n\r\n\t// -------\r\n\t// --- State Data (end) ---------------\r\n\r\n\tprivate isProduction: boolean;\r\n\tprivate retryLimit: number;\r\n\tprivate timeout: number;\r\n\tprivate requestUrl: string;\r\n\r\n\tconstructor() {\r\n\t\t// Check if personalizer is enabled, otherwise set personalizerEnabled to false and do nothing (log?)\r\n\t\t// set enabled to false, this we will check in setup.\r\n\t\tthis.personalizerEnabled = false;\r\n\t\tthis.dynamicTransport = new DynamicContentTransport();\r\n\t\tthis.personalizerSurveyInformationMap = {};\r\n\t}\r\n\r\n\tpublic setup(configuration: Configuration): void {\r\n\t\tthis.personalizerEnabled = configuration.getFloodgateInitOptions().governanceServiceEnabled &&\r\n\t\t\tconfiguration.getFloodgateInitOptions().personalizerEnabled;\r\n\r\n\t\tif (this.personalizerEnabled) {\r\n\t\t\tthis.isProduction = configuration.getCommonInitOptions().environment === Constants.Environment.Production;\r\n\t\t\tthis.retryLimit = configuration.getFloodgateInitOptions().governanceServiceConfig.retry;\r\n\t\t\tthis.timeout = configuration.getFloodgateInitOptions().governanceServiceConfig.timeout;\r\n\t\t\tthis.requestUrl = this.isProduction ? govServiceProdReward : govServiceIntReward;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setEventIdAndOverrideValueForSurveyId(eventId: string,\r\n\t\tconfigType: SupportedOverrides,\r\n\t\tconfigValue: string,\r\n\t\tsurveyId: string,\r\n\t\tcampaignId: string): boolean {\r\n\r\n\t\tif (!this.personalizerEnabled || Utils.isNOU(eventId) || Utils.isNOU(surveyId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (configType !== SupportedOverrides.AutoDismissTime) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst newRecommendedAutoDismissValue = this.validateAndGetAutoDismissTime(configValue);\r\n\r\n\t\tif (Utils.isNOU(newRecommendedAutoDismissValue)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.personalizerSurveyInformationMap[surveyId] = {\r\n\t\t\teventId: eventId,\r\n\t\t\trecommendedAutoDismissValue: newRecommendedAutoDismissValue,\r\n\t\t\tuserAction: undefined,\r\n\t\t};\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic getOverrideValueForSurveyId(configType: SupportedOverrides, surveyId: string): Constants.AutoDismissValues | undefined {\r\n\r\n\t\tif (!this.personalizerEnabled || Utils.isNOU(surveyId) ||\r\n\t\t\t!this.infoExistsForSurveyId(surveyId) || configType !== SupportedOverrides.AutoDismissTime) {\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this.personalizerSurveyInformationMap[surveyId].recommendedAutoDismissValue;\r\n\t}\r\n\r\n\tpublic async logUserActionForSurveyAsync(userAction: EndUserActions,\r\n\t\tsurveyId: string,\r\n\t\tcampaignId: string): Promise<IPersonalizerRewardResponse> {\r\n\r\n\t\tif (!Utils.isNOU(userAction) && this.infoExistsForSurveyId(surveyId)) {\r\n\t\t\tthis.personalizerSurveyInformationMap[surveyId].userAction = userAction;\r\n\t\t}\r\n\r\n\t\tconst responseResult: IPersonalizerRewardResponse = {\r\n\t\t\terror: false,\r\n\t\t};\r\n\r\n\t\tconst actionPayload = this.getValidatedActionPayloadForSurveyId(surveyId);\r\n\r\n\t\t// validate the actionPayload. Log and early return with error if it fails.\r\n\t\tif (Utils.isNOU(actionPayload)) {\r\n\t\t\tresponseResult.error = true;\r\n\t\t\tresponseResult.errorMessage = \"Action Payload validation failed.\";\r\n\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.PERSONALIZER_CLIENTFAILURE,\r\n\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t{\r\n\t\t\t\t\tMessage: \"(PersonalizerClient.logUserActionForSurveyAsync) Error logging personalizer user action: \" + responseResult.errorMessage,\r\n\t\t\t\t\tCampaignId: campaignId,\r\n\t\t\t\t\tSurveyId: surveyId,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\treturn responseResult;\r\n\t\t}\r\n\r\n\t\tlet response: Response;\r\n\r\n\t\ttry {\r\n\t\t\tconst timeBefore = performance.now();\r\n\t\t\tresponse = await this.dynamicTransport.postRequestWithRetry(this.requestUrl,\r\n\t\t\t\tJSON.stringify(actionPayload),\r\n\t\t\t\tthis.retryLimit,\r\n\t\t\t\tthis.timeout);\r\n\r\n\t\t\tconst timeAfter = performance.now();\r\n\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.PERSONALIZER_SERVICEREWARDRESULT,\r\n\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t{\r\n\t\t\t\t\tTimeMilliseconds: timeAfter - timeBefore,\r\n\t\t\t\t\tHttpStatusCode: response.status,\r\n\t\t\t\t\tHttpStatusText: response.statusText,\r\n\t\t\t\t\tAdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n\t\t\t\t\tCorrelationId: this.dynamicTransport.requestId,\r\n\t\t\t\t\tCampaignId: campaignId,\r\n\t\t\t\t\tPersonalizerUserAction: actionPayload.UserAction,\r\n\t\t\t\t\tPersonalizerEventId: actionPayload.EventId,\r\n\t\t\t\t\tSurveyId: surveyId,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\t// Error on service side.\r\n\t\t\t\tresponseResult.error = true;\r\n\t\t\t\tresponseResult.errorMessage = `Server Error, status: ${response.status}, status text: ${response.statusText}`;\r\n\t\t\t}\r\n\r\n\t\t\treturn responseResult;\r\n\r\n\t\t} catch (error) {\r\n\t\t\tresponseResult.error = true;\r\n\t\t\tresponseResult.errorMessage = `Error: ${error.toString()}, Error stack: ${error.stack}`;\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.PERSONALIZER_CLIENTFAILURE,\r\n\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t{\r\n\t\t\t\t\tMessage: \"(PersonalizerClient.logUserActionForSurveyAsync) Error logging personalizer user action: \" + responseResult.errorMessage,\r\n\t\t\t\t\tCampaignId: campaignId,\r\n\t\t\t\t\tSurveyId: surveyId,\r\n\t\t\t\t\tPersonalizerUserAction: actionPayload.UserAction,\r\n\t\t\t\t\tPersonalizerEventId: actionPayload.EventId,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\treturn responseResult;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getEventIdForSurveyId(surveyId: string): string | undefined {\r\n\t\tif (!this.infoExistsForSurveyId(surveyId)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this.personalizerSurveyInformationMap[surveyId].eventId;\r\n\t}\r\n\r\n\tpublic isEnabled(surveyType: Api.ISurvey.Type, launcherType: string, governedChannelType: GovernedChannelType): boolean {\r\n\t\t// Only enabled for:\r\n\t\t// - FPS surveys \r\n\t\t// - No 'customervoice' launcher type.\r\n\t\t// - GovernedChannelType: Standard channel\r\n\r\n\t\tif (surveyType !== Api.ISurvey.Type.Fps\r\n\t\t\t|| launcherType === Constants.customerVoiceLauncherType\r\n\t\t\t|| launcherType === \"customux\"\r\n\t\t\t|| governedChannelType !== GovernedChannelType.Standard) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn this.personalizerEnabled;\r\n\t}\r\n\r\n\tprivate getValidatedActionPayloadForSurveyId(surveyId: string): IActionPayload | undefined {\r\n\r\n\t\tif (!this.infoExistsForSurveyId(surveyId)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst surveyPersonalizerInfo = this.personalizerSurveyInformationMap[surveyId];\r\n\r\n\t\tif (Utils.isNOU(surveyPersonalizerInfo.eventId)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (Utils.isNOU(surveyPersonalizerInfo.userAction)\r\n\t\t\t|| (surveyPersonalizerInfo.userAction !== EndUserActions.Accept\r\n\t\t\t\t\t&& surveyPersonalizerInfo.userAction !== EndUserActions.Cancel\r\n\t\t\t\t\t&& surveyPersonalizerInfo.userAction !== EndUserActions.Ignore)) {\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tUserAction: surveyPersonalizerInfo.userAction,\r\n\t\t\tEventId: surveyPersonalizerInfo.eventId,\r\n\t\t};\r\n\t}\r\n\r\n\tprivate validateAndGetAutoDismissTime(configValue: string): undefined | Constants.AutoDismissValues {\r\n\r\n\t\tif (Utils.isNOU(configValue) || typeof(configValue) !== \"string\") {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// value should be not null, not undefined; a string that parses to an int; \r\n\t\t// an int that is in the AutoDismissTimes enum and can be mapped to the AutoDismissValues enum.\r\n\r\n\t\tconst parsedConfigValue = parseInt(configValue, 10);\r\n\r\n\t\tswitch (parsedConfigValue) {\r\n\t\t\tcase AutoDismissTimes.NoAutoDismiss:\r\n\t\t\t\treturn Constants.AutoDismissValues.NoAutoDismiss;\r\n\t\t\tcase AutoDismissTimes.SevenSeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.SevenSeconds;\r\n\t\t\tcase AutoDismissTimes.FourteenSeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.FourteenSeconds;\r\n\t\t\tcase AutoDismissTimes.TwentyOneSeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.TwentyOneSeconds;\r\n\t\t\tcase AutoDismissTimes.TwentyEightSeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.TwentyEightSeconds;\r\n\t\t\tcase AutoDismissTimes.SixtySeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.SixtySeconds;\r\n\t\t\tcase AutoDismissTimes.NinetySeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.NinetySeconds;\r\n\t\t\tcase AutoDismissTimes.OneHundredAndTwentySeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.OneHundredAndTwentySeconds;\r\n\t\t\tcase AutoDismissTimes.OneHundredAndFiftySeconds:\r\n\t\t\t\treturn Constants.AutoDismissValues.OneHundredAndFiftySeconds;\r\n\t\t\tdefault:\r\n\t\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate infoExistsForSurveyId(surveyId: string): boolean {\r\n\t\tif (Utils.isNOU(surveyId)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn !Utils.isNOU(this.personalizerSurveyInformationMap[surveyId]);\r\n\t}\r\n\r\n\tprivate buildConfigTelemetryString() {\r\n\t\tconst objectTelemetry = {\r\n\t\t\tretry: this.retryLimit,\r\n\t\t\ttimeout: this.timeout,\r\n\t\t};\r\n\t\treturn JSON.stringify(objectTelemetry);\r\n\t}\r\n}\r\n\r\nconst personalizerClient: PersonalizerClient = new PersonalizerClient();\r\n\r\n/**\r\n * Get the current Personalizer Client\r\n */\r\nexport function get(): PersonalizerClient {\r\n\treturn personalizerClient;\r\n}\r\n","import * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport * as Constants from \"./../Constants\";\r\nimport * as Logging from \"../Logging/Logging\";\r\nimport { DynamicContentTransport } from \"../DynamicContent/DynamicContentTransport\";\r\nimport { Configuration } from \"../Configuration/Configuration\";\r\nimport { isDate, isNOU, isNumber, isValidUserId, stringToDate } from \"@ms-ofb/officefloodgatecore/dist/src/Utils\";\r\nimport { IGovernanceClientInfo, IGovernanceSurveyInfo, IGovernanceSurveyRequest, IGovernanceSurveyResponse, IGovernanceServiceResult }\r\nfrom \"@ms-ofb/officefloodgatecore/dist/src/Api/IGovernanceServiceClient\";\r\nimport { SupportedOverrides }\r\nfrom \"@ms-ofb/officefloodgatecore/dist/src/Api/IPersonalizerClient\";\r\nimport { GovernanceServiceClientState, GovernanceServiceHostPlatform, GovernanceServiceSurveyPlatform, GovernanceServiceSurveyType }\r\nfrom \"@ms-ofb/officefloodgatecore/dist/src/Api/IGovernanceServiceClient\";\r\nimport { GovernedChannelType } from \"@ms-ofb/officefloodgatecore/dist/src/GovernedChannel\";\r\nimport * as PersonalizerClient from \"../Personalizer/PersonalizerClient\";\r\nimport { guid } from \"../Utils\";\r\n\r\nconst govServiceInt: string = \"https://onessppe.microsoft.com/api/v1.0/UserSurvey\";\r\nconst govServiceProd: string = \"https://oness.microsoft.com/api/v1.0/UserSurvey\";\r\n\r\nexport class GovernanceServiceClient implements Api.IGovernanceServiceClient {\r\n\r\n\t// making these data public so they can be access for testing\r\n\tpublic dynamicTransport: DynamicContentTransport;\r\n\tpublic personalizerClient: Api.IPersonalizerClient;\r\n\tpublic clientState: GovernanceServiceClientState;\r\n\r\n\t// Configuration data\r\n\tprivate governanceServiceEnabled: boolean;\r\n\tprivate forceServicelessSurveyDisplay: boolean;\r\n\tprivate retryLimit: number;\r\n\tprivate timeout: number;\r\n\tprivate simpleRequestEnabled: boolean;\r\n\tprivate isProduction: boolean;\r\n\r\n\t// client info\r\n\tprivate clientInfo: IGovernanceClientInfo;\r\n\tprivate userId: string;\r\n\r\n\t// survey data\r\n\tprivate lastSurveyFailedSync: IGovernanceSurveyInfo;\r\n\r\n\tconstructor() {\r\n\t\tthis.personalizerClient = PersonalizerClient.get();\r\n\t\tthis.governanceServiceEnabled = false;\r\n\t\tthis.forceServicelessSurveyDisplay = false;\r\n\t\tthis.lastSurveyFailedSync = undefined;\r\n\t\tthis.clientState = GovernanceServiceClientState.Disabled;\r\n\t}\r\n\r\n\tpublic setup(configuration: Configuration) {\r\n\t\tthis.governanceServiceEnabled = configuration.getFloodgateInitOptions().governanceServiceEnabled;\r\n\r\n\t\tif (this.governanceServiceEnabled) {\r\n\t\t\t// setup config and client info\r\n\t\t\tthis.clientInfo = {\r\n\t\t\t\tapplicationId: configuration.getCommonInitOptions().appId.toString(),\r\n\t\t\t\tsessionId: configuration.getCommonInitOptions().sessionId,\r\n\t\t\t\tversion: configuration.getCommonInitOptions().build,\r\n\t\t\t\tsurveyPlatform: GovernanceServiceSurveyPlatform.Floodgate,\r\n\t\t\t\thostPlatform: GovernanceServiceHostPlatform.Web,\r\n\t\t\t\ttenantId: configuration.getCommonInitOptions().telemetryGroup.tenantId,\r\n\t\t\t\tdeviceId: configuration.getCommonInitOptions().telemetryGroup.deviceId,\r\n\t\t\t\taudience: configuration.getCommonInitOptions().telemetryGroup.audience,\r\n\t\t\t};\r\n\t\t\tthis.userId = configuration.getCommonInitOptions().telemetryGroup.loggableUserId;\r\n\r\n\t\t\t// Ensure all the client info is needed\r\n\t\t\tif (isNOU(this.clientInfo.sessionId)) {\r\n\t\t\t\tthis.clientState = GovernanceServiceClientState.InitializationFailed;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (isNOU(this.clientInfo.version)) {\r\n\t\t\t\tthis.clientState = GovernanceServiceClientState.InitializationFailed;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isValidUserId(this.userId)) {\r\n\t\t\t\tthis.clientState = GovernanceServiceClientState.InitializationFailed;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Setup governance service config parameters\r\n\t\t\tthis.forceServicelessSurveyDisplay = configuration.getFloodgateInitOptions().governanceServiceConfig.forceServicelessSurveyDisplay;\r\n\t\t\tthis.retryLimit = configuration.getFloodgateInitOptions().governanceServiceConfig.retry;\r\n\t\t\tthis.timeout = configuration.getFloodgateInitOptions().governanceServiceConfig.timeout;\r\n\t\t\tthis.simpleRequestEnabled = configuration.getFloodgateInitOptions().governanceServiceConfig.simpleRequestEnabled;\r\n\t\t\tthis.isProduction = configuration.getCommonInitOptions().environment === Constants.Environment.Production;\r\n\t\t\tthis.clientState = GovernanceServiceClientState.Enabled;\r\n\t\t\tthis.dynamicTransport = new DynamicContentTransport(this.simpleRequestEnabled);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isEnabled(governedChannelType: GovernedChannelType): boolean {\r\n\t\treturn this.clientState === GovernanceServiceClientState.Enabled &&\r\n\t\t\t\tthis.governanceServiceEnabled &&\r\n\t\t\t\tgovernedChannelType === GovernedChannelType.Standard;\r\n\t}\r\n\r\n\tpublic shouldForceDisplay(): boolean {\r\n\t\treturn this.forceServicelessSurveyDisplay;\r\n\t}\r\n\r\n\tpublic getClientInfo(): IGovernanceClientInfo {\r\n\t\treturn this.clientInfo;\r\n\t}\r\n\r\n\tpublic getClientState(): GovernanceServiceClientState {\r\n\t\treturn this.clientState;\r\n\t}\r\n\r\n\tpublic getLastSurveyFailedSync(): IGovernanceSurveyInfo {\r\n\t\treturn this.lastSurveyFailedSync;\r\n\t}\r\n\r\n\tpublic async checkGovernancePermitAsync(\r\n\t\tsurvey: Api.ISurvey,\r\n\t\tsurveyLevelCooldown: number,\r\n\t\tuserLevelCooldown: number,\r\n\t\tchannel: GovernedChannelType): Promise<IGovernanceServiceResult> {\r\n\r\n\t\tconst requestUrl: string = (this.isProduction ? govServiceProd : govServiceInt) + (this.simpleRequestEnabled ? \"/SimpleRequest\" : \"\");\r\n\t\tconst surveyInfo: IGovernanceSurveyInfo = this.buildSurveyInfo(survey, surveyLevelCooldown, channel);\r\n\t\tconst body: string = this.buildBodyRequest(surveyInfo, userLevelCooldown);\r\n\t\tconst serviceResult: IGovernanceServiceResult = {\r\n\t\t\tpermission: false,\r\n\t\t\terror: false,\r\n\t\t};\r\n\r\n\t\tlet response: Response;\r\n\t\tlet serviceCallTime: number;\r\n\r\n\t\ttry {\r\n\t\t\tconst timeBefore = performance.now();\r\n\t\t\tresponse = await this.dynamicTransport.postRequestWithRetry(requestUrl, body, this.retryLimit, this.timeout);\r\n\t\t\tserviceCallTime = performance.now() - timeBefore;\r\n\r\n\t\t\tlet responseText: string | undefined;\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthis.lastSurveyFailedSync = surveyInfo;\r\n\t\t\t\tserviceResult.errorMessage = `Server Error, status: ${response.status}, status text: ${response.statusText}`;\r\n\t\t\t\tserviceResult.error = true;\r\n\t\t\t\t// Log the successful post criteria with time\r\n\t\t\t\tLogging.getLogger().logEvent(Logging.EventIds.GOVERNANCE_SERVICERESULT,\r\n\t\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tTimeMilliseconds: serviceCallTime,\r\n\t\t\t\t\t\tHttpStatusCode: response.status,\r\n\t\t\t\t\t\tHttpStatusText: response.statusText,\r\n\t\t\t\t\t\tAdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n\t\t\t\t\t\tCorrelationId: this.dynamicTransport.requestId,\r\n\t\t\t\t\t\tGovernanceRequestBody: body,\r\n\t\t\t\t\t\tGovernanceResponseText: responseText,\r\n\t\t\t\t\t\tCampaignId: survey.getCampaignId(),\r\n\t\t\t\t\t\tSurveyId: survey.getSurveyInfo().getId(),\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn serviceResult;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the response text\r\n\t\t\tresponseText = await response.text();\r\n\r\n\t\t\t// Log the successful post criteria with time\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.GOVERNANCE_SERVICERESULT,\r\n\t\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t\t{\r\n\t\t\t\t\tTimeMilliseconds: serviceCallTime,\r\n\t\t\t\t\tHttpStatusCode: response.status,\r\n\t\t\t\t\tHttpStatusText: response.statusText,\r\n\t\t\t\t\tAdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n\t\t\t\t\tCorrelationId: this.dynamicTransport.requestId,\r\n\t\t\t\t\tGovernanceRequestBody: body,\r\n\t\t\t\t\tGovernanceResponseText: responseText,\r\n\t\t\t\t\tCampaignId: survey.getCampaignId(),\r\n\t\t\t\t\tSurveyId: survey.getSurveyInfo().getId(),\r\n\t\t\t});\r\n\r\n\t\t\t// Parse the response\r\n\t\t\tconst jsonResponse: IGovernanceSurveyResponse = JSON.parse(responseText);\r\n\r\n\t\t\t// Reparsing the date to correct ISO format\r\n\t\t\tjsonResponse.lastTriggerSurveyTime = stringToDate(new Date(jsonResponse.lastTriggerSurveyTime).toISOString());\r\n\r\n\t\t\t// Check the response integrity\r\n\t\t\tif (!isNumber(jsonResponse.timeUntilNextSurveyAllowed) ||\r\n\t\t\t\t!isDate(jsonResponse.lastTriggerSurveyTime)) {\r\n\t\t\t\t// Throw error with the response\r\n\t\t\t\tserviceResult.errorMessage = \"Service Response is not formatted correctly: \" + responseText;\r\n\t\t\t\tserviceResult.error = true;\r\n\t\t\t\tthis.lastSurveyFailedSync = surveyInfo;\r\n\t\t\t} else {\r\n\t\t\t\t// Check if this is permitted\r\n\t\t\t\tif (jsonResponse.timeUntilNextSurveyAllowed === 0) {\r\n\t\t\t\t\tserviceResult.permission = true;\r\n\r\n\t\t\t\t\t// Set the personalizer data for AutoDismiss recommendation override (if enabled)\r\n\t\t\t\t\tif (this.personalizerClient.isEnabled(survey.getType(), survey.getLauncherType(), survey.getSurveyInfo().getGovernedChannelType())) {\r\n\t\t\t\t\t\tthis.personalizerClient.setEventIdAndOverrideValueForSurveyId(\r\n\t\t\t\t\t\t\tthis.dynamicTransport.requestId,\r\n\t\t\t\t\t\t\tSupportedOverrides.AutoDismissTime,\r\n\t\t\t\t\t\t\tjsonResponse.actionId,\r\n\t\t\t\t\t\t\tsurvey.getSurveyInfo().getId(),\r\n\t\t\t\t\t\t\tsurvey.getCampaignId());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Save the response trigger time\r\n\t\t\t\tserviceResult.lastTriggerSurvey = jsonResponse;\r\n\r\n\t\t\t\t// Clear the last failure\r\n\t\t\t\tthis.lastSurveyFailedSync = undefined;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tthis.lastSurveyFailedSync = surveyInfo;\r\n\t\t\tLogging.getLogger().logEvent(Logging.EventIds.GOVERNANCE_SERVICEFAILURE,\r\n\t\t\t\tLogging.LogLevel.Error,\r\n\t\t\t\t{\r\n\t\t\t\t\tErrorMessage: e.toString(),\r\n\t\t\t\t\tAdditionalSurveyInfo: this.buildConfigTelemetryString(),\r\n\t\t\t\t\tCorrelationId: this.dynamicTransport.requestId,\r\n\t\t\t\t\tHttpStatusCode: response?.status,\r\n\t\t\t\t\tHttpStatusText: response?.statusText,\r\n\t\t\t\t\tGovernanceRequestBody: body,\r\n\t\t\t});\r\n\t\t\tserviceResult.error = true;\r\n\t\t\tserviceResult.errorMessage = `Error: ${e.toString()}, Error stack: ${e.stack}`;\r\n\t\t}\r\n\r\n\t\treturn serviceResult;\r\n\t}\r\n\r\n\tprivate buildSurveyInfo(survey: Api.ISurvey, surveyLevelCooldown: number, channel: number): IGovernanceSurveyInfo {\r\n\t\tconst stringType = Api.ISurvey.Type[survey.getType()];\r\n\t\tconst surveyType: number = GovernanceServiceSurveyType[stringType as keyof typeof GovernanceServiceSurveyType];\r\n\t\tconst newDate = new Date();\r\n\t\tconst isPersonalizerEnabled = this.personalizerClient.isEnabled(survey.getType(),\r\n\t\t\tsurvey.getLauncherType(),\r\n\t\t\tsurvey.getSurveyInfo().getGovernedChannelType());\r\n\t\treturn {\r\n\t\t\tsurveyId: survey.getCampaignId(),\r\n\t\t\tsurveyTriggerTime: newDate,\r\n\t\t\tsurveyType: surveyType,\r\n\t\t\tsurveyLevelCooldown: surveyLevelCooldown,\r\n\t\t\tsurveyChannel: channel,\r\n\t\t\tlocalOffsetTime: newDate.getTimezoneOffset(),\r\n\t\t\tpersonalizerEnabled: isPersonalizerEnabled,\r\n\t\t};\r\n\t}\r\n\r\n\tprivate buildBodyRequest(surveyInfo: IGovernanceSurveyInfo, userLevelCooldown: number) {\r\n\t\tconst result: IGovernanceSurveyRequest = {\r\n\t\t\tuserId: this.userId,\r\n\t\t\tuserLevelCooldown: userLevelCooldown,\r\n\t\t\tsurvey: surveyInfo,\r\n\t\t\tclient: this.clientInfo,\r\n\t\t};\r\n\r\n\t\tif (this.simpleRequestEnabled) {\r\n\t\t\tthis.dynamicTransport.requestId = guid();\r\n\t\t\tresult.requestId = this.dynamicTransport.requestId;\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(result);\r\n\t}\r\n\r\n\tprivate buildConfigTelemetryString() {\r\n\t\tconst objectTelemetry = {\r\n\t\t\tretry: this.retryLimit,\r\n\t\t\ttimeout: this.timeout,\r\n\t\t\tsimpleRequestEnabled: this.simpleRequestEnabled,\r\n\t\t};\r\n\t\treturn JSON.stringify(objectTelemetry);\r\n\t}\r\n}\r\n\r\nconst governanceServiceClient: GovernanceServiceClient = new GovernanceServiceClient();\r\n\r\n/**\r\n * Get the current Governance Service Client\r\n */\r\nexport function get(): GovernanceServiceClient {\r\n\treturn governanceServiceClient;\r\n}\r\n","/**\r\n * CommonFloodgate.ts\r\n *\r\n * Common functionalities shared by App_Floodgate and App_Floodgate_Bare modules.\r\n */\r\n\r\nimport * as Configuration from \"./Configuration/Configuration\";\r\nimport * as Window from \"./Window/Window\";\r\nimport AdaptiveSurveyLauncherFactory from \"./FloodgateCore/AdaptiveSurveyLauncherFactory\";\r\nimport TransporterFactory from \"./FloodgateCore/TransporterFactory\";\r\nimport FloodgateEnvironmentProvider from \"./FloodgateCore/FloodgateEnvironmentProvider\";\r\nimport FloodgateStorageProvider from \"./FloodgateCore/FloodgateStorageProvider\";\r\nimport FloodgateStringProvider from \"./FloodgateCore/FloodgateStringProvider\";\r\nimport { TargetedMessagingCampaignDefinitionProvider } from\r\n\t\"./TargetedMessaging/TargetedMessagingCampaignDefinitionProvider\";\r\nimport { UserFactsProvider } from \"./TargetedMessaging/UserFactsProvider\";\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { FloodgateEngine } from \"@ms-ofb/officefloodgatecore\";\r\nimport { FilterValidCampaignDefinitions } from\r\n\t\"@ms-ofb/officefloodgatecore/dist/src/Campaign/CampaignDefinitionProvider\";\r\nimport { IFloodgateStorageProvider } from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { TelemetryEvent } from \"@ms-ofb/officefloodgatecore/dist/src/Constants\";\r\n\r\nimport { getDynamicSetting, SettingKey } from \"./Configuration/DynamicConfiguration\";\r\n\r\nimport { Governor } from \"@ms-ofb/officefloodgatecore/dist/src/Governor\";\r\nimport { GovernedChannelType } from \"@ms-ofb/officefloodgatecore/dist/src/GovernedChannel\";\r\nimport SurveyActivityListener from \"@ms-ofb/officefloodgatecore/dist/src/SurveyActivityListener\";\r\nimport * as GovernanceServiceClient from \"./GovernanceService/GovernanceServiceClient\";\r\nimport * as PersonalizerClient from \"./Personalizer/PersonalizerClient\";\r\n\r\n/**\r\n * Has floodgate been initialized\r\n */\r\nlet initialized: boolean = false;\r\nlet startCount: number = 0;\r\n\r\nlet engine: FloodgateEngine;\r\nlet engineStartPromise: Promise<any> = null;\r\nlet engineTmsProvider: TargetedMessagingCampaignDefinitionProvider = null;\r\nlet userFactsProvider: UserFactsProvider = null;\r\nlet stringProvider: Api.IFloodgateStringProvider;\r\n\r\nexport function initialize(): void {\r\n\tif (!FloodgateStorageProvider.isStorageAvailable()) {\r\n\t\tthrow new Error(\"window.localStorage is not available.\");\r\n\t}\r\n\r\n\tWindow.get().OfficeBrowserFeedback.floodgate = Window.get().OfficeBrowserFeedback.floodgate || {} as any;\r\n\r\n\tlet floodgateInitOptions = Window.get().OfficeBrowserFeedback.floodgate.initOptions;\r\n\tfloodgateInitOptions = floodgateInitOptions || {} as any;\r\n\r\n\t// Validate and copy campaign definitions to local storage\r\n\tif (floodgateInitOptions.campaignDefinitions !== undefined) {\r\n\t\tconst filteredResult = FilterValidCampaignDefinitions(floodgateInitOptions.campaignDefinitions);\r\n\r\n\t\tif (filteredResult.error) {\r\n\t\t\tthrow new Error(\"floodgate.initOptions.campaignDefinitions error: \" + filteredResult.error);\r\n\t\t}\r\n\r\n\t\t(new FloodgateStorageProvider()).write(\r\n\t\t\tIFloodgateStorageProvider.FileType.CampaignDefinitions,\r\n\t\t\tJSON.stringify(floodgateInitOptions.campaignDefinitions)\r\n\t\t);\r\n\t}\r\n\r\n\tconst configuration = Configuration.get();\r\n\r\n\tconfiguration.setFloodgateInitOptions(floodgateInitOptions);\r\n\tSurveyActivityListener.resetSessionActivity();\r\n\tPersonalizerClient.get().setup(configuration);\r\n\tGovernanceServiceClient.get().setup(configuration);\r\n\tinitialized = true;\r\n\r\n\tif (!configuration.getFloodgateInitOptions().surveyEnabled) {\r\n\t\tconst telemetryLogger = FloodgateEngine.getTelemetryLogger();\r\n\t\tif (telemetryLogger) {\r\n\t\t\ttelemetryLogger.log_Event(TelemetryEvent.Floodgate.Start.SurveysDisabled,\r\n\t\t\t\t{ Count: startCount, Message: \"Floodgate initialized with surveys disabled (surveyEnabled is false)\" });\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function setInitialized(initValue: boolean): void {\r\n\tinitialized = initValue;\r\n}\r\n\r\nexport function getInitialized(): boolean {\r\n\treturn initialized;\r\n}\r\n\r\nexport function setEngineStartPromise(startPromise: Promise<any>): any {\r\n\tengineStartPromise = startPromise;\r\n}\r\n\r\nexport function getEngineStartPromise(): Promise<any> {\r\n\treturn engineStartPromise;\r\n}\r\n\r\nexport function setStringProvider(provider: Api.IFloodgateStringProvider): void {\r\n\tstringProvider = provider;\r\n}\r\n\r\n/**\r\n * To support the multi-window scenario on web we need to initialize the engine on each resume.\r\n * Hence this separate method which does make() and start() together.\r\n */\r\nexport function startInternal(loadSynchronously: boolean, customEngine: FloodgateEngine = null): Promise<any> {\r\n\tif (engineStartPromise) {\r\n\t\treturn engineStartPromise;\r\n\t}\r\n\r\n\tstartCount++;\r\n\tconst startPromise = new Promise((resolve, reject) => {\r\n\t\tconst rejectAndLogError = (errorMessage: string, error?: Error) => {\r\n\t\t\tconst telemetryLogger = FloodgateEngine.getTelemetryLogger();\r\n\t\t\tif (telemetryLogger) {\r\n\t\t\t\ttelemetryLogger.log_Event(TelemetryEvent.Floodgate.Start.Failed,\r\n\t\t\t\t\t{ Count: startCount, ErrorMessage: errorMessage, ErrorDetails: error && error.stack });\r\n\t\t\t}\r\n\r\n\t\t\treject(errorMessage);\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst commonInitOptions = Configuration.get().getCommonInitOptions();\r\n\t\t\tif (!commonInitOptions) {\r\n\t\t\t\trejectAndLogError(\"Invalid floodgate common init options, state: \" + initialized);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet floodgateInitOptions = Configuration.get().getFloodgateInitOptions();\r\n\t\t\tif (!floodgateInitOptions) {\r\n\t\t\t\tconst telemetryLogger = FloodgateEngine.getTelemetryLogger();\r\n\t\t\t\tif (telemetryLogger) {\r\n\t\t\t\t\ttelemetryLogger.log_Event(TelemetryEvent.Floodgate.Start.Warning,\r\n\t\t\t\t\t\t{ Count: startCount, ErrorMessage: \"Invalid floodgate init options, state: \" + initialized });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tConfiguration.get().setFloodgateInitOptions({} as any);\r\n\t\t\t\tfloodgateInitOptions = Configuration.get().getFloodgateInitOptions();\r\n\t\t\t}\r\n\r\n\t\t\tif (!customEngine && !engineTmsProvider) {\r\n\t\t\t\t// AssetsProvider wraps auth callbacks which should not run every time we start()\r\n\t\t\t\tconst authTokenCallback = floodgateInitOptions && floodgateInitOptions.authTokenCallback;\r\n\t\t\t\tif (authTokenCallback) {\r\n\t\t\t\t\tengineTmsProvider = new TargetedMessagingCampaignDefinitionProvider();\r\n\t\t\t\t\tuserFactsProvider = new UserFactsProvider();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst currentTeachingCooldown = Governor.GetChannelCoolDown(GovernedChannelType.TeachingMessage);\r\n\t\t\tconst teachingCooldown = getDynamicSetting(SettingKey.teachingMessageCooldown, currentTeachingCooldown);\r\n\t\t\tGovernor.SetDefaultChannelCoolDown(GovernedChannelType.TeachingMessage, teachingCooldown);\r\n\r\n\t\t\tengine = customEngine || FloodgateEngine.make(\r\n\t\t\t\tcommonInitOptions.build || \"\",\r\n\t\t\t\tAdaptiveSurveyLauncherFactory.make(),\r\n\t\t\t\tfloodgateInitOptions.onSurveyActivatedCallback,\r\n\t\t\t\tnew FloodgateStorageProvider(),\r\n\t\t\t\tfloodgateInitOptions.settingStorageCallback,\r\n\t\t\t\tstringProvider ? stringProvider : new FloodgateStringProvider(),\r\n\t\t\t\tnew FloodgateEnvironmentProvider(),\r\n\t\t\t\tnew TransporterFactory(),\r\n\t\t\t\t[engineTmsProvider],\r\n\t\t\t\tuserFactsProvider,\r\n\t\t\t\tGovernanceServiceClient.get()\r\n\t\t\t);\r\n\r\n\t\t\tif (!engine) {\r\n\t\t\t\tsetEngineStartPromise(null);\r\n\t\t\t\trejectAndLogError(\"Failed to create floodgate engine\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// start subsequent invocations in sync mode\r\n\t\t\tconst shouldStartEngineInSync = loadSynchronously || startCount > 1;\r\n\t\t\tif (shouldStartEngineInSync) {\r\n\t\t\t\tengine.start();\r\n\t\t\t\tresolve();\r\n\t\t\t} else {\r\n\t\t\t\tconst enginePromise = engine.startAsync();\r\n\t\t\t\tif (!enginePromise) {\r\n\t\t\t\t\t// ideally this should never happen\r\n\t\t\t\t\tsetEngineStartPromise(null);\r\n\t\t\t\t\trejectAndLogError(\"Failed to get floodgate engine\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tenginePromise.then(\r\n\t\t\t\t\tfunction onFulfilled() {\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t).catch(\r\n\t\t\t\t\tfunction onRejected(startError: Error) {\r\n\t\t\t\t\t\tsetEngineStartPromise(null);\r\n\t\t\t\t\t\trejectAndLogError(\"Failed to start floodgate engine\", startError);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tsetEngineStartPromise(null);\r\n\t\t\trejectAndLogError(\"Failed to load floodgate engine: \" + (e && e.toString()), e);\r\n\t\t}\r\n\t});\r\n\r\n\tsetEngineStartPromise(startPromise);\r\n\r\n\t// reset on error\r\n\tstartPromise.catch((error) => {\r\n\t\tsetEngineStartPromise(null);\r\n\t});\r\n\r\n\treturn startPromise;\r\n}\r\n\r\nexport function start(loadSynchronously: boolean = false): Promise<any> {\r\n\treturn startInternal(loadSynchronously);\r\n}\r\n\r\n/**\r\n * A proxy for the engine.stop() method for consistency with the start() method.\r\n */\r\nexport function stop() {\r\n\tif (engine) {\r\n\t\tengine.stop();\r\n\t}\r\n\r\n\tsetEngineStartPromise(null);\r\n}\r\n\r\n/**\r\n * Get the engine object\r\n * @returns the engine object\r\n */\r\nexport function getEngine(): FloodgateEngine {\r\n\treturn engine;\r\n}\r\n\r\n/**\r\n * Reset the floodgate engine state. Used in unit tests.\r\n */\r\nexport function resetEngine() {\r\n\tstartCount = 0;\r\n\tengineStartPromise = null;\r\n\tengine = null;\r\n\tengineTmsProvider = null;\r\n\tuserFactsProvider = null;\r\n}\r\n\r\n/**\r\n * Reset the floodgate module. Used in unit tests.\r\n */\r\nexport function reset() {\r\n\tinitialized = false;\r\n\tresetEngine();\r\n}\r\n\r\nWindow.setFloodgateGetEngine(getEngine);\r\nWindow.setFloodgateStart(start);\r\nWindow.setFloodgateStop(stop);\r\n","/**\r\n * Implementation of IFloodgateTelemetryLogger for Web SDK\r\n */\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport * as Logging from \"../Logging/Logging\";\r\n\r\nexport default class IFloodgateTelemetryLogger implements Api.IFloodgateTelemetryLogger {\r\n\r\n\t/**\r\n\t * Log that a survey's trigger was met.\r\n\t * @param campaignId Id of the campaign the survey belongs to.\r\n\t * @param surveyId Id of the survey.\r\n\t * @param surveyType Type of the survey.\r\n\t * @param surveyActivityInfo The survey's activities' information such as names, counts, isAggregate and if the list is ordered.\r\n\t * @param additionalSurveyInfo additional survey info in a stringified json object:\r\n\t * \t\t- surveyLauncherType: LauncherType of the survey.\r\n\t * \t\t- channelType: The channel type of the survey's campaign.\r\n\t * \t\t- surveyPercentageNumerator: Percentage numerator of the survey's Campaign.\r\n\t * \t\t- surveyPercentageDenominator: Percentage denominator of the survey's Campaign.\r\n\t * \t\t- surveyNominationPeriodNumber: The Nomination Period of the survey's Campaign in seconds, -1 if not applicable.\r\n\t * \t\t- surveyCooldownPeriodNumber: The Cooldown Period of the survey's Campaign in seconds, -1 if not applicable.\r\n\t * \t\t- allCandidateCampaignDefinitionIDs: The list of campaign definition IDs that have corresponding surveys which are candidates.\r\n\t * \t\t- allCampaignDefinitionIDs: The list of all campaign definition IDs.\r\n\t */\r\n\tpublic log_TriggerMet(campaignId: string, surveyId: string, surveyType: Api.ISurvey.Type, surveyActivityInfo: string,\r\n\t\tadditionalSurveyInfo: string): void {\r\n\t\tLogging.getLogger().logEvent(Logging.EventIds.SURVEY_FLOODGATE_TRIGGERMET,\r\n\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t{\r\n\t\t\t\tCampaignId: campaignId,\r\n\t\t\t\tSurveyId: surveyId,\r\n\t\t\t\tSurveyType: surveyType,\r\n\t\t\t\tSurveyActivityInfo: surveyActivityInfo,\r\n\t\t\t\tAdditionalSurveyInfo : additionalSurveyInfo,\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Log that a user was selected(nominated) for a survey if it's not sampled\r\n\t * @param campaignId Id of the campaign the survey belongs to.\r\n\t * @param surveyId Id of the survey.\r\n\t * @param surveyType Type of the survey.\r\n\t * @param additionalSurveyInfo additional survey info in a stringified json object:\r\n\t * \t\t- surveyLauncherType LauncherType of the survey.\r\n\t * \t\t- channelType The channel type of the survey's campaign.\r\n\t * \t\t- surveyPercentageNumerator Percentage numerator of the survey's Campaign.\r\n\t * \t\t- surveyPercentageDenominator Percentage denominator of the survey's Campaign.\r\n\t * \t\t- surveyNominationPeriodNumber The Nomination Period of the survey's Campaign in seconds, -1 if not applicable.\r\n\t * \t\t- surveyCooldownPeriodNumber The Cooldown Period of the survey's Campaign in seconds, -1 if not applicable.\r\n\t * \t\t- allCandidateCampaignDefinitionIDs: The list of campaign definition IDs that have corresponding surveys which are candidates.\r\n\t * \t\t- allCampaignDefinitionIDs: The list of all campaign definition IDs.\r\n\t */\r\n\tpublic log_UserSelected(campaignId: string, surveyId: string, surveyType: Api.ISurvey.Type, additionalSurveyInfo: string): void {\r\n\r\n\t\tLogging.getLogger().logEvent(Logging.EventIds.SURVEY_FLOODGATE_USERSELECTED,\r\n\t\t\tLogging.LogLevel.Critical,\r\n\t\t\t{\r\n\t\t\t\tCampaignId: campaignId,\r\n\t\t\t\tSurveyId: surveyId,\r\n\t\t\t\tSurveyType: surveyType,\r\n\t\t\t\tAdditionalSurveyInfo : additionalSurveyInfo,\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Log that campaign definitions failed to load.\r\n\t * @param errorMessage error message\r\n\t */\r\n\tpublic log_CampaignLoad_Failed(errorMessage: string): void {\r\n\t\tLogging.getLogger().logEvent(Logging.EventIds.SURVEY_FLOODGATE_CAMPAIGNLOAD_FAILED,\r\n\t\t\tLogging.LogLevel.Error,\r\n\t\t\t{\r\n\t\t\t\tErrorMessage: errorMessage,\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Log an event with error message\r\n\t * @param eventId event id\r\n\t * @param errorMessage error message\r\n\t */\r\n\tpublic log_Error(eventId: string, errorMessage: string): void {\r\n\t\tconst event: Logging.IEventId = { name: eventId };\r\n\t\tLogging.getLogger().logEvent(event,\r\n\t\t\tLogging.LogLevel.Error,\r\n\t\t\t{\r\n\t\t\t\tErrorMessage: errorMessage,\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Log an event with properties\r\n\t * @param eventId event id\r\n\t * @param properties telemetry event properties\r\n\t * @param internalSampleRate sample rate for this event in decimal (example: 0.05 for 5%). (Does not override host set sampleRate)\r\n\t */\r\n\tpublic log_Event(eventId: string, properties: Api.ITelemetryProperties, internalSampleRate?: number): void {\r\n\t\tconst event: Logging.IEventId = { name: eventId };\r\n\t\tLogging.getLogger().logEvent(event, Logging.LogLevel.Critical, properties, internalSampleRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Log message locally\r\n\t * @param message message\r\n\t * @param data message data\r\n\t */\r\n\tpublic log_LocalError(message: string, ...data: any[]): void {\r\n\t\tthis.log_Local(Logging.LogLevel.Error, message, data);\r\n\t};\r\n\r\n\tprivate log_Local(logSeverity: Logging.LogLevel, message: string, ...others: any[]): void {\r\n\t\tLogging.getLogger().logLocal(logSeverity, others);\r\n\t}\r\n}\r\n","/**\r\n * App_Floodgate_Bare.ts\r\n *\r\n * The entry point for floodgate with core functionality only, no UI support.\r\n */\r\nimport * as CommonApp from \"./CommonApp\";\r\nimport * as CommonFloodgate from \"./CommonFloodgate\";\r\nimport * as Window from \"./Window/Window\";\r\nimport FloodgateTelemetryLogger from \"./FloodgateCore/FloodgateTelemetryLogger\";\r\n\r\nimport * as Api from \"@ms-ofb/officefloodgatecore/dist/src/Api/Api\";\r\nimport { FloodgateEngine } from \"@ms-ofb/officefloodgatecore\";\r\nimport { TelemetryEvent } from \"@ms-ofb/officefloodgatecore/dist/src/Constants\";\r\n\r\nexport { getEngineStartPromise, resetEngine, setEngineStartPromise, start, startInternal, stop }\r\n\tfrom \"./CommonFloodgate\"\r\n\r\nclass DefaultFloodgateStringProvider implements Api.IFloodgateStringProvider {\r\n\tpublic loadStringResource(stringId: Api.IFloodgateStringProvider.StringType): string {\r\n\t\treturn \"na\";\r\n\t}\r\n\r\n\tpublic getCustomString(str: string): string {\r\n\t\treturn \"na\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Initialize. Must be called before any other call to floodgate.\r\n * @returns A promise which will be rejected if the call fails.\r\n */\r\nexport function initialize(): Promise<any> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst rejectAndLogError = (errorMessage: string) => {\r\n\t\t\tconst telemetryLogger = FloodgateEngine.getTelemetryLogger();\r\n\t\t\tif (telemetryLogger) {\r\n\t\t\t\ttelemetryLogger.log_Event(TelemetryEvent.Floodgate.Initialize.Failed, { ErrorMessage: errorMessage });\r\n\t\t\t}\r\n\r\n\t\t\treject(errorMessage);\r\n\t\t};\r\n\r\n\t\tif (CommonFloodgate.getInitialized()) {\r\n\t\t\tresolve();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tCommonApp.initialize();\r\n\t\t} catch (err) {\r\n\t\t\trejectAndLogError(\"CommonApp initialization failed: {\" + err + \"}\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tFloodgateEngine.setTelemetryLogger(new FloodgateTelemetryLogger());\r\n\r\n\t\ttry {\r\n\t\t\t// Use a dummy string provider as App_Floodgate_Bare doesn't support UIStrings\r\n\t\t\tCommonFloodgate.setStringProvider(new DefaultFloodgateStringProvider());\r\n\t\t\tCommonFloodgate.initialize();\r\n\t\t} catch (err) {\r\n\t\t\trejectAndLogError(\"CommonFloodgate initialization failed: {\" + err + \"}\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresolve();\r\n\t});\r\n}\r\n\r\n/**\r\n * Reset the floodgate module. Used in unit tests.\r\n */\r\nexport function reset() {\r\n\tCommonApp.reset();\r\n\tCommonFloodgate.reset();\r\n}\r\n\r\nWindow.setFloodgateInitialize(initialize);\r\n"],"sourceRoot":""}